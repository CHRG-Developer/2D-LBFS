#include "residuals.h"

residuals::residuals()
{
    //ctor
}

residuals::~residuals()
{
    //dtor
}


void residuals::reset(){
        rho_rms = 0;
        u_rms =0;
        v_rms = 0;
        w_rms = 0;
        u_rms_num =0;
        v_rms_num = 0;
        w_rms_num = 0;
        u_rms_den = 0;
        v_rms_den = 0;
        w_rms_den = 0;
}

void residuals::add_L2_norm_residual(double f1, double rho, double f2, double u, double f3, double v){

    global_variables globals;

    rho_rms_num = rho_rms_num + pow( f1 - rho,2.0 );
    if( f1 < globals.small_number){
        rho_rms_den = rho_rms_den + pow(1,5) ;

    }else{
        rho_rms_den = rho_rms_den + pow(f1,2) ;

    }
    u_rms_num = u_rms_num + pow( f2 - u ,2.0 );
    u_rms_den = u_rms_den + pow(f2,2) ;

    v_rms_num = v_rms_num + pow( f3 - v ,2.0 ) ;
    v_rms_den = v_rms_den +pow(f3,2);
    v_rms_den = v_rms_den + 1;

}
void residuals::L2_norm_rms(){
        global_variables globals;
        if (rho_rms_den < globals.small_number){
            rho_rms = 0 ;
        }else{
            rho_rms = sqrt(rho_rms_num / rho_rms_den);
        }

        if (u_rms_den < globals.small_number){
            u_rms = u_rms ;
        }else{
            u_rms = sqrt(u_rms_num / u_rms_den);
        }

        if (v_rms_den < globals.small_number){
            v_rms = v_rms;
        }else{
            v_rms = sqrt(v_rms_num / v_rms_den) ;
        }

}

void residuals::add_ansys_residual(double f1, double rho, double f2, double u, double f3, double v){



}

void residuals::ansys_rms(){

}

double residuals::max_error(){
    
        max_error = fmax(rho_rms, u_rms);
        max_error = fmax(error, v_rms);
}

