GAS LISTING /tmp/cc2K2nX4.s 			page 1


   1              		.file	"Solver.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZSt5isnand,"axG",@progbits,_ZSt5isnand,comdat
   5              		.weak	_ZSt5isnand
   7              	_ZSt5isnand:
   8              	.LFB85:
   9              		.file 1 "/usr/include/c++/5/cmath"
   1:/usr/include/c++/5/cmath **** // -*- C++ -*- C forwarding header.
   2:/usr/include/c++/5/cmath **** 
   3:/usr/include/c++/5/cmath **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/cmath **** //
   5:/usr/include/c++/5/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/cmath **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/cmath **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/cmath **** // any later version.
  10:/usr/include/c++/5/cmath **** 
  11:/usr/include/c++/5/cmath **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/cmath **** // GNU General Public License for more details.
  15:/usr/include/c++/5/cmath **** 
  16:/usr/include/c++/5/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/cmath **** 
  20:/usr/include/c++/5/cmath **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/cmath **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/cmath **** 
  25:/usr/include/c++/5/cmath **** /** @file include/cmath
  26:/usr/include/c++/5/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/usr/include/c++/5/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/usr/include/c++/5/cmath ****  *
  29:/usr/include/c++/5/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/usr/include/c++/5/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/usr/include/c++/5/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/usr/include/c++/5/cmath ****  *  as macros in C).
  33:/usr/include/c++/5/cmath ****  */
  34:/usr/include/c++/5/cmath **** 
  35:/usr/include/c++/5/cmath **** //
  36:/usr/include/c++/5/cmath **** // ISO C++ 14882: 26.5  C library
  37:/usr/include/c++/5/cmath **** //
  38:/usr/include/c++/5/cmath **** 
  39:/usr/include/c++/5/cmath **** #pragma GCC system_header
  40:/usr/include/c++/5/cmath **** 
  41:/usr/include/c++/5/cmath **** #include <bits/c++config.h>
  42:/usr/include/c++/5/cmath **** #include <bits/cpp_type_traits.h>
  43:/usr/include/c++/5/cmath **** #include <ext/type_traits.h>
  44:/usr/include/c++/5/cmath **** #include <math.h>
  45:/usr/include/c++/5/cmath **** 
  46:/usr/include/c++/5/cmath **** #ifndef _GLIBCXX_CMATH
  47:/usr/include/c++/5/cmath **** #define _GLIBCXX_CMATH 1
  48:/usr/include/c++/5/cmath **** 
  49:/usr/include/c++/5/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
GAS LISTING /tmp/cc2K2nX4.s 			page 2


  50:/usr/include/c++/5/cmath **** #undef abs
  51:/usr/include/c++/5/cmath **** #undef div
  52:/usr/include/c++/5/cmath **** #undef acos
  53:/usr/include/c++/5/cmath **** #undef asin
  54:/usr/include/c++/5/cmath **** #undef atan
  55:/usr/include/c++/5/cmath **** #undef atan2
  56:/usr/include/c++/5/cmath **** #undef ceil
  57:/usr/include/c++/5/cmath **** #undef cos
  58:/usr/include/c++/5/cmath **** #undef cosh
  59:/usr/include/c++/5/cmath **** #undef exp
  60:/usr/include/c++/5/cmath **** #undef fabs
  61:/usr/include/c++/5/cmath **** #undef floor
  62:/usr/include/c++/5/cmath **** #undef fmod
  63:/usr/include/c++/5/cmath **** #undef frexp
  64:/usr/include/c++/5/cmath **** #undef ldexp
  65:/usr/include/c++/5/cmath **** #undef log
  66:/usr/include/c++/5/cmath **** #undef log10
  67:/usr/include/c++/5/cmath **** #undef modf
  68:/usr/include/c++/5/cmath **** #undef pow
  69:/usr/include/c++/5/cmath **** #undef sin
  70:/usr/include/c++/5/cmath **** #undef sinh
  71:/usr/include/c++/5/cmath **** #undef sqrt
  72:/usr/include/c++/5/cmath **** #undef tan
  73:/usr/include/c++/5/cmath **** #undef tanh
  74:/usr/include/c++/5/cmath **** 
  75:/usr/include/c++/5/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  76:/usr/include/c++/5/cmath **** {
  77:/usr/include/c++/5/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  78:/usr/include/c++/5/cmath **** 
  79:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  80:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR double
  81:/usr/include/c++/5/cmath ****   abs(double __x)
  82:/usr/include/c++/5/cmath ****   { return __builtin_fabs(__x); }
  83:/usr/include/c++/5/cmath **** #endif
  84:/usr/include/c++/5/cmath **** 
  85:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/usr/include/c++/5/cmath ****   abs(float __x)
  88:/usr/include/c++/5/cmath ****   { return __builtin_fabsf(__x); }
  89:/usr/include/c++/5/cmath **** 
  90:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/usr/include/c++/5/cmath ****   abs(long double __x)
  92:/usr/include/c++/5/cmath ****   { return __builtin_fabsl(__x); }
  93:/usr/include/c++/5/cmath **** #endif
  94:/usr/include/c++/5/cmath **** 
  95:/usr/include/c++/5/cmath ****   template<typename _Tp>
  96:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
  98:/usr/include/c++/5/cmath ****                                     double>::__type
  99:/usr/include/c++/5/cmath ****     abs(_Tp __x)
 100:/usr/include/c++/5/cmath ****     { return __builtin_fabs(__x); }
 101:/usr/include/c++/5/cmath **** 
 102:/usr/include/c++/5/cmath ****   using ::acos;
 103:/usr/include/c++/5/cmath **** 
 104:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/usr/include/c++/5/cmath ****   acos(float __x)
GAS LISTING /tmp/cc2K2nX4.s 			page 3


 107:/usr/include/c++/5/cmath ****   { return __builtin_acosf(__x); }
 108:/usr/include/c++/5/cmath **** 
 109:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/usr/include/c++/5/cmath ****   acos(long double __x)
 111:/usr/include/c++/5/cmath ****   { return __builtin_acosl(__x); }
 112:/usr/include/c++/5/cmath **** #endif
 113:/usr/include/c++/5/cmath **** 
 114:/usr/include/c++/5/cmath ****   template<typename _Tp>
 115:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 117:/usr/include/c++/5/cmath ****                                     double>::__type
 118:/usr/include/c++/5/cmath ****     acos(_Tp __x)
 119:/usr/include/c++/5/cmath ****     { return __builtin_acos(__x); }
 120:/usr/include/c++/5/cmath **** 
 121:/usr/include/c++/5/cmath ****   using ::asin;
 122:/usr/include/c++/5/cmath **** 
 123:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/usr/include/c++/5/cmath ****   asin(float __x)
 126:/usr/include/c++/5/cmath ****   { return __builtin_asinf(__x); }
 127:/usr/include/c++/5/cmath **** 
 128:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/usr/include/c++/5/cmath ****   asin(long double __x)
 130:/usr/include/c++/5/cmath ****   { return __builtin_asinl(__x); }
 131:/usr/include/c++/5/cmath **** #endif
 132:/usr/include/c++/5/cmath **** 
 133:/usr/include/c++/5/cmath ****   template<typename _Tp>
 134:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/usr/include/c++/5/cmath ****                                     double>::__type
 137:/usr/include/c++/5/cmath ****     asin(_Tp __x)
 138:/usr/include/c++/5/cmath ****     { return __builtin_asin(__x); }
 139:/usr/include/c++/5/cmath **** 
 140:/usr/include/c++/5/cmath ****   using ::atan;
 141:/usr/include/c++/5/cmath **** 
 142:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/usr/include/c++/5/cmath ****   atan(float __x)
 145:/usr/include/c++/5/cmath ****   { return __builtin_atanf(__x); }
 146:/usr/include/c++/5/cmath **** 
 147:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/usr/include/c++/5/cmath ****   atan(long double __x)
 149:/usr/include/c++/5/cmath ****   { return __builtin_atanl(__x); }
 150:/usr/include/c++/5/cmath **** #endif
 151:/usr/include/c++/5/cmath **** 
 152:/usr/include/c++/5/cmath ****   template<typename _Tp>
 153:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 155:/usr/include/c++/5/cmath ****                                     double>::__type
 156:/usr/include/c++/5/cmath ****     atan(_Tp __x)
 157:/usr/include/c++/5/cmath ****     { return __builtin_atan(__x); }
 158:/usr/include/c++/5/cmath **** 
 159:/usr/include/c++/5/cmath ****   using ::atan2;
 160:/usr/include/c++/5/cmath **** 
 161:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 162:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 163:/usr/include/c++/5/cmath ****   atan2(float __y, float __x)
GAS LISTING /tmp/cc2K2nX4.s 			page 4


 164:/usr/include/c++/5/cmath ****   { return __builtin_atan2f(__y, __x); }
 165:/usr/include/c++/5/cmath **** 
 166:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 167:/usr/include/c++/5/cmath ****   atan2(long double __y, long double __x)
 168:/usr/include/c++/5/cmath ****   { return __builtin_atan2l(__y, __x); }
 169:/usr/include/c++/5/cmath **** #endif
 170:/usr/include/c++/5/cmath **** 
 171:/usr/include/c++/5/cmath ****   template<typename _Tp, typename _Up>
 172:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 173:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 174:/usr/include/c++/5/cmath ****     atan2(_Tp __y, _Up __x)
 175:/usr/include/c++/5/cmath ****     {
 176:/usr/include/c++/5/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 177:/usr/include/c++/5/cmath ****       return atan2(__type(__y), __type(__x));
 178:/usr/include/c++/5/cmath ****     }
 179:/usr/include/c++/5/cmath **** 
 180:/usr/include/c++/5/cmath ****   using ::ceil;
 181:/usr/include/c++/5/cmath **** 
 182:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/usr/include/c++/5/cmath ****   ceil(float __x)
 185:/usr/include/c++/5/cmath ****   { return __builtin_ceilf(__x); }
 186:/usr/include/c++/5/cmath **** 
 187:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/usr/include/c++/5/cmath ****   ceil(long double __x)
 189:/usr/include/c++/5/cmath ****   { return __builtin_ceill(__x); }
 190:/usr/include/c++/5/cmath **** #endif
 191:/usr/include/c++/5/cmath **** 
 192:/usr/include/c++/5/cmath ****   template<typename _Tp>
 193:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 195:/usr/include/c++/5/cmath ****                                     double>::__type
 196:/usr/include/c++/5/cmath ****     ceil(_Tp __x)
 197:/usr/include/c++/5/cmath ****     { return __builtin_ceil(__x); }
 198:/usr/include/c++/5/cmath **** 
 199:/usr/include/c++/5/cmath ****   using ::cos;
 200:/usr/include/c++/5/cmath **** 
 201:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/usr/include/c++/5/cmath ****   cos(float __x)
 204:/usr/include/c++/5/cmath ****   { return __builtin_cosf(__x); }
 205:/usr/include/c++/5/cmath **** 
 206:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/usr/include/c++/5/cmath ****   cos(long double __x)
 208:/usr/include/c++/5/cmath ****   { return __builtin_cosl(__x); }
 209:/usr/include/c++/5/cmath **** #endif
 210:/usr/include/c++/5/cmath **** 
 211:/usr/include/c++/5/cmath ****   template<typename _Tp>
 212:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/usr/include/c++/5/cmath ****                                     double>::__type
 215:/usr/include/c++/5/cmath ****     cos(_Tp __x)
 216:/usr/include/c++/5/cmath ****     { return __builtin_cos(__x); }
 217:/usr/include/c++/5/cmath **** 
 218:/usr/include/c++/5/cmath ****   using ::cosh;
 219:/usr/include/c++/5/cmath **** 
 220:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
GAS LISTING /tmp/cc2K2nX4.s 			page 5


 221:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/usr/include/c++/5/cmath ****   cosh(float __x)
 223:/usr/include/c++/5/cmath ****   { return __builtin_coshf(__x); }
 224:/usr/include/c++/5/cmath **** 
 225:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/usr/include/c++/5/cmath ****   cosh(long double __x)
 227:/usr/include/c++/5/cmath ****   { return __builtin_coshl(__x); }
 228:/usr/include/c++/5/cmath **** #endif
 229:/usr/include/c++/5/cmath **** 
 230:/usr/include/c++/5/cmath ****   template<typename _Tp>
 231:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/usr/include/c++/5/cmath ****                                     double>::__type
 234:/usr/include/c++/5/cmath ****     cosh(_Tp __x)
 235:/usr/include/c++/5/cmath ****     { return __builtin_cosh(__x); }
 236:/usr/include/c++/5/cmath **** 
 237:/usr/include/c++/5/cmath ****   using ::exp;
 238:/usr/include/c++/5/cmath **** 
 239:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/usr/include/c++/5/cmath ****   exp(float __x)
 242:/usr/include/c++/5/cmath ****   { return __builtin_expf(__x); }
 243:/usr/include/c++/5/cmath **** 
 244:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/usr/include/c++/5/cmath ****   exp(long double __x)
 246:/usr/include/c++/5/cmath ****   { return __builtin_expl(__x); }
 247:/usr/include/c++/5/cmath **** #endif
 248:/usr/include/c++/5/cmath **** 
 249:/usr/include/c++/5/cmath ****   template<typename _Tp>
 250:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/usr/include/c++/5/cmath ****                                     double>::__type
 253:/usr/include/c++/5/cmath ****     exp(_Tp __x)
 254:/usr/include/c++/5/cmath ****     { return __builtin_exp(__x); }
 255:/usr/include/c++/5/cmath **** 
 256:/usr/include/c++/5/cmath ****   using ::fabs;
 257:/usr/include/c++/5/cmath **** 
 258:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/usr/include/c++/5/cmath ****   fabs(float __x)
 261:/usr/include/c++/5/cmath ****   { return __builtin_fabsf(__x); }
 262:/usr/include/c++/5/cmath **** 
 263:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/usr/include/c++/5/cmath ****   fabs(long double __x)
 265:/usr/include/c++/5/cmath ****   { return __builtin_fabsl(__x); }
 266:/usr/include/c++/5/cmath **** #endif
 267:/usr/include/c++/5/cmath **** 
 268:/usr/include/c++/5/cmath ****   template<typename _Tp>
 269:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/usr/include/c++/5/cmath ****                                     double>::__type
 272:/usr/include/c++/5/cmath ****     fabs(_Tp __x)
 273:/usr/include/c++/5/cmath ****     { return __builtin_fabs(__x); }
 274:/usr/include/c++/5/cmath **** 
 275:/usr/include/c++/5/cmath ****   using ::floor;
 276:/usr/include/c++/5/cmath **** 
 277:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
GAS LISTING /tmp/cc2K2nX4.s 			page 6


 278:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/usr/include/c++/5/cmath ****   floor(float __x)
 280:/usr/include/c++/5/cmath ****   { return __builtin_floorf(__x); }
 281:/usr/include/c++/5/cmath **** 
 282:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/usr/include/c++/5/cmath ****   floor(long double __x)
 284:/usr/include/c++/5/cmath ****   { return __builtin_floorl(__x); }
 285:/usr/include/c++/5/cmath **** #endif
 286:/usr/include/c++/5/cmath **** 
 287:/usr/include/c++/5/cmath ****   template<typename _Tp>
 288:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 290:/usr/include/c++/5/cmath ****                                     double>::__type
 291:/usr/include/c++/5/cmath ****     floor(_Tp __x)
 292:/usr/include/c++/5/cmath ****     { return __builtin_floor(__x); }
 293:/usr/include/c++/5/cmath **** 
 294:/usr/include/c++/5/cmath ****   using ::fmod;
 295:/usr/include/c++/5/cmath **** 
 296:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 297:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 298:/usr/include/c++/5/cmath ****   fmod(float __x, float __y)
 299:/usr/include/c++/5/cmath ****   { return __builtin_fmodf(__x, __y); }
 300:/usr/include/c++/5/cmath **** 
 301:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 302:/usr/include/c++/5/cmath ****   fmod(long double __x, long double __y)
 303:/usr/include/c++/5/cmath ****   { return __builtin_fmodl(__x, __y); }
 304:/usr/include/c++/5/cmath **** #endif
 305:/usr/include/c++/5/cmath **** 
 306:/usr/include/c++/5/cmath ****   template<typename _Tp, typename _Up>
 307:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 308:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 309:/usr/include/c++/5/cmath ****     fmod(_Tp __x, _Up __y)
 310:/usr/include/c++/5/cmath ****     {
 311:/usr/include/c++/5/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 312:/usr/include/c++/5/cmath ****       return fmod(__type(__x), __type(__y));
 313:/usr/include/c++/5/cmath ****     }
 314:/usr/include/c++/5/cmath **** 
 315:/usr/include/c++/5/cmath ****   using ::frexp;
 316:/usr/include/c++/5/cmath **** 
 317:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/usr/include/c++/5/cmath ****   inline float
 319:/usr/include/c++/5/cmath ****   frexp(float __x, int* __exp)
 320:/usr/include/c++/5/cmath ****   { return __builtin_frexpf(__x, __exp); }
 321:/usr/include/c++/5/cmath **** 
 322:/usr/include/c++/5/cmath ****   inline long double
 323:/usr/include/c++/5/cmath ****   frexp(long double __x, int* __exp)
 324:/usr/include/c++/5/cmath ****   { return __builtin_frexpl(__x, __exp); }
 325:/usr/include/c++/5/cmath **** #endif
 326:/usr/include/c++/5/cmath **** 
 327:/usr/include/c++/5/cmath ****   template<typename _Tp>
 328:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/usr/include/c++/5/cmath ****                                     double>::__type
 331:/usr/include/c++/5/cmath ****     frexp(_Tp __x, int* __exp)
 332:/usr/include/c++/5/cmath ****     { return __builtin_frexp(__x, __exp); }
 333:/usr/include/c++/5/cmath **** 
 334:/usr/include/c++/5/cmath ****   using ::ldexp;
GAS LISTING /tmp/cc2K2nX4.s 			page 7


 335:/usr/include/c++/5/cmath **** 
 336:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/usr/include/c++/5/cmath ****   ldexp(float __x, int __exp)
 339:/usr/include/c++/5/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 340:/usr/include/c++/5/cmath **** 
 341:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/usr/include/c++/5/cmath ****   ldexp(long double __x, int __exp)
 343:/usr/include/c++/5/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 344:/usr/include/c++/5/cmath **** #endif
 345:/usr/include/c++/5/cmath **** 
 346:/usr/include/c++/5/cmath ****   template<typename _Tp>
 347:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/usr/include/c++/5/cmath ****                                     double>::__type
 350:/usr/include/c++/5/cmath ****     ldexp(_Tp __x, int __exp)
 351:/usr/include/c++/5/cmath ****     { return __builtin_ldexp(__x, __exp); }
 352:/usr/include/c++/5/cmath **** 
 353:/usr/include/c++/5/cmath ****   using ::log;
 354:/usr/include/c++/5/cmath **** 
 355:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/usr/include/c++/5/cmath ****   log(float __x)
 358:/usr/include/c++/5/cmath ****   { return __builtin_logf(__x); }
 359:/usr/include/c++/5/cmath **** 
 360:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/usr/include/c++/5/cmath ****   log(long double __x)
 362:/usr/include/c++/5/cmath ****   { return __builtin_logl(__x); }
 363:/usr/include/c++/5/cmath **** #endif
 364:/usr/include/c++/5/cmath **** 
 365:/usr/include/c++/5/cmath ****   template<typename _Tp>
 366:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 368:/usr/include/c++/5/cmath ****                                     double>::__type
 369:/usr/include/c++/5/cmath ****     log(_Tp __x)
 370:/usr/include/c++/5/cmath ****     { return __builtin_log(__x); }
 371:/usr/include/c++/5/cmath **** 
 372:/usr/include/c++/5/cmath ****   using ::log10;
 373:/usr/include/c++/5/cmath **** 
 374:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 376:/usr/include/c++/5/cmath ****   log10(float __x)
 377:/usr/include/c++/5/cmath ****   { return __builtin_log10f(__x); }
 378:/usr/include/c++/5/cmath **** 
 379:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 380:/usr/include/c++/5/cmath ****   log10(long double __x)
 381:/usr/include/c++/5/cmath ****   { return __builtin_log10l(__x); }
 382:/usr/include/c++/5/cmath **** #endif
 383:/usr/include/c++/5/cmath **** 
 384:/usr/include/c++/5/cmath ****   template<typename _Tp>
 385:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 386:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 387:/usr/include/c++/5/cmath ****                                     double>::__type
 388:/usr/include/c++/5/cmath ****     log10(_Tp __x)
 389:/usr/include/c++/5/cmath ****     { return __builtin_log10(__x); }
 390:/usr/include/c++/5/cmath **** 
 391:/usr/include/c++/5/cmath ****   using ::modf;
GAS LISTING /tmp/cc2K2nX4.s 			page 8


 392:/usr/include/c++/5/cmath **** 
 393:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 394:/usr/include/c++/5/cmath ****   inline float
 395:/usr/include/c++/5/cmath ****   modf(float __x, float* __iptr)
 396:/usr/include/c++/5/cmath ****   { return __builtin_modff(__x, __iptr); }
 397:/usr/include/c++/5/cmath **** 
 398:/usr/include/c++/5/cmath ****   inline long double
 399:/usr/include/c++/5/cmath ****   modf(long double __x, long double* __iptr)
 400:/usr/include/c++/5/cmath ****   { return __builtin_modfl(__x, __iptr); }
 401:/usr/include/c++/5/cmath **** #endif
 402:/usr/include/c++/5/cmath **** 
 403:/usr/include/c++/5/cmath ****   using ::pow;
 404:/usr/include/c++/5/cmath **** 
 405:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 406:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 407:/usr/include/c++/5/cmath ****   pow(float __x, float __y)
 408:/usr/include/c++/5/cmath ****   { return __builtin_powf(__x, __y); }
 409:/usr/include/c++/5/cmath **** 
 410:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 411:/usr/include/c++/5/cmath ****   pow(long double __x, long double __y)
 412:/usr/include/c++/5/cmath ****   { return __builtin_powl(__x, __y); }
 413:/usr/include/c++/5/cmath **** 
 414:/usr/include/c++/5/cmath **** #if __cplusplus < 201103L
 415:/usr/include/c++/5/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 416:/usr/include/c++/5/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 417:/usr/include/c++/5/cmath ****   inline double
 418:/usr/include/c++/5/cmath ****   pow(double __x, int __i)
 419:/usr/include/c++/5/cmath ****   { return __builtin_powi(__x, __i); }
 420:/usr/include/c++/5/cmath **** 
 421:/usr/include/c++/5/cmath ****   inline float
 422:/usr/include/c++/5/cmath ****   pow(float __x, int __n)
 423:/usr/include/c++/5/cmath ****   { return __builtin_powif(__x, __n); }
 424:/usr/include/c++/5/cmath **** 
 425:/usr/include/c++/5/cmath ****   inline long double
 426:/usr/include/c++/5/cmath ****   pow(long double __x, int __n)
 427:/usr/include/c++/5/cmath ****   { return __builtin_powil(__x, __n); }
 428:/usr/include/c++/5/cmath **** #endif
 429:/usr/include/c++/5/cmath **** #endif
 430:/usr/include/c++/5/cmath **** 
 431:/usr/include/c++/5/cmath ****   template<typename _Tp, typename _Up>
 432:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 433:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 434:/usr/include/c++/5/cmath ****     pow(_Tp __x, _Up __y)
 435:/usr/include/c++/5/cmath ****     {
 436:/usr/include/c++/5/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 437:/usr/include/c++/5/cmath ****       return pow(__type(__x), __type(__y));
 438:/usr/include/c++/5/cmath ****     }
 439:/usr/include/c++/5/cmath **** 
 440:/usr/include/c++/5/cmath ****   using ::sin;
 441:/usr/include/c++/5/cmath **** 
 442:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/usr/include/c++/5/cmath ****   sin(float __x)
 445:/usr/include/c++/5/cmath ****   { return __builtin_sinf(__x); }
 446:/usr/include/c++/5/cmath **** 
 447:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/usr/include/c++/5/cmath ****   sin(long double __x)
GAS LISTING /tmp/cc2K2nX4.s 			page 9


 449:/usr/include/c++/5/cmath ****   { return __builtin_sinl(__x); }
 450:/usr/include/c++/5/cmath **** #endif
 451:/usr/include/c++/5/cmath **** 
 452:/usr/include/c++/5/cmath ****   template<typename _Tp>
 453:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/usr/include/c++/5/cmath ****                                     double>::__type
 456:/usr/include/c++/5/cmath ****     sin(_Tp __x)
 457:/usr/include/c++/5/cmath ****     { return __builtin_sin(__x); }
 458:/usr/include/c++/5/cmath **** 
 459:/usr/include/c++/5/cmath ****   using ::sinh;
 460:/usr/include/c++/5/cmath **** 
 461:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/usr/include/c++/5/cmath ****   sinh(float __x)
 464:/usr/include/c++/5/cmath ****   { return __builtin_sinhf(__x); }
 465:/usr/include/c++/5/cmath **** 
 466:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 467:/usr/include/c++/5/cmath ****   sinh(long double __x)
 468:/usr/include/c++/5/cmath ****   { return __builtin_sinhl(__x); }
 469:/usr/include/c++/5/cmath **** #endif
 470:/usr/include/c++/5/cmath **** 
 471:/usr/include/c++/5/cmath ****   template<typename _Tp>
 472:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 473:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 474:/usr/include/c++/5/cmath ****                                     double>::__type
 475:/usr/include/c++/5/cmath ****     sinh(_Tp __x)
 476:/usr/include/c++/5/cmath ****     { return __builtin_sinh(__x); }
 477:/usr/include/c++/5/cmath **** 
 478:/usr/include/c++/5/cmath ****   using ::sqrt;
 479:/usr/include/c++/5/cmath **** 
 480:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 481:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 482:/usr/include/c++/5/cmath ****   sqrt(float __x)
 483:/usr/include/c++/5/cmath ****   { return __builtin_sqrtf(__x); }
 484:/usr/include/c++/5/cmath **** 
 485:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 486:/usr/include/c++/5/cmath ****   sqrt(long double __x)
 487:/usr/include/c++/5/cmath ****   { return __builtin_sqrtl(__x); }
 488:/usr/include/c++/5/cmath **** #endif
 489:/usr/include/c++/5/cmath **** 
 490:/usr/include/c++/5/cmath ****   template<typename _Tp>
 491:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 492:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 493:/usr/include/c++/5/cmath ****                                     double>::__type
 494:/usr/include/c++/5/cmath ****     sqrt(_Tp __x)
 495:/usr/include/c++/5/cmath ****     { return __builtin_sqrt(__x); }
 496:/usr/include/c++/5/cmath **** 
 497:/usr/include/c++/5/cmath ****   using ::tan;
 498:/usr/include/c++/5/cmath **** 
 499:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 500:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 501:/usr/include/c++/5/cmath ****   tan(float __x)
 502:/usr/include/c++/5/cmath ****   { return __builtin_tanf(__x); }
 503:/usr/include/c++/5/cmath **** 
 504:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 505:/usr/include/c++/5/cmath ****   tan(long double __x)
GAS LISTING /tmp/cc2K2nX4.s 			page 10


 506:/usr/include/c++/5/cmath ****   { return __builtin_tanl(__x); }
 507:/usr/include/c++/5/cmath **** #endif
 508:/usr/include/c++/5/cmath **** 
 509:/usr/include/c++/5/cmath ****   template<typename _Tp>
 510:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 511:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 512:/usr/include/c++/5/cmath ****                                     double>::__type
 513:/usr/include/c++/5/cmath ****     tan(_Tp __x)
 514:/usr/include/c++/5/cmath ****     { return __builtin_tan(__x); }
 515:/usr/include/c++/5/cmath **** 
 516:/usr/include/c++/5/cmath ****   using ::tanh;
 517:/usr/include/c++/5/cmath **** 
 518:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 519:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR float
 520:/usr/include/c++/5/cmath ****   tanh(float __x)
 521:/usr/include/c++/5/cmath ****   { return __builtin_tanhf(__x); }
 522:/usr/include/c++/5/cmath **** 
 523:/usr/include/c++/5/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 524:/usr/include/c++/5/cmath ****   tanh(long double __x)
 525:/usr/include/c++/5/cmath ****   { return __builtin_tanhl(__x); }
 526:/usr/include/c++/5/cmath **** #endif
 527:/usr/include/c++/5/cmath **** 
 528:/usr/include/c++/5/cmath ****   template<typename _Tp>
 529:/usr/include/c++/5/cmath ****     inline _GLIBCXX_CONSTEXPR
 530:/usr/include/c++/5/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 531:/usr/include/c++/5/cmath ****                                     double>::__type
 532:/usr/include/c++/5/cmath ****     tanh(_Tp __x)
 533:/usr/include/c++/5/cmath ****     { return __builtin_tanh(__x); }
 534:/usr/include/c++/5/cmath **** 
 535:/usr/include/c++/5/cmath **** _GLIBCXX_END_NAMESPACE_VERSION
 536:/usr/include/c++/5/cmath **** } // namespace
 537:/usr/include/c++/5/cmath **** 
 538:/usr/include/c++/5/cmath **** #if _GLIBCXX_USE_C99_MATH
 539:/usr/include/c++/5/cmath **** #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC
 540:/usr/include/c++/5/cmath **** 
 541:/usr/include/c++/5/cmath **** // These are possible macros imported from C99-land.
 542:/usr/include/c++/5/cmath **** #undef fpclassify
 543:/usr/include/c++/5/cmath **** #undef isfinite
 544:/usr/include/c++/5/cmath **** #undef isinf
 545:/usr/include/c++/5/cmath **** #undef isnan
 546:/usr/include/c++/5/cmath **** #undef isnormal
 547:/usr/include/c++/5/cmath **** #undef signbit
 548:/usr/include/c++/5/cmath **** #undef isgreater
 549:/usr/include/c++/5/cmath **** #undef isgreaterequal
 550:/usr/include/c++/5/cmath **** #undef isless
 551:/usr/include/c++/5/cmath **** #undef islessequal
 552:/usr/include/c++/5/cmath **** #undef islessgreater
 553:/usr/include/c++/5/cmath **** #undef isunordered
 554:/usr/include/c++/5/cmath **** 
 555:/usr/include/c++/5/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
 556:/usr/include/c++/5/cmath **** {
 557:/usr/include/c++/5/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 558:/usr/include/c++/5/cmath **** 
 559:/usr/include/c++/5/cmath **** #if __cplusplus >= 201103L
 560:/usr/include/c++/5/cmath **** 
 561:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 562:/usr/include/c++/5/cmath ****   constexpr int
GAS LISTING /tmp/cc2K2nX4.s 			page 11


 563:/usr/include/c++/5/cmath ****   fpclassify(float __x)
 564:/usr/include/c++/5/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 565:/usr/include/c++/5/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 566:/usr/include/c++/5/cmath **** 
 567:/usr/include/c++/5/cmath ****   constexpr int
 568:/usr/include/c++/5/cmath ****   fpclassify(double __x)
 569:/usr/include/c++/5/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 570:/usr/include/c++/5/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 571:/usr/include/c++/5/cmath **** 
 572:/usr/include/c++/5/cmath ****   constexpr int
 573:/usr/include/c++/5/cmath ****   fpclassify(long double __x)
 574:/usr/include/c++/5/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 575:/usr/include/c++/5/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 576:/usr/include/c++/5/cmath **** #endif
 577:/usr/include/c++/5/cmath **** 
 578:/usr/include/c++/5/cmath ****   template<typename _Tp>
 579:/usr/include/c++/5/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 580:/usr/include/c++/5/cmath ****                                               int>::__type
 581:/usr/include/c++/5/cmath ****     fpclassify(_Tp __x)
 582:/usr/include/c++/5/cmath ****     { return __x != 0 ? FP_NORMAL : FP_ZERO; }
 583:/usr/include/c++/5/cmath **** 
 584:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 585:/usr/include/c++/5/cmath ****   constexpr bool
 586:/usr/include/c++/5/cmath ****   isfinite(float __x)
 587:/usr/include/c++/5/cmath ****   { return __builtin_isfinite(__x); }
 588:/usr/include/c++/5/cmath **** 
 589:/usr/include/c++/5/cmath ****   constexpr bool
 590:/usr/include/c++/5/cmath ****   isfinite(double __x)
 591:/usr/include/c++/5/cmath ****   { return __builtin_isfinite(__x); }
 592:/usr/include/c++/5/cmath **** 
 593:/usr/include/c++/5/cmath ****   constexpr bool
 594:/usr/include/c++/5/cmath ****   isfinite(long double __x)
 595:/usr/include/c++/5/cmath ****   { return __builtin_isfinite(__x); }
 596:/usr/include/c++/5/cmath **** #endif
 597:/usr/include/c++/5/cmath **** 
 598:/usr/include/c++/5/cmath ****   template<typename _Tp>
 599:/usr/include/c++/5/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 600:/usr/include/c++/5/cmath ****                                               bool>::__type
 601:/usr/include/c++/5/cmath ****     isfinite(_Tp __x)
 602:/usr/include/c++/5/cmath ****     { return true; }
 603:/usr/include/c++/5/cmath **** 
 604:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 605:/usr/include/c++/5/cmath ****   constexpr bool
 606:/usr/include/c++/5/cmath ****   isinf(float __x)
 607:/usr/include/c++/5/cmath ****   { return __builtin_isinf(__x); }
 608:/usr/include/c++/5/cmath **** 
 609:/usr/include/c++/5/cmath ****   constexpr bool
 610:/usr/include/c++/5/cmath ****   isinf(double __x)
 611:/usr/include/c++/5/cmath ****   { return __builtin_isinf(__x); }
 612:/usr/include/c++/5/cmath **** 
 613:/usr/include/c++/5/cmath ****   constexpr bool
 614:/usr/include/c++/5/cmath ****   isinf(long double __x)
 615:/usr/include/c++/5/cmath ****   { return __builtin_isinf(__x); }
 616:/usr/include/c++/5/cmath **** #endif
 617:/usr/include/c++/5/cmath **** 
 618:/usr/include/c++/5/cmath ****   template<typename _Tp>
 619:/usr/include/c++/5/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
GAS LISTING /tmp/cc2K2nX4.s 			page 12


 620:/usr/include/c++/5/cmath ****                                               bool>::__type
 621:/usr/include/c++/5/cmath ****     isinf(_Tp __x)
 622:/usr/include/c++/5/cmath ****     { return false; }
 623:/usr/include/c++/5/cmath **** 
 624:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 625:/usr/include/c++/5/cmath ****   constexpr bool
 626:/usr/include/c++/5/cmath ****   isnan(float __x)
 627:/usr/include/c++/5/cmath ****   { return __builtin_isnan(__x); }
 628:/usr/include/c++/5/cmath **** 
 629:/usr/include/c++/5/cmath ****   constexpr bool
 630:/usr/include/c++/5/cmath ****   isnan(double __x)
 631:/usr/include/c++/5/cmath ****   { return __builtin_isnan(__x); }
  10              		.loc 1 631 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 F20F1145 		movsd	%xmm0, -8(%rbp)
  17      F8
  18              		.loc 1 631 0
  19 0009 F20F1045 		movsd	-8(%rbp), %xmm0
  19      F8
  20 000e 660F2E45 		ucomisd	-8(%rbp), %xmm0
  20      F8
  21 0013 0F9AC0   		setp	%al
  22 0016 5D       		popq	%rbp
  23              		.cfi_def_cfa 7, 8
  24 0017 C3       		ret
  25              		.cfi_endproc
  26              	.LFE85:
  28              		.section	.text._ZSt7signbitd,"axG",@progbits,_ZSt7signbitd,comdat
  29              		.weak	_ZSt7signbitd
  31              	_ZSt7signbitd:
  32              	.LFB93:
 632:/usr/include/c++/5/cmath **** 
 633:/usr/include/c++/5/cmath ****   constexpr bool
 634:/usr/include/c++/5/cmath ****   isnan(long double __x)
 635:/usr/include/c++/5/cmath ****   { return __builtin_isnan(__x); }
 636:/usr/include/c++/5/cmath **** #endif
 637:/usr/include/c++/5/cmath **** 
 638:/usr/include/c++/5/cmath ****   template<typename _Tp>
 639:/usr/include/c++/5/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 640:/usr/include/c++/5/cmath ****                                               bool>::__type
 641:/usr/include/c++/5/cmath ****     isnan(_Tp __x)
 642:/usr/include/c++/5/cmath ****     { return false; }
 643:/usr/include/c++/5/cmath **** 
 644:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 645:/usr/include/c++/5/cmath ****   constexpr bool
 646:/usr/include/c++/5/cmath ****   isnormal(float __x)
 647:/usr/include/c++/5/cmath ****   { return __builtin_isnormal(__x); }
 648:/usr/include/c++/5/cmath **** 
 649:/usr/include/c++/5/cmath ****   constexpr bool
 650:/usr/include/c++/5/cmath ****   isnormal(double __x)
 651:/usr/include/c++/5/cmath ****   { return __builtin_isnormal(__x); }
 652:/usr/include/c++/5/cmath **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 13


 653:/usr/include/c++/5/cmath ****   constexpr bool
 654:/usr/include/c++/5/cmath ****   isnormal(long double __x)
 655:/usr/include/c++/5/cmath ****   { return __builtin_isnormal(__x); }
 656:/usr/include/c++/5/cmath **** #endif
 657:/usr/include/c++/5/cmath **** 
 658:/usr/include/c++/5/cmath ****   template<typename _Tp>
 659:/usr/include/c++/5/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 660:/usr/include/c++/5/cmath ****                                               bool>::__type
 661:/usr/include/c++/5/cmath ****     isnormal(_Tp __x)
 662:/usr/include/c++/5/cmath ****     { return __x != 0 ? true : false; }
 663:/usr/include/c++/5/cmath **** 
 664:/usr/include/c++/5/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO
 665:/usr/include/c++/5/cmath ****   // The front-end doesn't provide a type generic builtin (libstdc++/58625).
 666:/usr/include/c++/5/cmath ****   constexpr bool
 667:/usr/include/c++/5/cmath ****   signbit(float __x)
 668:/usr/include/c++/5/cmath ****   { return __builtin_signbitf(__x); }
 669:/usr/include/c++/5/cmath **** 
 670:/usr/include/c++/5/cmath ****   constexpr bool
 671:/usr/include/c++/5/cmath ****   signbit(double __x)
 672:/usr/include/c++/5/cmath ****   { return __builtin_signbit(__x); }
  33              		.loc 1 672 0
  34              		.cfi_startproc
  35 0000 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 0001 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0004 F20F1145 		movsd	%xmm0, -8(%rbp)
  40      F8
  41              		.loc 1 672 0
  42 0009 F20F1045 		movsd	-8(%rbp), %xmm0
  42      F8
  43 000e 660F50C0 		movmskpd	%xmm0, %eax
  44 0012 83E001   		andl	$1, %eax
  45 0015 85C0     		testl	%eax, %eax
  46 0017 0F95C0   		setne	%al
  47 001a 5D       		popq	%rbp
  48              		.cfi_def_cfa 7, 8
  49 001b C3       		ret
  50              		.cfi_endproc
  51              	.LFE93:
  53              		.section	.rodata
  56              	_ZStL19piecewise_construct:
  57 0000 00       		.zero	1
  58              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
  59              		.weak	_ZnwmPv
  61              	_ZnwmPv:
  62              	.LFB601:
  63              		.file 2 "/usr/include/c++/5/new"
   1:/usr/include/c++/5/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/5/new **** 
   3:/usr/include/c++/5/new **** // Copyright (C) 1994-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/new **** 
   5:/usr/include/c++/5/new **** // This file is part of GCC.
   6:/usr/include/c++/5/new **** //
   7:/usr/include/c++/5/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/5/new **** // it under the terms of the GNU General Public License as published by
GAS LISTING /tmp/cc2K2nX4.s 			page 14


   9:/usr/include/c++/5/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/5/new **** // any later version.
  11:/usr/include/c++/5/new **** // 
  12:/usr/include/c++/5/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/5/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/5/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/5/new **** // GNU General Public License for more details.
  16:/usr/include/c++/5/new **** // 
  17:/usr/include/c++/5/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/5/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/5/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/5/new **** 
  21:/usr/include/c++/5/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/5/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/5/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/5/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/5/new **** 
  26:/usr/include/c++/5/new **** /** @file new
  27:/usr/include/c++/5/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/5/new ****  *
  29:/usr/include/c++/5/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/5/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/5/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/5/new ****  */
  33:/usr/include/c++/5/new **** 
  34:/usr/include/c++/5/new **** #ifndef _NEW
  35:/usr/include/c++/5/new **** #define _NEW
  36:/usr/include/c++/5/new **** 
  37:/usr/include/c++/5/new **** #pragma GCC system_header
  38:/usr/include/c++/5/new **** 
  39:/usr/include/c++/5/new **** #include <bits/c++config.h>
  40:/usr/include/c++/5/new **** #include <exception>
  41:/usr/include/c++/5/new **** 
  42:/usr/include/c++/5/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/5/new **** 
  44:/usr/include/c++/5/new **** extern "C++" {
  45:/usr/include/c++/5/new **** 
  46:/usr/include/c++/5/new **** namespace std 
  47:/usr/include/c++/5/new **** {
  48:/usr/include/c++/5/new ****   /**
  49:/usr/include/c++/5/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/5/new ****    *  @ingroup exceptions
  51:/usr/include/c++/5/new ****    *
  52:/usr/include/c++/5/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/5/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/5/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/5/new ****   {
  56:/usr/include/c++/5/new ****   public:
  57:/usr/include/c++/5/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/5/new **** 
  59:/usr/include/c++/5/new ****     // This declaration is not useless:
  60:/usr/include/c++/5/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  61:/usr/include/c++/5/new ****     virtual ~bad_alloc() throw();
  62:/usr/include/c++/5/new **** 
  63:/usr/include/c++/5/new ****     // See comment in eh_exception.cc.
  64:/usr/include/c++/5/new ****     virtual const char* what() const throw();
  65:/usr/include/c++/5/new ****   };
GAS LISTING /tmp/cc2K2nX4.s 			page 15


  66:/usr/include/c++/5/new **** 
  67:/usr/include/c++/5/new **** #if __cplusplus >= 201103L
  68:/usr/include/c++/5/new ****   class bad_array_new_length : public bad_alloc
  69:/usr/include/c++/5/new ****   {
  70:/usr/include/c++/5/new ****   public:
  71:/usr/include/c++/5/new ****     bad_array_new_length() throw() { };
  72:/usr/include/c++/5/new **** 
  73:/usr/include/c++/5/new ****     // This declaration is not useless:
  74:/usr/include/c++/5/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  75:/usr/include/c++/5/new ****     virtual ~bad_array_new_length() throw();
  76:/usr/include/c++/5/new **** 
  77:/usr/include/c++/5/new ****     // See comment in eh_exception.cc.
  78:/usr/include/c++/5/new ****     virtual const char* what() const throw();
  79:/usr/include/c++/5/new ****   };
  80:/usr/include/c++/5/new **** #endif
  81:/usr/include/c++/5/new **** 
  82:/usr/include/c++/5/new ****   struct nothrow_t { };
  83:/usr/include/c++/5/new **** 
  84:/usr/include/c++/5/new ****   extern const nothrow_t nothrow;
  85:/usr/include/c++/5/new **** 
  86:/usr/include/c++/5/new ****   /** If you write your own error handler to be called by @c new, it must
  87:/usr/include/c++/5/new ****    *  be of this type.  */
  88:/usr/include/c++/5/new ****   typedef void (*new_handler)();
  89:/usr/include/c++/5/new **** 
  90:/usr/include/c++/5/new ****   /// Takes a replacement handler as the argument, returns the
  91:/usr/include/c++/5/new ****   /// previous handler.
  92:/usr/include/c++/5/new ****   new_handler set_new_handler(new_handler) throw();
  93:/usr/include/c++/5/new **** 
  94:/usr/include/c++/5/new **** #if __cplusplus >= 201103L
  95:/usr/include/c++/5/new ****   /// Return the current new handler.
  96:/usr/include/c++/5/new ****   new_handler get_new_handler() noexcept;
  97:/usr/include/c++/5/new **** #endif
  98:/usr/include/c++/5/new **** } // namespace std
  99:/usr/include/c++/5/new **** 
 100:/usr/include/c++/5/new **** //@{
 101:/usr/include/c++/5/new **** /** These are replaceable signatures:
 102:/usr/include/c++/5/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 103:/usr/include/c++/5/new ****  *  - normal array new and delete (same)
 104:/usr/include/c++/5/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 105:/usr/include/c++/5/new ****  *    @c NULL on error)
 106:/usr/include/c++/5/new ****  *  - @c nothrow array new and delete (same)
 107:/usr/include/c++/5/new ****  *
 108:/usr/include/c++/5/new ****  *  Placement new and delete signatures (take a memory address argument,
 109:/usr/include/c++/5/new ****  *  does nothing) may not be replaced by a user's program.
 110:/usr/include/c++/5/new **** */
 111:/usr/include/c++/5/new **** void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 112:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 113:/usr/include/c++/5/new **** void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 114:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 115:/usr/include/c++/5/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 116:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 117:/usr/include/c++/5/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 118:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 119:/usr/include/c++/5/new **** void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 120:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 121:/usr/include/c++/5/new **** void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 122:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
GAS LISTING /tmp/cc2K2nX4.s 			page 16


 123:/usr/include/c++/5/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 124:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 125:/usr/include/c++/5/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 126:/usr/include/c++/5/new ****   __attribute__((__externally_visible__));
 127:/usr/include/c++/5/new **** 
 128:/usr/include/c++/5/new **** // Default placement versions of operator new.
 129:/usr/include/c++/5/new **** inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 130:/usr/include/c++/5/new **** { return __p; }
  64              		.loc 2 130 0
  65              		.cfi_startproc
  66 0000 55       		pushq	%rbp
  67              		.cfi_def_cfa_offset 16
  68              		.cfi_offset 6, -16
  69 0001 4889E5   		movq	%rsp, %rbp
  70              		.cfi_def_cfa_register 6
  71 0004 48897DF8 		movq	%rdi, -8(%rbp)
  72 0008 488975F0 		movq	%rsi, -16(%rbp)
  73              		.loc 2 130 0
  74 000c 488B45F0 		movq	-16(%rbp), %rax
  75 0010 5D       		popq	%rbp
  76              		.cfi_def_cfa 7, 8
  77 0011 C3       		ret
  78              		.cfi_endproc
  79              	.LFE601:
  81              		.section	.text._ZN4Mesh9get_num_xEv,"axG",@progbits,_ZN4Mesh9get_num_xEv,comdat
  82              		.align 2
  83              		.weak	_ZN4Mesh9get_num_xEv
  85              	_ZN4Mesh9get_num_xEv:
  86              	.LFB1093:
  87              		.file 3 "include/Mesh.h"
   1:include/Mesh.h **** #ifndef Mesh_H
   2:include/Mesh.h **** #define Mesh_H
   3:include/Mesh.h **** 
   4:include/Mesh.h **** #include "domain_geometry.h"
   5:include/Mesh.h **** #include "global_variables.h"
   6:include/Mesh.h **** class Mesh
   7:include/Mesh.h **** {
   8:include/Mesh.h ****     public:
   9:include/Mesh.h ****         Mesh(domain_geometry domain, global_variables globals);
  10:include/Mesh.h ****         virtual ~Mesh();
  11:include/Mesh.h ****         double get_node_x(int node_num);
  12:include/Mesh.h ****         int get_num_x() { return num_x_cells; };
  88              		.loc 3 12 0
  89              		.cfi_startproc
  90 0000 55       		pushq	%rbp
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 6, -16
  93 0001 4889E5   		movq	%rsp, %rbp
  94              		.cfi_def_cfa_register 6
  95 0004 48897DF8 		movq	%rdi, -8(%rbp)
  96              		.loc 3 12 0
  97 0008 488B45F8 		movq	-8(%rbp), %rax
  98 000c 8B4008   		movl	8(%rax), %eax
  99 000f 5D       		popq	%rbp
 100              		.cfi_def_cfa 7, 8
 101 0010 C3       		ret
 102              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 17


 103              	.LFE1093:
 105              		.section	.text._ZN4Mesh9get_num_yEv,"axG",@progbits,_ZN4Mesh9get_num_yEv,comdat
 106              		.align 2
 107              		.weak	_ZN4Mesh9get_num_yEv
 109              	_ZN4Mesh9get_num_yEv:
 110              	.LFB1094:
  13:include/Mesh.h ****         int get_num_y () { return num_y_cells; };
 111              		.loc 3 13 0
 112              		.cfi_startproc
 113 0000 55       		pushq	%rbp
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 6, -16
 116 0001 4889E5   		movq	%rsp, %rbp
 117              		.cfi_def_cfa_register 6
 118 0004 48897DF8 		movq	%rdi, -8(%rbp)
 119              		.loc 3 13 0
 120 0008 488B45F8 		movq	-8(%rbp), %rax
 121 000c 8B400C   		movl	12(%rax), %eax
 122 000f 5D       		popq	%rbp
 123              		.cfi_def_cfa 7, 8
 124 0010 C3       		ret
 125              		.cfi_endproc
 126              	.LFE1094:
 128              		.section	.text._ZN4Mesh15get_total_cellsEv,"axG",@progbits,_ZN4Mesh15get_total_cellsEv,comdat
 129              		.align 2
 130              		.weak	_ZN4Mesh15get_total_cellsEv
 132              	_ZN4Mesh15get_total_cellsEv:
 133              	.LFB1095:
  14:include/Mesh.h ****         int get_total_cells () { return total_cells; };
 134              		.loc 3 14 0
 135              		.cfi_startproc
 136 0000 55       		pushq	%rbp
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 6, -16
 139 0001 4889E5   		movq	%rsp, %rbp
 140              		.cfi_def_cfa_register 6
 141 0004 48897DF8 		movq	%rdi, -8(%rbp)
 142              		.loc 3 14 0
 143 0008 488B45F8 		movq	-8(%rbp), %rax
 144 000c 8B4010   		movl	16(%rax), %eax
 145 000f 5D       		popq	%rbp
 146              		.cfi_def_cfa 7, 8
 147 0010 C3       		ret
 148              		.cfi_endproc
 149              	.LFE1095:
 151              		.section	.text._ZN4Mesh14get_centroid_xEi,"axG",@progbits,_ZN4Mesh14get_centroid_xEi,comdat
 152              		.align 2
 153              		.weak	_ZN4Mesh14get_centroid_xEi
 155              	_ZN4Mesh14get_centroid_xEi:
 156              	.LFB1100:
  15:include/Mesh.h ****         double get_dx() { return dx;};
  16:include/Mesh.h ****         double get_dy() { return dy;};
  17:include/Mesh.h ****         double get_X() { return X;};
  18:include/Mesh.h ****         double get_Y() { return Y;};
  19:include/Mesh.h ****         double get_centroid_x( int i) {return centroid_x[i];};
 157              		.loc 3 19 0
 158              		.cfi_startproc
GAS LISTING /tmp/cc2K2nX4.s 			page 18


 159 0000 55       		pushq	%rbp
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 6, -16
 162 0001 4889E5   		movq	%rsp, %rbp
 163              		.cfi_def_cfa_register 6
 164 0004 48897DF8 		movq	%rdi, -8(%rbp)
 165 0008 8975F4   		movl	%esi, -12(%rbp)
 166              		.loc 3 19 0
 167 000b 488B45F8 		movq	-8(%rbp), %rax
 168 000f 488B4040 		movq	64(%rax), %rax
 169 0013 8B55F4   		movl	-12(%rbp), %edx
 170 0016 4863D2   		movslq	%edx, %rdx
 171 0019 48C1E203 		salq	$3, %rdx
 172 001d 4801D0   		addq	%rdx, %rax
 173 0020 F20F1000 		movsd	(%rax), %xmm0
 174 0024 5D       		popq	%rbp
 175              		.cfi_def_cfa 7, 8
 176 0025 C3       		ret
 177              		.cfi_endproc
 178              	.LFE1100:
 180              		.section	.text._ZN4Mesh14get_centroid_yEi,"axG",@progbits,_ZN4Mesh14get_centroid_yEi,comdat
 181              		.align 2
 182              		.weak	_ZN4Mesh14get_centroid_yEi
 184              	_ZN4Mesh14get_centroid_yEi:
 185              	.LFB1101:
  20:include/Mesh.h ****         double get_centroid_y( int i) {return centroid_y[i];};
 186              		.loc 3 20 0
 187              		.cfi_startproc
 188 0000 55       		pushq	%rbp
 189              		.cfi_def_cfa_offset 16
 190              		.cfi_offset 6, -16
 191 0001 4889E5   		movq	%rsp, %rbp
 192              		.cfi_def_cfa_register 6
 193 0004 48897DF8 		movq	%rdi, -8(%rbp)
 194 0008 8975F4   		movl	%esi, -12(%rbp)
 195              		.loc 3 20 0
 196 000b 488B45F8 		movq	-8(%rbp), %rax
 197 000f 488B4048 		movq	72(%rax), %rax
 198 0013 8B55F4   		movl	-12(%rbp), %edx
 199 0016 4863D2   		movslq	%edx, %rdx
 200 0019 48C1E203 		salq	$3, %rdx
 201 001d 4801D0   		addq	%rdx, %rax
 202 0020 F20F1000 		movsd	(%rax), %xmm0
 203 0024 5D       		popq	%rbp
 204              		.cfi_def_cfa 7, 8
 205 0025 C3       		ret
 206              		.cfi_endproc
 207              	.LFE1101:
 209              		.section	.text._ZN4Mesh14get_centroid_zEi,"axG",@progbits,_ZN4Mesh14get_centroid_zEi,comdat
 210              		.align 2
 211              		.weak	_ZN4Mesh14get_centroid_zEi
 213              	_ZN4Mesh14get_centroid_zEi:
 214              	.LFB1102:
  21:include/Mesh.h ****         double get_centroid_z( int i) {return centroid_z[i];};
 215              		.loc 3 21 0
 216              		.cfi_startproc
 217 0000 55       		pushq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 19


 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 6, -16
 220 0001 4889E5   		movq	%rsp, %rbp
 221              		.cfi_def_cfa_register 6
 222 0004 48897DF8 		movq	%rdi, -8(%rbp)
 223 0008 8975F4   		movl	%esi, -12(%rbp)
 224              		.loc 3 21 0
 225 000b 488B45F8 		movq	-8(%rbp), %rax
 226 000f 488B4050 		movq	80(%rax), %rax
 227 0013 8B55F4   		movl	-12(%rbp), %edx
 228 0016 4863D2   		movslq	%edx, %rdx
 229 0019 48C1E203 		salq	$3, %rdx
 230 001d 4801D0   		addq	%rdx, %rax
 231 0020 F20F1000 		movsd	(%rax), %xmm0
 232 0024 5D       		popq	%rbp
 233              		.cfi_def_cfa 7, 8
 234 0025 C3       		ret
 235              		.cfi_endproc
 236              	.LFE1102:
 238              		.section	.text._ZN4Mesh11get_north_xEi,"axG",@progbits,_ZN4Mesh11get_north_xEi,comdat
 239              		.align 2
 240              		.weak	_ZN4Mesh11get_north_xEi
 242              	_ZN4Mesh11get_north_xEi:
 243              	.LFB1103:
  22:include/Mesh.h ****         double get_north_x( int i) {return north_x[i];};
 244              		.loc 3 22 0
 245              		.cfi_startproc
 246 0000 55       		pushq	%rbp
 247              		.cfi_def_cfa_offset 16
 248              		.cfi_offset 6, -16
 249 0001 4889E5   		movq	%rsp, %rbp
 250              		.cfi_def_cfa_register 6
 251 0004 48897DF8 		movq	%rdi, -8(%rbp)
 252 0008 8975F4   		movl	%esi, -12(%rbp)
 253              		.loc 3 22 0
 254 000b 488B45F8 		movq	-8(%rbp), %rax
 255 000f 488B4058 		movq	88(%rax), %rax
 256 0013 8B55F4   		movl	-12(%rbp), %edx
 257 0016 4863D2   		movslq	%edx, %rdx
 258 0019 48C1E203 		salq	$3, %rdx
 259 001d 4801D0   		addq	%rdx, %rax
 260 0020 F20F1000 		movsd	(%rax), %xmm0
 261 0024 5D       		popq	%rbp
 262              		.cfi_def_cfa 7, 8
 263 0025 C3       		ret
 264              		.cfi_endproc
 265              	.LFE1103:
 267              		.section	.text._ZN4Mesh11get_north_yEi,"axG",@progbits,_ZN4Mesh11get_north_yEi,comdat
 268              		.align 2
 269              		.weak	_ZN4Mesh11get_north_yEi
 271              	_ZN4Mesh11get_north_yEi:
 272              	.LFB1104:
  23:include/Mesh.h ****         double get_north_y( int i) {return north_y[i];};
 273              		.loc 3 23 0
 274              		.cfi_startproc
 275 0000 55       		pushq	%rbp
 276              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/cc2K2nX4.s 			page 20


 277              		.cfi_offset 6, -16
 278 0001 4889E5   		movq	%rsp, %rbp
 279              		.cfi_def_cfa_register 6
 280 0004 48897DF8 		movq	%rdi, -8(%rbp)
 281 0008 8975F4   		movl	%esi, -12(%rbp)
 282              		.loc 3 23 0
 283 000b 488B45F8 		movq	-8(%rbp), %rax
 284 000f 488B4060 		movq	96(%rax), %rax
 285 0013 8B55F4   		movl	-12(%rbp), %edx
 286 0016 4863D2   		movslq	%edx, %rdx
 287 0019 48C1E203 		salq	$3, %rdx
 288 001d 4801D0   		addq	%rdx, %rax
 289 0020 F20F1000 		movsd	(%rax), %xmm0
 290 0024 5D       		popq	%rbp
 291              		.cfi_def_cfa 7, 8
 292 0025 C3       		ret
 293              		.cfi_endproc
 294              	.LFE1104:
 296              		.section	.text._ZN4Mesh11get_north_zEi,"axG",@progbits,_ZN4Mesh11get_north_zEi,comdat
 297              		.align 2
 298              		.weak	_ZN4Mesh11get_north_zEi
 300              	_ZN4Mesh11get_north_zEi:
 301              	.LFB1105:
  24:include/Mesh.h ****         double get_north_z( int i) {return north_z[i];};
 302              		.loc 3 24 0
 303              		.cfi_startproc
 304 0000 55       		pushq	%rbp
 305              		.cfi_def_cfa_offset 16
 306              		.cfi_offset 6, -16
 307 0001 4889E5   		movq	%rsp, %rbp
 308              		.cfi_def_cfa_register 6
 309 0004 48897DF8 		movq	%rdi, -8(%rbp)
 310 0008 8975F4   		movl	%esi, -12(%rbp)
 311              		.loc 3 24 0
 312 000b 488B45F8 		movq	-8(%rbp), %rax
 313 000f 488B4068 		movq	104(%rax), %rax
 314 0013 8B55F4   		movl	-12(%rbp), %edx
 315 0016 4863D2   		movslq	%edx, %rdx
 316 0019 48C1E203 		salq	$3, %rdx
 317 001d 4801D0   		addq	%rdx, %rax
 318 0020 F20F1000 		movsd	(%rax), %xmm0
 319 0024 5D       		popq	%rbp
 320              		.cfi_def_cfa 7, 8
 321 0025 C3       		ret
 322              		.cfi_endproc
 323              	.LFE1105:
 325              		.section	.text._ZN4Mesh10get_east_xEi,"axG",@progbits,_ZN4Mesh10get_east_xEi,comdat
 326              		.align 2
 327              		.weak	_ZN4Mesh10get_east_xEi
 329              	_ZN4Mesh10get_east_xEi:
 330              	.LFB1106:
  25:include/Mesh.h ****         double get_east_x( int i) {return east_x[i];};
 331              		.loc 3 25 0
 332              		.cfi_startproc
 333 0000 55       		pushq	%rbp
 334              		.cfi_def_cfa_offset 16
 335              		.cfi_offset 6, -16
GAS LISTING /tmp/cc2K2nX4.s 			page 21


 336 0001 4889E5   		movq	%rsp, %rbp
 337              		.cfi_def_cfa_register 6
 338 0004 48897DF8 		movq	%rdi, -8(%rbp)
 339 0008 8975F4   		movl	%esi, -12(%rbp)
 340              		.loc 3 25 0
 341 000b 488B45F8 		movq	-8(%rbp), %rax
 342 000f 488B4070 		movq	112(%rax), %rax
 343 0013 8B55F4   		movl	-12(%rbp), %edx
 344 0016 4863D2   		movslq	%edx, %rdx
 345 0019 48C1E203 		salq	$3, %rdx
 346 001d 4801D0   		addq	%rdx, %rax
 347 0020 F20F1000 		movsd	(%rax), %xmm0
 348 0024 5D       		popq	%rbp
 349              		.cfi_def_cfa 7, 8
 350 0025 C3       		ret
 351              		.cfi_endproc
 352              	.LFE1106:
 354              		.section	.text._ZN4Mesh10get_east_yEi,"axG",@progbits,_ZN4Mesh10get_east_yEi,comdat
 355              		.align 2
 356              		.weak	_ZN4Mesh10get_east_yEi
 358              	_ZN4Mesh10get_east_yEi:
 359              	.LFB1107:
  26:include/Mesh.h ****         double get_east_y( int i) {return east_y[i];};
 360              		.loc 3 26 0
 361              		.cfi_startproc
 362 0000 55       		pushq	%rbp
 363              		.cfi_def_cfa_offset 16
 364              		.cfi_offset 6, -16
 365 0001 4889E5   		movq	%rsp, %rbp
 366              		.cfi_def_cfa_register 6
 367 0004 48897DF8 		movq	%rdi, -8(%rbp)
 368 0008 8975F4   		movl	%esi, -12(%rbp)
 369              		.loc 3 26 0
 370 000b 488B45F8 		movq	-8(%rbp), %rax
 371 000f 488B4078 		movq	120(%rax), %rax
 372 0013 8B55F4   		movl	-12(%rbp), %edx
 373 0016 4863D2   		movslq	%edx, %rdx
 374 0019 48C1E203 		salq	$3, %rdx
 375 001d 4801D0   		addq	%rdx, %rax
 376 0020 F20F1000 		movsd	(%rax), %xmm0
 377 0024 5D       		popq	%rbp
 378              		.cfi_def_cfa 7, 8
 379 0025 C3       		ret
 380              		.cfi_endproc
 381              	.LFE1107:
 383              		.section	.text._ZN4Mesh10get_east_zEi,"axG",@progbits,_ZN4Mesh10get_east_zEi,comdat
 384              		.align 2
 385              		.weak	_ZN4Mesh10get_east_zEi
 387              	_ZN4Mesh10get_east_zEi:
 388              	.LFB1108:
  27:include/Mesh.h ****         double get_east_z( int i) {return east_z[i];};
 389              		.loc 3 27 0
 390              		.cfi_startproc
 391 0000 55       		pushq	%rbp
 392              		.cfi_def_cfa_offset 16
 393              		.cfi_offset 6, -16
 394 0001 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 22


 395              		.cfi_def_cfa_register 6
 396 0004 48897DF8 		movq	%rdi, -8(%rbp)
 397 0008 8975F4   		movl	%esi, -12(%rbp)
 398              		.loc 3 27 0
 399 000b 488B45F8 		movq	-8(%rbp), %rax
 400 000f 488B8080 		movq	128(%rax), %rax
 400      000000
 401 0016 8B55F4   		movl	-12(%rbp), %edx
 402 0019 4863D2   		movslq	%edx, %rdx
 403 001c 48C1E203 		salq	$3, %rdx
 404 0020 4801D0   		addq	%rdx, %rax
 405 0023 F20F1000 		movsd	(%rax), %xmm0
 406 0027 5D       		popq	%rbp
 407              		.cfi_def_cfa 7, 8
 408 0028 C3       		ret
 409              		.cfi_endproc
 410              	.LFE1108:
 412              		.section	.text._ZN4Mesh10get_west_xEi,"axG",@progbits,_ZN4Mesh10get_west_xEi,comdat
 413              		.align 2
 414              		.weak	_ZN4Mesh10get_west_xEi
 416              	_ZN4Mesh10get_west_xEi:
 417              	.LFB1109:
  28:include/Mesh.h ****         double get_west_x( int i) {return west_x[i];};
 418              		.loc 3 28 0
 419              		.cfi_startproc
 420 0000 55       		pushq	%rbp
 421              		.cfi_def_cfa_offset 16
 422              		.cfi_offset 6, -16
 423 0001 4889E5   		movq	%rsp, %rbp
 424              		.cfi_def_cfa_register 6
 425 0004 48897DF8 		movq	%rdi, -8(%rbp)
 426 0008 8975F4   		movl	%esi, -12(%rbp)
 427              		.loc 3 28 0
 428 000b 488B45F8 		movq	-8(%rbp), %rax
 429 000f 488B8088 		movq	136(%rax), %rax
 429      000000
 430 0016 8B55F4   		movl	-12(%rbp), %edx
 431 0019 4863D2   		movslq	%edx, %rdx
 432 001c 48C1E203 		salq	$3, %rdx
 433 0020 4801D0   		addq	%rdx, %rax
 434 0023 F20F1000 		movsd	(%rax), %xmm0
 435 0027 5D       		popq	%rbp
 436              		.cfi_def_cfa 7, 8
 437 0028 C3       		ret
 438              		.cfi_endproc
 439              	.LFE1109:
 441              		.section	.text._ZN4Mesh10get_west_yEi,"axG",@progbits,_ZN4Mesh10get_west_yEi,comdat
 442              		.align 2
 443              		.weak	_ZN4Mesh10get_west_yEi
 445              	_ZN4Mesh10get_west_yEi:
 446              	.LFB1110:
  29:include/Mesh.h ****         double get_west_y( int i) {return west_y[i];};
 447              		.loc 3 29 0
 448              		.cfi_startproc
 449 0000 55       		pushq	%rbp
 450              		.cfi_def_cfa_offset 16
 451              		.cfi_offset 6, -16
GAS LISTING /tmp/cc2K2nX4.s 			page 23


 452 0001 4889E5   		movq	%rsp, %rbp
 453              		.cfi_def_cfa_register 6
 454 0004 48897DF8 		movq	%rdi, -8(%rbp)
 455 0008 8975F4   		movl	%esi, -12(%rbp)
 456              		.loc 3 29 0
 457 000b 488B45F8 		movq	-8(%rbp), %rax
 458 000f 488B8090 		movq	144(%rax), %rax
 458      000000
 459 0016 8B55F4   		movl	-12(%rbp), %edx
 460 0019 4863D2   		movslq	%edx, %rdx
 461 001c 48C1E203 		salq	$3, %rdx
 462 0020 4801D0   		addq	%rdx, %rax
 463 0023 F20F1000 		movsd	(%rax), %xmm0
 464 0027 5D       		popq	%rbp
 465              		.cfi_def_cfa 7, 8
 466 0028 C3       		ret
 467              		.cfi_endproc
 468              	.LFE1110:
 470              		.section	.text._ZN4Mesh10get_west_zEi,"axG",@progbits,_ZN4Mesh10get_west_zEi,comdat
 471              		.align 2
 472              		.weak	_ZN4Mesh10get_west_zEi
 474              	_ZN4Mesh10get_west_zEi:
 475              	.LFB1111:
  30:include/Mesh.h ****         double get_west_z( int i) {return west_z[i];};
 476              		.loc 3 30 0
 477              		.cfi_startproc
 478 0000 55       		pushq	%rbp
 479              		.cfi_def_cfa_offset 16
 480              		.cfi_offset 6, -16
 481 0001 4889E5   		movq	%rsp, %rbp
 482              		.cfi_def_cfa_register 6
 483 0004 48897DF8 		movq	%rdi, -8(%rbp)
 484 0008 8975F4   		movl	%esi, -12(%rbp)
 485              		.loc 3 30 0
 486 000b 488B45F8 		movq	-8(%rbp), %rax
 487 000f 488B8098 		movq	152(%rax), %rax
 487      000000
 488 0016 8B55F4   		movl	-12(%rbp), %edx
 489 0019 4863D2   		movslq	%edx, %rdx
 490 001c 48C1E203 		salq	$3, %rdx
 491 0020 4801D0   		addq	%rdx, %rax
 492 0023 F20F1000 		movsd	(%rax), %xmm0
 493 0027 5D       		popq	%rbp
 494              		.cfi_def_cfa 7, 8
 495 0028 C3       		ret
 496              		.cfi_endproc
 497              	.LFE1111:
 499              		.section	.text._ZN4Mesh11get_south_xEi,"axG",@progbits,_ZN4Mesh11get_south_xEi,comdat
 500              		.align 2
 501              		.weak	_ZN4Mesh11get_south_xEi
 503              	_ZN4Mesh11get_south_xEi:
 504              	.LFB1112:
  31:include/Mesh.h ****         double get_south_x( int i) {return south_x[i];};
 505              		.loc 3 31 0
 506              		.cfi_startproc
 507 0000 55       		pushq	%rbp
 508              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/cc2K2nX4.s 			page 24


 509              		.cfi_offset 6, -16
 510 0001 4889E5   		movq	%rsp, %rbp
 511              		.cfi_def_cfa_register 6
 512 0004 48897DF8 		movq	%rdi, -8(%rbp)
 513 0008 8975F4   		movl	%esi, -12(%rbp)
 514              		.loc 3 31 0
 515 000b 488B45F8 		movq	-8(%rbp), %rax
 516 000f 488B80A0 		movq	160(%rax), %rax
 516      000000
 517 0016 8B55F4   		movl	-12(%rbp), %edx
 518 0019 4863D2   		movslq	%edx, %rdx
 519 001c 48C1E203 		salq	$3, %rdx
 520 0020 4801D0   		addq	%rdx, %rax
 521 0023 F20F1000 		movsd	(%rax), %xmm0
 522 0027 5D       		popq	%rbp
 523              		.cfi_def_cfa 7, 8
 524 0028 C3       		ret
 525              		.cfi_endproc
 526              	.LFE1112:
 528              		.section	.text._ZN4Mesh11get_south_yEi,"axG",@progbits,_ZN4Mesh11get_south_yEi,comdat
 529              		.align 2
 530              		.weak	_ZN4Mesh11get_south_yEi
 532              	_ZN4Mesh11get_south_yEi:
 533              	.LFB1113:
  32:include/Mesh.h ****         double get_south_y( int i) {return south_y[i];};
 534              		.loc 3 32 0
 535              		.cfi_startproc
 536 0000 55       		pushq	%rbp
 537              		.cfi_def_cfa_offset 16
 538              		.cfi_offset 6, -16
 539 0001 4889E5   		movq	%rsp, %rbp
 540              		.cfi_def_cfa_register 6
 541 0004 48897DF8 		movq	%rdi, -8(%rbp)
 542 0008 8975F4   		movl	%esi, -12(%rbp)
 543              		.loc 3 32 0
 544 000b 488B45F8 		movq	-8(%rbp), %rax
 545 000f 488B80A8 		movq	168(%rax), %rax
 545      000000
 546 0016 8B55F4   		movl	-12(%rbp), %edx
 547 0019 4863D2   		movslq	%edx, %rdx
 548 001c 48C1E203 		salq	$3, %rdx
 549 0020 4801D0   		addq	%rdx, %rax
 550 0023 F20F1000 		movsd	(%rax), %xmm0
 551 0027 5D       		popq	%rbp
 552              		.cfi_def_cfa 7, 8
 553 0028 C3       		ret
 554              		.cfi_endproc
 555              	.LFE1113:
 557              		.section	.text._ZN4Mesh11get_south_zEi,"axG",@progbits,_ZN4Mesh11get_south_zEi,comdat
 558              		.align 2
 559              		.weak	_ZN4Mesh11get_south_zEi
 561              	_ZN4Mesh11get_south_zEi:
 562              	.LFB1114:
  33:include/Mesh.h ****         double get_south_z( int i) {return south_z[i];};
 563              		.loc 3 33 0
 564              		.cfi_startproc
 565 0000 55       		pushq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 25


 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 6, -16
 568 0001 4889E5   		movq	%rsp, %rbp
 569              		.cfi_def_cfa_register 6
 570 0004 48897DF8 		movq	%rdi, -8(%rbp)
 571 0008 8975F4   		movl	%esi, -12(%rbp)
 572              		.loc 3 33 0
 573 000b 488B45F8 		movq	-8(%rbp), %rax
 574 000f 488B80B0 		movq	176(%rax), %rax
 574      000000
 575 0016 8B55F4   		movl	-12(%rbp), %edx
 576 0019 4863D2   		movslq	%edx, %rdx
 577 001c 48C1E203 		salq	$3, %rdx
 578 0020 4801D0   		addq	%rdx, %rax
 579 0023 F20F1000 		movsd	(%rax), %xmm0
 580 0027 5D       		popq	%rbp
 581              		.cfi_def_cfa 7, 8
 582 0028 C3       		ret
 583              		.cfi_endproc
 584              	.LFE1114:
 586              		.section	.text._ZN4Mesh10get_n_areaEi,"axG",@progbits,_ZN4Mesh10get_n_areaEi,comdat
 587              		.align 2
 588              		.weak	_ZN4Mesh10get_n_areaEi
 590              	_ZN4Mesh10get_n_areaEi:
 591              	.LFB1115:
  34:include/Mesh.h ****         double get_n_area( int i) {return n_area[i];};
 592              		.loc 3 34 0
 593              		.cfi_startproc
 594 0000 55       		pushq	%rbp
 595              		.cfi_def_cfa_offset 16
 596              		.cfi_offset 6, -16
 597 0001 4889E5   		movq	%rsp, %rbp
 598              		.cfi_def_cfa_register 6
 599 0004 48897DF8 		movq	%rdi, -8(%rbp)
 600 0008 8975F4   		movl	%esi, -12(%rbp)
 601              		.loc 3 34 0
 602 000b 488B45F8 		movq	-8(%rbp), %rax
 603 000f 488B80B8 		movq	184(%rax), %rax
 603      000000
 604 0016 8B55F4   		movl	-12(%rbp), %edx
 605 0019 4863D2   		movslq	%edx, %rdx
 606 001c 48C1E203 		salq	$3, %rdx
 607 0020 4801D0   		addq	%rdx, %rax
 608 0023 F20F1000 		movsd	(%rax), %xmm0
 609 0027 5D       		popq	%rbp
 610              		.cfi_def_cfa 7, 8
 611 0028 C3       		ret
 612              		.cfi_endproc
 613              	.LFE1115:
 615              		.section	.text._ZN4Mesh10get_s_areaEi,"axG",@progbits,_ZN4Mesh10get_s_areaEi,comdat
 616              		.align 2
 617              		.weak	_ZN4Mesh10get_s_areaEi
 619              	_ZN4Mesh10get_s_areaEi:
 620              	.LFB1116:
  35:include/Mesh.h ****         double get_s_area( int i) {return s_area[i];};
 621              		.loc 3 35 0
 622              		.cfi_startproc
GAS LISTING /tmp/cc2K2nX4.s 			page 26


 623 0000 55       		pushq	%rbp
 624              		.cfi_def_cfa_offset 16
 625              		.cfi_offset 6, -16
 626 0001 4889E5   		movq	%rsp, %rbp
 627              		.cfi_def_cfa_register 6
 628 0004 48897DF8 		movq	%rdi, -8(%rbp)
 629 0008 8975F4   		movl	%esi, -12(%rbp)
 630              		.loc 3 35 0
 631 000b 488B45F8 		movq	-8(%rbp), %rax
 632 000f 488B80C0 		movq	192(%rax), %rax
 632      000000
 633 0016 8B55F4   		movl	-12(%rbp), %edx
 634 0019 4863D2   		movslq	%edx, %rdx
 635 001c 48C1E203 		salq	$3, %rdx
 636 0020 4801D0   		addq	%rdx, %rax
 637 0023 F20F1000 		movsd	(%rax), %xmm0
 638 0027 5D       		popq	%rbp
 639              		.cfi_def_cfa 7, 8
 640 0028 C3       		ret
 641              		.cfi_endproc
 642              	.LFE1116:
 644              		.section	.text._ZN4Mesh10get_w_areaEi,"axG",@progbits,_ZN4Mesh10get_w_areaEi,comdat
 645              		.align 2
 646              		.weak	_ZN4Mesh10get_w_areaEi
 648              	_ZN4Mesh10get_w_areaEi:
 649              	.LFB1117:
  36:include/Mesh.h ****         double get_w_area( int i) {return w_area[i];};
 650              		.loc 3 36 0
 651              		.cfi_startproc
 652 0000 55       		pushq	%rbp
 653              		.cfi_def_cfa_offset 16
 654              		.cfi_offset 6, -16
 655 0001 4889E5   		movq	%rsp, %rbp
 656              		.cfi_def_cfa_register 6
 657 0004 48897DF8 		movq	%rdi, -8(%rbp)
 658 0008 8975F4   		movl	%esi, -12(%rbp)
 659              		.loc 3 36 0
 660 000b 488B45F8 		movq	-8(%rbp), %rax
 661 000f 488B80C8 		movq	200(%rax), %rax
 661      000000
 662 0016 8B55F4   		movl	-12(%rbp), %edx
 663 0019 4863D2   		movslq	%edx, %rdx
 664 001c 48C1E203 		salq	$3, %rdx
 665 0020 4801D0   		addq	%rdx, %rax
 666 0023 F20F1000 		movsd	(%rax), %xmm0
 667 0027 5D       		popq	%rbp
 668              		.cfi_def_cfa 7, 8
 669 0028 C3       		ret
 670              		.cfi_endproc
 671              	.LFE1117:
 673              		.section	.text._ZN4Mesh10get_e_areaEi,"axG",@progbits,_ZN4Mesh10get_e_areaEi,comdat
 674              		.align 2
 675              		.weak	_ZN4Mesh10get_e_areaEi
 677              	_ZN4Mesh10get_e_areaEi:
 678              	.LFB1118:
  37:include/Mesh.h ****         double get_e_area( int i) {return e_area[i];};
 679              		.loc 3 37 0
GAS LISTING /tmp/cc2K2nX4.s 			page 27


 680              		.cfi_startproc
 681 0000 55       		pushq	%rbp
 682              		.cfi_def_cfa_offset 16
 683              		.cfi_offset 6, -16
 684 0001 4889E5   		movq	%rsp, %rbp
 685              		.cfi_def_cfa_register 6
 686 0004 48897DF8 		movq	%rdi, -8(%rbp)
 687 0008 8975F4   		movl	%esi, -12(%rbp)
 688              		.loc 3 37 0
 689 000b 488B45F8 		movq	-8(%rbp), %rax
 690 000f 488B80D0 		movq	208(%rax), %rax
 690      000000
 691 0016 8B55F4   		movl	-12(%rbp), %edx
 692 0019 4863D2   		movslq	%edx, %rdx
 693 001c 48C1E203 		salq	$3, %rdx
 694 0020 4801D0   		addq	%rdx, %rax
 695 0023 F20F1000 		movsd	(%rax), %xmm0
 696 0027 5D       		popq	%rbp
 697              		.cfi_def_cfa 7, 8
 698 0028 C3       		ret
 699              		.cfi_endproc
 700              	.LFE1118:
 702              		.section	.text._ZN4Mesh7get_n_iEi,"axG",@progbits,_ZN4Mesh7get_n_iEi,comdat
 703              		.align 2
 704              		.weak	_ZN4Mesh7get_n_iEi
 706              	_ZN4Mesh7get_n_iEi:
 707              	.LFB1119:
  38:include/Mesh.h ****         double get_n_i( int i) {return n_i[i];};
 708              		.loc 3 38 0
 709              		.cfi_startproc
 710 0000 55       		pushq	%rbp
 711              		.cfi_def_cfa_offset 16
 712              		.cfi_offset 6, -16
 713 0001 4889E5   		movq	%rsp, %rbp
 714              		.cfi_def_cfa_register 6
 715 0004 48897DF8 		movq	%rdi, -8(%rbp)
 716 0008 8975F4   		movl	%esi, -12(%rbp)
 717              		.loc 3 38 0
 718 000b 488B45F8 		movq	-8(%rbp), %rax
 719 000f 488B80E8 		movq	232(%rax), %rax
 719      000000
 720 0016 8B55F4   		movl	-12(%rbp), %edx
 721 0019 4863D2   		movslq	%edx, %rdx
 722 001c 48C1E203 		salq	$3, %rdx
 723 0020 4801D0   		addq	%rdx, %rax
 724 0023 F20F1000 		movsd	(%rax), %xmm0
 725 0027 5D       		popq	%rbp
 726              		.cfi_def_cfa 7, 8
 727 0028 C3       		ret
 728              		.cfi_endproc
 729              	.LFE1119:
 731              		.section	.text._ZN4Mesh7get_n_jEi,"axG",@progbits,_ZN4Mesh7get_n_jEi,comdat
 732              		.align 2
 733              		.weak	_ZN4Mesh7get_n_jEi
 735              	_ZN4Mesh7get_n_jEi:
 736              	.LFB1120:
  39:include/Mesh.h ****         double get_n_j( int i) {return n_j[i];};
GAS LISTING /tmp/cc2K2nX4.s 			page 28


 737              		.loc 3 39 0
 738              		.cfi_startproc
 739 0000 55       		pushq	%rbp
 740              		.cfi_def_cfa_offset 16
 741              		.cfi_offset 6, -16
 742 0001 4889E5   		movq	%rsp, %rbp
 743              		.cfi_def_cfa_register 6
 744 0004 48897DF8 		movq	%rdi, -8(%rbp)
 745 0008 8975F4   		movl	%esi, -12(%rbp)
 746              		.loc 3 39 0
 747 000b 488B45F8 		movq	-8(%rbp), %rax
 748 000f 488B80F0 		movq	240(%rax), %rax
 748      000000
 749 0016 8B55F4   		movl	-12(%rbp), %edx
 750 0019 4863D2   		movslq	%edx, %rdx
 751 001c 48C1E203 		salq	$3, %rdx
 752 0020 4801D0   		addq	%rdx, %rax
 753 0023 F20F1000 		movsd	(%rax), %xmm0
 754 0027 5D       		popq	%rbp
 755              		.cfi_def_cfa 7, 8
 756 0028 C3       		ret
 757              		.cfi_endproc
 758              	.LFE1120:
 760              		.section	.text._ZN4Mesh7get_n_kEi,"axG",@progbits,_ZN4Mesh7get_n_kEi,comdat
 761              		.align 2
 762              		.weak	_ZN4Mesh7get_n_kEi
 764              	_ZN4Mesh7get_n_kEi:
 765              	.LFB1121:
  40:include/Mesh.h ****         double get_n_k( int i) {return n_k[i];};
 766              		.loc 3 40 0
 767              		.cfi_startproc
 768 0000 55       		pushq	%rbp
 769              		.cfi_def_cfa_offset 16
 770              		.cfi_offset 6, -16
 771 0001 4889E5   		movq	%rsp, %rbp
 772              		.cfi_def_cfa_register 6
 773 0004 48897DF8 		movq	%rdi, -8(%rbp)
 774 0008 8975F4   		movl	%esi, -12(%rbp)
 775              		.loc 3 40 0
 776 000b 488B45F8 		movq	-8(%rbp), %rax
 777 000f 488B80F8 		movq	248(%rax), %rax
 777      000000
 778 0016 8B55F4   		movl	-12(%rbp), %edx
 779 0019 4863D2   		movslq	%edx, %rdx
 780 001c 48C1E203 		salq	$3, %rdx
 781 0020 4801D0   		addq	%rdx, %rax
 782 0023 F20F1000 		movsd	(%rax), %xmm0
 783 0027 5D       		popq	%rbp
 784              		.cfi_def_cfa 7, 8
 785 0028 C3       		ret
 786              		.cfi_endproc
 787              	.LFE1121:
 789              		.section	.text._ZN4Mesh7get_s_iEi,"axG",@progbits,_ZN4Mesh7get_s_iEi,comdat
 790              		.align 2
 791              		.weak	_ZN4Mesh7get_s_iEi
 793              	_ZN4Mesh7get_s_iEi:
 794              	.LFB1122:
GAS LISTING /tmp/cc2K2nX4.s 			page 29


  41:include/Mesh.h ****         double get_s_i( int i) {return s_i[i];};
 795              		.loc 3 41 0
 796              		.cfi_startproc
 797 0000 55       		pushq	%rbp
 798              		.cfi_def_cfa_offset 16
 799              		.cfi_offset 6, -16
 800 0001 4889E5   		movq	%rsp, %rbp
 801              		.cfi_def_cfa_register 6
 802 0004 48897DF8 		movq	%rdi, -8(%rbp)
 803 0008 8975F4   		movl	%esi, -12(%rbp)
 804              		.loc 3 41 0
 805 000b 488B45F8 		movq	-8(%rbp), %rax
 806 000f 488B8000 		movq	256(%rax), %rax
 806      010000
 807 0016 8B55F4   		movl	-12(%rbp), %edx
 808 0019 4863D2   		movslq	%edx, %rdx
 809 001c 48C1E203 		salq	$3, %rdx
 810 0020 4801D0   		addq	%rdx, %rax
 811 0023 F20F1000 		movsd	(%rax), %xmm0
 812 0027 5D       		popq	%rbp
 813              		.cfi_def_cfa 7, 8
 814 0028 C3       		ret
 815              		.cfi_endproc
 816              	.LFE1122:
 818              		.section	.text._ZN4Mesh7get_s_jEi,"axG",@progbits,_ZN4Mesh7get_s_jEi,comdat
 819              		.align 2
 820              		.weak	_ZN4Mesh7get_s_jEi
 822              	_ZN4Mesh7get_s_jEi:
 823              	.LFB1123:
  42:include/Mesh.h ****         double get_s_j( int i) {return s_j[i];};
 824              		.loc 3 42 0
 825              		.cfi_startproc
 826 0000 55       		pushq	%rbp
 827              		.cfi_def_cfa_offset 16
 828              		.cfi_offset 6, -16
 829 0001 4889E5   		movq	%rsp, %rbp
 830              		.cfi_def_cfa_register 6
 831 0004 48897DF8 		movq	%rdi, -8(%rbp)
 832 0008 8975F4   		movl	%esi, -12(%rbp)
 833              		.loc 3 42 0
 834 000b 488B45F8 		movq	-8(%rbp), %rax
 835 000f 488B8008 		movq	264(%rax), %rax
 835      010000
 836 0016 8B55F4   		movl	-12(%rbp), %edx
 837 0019 4863D2   		movslq	%edx, %rdx
 838 001c 48C1E203 		salq	$3, %rdx
 839 0020 4801D0   		addq	%rdx, %rax
 840 0023 F20F1000 		movsd	(%rax), %xmm0
 841 0027 5D       		popq	%rbp
 842              		.cfi_def_cfa 7, 8
 843 0028 C3       		ret
 844              		.cfi_endproc
 845              	.LFE1123:
 847              		.section	.text._ZN4Mesh7get_s_kEi,"axG",@progbits,_ZN4Mesh7get_s_kEi,comdat
 848              		.align 2
 849              		.weak	_ZN4Mesh7get_s_kEi
 851              	_ZN4Mesh7get_s_kEi:
GAS LISTING /tmp/cc2K2nX4.s 			page 30


 852              	.LFB1124:
  43:include/Mesh.h ****         double get_s_k( int i) {return s_k[i];};
 853              		.loc 3 43 0
 854              		.cfi_startproc
 855 0000 55       		pushq	%rbp
 856              		.cfi_def_cfa_offset 16
 857              		.cfi_offset 6, -16
 858 0001 4889E5   		movq	%rsp, %rbp
 859              		.cfi_def_cfa_register 6
 860 0004 48897DF8 		movq	%rdi, -8(%rbp)
 861 0008 8975F4   		movl	%esi, -12(%rbp)
 862              		.loc 3 43 0
 863 000b 488B45F8 		movq	-8(%rbp), %rax
 864 000f 488B8010 		movq	272(%rax), %rax
 864      010000
 865 0016 8B55F4   		movl	-12(%rbp), %edx
 866 0019 4863D2   		movslq	%edx, %rdx
 867 001c 48C1E203 		salq	$3, %rdx
 868 0020 4801D0   		addq	%rdx, %rax
 869 0023 F20F1000 		movsd	(%rax), %xmm0
 870 0027 5D       		popq	%rbp
 871              		.cfi_def_cfa 7, 8
 872 0028 C3       		ret
 873              		.cfi_endproc
 874              	.LFE1124:
 876              		.section	.text._ZN4Mesh7get_w_iEi,"axG",@progbits,_ZN4Mesh7get_w_iEi,comdat
 877              		.align 2
 878              		.weak	_ZN4Mesh7get_w_iEi
 880              	_ZN4Mesh7get_w_iEi:
 881              	.LFB1125:
  44:include/Mesh.h ****         double get_w_i( int i) {return w_i[i];};
 882              		.loc 3 44 0
 883              		.cfi_startproc
 884 0000 55       		pushq	%rbp
 885              		.cfi_def_cfa_offset 16
 886              		.cfi_offset 6, -16
 887 0001 4889E5   		movq	%rsp, %rbp
 888              		.cfi_def_cfa_register 6
 889 0004 48897DF8 		movq	%rdi, -8(%rbp)
 890 0008 8975F4   		movl	%esi, -12(%rbp)
 891              		.loc 3 44 0
 892 000b 488B45F8 		movq	-8(%rbp), %rax
 893 000f 488B8018 		movq	280(%rax), %rax
 893      010000
 894 0016 8B55F4   		movl	-12(%rbp), %edx
 895 0019 4863D2   		movslq	%edx, %rdx
 896 001c 48C1E203 		salq	$3, %rdx
 897 0020 4801D0   		addq	%rdx, %rax
 898 0023 F20F1000 		movsd	(%rax), %xmm0
 899 0027 5D       		popq	%rbp
 900              		.cfi_def_cfa 7, 8
 901 0028 C3       		ret
 902              		.cfi_endproc
 903              	.LFE1125:
 905              		.section	.text._ZN4Mesh7get_w_jEi,"axG",@progbits,_ZN4Mesh7get_w_jEi,comdat
 906              		.align 2
 907              		.weak	_ZN4Mesh7get_w_jEi
GAS LISTING /tmp/cc2K2nX4.s 			page 31


 909              	_ZN4Mesh7get_w_jEi:
 910              	.LFB1126:
  45:include/Mesh.h ****         double get_w_j( int i) {return w_j[i];};
 911              		.loc 3 45 0
 912              		.cfi_startproc
 913 0000 55       		pushq	%rbp
 914              		.cfi_def_cfa_offset 16
 915              		.cfi_offset 6, -16
 916 0001 4889E5   		movq	%rsp, %rbp
 917              		.cfi_def_cfa_register 6
 918 0004 48897DF8 		movq	%rdi, -8(%rbp)
 919 0008 8975F4   		movl	%esi, -12(%rbp)
 920              		.loc 3 45 0
 921 000b 488B45F8 		movq	-8(%rbp), %rax
 922 000f 488B8020 		movq	288(%rax), %rax
 922      010000
 923 0016 8B55F4   		movl	-12(%rbp), %edx
 924 0019 4863D2   		movslq	%edx, %rdx
 925 001c 48C1E203 		salq	$3, %rdx
 926 0020 4801D0   		addq	%rdx, %rax
 927 0023 F20F1000 		movsd	(%rax), %xmm0
 928 0027 5D       		popq	%rbp
 929              		.cfi_def_cfa 7, 8
 930 0028 C3       		ret
 931              		.cfi_endproc
 932              	.LFE1126:
 934              		.section	.text._ZN4Mesh7get_w_kEi,"axG",@progbits,_ZN4Mesh7get_w_kEi,comdat
 935              		.align 2
 936              		.weak	_ZN4Mesh7get_w_kEi
 938              	_ZN4Mesh7get_w_kEi:
 939              	.LFB1127:
  46:include/Mesh.h ****         double get_w_k( int i) {return w_k[i];};
 940              		.loc 3 46 0
 941              		.cfi_startproc
 942 0000 55       		pushq	%rbp
 943              		.cfi_def_cfa_offset 16
 944              		.cfi_offset 6, -16
 945 0001 4889E5   		movq	%rsp, %rbp
 946              		.cfi_def_cfa_register 6
 947 0004 48897DF8 		movq	%rdi, -8(%rbp)
 948 0008 8975F4   		movl	%esi, -12(%rbp)
 949              		.loc 3 46 0
 950 000b 488B45F8 		movq	-8(%rbp), %rax
 951 000f 488B8028 		movq	296(%rax), %rax
 951      010000
 952 0016 8B55F4   		movl	-12(%rbp), %edx
 953 0019 4863D2   		movslq	%edx, %rdx
 954 001c 48C1E203 		salq	$3, %rdx
 955 0020 4801D0   		addq	%rdx, %rax
 956 0023 F20F1000 		movsd	(%rax), %xmm0
 957 0027 5D       		popq	%rbp
 958              		.cfi_def_cfa 7, 8
 959 0028 C3       		ret
 960              		.cfi_endproc
 961              	.LFE1127:
 963              		.section	.text._ZN4Mesh7get_e_iEi,"axG",@progbits,_ZN4Mesh7get_e_iEi,comdat
 964              		.align 2
GAS LISTING /tmp/cc2K2nX4.s 			page 32


 965              		.weak	_ZN4Mesh7get_e_iEi
 967              	_ZN4Mesh7get_e_iEi:
 968              	.LFB1128:
  47:include/Mesh.h ****         double get_e_i( int i) {return e_i[i];};
 969              		.loc 3 47 0
 970              		.cfi_startproc
 971 0000 55       		pushq	%rbp
 972              		.cfi_def_cfa_offset 16
 973              		.cfi_offset 6, -16
 974 0001 4889E5   		movq	%rsp, %rbp
 975              		.cfi_def_cfa_register 6
 976 0004 48897DF8 		movq	%rdi, -8(%rbp)
 977 0008 8975F4   		movl	%esi, -12(%rbp)
 978              		.loc 3 47 0
 979 000b 488B45F8 		movq	-8(%rbp), %rax
 980 000f 488B8030 		movq	304(%rax), %rax
 980      010000
 981 0016 8B55F4   		movl	-12(%rbp), %edx
 982 0019 4863D2   		movslq	%edx, %rdx
 983 001c 48C1E203 		salq	$3, %rdx
 984 0020 4801D0   		addq	%rdx, %rax
 985 0023 F20F1000 		movsd	(%rax), %xmm0
 986 0027 5D       		popq	%rbp
 987              		.cfi_def_cfa 7, 8
 988 0028 C3       		ret
 989              		.cfi_endproc
 990              	.LFE1128:
 992              		.section	.text._ZN4Mesh7get_e_jEi,"axG",@progbits,_ZN4Mesh7get_e_jEi,comdat
 993              		.align 2
 994              		.weak	_ZN4Mesh7get_e_jEi
 996              	_ZN4Mesh7get_e_jEi:
 997              	.LFB1129:
  48:include/Mesh.h ****         double get_e_j( int i) {return e_j[i];};
 998              		.loc 3 48 0
 999              		.cfi_startproc
 1000 0000 55       		pushq	%rbp
 1001              		.cfi_def_cfa_offset 16
 1002              		.cfi_offset 6, -16
 1003 0001 4889E5   		movq	%rsp, %rbp
 1004              		.cfi_def_cfa_register 6
 1005 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1006 0008 8975F4   		movl	%esi, -12(%rbp)
 1007              		.loc 3 48 0
 1008 000b 488B45F8 		movq	-8(%rbp), %rax
 1009 000f 488B8038 		movq	312(%rax), %rax
 1009      010000
 1010 0016 8B55F4   		movl	-12(%rbp), %edx
 1011 0019 4863D2   		movslq	%edx, %rdx
 1012 001c 48C1E203 		salq	$3, %rdx
 1013 0020 4801D0   		addq	%rdx, %rax
 1014 0023 F20F1000 		movsd	(%rax), %xmm0
 1015 0027 5D       		popq	%rbp
 1016              		.cfi_def_cfa 7, 8
 1017 0028 C3       		ret
 1018              		.cfi_endproc
 1019              	.LFE1129:
 1021              		.section	.text._ZN4Mesh7get_e_kEi,"axG",@progbits,_ZN4Mesh7get_e_kEi,comdat
GAS LISTING /tmp/cc2K2nX4.s 			page 33


 1022              		.align 2
 1023              		.weak	_ZN4Mesh7get_e_kEi
 1025              	_ZN4Mesh7get_e_kEi:
 1026              	.LFB1130:
  49:include/Mesh.h ****         double get_e_k( int i) {return e_k[i];};
 1027              		.loc 3 49 0
 1028              		.cfi_startproc
 1029 0000 55       		pushq	%rbp
 1030              		.cfi_def_cfa_offset 16
 1031              		.cfi_offset 6, -16
 1032 0001 4889E5   		movq	%rsp, %rbp
 1033              		.cfi_def_cfa_register 6
 1034 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1035 0008 8975F4   		movl	%esi, -12(%rbp)
 1036              		.loc 3 49 0
 1037 000b 488B45F8 		movq	-8(%rbp), %rax
 1038 000f 488B8040 		movq	320(%rax), %rax
 1038      010000
 1039 0016 8B55F4   		movl	-12(%rbp), %edx
 1040 0019 4863D2   		movslq	%edx, %rdx
 1041 001c 48C1E203 		salq	$3, %rdx
 1042 0020 4801D0   		addq	%rdx, %rax
 1043 0023 F20F1000 		movsd	(%rax), %xmm0
 1044 0027 5D       		popq	%rbp
 1045              		.cfi_def_cfa 7, 8
 1046 0028 C3       		ret
 1047              		.cfi_endproc
 1048              	.LFE1130:
 1050              		.section	.text._ZN4Mesh10get_n_nodeEi,"axG",@progbits,_ZN4Mesh10get_n_nodeEi,comdat
 1051              		.align 2
 1052              		.weak	_ZN4Mesh10get_n_nodeEi
 1054              	_ZN4Mesh10get_n_nodeEi:
 1055              	.LFB1132:
  50:include/Mesh.h ****         double get_delta_t( int i) {return delta_t[i];};
  51:include/Mesh.h ****         int get_n_node( int i) {return n_node[i];};
 1056              		.loc 3 51 0
 1057              		.cfi_startproc
 1058 0000 55       		pushq	%rbp
 1059              		.cfi_def_cfa_offset 16
 1060              		.cfi_offset 6, -16
 1061 0001 4889E5   		movq	%rsp, %rbp
 1062              		.cfi_def_cfa_register 6
 1063 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1064 0008 8975F4   		movl	%esi, -12(%rbp)
 1065              		.loc 3 51 0
 1066 000b 488B45F8 		movq	-8(%rbp), %rax
 1067 000f 488B8050 		movq	336(%rax), %rax
 1067      010000
 1068 0016 8B55F4   		movl	-12(%rbp), %edx
 1069 0019 4863D2   		movslq	%edx, %rdx
 1070 001c 48C1E202 		salq	$2, %rdx
 1071 0020 4801D0   		addq	%rdx, %rax
 1072 0023 8B00     		movl	(%rax), %eax
 1073 0025 5D       		popq	%rbp
 1074              		.cfi_def_cfa 7, 8
 1075 0026 C3       		ret
 1076              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 34


 1077              	.LFE1132:
 1079              		.section	.text._ZN4Mesh10get_s_nodeEi,"axG",@progbits,_ZN4Mesh10get_s_nodeEi,comdat
 1080              		.align 2
 1081              		.weak	_ZN4Mesh10get_s_nodeEi
 1083              	_ZN4Mesh10get_s_nodeEi:
 1084              	.LFB1133:
  52:include/Mesh.h ****         int get_s_node( int i) {return s_node[i];};
 1085              		.loc 3 52 0
 1086              		.cfi_startproc
 1087 0000 55       		pushq	%rbp
 1088              		.cfi_def_cfa_offset 16
 1089              		.cfi_offset 6, -16
 1090 0001 4889E5   		movq	%rsp, %rbp
 1091              		.cfi_def_cfa_register 6
 1092 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1093 0008 8975F4   		movl	%esi, -12(%rbp)
 1094              		.loc 3 52 0
 1095 000b 488B45F8 		movq	-8(%rbp), %rax
 1096 000f 488B8058 		movq	344(%rax), %rax
 1096      010000
 1097 0016 8B55F4   		movl	-12(%rbp), %edx
 1098 0019 4863D2   		movslq	%edx, %rdx
 1099 001c 48C1E202 		salq	$2, %rdx
 1100 0020 4801D0   		addq	%rdx, %rax
 1101 0023 8B00     		movl	(%rax), %eax
 1102 0025 5D       		popq	%rbp
 1103              		.cfi_def_cfa 7, 8
 1104 0026 C3       		ret
 1105              		.cfi_endproc
 1106              	.LFE1133:
 1108              		.section	.text._ZN4Mesh10get_e_nodeEi,"axG",@progbits,_ZN4Mesh10get_e_nodeEi,comdat
 1109              		.align 2
 1110              		.weak	_ZN4Mesh10get_e_nodeEi
 1112              	_ZN4Mesh10get_e_nodeEi:
 1113              	.LFB1134:
  53:include/Mesh.h ****         int get_e_node( int i) {return e_node[i];};
 1114              		.loc 3 53 0
 1115              		.cfi_startproc
 1116 0000 55       		pushq	%rbp
 1117              		.cfi_def_cfa_offset 16
 1118              		.cfi_offset 6, -16
 1119 0001 4889E5   		movq	%rsp, %rbp
 1120              		.cfi_def_cfa_register 6
 1121 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1122 0008 8975F4   		movl	%esi, -12(%rbp)
 1123              		.loc 3 53 0
 1124 000b 488B45F8 		movq	-8(%rbp), %rax
 1125 000f 488B8060 		movq	352(%rax), %rax
 1125      010000
 1126 0016 8B55F4   		movl	-12(%rbp), %edx
 1127 0019 4863D2   		movslq	%edx, %rdx
 1128 001c 48C1E202 		salq	$2, %rdx
 1129 0020 4801D0   		addq	%rdx, %rax
 1130 0023 8B00     		movl	(%rax), %eax
 1131 0025 5D       		popq	%rbp
 1132              		.cfi_def_cfa 7, 8
 1133 0026 C3       		ret
GAS LISTING /tmp/cc2K2nX4.s 			page 35


 1134              		.cfi_endproc
 1135              	.LFE1134:
 1137              		.section	.text._ZN4Mesh10get_w_nodeEi,"axG",@progbits,_ZN4Mesh10get_w_nodeEi,comdat
 1138              		.align 2
 1139              		.weak	_ZN4Mesh10get_w_nodeEi
 1141              	_ZN4Mesh10get_w_nodeEi:
 1142              	.LFB1135:
  54:include/Mesh.h ****         int get_w_node( int i) {return w_node[i];};
 1143              		.loc 3 54 0
 1144              		.cfi_startproc
 1145 0000 55       		pushq	%rbp
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 6, -16
 1148 0001 4889E5   		movq	%rsp, %rbp
 1149              		.cfi_def_cfa_register 6
 1150 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1151 0008 8975F4   		movl	%esi, -12(%rbp)
 1152              		.loc 3 54 0
 1153 000b 488B45F8 		movq	-8(%rbp), %rax
 1154 000f 488B8068 		movq	360(%rax), %rax
 1154      010000
 1155 0016 8B55F4   		movl	-12(%rbp), %edx
 1156 0019 4863D2   		movslq	%edx, %rdx
 1157 001c 48C1E202 		salq	$2, %rdx
 1158 0020 4801D0   		addq	%rdx, %rax
 1159 0023 8B00     		movl	(%rax), %eax
 1160 0025 5D       		popq	%rbp
 1161              		.cfi_def_cfa 7, 8
 1162 0026 C3       		ret
 1163              		.cfi_endproc
 1164              	.LFE1135:
 1166              		.section	.text._ZN4Mesh15get_cell_volumeEi,"axG",@progbits,_ZN4Mesh15get_cell_volumeEi,comdat
 1167              		.align 2
 1168              		.weak	_ZN4Mesh15get_cell_volumeEi
 1170              	_ZN4Mesh15get_cell_volumeEi:
 1171              	.LFB1136:
  55:include/Mesh.h ****         double get_cell_volume( int i) {return cell_volume[i];};
 1172              		.loc 3 55 0
 1173              		.cfi_startproc
 1174 0000 55       		pushq	%rbp
 1175              		.cfi_def_cfa_offset 16
 1176              		.cfi_offset 6, -16
 1177 0001 4889E5   		movq	%rsp, %rbp
 1178              		.cfi_def_cfa_register 6
 1179 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1180 0008 8975F4   		movl	%esi, -12(%rbp)
 1181              		.loc 3 55 0
 1182 000b 488B45F8 		movq	-8(%rbp), %rax
 1183 000f 488B80D8 		movq	216(%rax), %rax
 1183      000000
 1184 0016 8B55F4   		movl	-12(%rbp), %edx
 1185 0019 4863D2   		movslq	%edx, %rdx
 1186 001c 48C1E203 		salq	$3, %rdx
 1187 0020 4801D0   		addq	%rdx, %rax
 1188 0023 F20F1000 		movsd	(%rax), %xmm0
 1189 0027 5D       		popq	%rbp
 1190              		.cfi_def_cfa 7, 8
GAS LISTING /tmp/cc2K2nX4.s 			page 36


 1191 0028 C3       		ret
 1192              		.cfi_endproc
 1193              	.LFE1136:
 1195              		.section	.text._ZN19Boundary_Conditions6get_bcEi,"axG",@progbits,_ZN19Boundary_Conditions6get_bcEi
 1196              		.align 2
 1197              		.weak	_ZN19Boundary_Conditions6get_bcEi
 1199              	_ZN19Boundary_Conditions6get_bcEi:
 1200              	.LFB1137:
 1201              		.file 4 "include/Boundary_Conditions.h"
   1:include/Boundary_Conditions.h **** #include "quad_bcs.h"
   2:include/Boundary_Conditions.h **** #include "quad_bcs_plus.h"
   3:include/Boundary_Conditions.h **** 
   4:include/Boundary_Conditions.h **** #ifndef BOUNDARY_CONDITIONS_H
   5:include/Boundary_Conditions.h **** #define BOUNDARY_CONDITIONS_H
   6:include/Boundary_Conditions.h **** 
   7:include/Boundary_Conditions.h **** 
   8:include/Boundary_Conditions.h **** class Boundary_Conditions
   9:include/Boundary_Conditions.h **** {
  10:include/Boundary_Conditions.h ****     public:
  11:include/Boundary_Conditions.h ****         Boundary_Conditions(int num_x, int num_y);
  12:include/Boundary_Conditions.h ****         virtual ~Boundary_Conditions();
  13:include/Boundary_Conditions.h ****         void assign_boundary_conditions(int num_x, int num_y, quad_bcs);
  14:include/Boundary_Conditions.h ****         void assign_boundary_conditions(int num_x, int num_y, quad_bcs_plus _bc);
  15:include/Boundary_Conditions.h ****         bool get_bc( int i) {return bc[i];};
 1202              		.loc 4 15 0
 1203              		.cfi_startproc
 1204 0000 55       		pushq	%rbp
 1205              		.cfi_def_cfa_offset 16
 1206              		.cfi_offset 6, -16
 1207 0001 4889E5   		movq	%rsp, %rbp
 1208              		.cfi_def_cfa_register 6
 1209 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1210 0008 8975F4   		movl	%esi, -12(%rbp)
 1211              		.loc 4 15 0
 1212 000b 488B45F8 		movq	-8(%rbp), %rax
 1213 000f 488B5008 		movq	8(%rax), %rdx
 1214 0013 8B45F4   		movl	-12(%rbp), %eax
 1215 0016 4898     		cltq
 1216 0018 4801D0   		addq	%rdx, %rax
 1217 001b 0FB600   		movzbl	(%rax), %eax
 1218 001e 5D       		popq	%rbp
 1219              		.cfi_def_cfa 7, 8
 1220 001f C3       		ret
 1221              		.cfi_endproc
 1222              	.LFE1137:
 1224              		.section	.text._ZN19Boundary_Conditions14get_bc_includeEi,"axG",@progbits,_ZN19Boundary_Conditions
 1225              		.align 2
 1226              		.weak	_ZN19Boundary_Conditions14get_bc_includeEi
 1228              	_ZN19Boundary_Conditions14get_bc_includeEi:
 1229              	.LFB1138:
  16:include/Boundary_Conditions.h ****         bool get_bc_include( int i) {return bc_include[i];};
 1230              		.loc 4 16 0
 1231              		.cfi_startproc
 1232 0000 55       		pushq	%rbp
 1233              		.cfi_def_cfa_offset 16
 1234              		.cfi_offset 6, -16
 1235 0001 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 37


 1236              		.cfi_def_cfa_register 6
 1237 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1238 0008 8975F4   		movl	%esi, -12(%rbp)
 1239              		.loc 4 16 0
 1240 000b 488B45F8 		movq	-8(%rbp), %rax
 1241 000f 488B5010 		movq	16(%rax), %rdx
 1242 0013 8B45F4   		movl	-12(%rbp), %eax
 1243 0016 4898     		cltq
 1244 0018 4801D0   		addq	%rdx, %rax
 1245 001b 0FB600   		movzbl	(%rax), %eax
 1246 001e 5D       		popq	%rbp
 1247              		.cfi_def_cfa 7, 8
 1248 001f C3       		ret
 1249              		.cfi_endproc
 1250              	.LFE1138:
 1252              		.section	.text._ZN10vector_varD2Ev,"axG",@progbits,_ZN10vector_varD5Ev,comdat
 1253              		.align 2
 1254              		.weak	_ZN10vector_varD2Ev
 1256              	_ZN10vector_varD2Ev:
 1257              	.LFB1147:
 1258              		.file 5 "include/vector_var.h"
   1:include/vector_var.h **** #ifndef VECTOR_VAR_H
   2:include/vector_var.h **** #define VECTOR_VAR_H
   3:include/vector_var.h **** 
   4:include/vector_var.h **** 
   5:include/vector_var.h **** class vector_var
   6:include/vector_var.h **** {
   7:include/vector_var.h ****     public:
   8:include/vector_var.h ****         vector_var();
   9:include/vector_var.h ****         vector_var(double _x, double _y, double _z);
  10:include/vector_var.h ****         virtual ~vector_var(){};
 1259              		.loc 5 10 0
 1260              		.cfi_startproc
 1261 0000 55       		pushq	%rbp
 1262              		.cfi_def_cfa_offset 16
 1263              		.cfi_offset 6, -16
 1264 0001 4889E5   		movq	%rsp, %rbp
 1265              		.cfi_def_cfa_register 6
 1266 0004 4883EC10 		subq	$16, %rsp
 1267 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1268              	.LBB2:
 1269              		.loc 5 10 0
 1270 000c BA000000 		movl	$_ZTV10vector_var+16, %edx
 1270      00
 1271 0011 488B45F8 		movq	-8(%rbp), %rax
 1272 0015 488910   		movq	%rdx, (%rax)
 1273              	.LBE2:
 1274 0018 B8000000 		movl	$0, %eax
 1274      00
 1275 001d 85C0     		testl	%eax, %eax
 1276 001f 740C     		je	.L89
 1277              		.loc 5 10 0 is_stmt 0 discriminator 2
 1278 0021 488B45F8 		movq	-8(%rbp), %rax
 1279 0025 4889C7   		movq	%rax, %rdi
 1280 0028 E8000000 		call	_ZdlPv
 1280      00
 1281              	.L89:
GAS LISTING /tmp/cc2K2nX4.s 			page 38


 1282              		.loc 5 10 0
 1283 002d C9       		leave
 1284              		.cfi_def_cfa 7, 8
 1285 002e C3       		ret
 1286              		.cfi_endproc
 1287              	.LFE1147:
 1289              		.weak	_ZN10vector_varD1Ev
 1290              		.set	_ZN10vector_varD1Ev,_ZN10vector_varD2Ev
 1291              		.section	.text._ZN10vector_varD0Ev,"axG",@progbits,_ZN10vector_varD5Ev,comdat
 1292              		.align 2
 1293              		.weak	_ZN10vector_varD0Ev
 1295              	_ZN10vector_varD0Ev:
 1296              	.LFB1149:
 1297              		.loc 5 10 0 is_stmt 1
 1298              		.cfi_startproc
 1299 0000 55       		pushq	%rbp
 1300              		.cfi_def_cfa_offset 16
 1301              		.cfi_offset 6, -16
 1302 0001 4889E5   		movq	%rsp, %rbp
 1303              		.cfi_def_cfa_register 6
 1304 0004 4883EC10 		subq	$16, %rsp
 1305 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1306              		.loc 5 10 0
 1307 000c 488B45F8 		movq	-8(%rbp), %rax
 1308 0010 4889C7   		movq	%rax, %rdi
 1309 0013 E8000000 		call	_ZN10vector_varD1Ev
 1309      00
 1310 0018 488B45F8 		movq	-8(%rbp), %rax
 1311 001c 4889C7   		movq	%rax, %rdi
 1312 001f E8000000 		call	_ZdlPv
 1312      00
 1313 0024 C9       		leave
 1314              		.cfi_def_cfa 7, 8
 1315 0025 C3       		ret
 1316              		.cfi_endproc
 1317              	.LFE1149:
 1319              		.section	.text._ZN8Solution7get_rhoEi,"axG",@progbits,_ZN8Solution7get_rhoEi,comdat
 1320              		.align 2
 1321              		.weak	_ZN8Solution7get_rhoEi
 1323              	_ZN8Solution7get_rhoEi:
 1324              	.LFB1150:
 1325              		.file 6 "include/Solution.h"
   1:include/Solution.h **** #include "Mesh.h"
   2:include/Solution.h **** #include "vector_var.h"
   3:include/Solution.h **** #include <string>
   4:include/Solution.h **** #include "global_variables.h"
   5:include/Solution.h **** #include "domain_geometry.h"
   6:include/Solution.h **** #include <Boundary_Conditions.h>
   7:include/Solution.h **** #include "initial_conditions.h"
   8:include/Solution.h **** #ifndef SOLUTION_H
   9:include/Solution.h **** #define SOLUTION_H
  10:include/Solution.h **** 
  11:include/Solution.h **** 
  12:include/Solution.h **** class Solution
  13:include/Solution.h **** {
  14:include/Solution.h ****     public:
  15:include/Solution.h ****         Solution(int _total_nodes);
GAS LISTING /tmp/cc2K2nX4.s 			page 39


  16:include/Solution.h ****         Solution();
  17:include/Solution.h ****         virtual ~Solution();
  18:include/Solution.h ****         double get_rho( int i) {return rho[i];};
 1326              		.loc 6 18 0
 1327              		.cfi_startproc
 1328 0000 55       		pushq	%rbp
 1329              		.cfi_def_cfa_offset 16
 1330              		.cfi_offset 6, -16
 1331 0001 4889E5   		movq	%rsp, %rbp
 1332              		.cfi_def_cfa_register 6
 1333 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1334 0008 8975F4   		movl	%esi, -12(%rbp)
 1335              		.loc 6 18 0
 1336 000b 488B45F8 		movq	-8(%rbp), %rax
 1337 000f 488B4008 		movq	8(%rax), %rax
 1338 0013 8B55F4   		movl	-12(%rbp), %edx
 1339 0016 4863D2   		movslq	%edx, %rdx
 1340 0019 48C1E203 		salq	$3, %rdx
 1341 001d 4801D0   		addq	%rdx, %rax
 1342 0020 F20F1000 		movsd	(%rax), %xmm0
 1343 0024 5D       		popq	%rbp
 1344              		.cfi_def_cfa 7, 8
 1345 0025 C3       		ret
 1346              		.cfi_endproc
 1347              	.LFE1150:
 1349              		.section	.text._ZN8Solution5get_uEi,"axG",@progbits,_ZN8Solution5get_uEi,comdat
 1350              		.align 2
 1351              		.weak	_ZN8Solution5get_uEi
 1353              	_ZN8Solution5get_uEi:
 1354              	.LFB1151:
  19:include/Solution.h ****         double get_u( int i) {return u[i];};
 1355              		.loc 6 19 0
 1356              		.cfi_startproc
 1357 0000 55       		pushq	%rbp
 1358              		.cfi_def_cfa_offset 16
 1359              		.cfi_offset 6, -16
 1360 0001 4889E5   		movq	%rsp, %rbp
 1361              		.cfi_def_cfa_register 6
 1362 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1363 0008 8975F4   		movl	%esi, -12(%rbp)
 1364              		.loc 6 19 0
 1365 000b 488B45F8 		movq	-8(%rbp), %rax
 1366 000f 488B4010 		movq	16(%rax), %rax
 1367 0013 8B55F4   		movl	-12(%rbp), %edx
 1368 0016 4863D2   		movslq	%edx, %rdx
 1369 0019 48C1E203 		salq	$3, %rdx
 1370 001d 4801D0   		addq	%rdx, %rax
 1371 0020 F20F1000 		movsd	(%rax), %xmm0
 1372 0024 5D       		popq	%rbp
 1373              		.cfi_def_cfa 7, 8
 1374 0025 C3       		ret
 1375              		.cfi_endproc
 1376              	.LFE1151:
 1378              		.section	.text._ZN8Solution5get_vEi,"axG",@progbits,_ZN8Solution5get_vEi,comdat
 1379              		.align 2
 1380              		.weak	_ZN8Solution5get_vEi
 1382              	_ZN8Solution5get_vEi:
GAS LISTING /tmp/cc2K2nX4.s 			page 40


 1383              	.LFB1152:
  20:include/Solution.h ****         double get_v( int i) {return v[i];};
 1384              		.loc 6 20 0
 1385              		.cfi_startproc
 1386 0000 55       		pushq	%rbp
 1387              		.cfi_def_cfa_offset 16
 1388              		.cfi_offset 6, -16
 1389 0001 4889E5   		movq	%rsp, %rbp
 1390              		.cfi_def_cfa_register 6
 1391 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1392 0008 8975F4   		movl	%esi, -12(%rbp)
 1393              		.loc 6 20 0
 1394 000b 488B45F8 		movq	-8(%rbp), %rax
 1395 000f 488B4018 		movq	24(%rax), %rax
 1396 0013 8B55F4   		movl	-12(%rbp), %edx
 1397 0016 4863D2   		movslq	%edx, %rdx
 1398 0019 48C1E203 		salq	$3, %rdx
 1399 001d 4801D0   		addq	%rdx, %rax
 1400 0020 F20F1000 		movsd	(%rax), %xmm0
 1401 0024 5D       		popq	%rbp
 1402              		.cfi_def_cfa 7, 8
 1403 0025 C3       		ret
 1404              		.cfi_endproc
 1405              	.LFE1152:
 1407              		.section	.text._ZN8Solution15get_average_rhoEv,"axG",@progbits,_ZN8Solution15get_average_rhoEv,com
 1408              		.align 2
 1409              		.weak	_ZN8Solution15get_average_rhoEv
 1411              	_ZN8Solution15get_average_rhoEv:
 1412              	.LFB1154:
  21:include/Solution.h ****         double get_w( int i) {return w[i];};
  22:include/Solution.h ****         double get_average_rho (){return average_rho;};
 1413              		.loc 6 22 0
 1414              		.cfi_startproc
 1415 0000 55       		pushq	%rbp
 1416              		.cfi_def_cfa_offset 16
 1417              		.cfi_offset 6, -16
 1418 0001 4889E5   		movq	%rsp, %rbp
 1419              		.cfi_def_cfa_register 6
 1420 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1421              		.loc 6 22 0
 1422 0008 488B45F8 		movq	-8(%rbp), %rax
 1423 000c F20F1040 		movsd	64(%rax), %xmm0
 1423      40
 1424 0011 5D       		popq	%rbp
 1425              		.cfi_def_cfa 7, 8
 1426 0012 C3       		ret
 1427              		.cfi_endproc
 1428              	.LFE1154:
 1430              		.section	.text._ZN8Solution15set_average_rhoEd,"axG",@progbits,_ZN8Solution15set_average_rhoEd,com
 1431              		.align 2
 1432              		.weak	_ZN8Solution15set_average_rhoEd
 1434              	_ZN8Solution15set_average_rhoEd:
 1435              	.LFB1157:
  23:include/Solution.h ****         double get_u_exact( int i) {return u_exact[i];};
  24:include/Solution.h ****         double get_u_error( int i) {return error[i];};
  25:include/Solution.h ****         void set_average_rho(double arg) { average_rho = arg;};
 1436              		.loc 6 25 0
GAS LISTING /tmp/cc2K2nX4.s 			page 41


 1437              		.cfi_startproc
 1438 0000 55       		pushq	%rbp
 1439              		.cfi_def_cfa_offset 16
 1440              		.cfi_offset 6, -16
 1441 0001 4889E5   		movq	%rsp, %rbp
 1442              		.cfi_def_cfa_register 6
 1443 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1444 0008 F20F1145 		movsd	%xmm0, -16(%rbp)
 1444      F0
 1445              		.loc 6 25 0
 1446 000d 488B45F8 		movq	-8(%rbp), %rax
 1447 0011 F20F1045 		movsd	-16(%rbp), %xmm0
 1447      F0
 1448 0016 F20F1140 		movsd	%xmm0, 64(%rax)
 1448      40
 1449 001b 90       		nop
 1450 001c 5D       		popq	%rbp
 1451              		.cfi_def_cfa 7, 8
 1452 001d C3       		ret
 1453              		.cfi_endproc
 1454              	.LFE1157:
 1456              		.section	.text._ZN8Solution7set_rhoEid,"axG",@progbits,_ZN8Solution7set_rhoEid,comdat
 1457              		.align 2
 1458              		.weak	_ZN8Solution7set_rhoEid
 1460              	_ZN8Solution7set_rhoEid:
 1461              	.LFB1158:
  26:include/Solution.h ****         void set_rho( int i,double arg) {rho[i] =arg;};
 1462              		.loc 6 26 0
 1463              		.cfi_startproc
 1464 0000 55       		pushq	%rbp
 1465              		.cfi_def_cfa_offset 16
 1466              		.cfi_offset 6, -16
 1467 0001 4889E5   		movq	%rsp, %rbp
 1468              		.cfi_def_cfa_register 6
 1469 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1470 0008 8975F4   		movl	%esi, -12(%rbp)
 1471 000b F20F1145 		movsd	%xmm0, -24(%rbp)
 1471      E8
 1472              		.loc 6 26 0
 1473 0010 488B45F8 		movq	-8(%rbp), %rax
 1474 0014 488B4008 		movq	8(%rax), %rax
 1475 0018 8B55F4   		movl	-12(%rbp), %edx
 1476 001b 4863D2   		movslq	%edx, %rdx
 1477 001e 48C1E203 		salq	$3, %rdx
 1478 0022 4801D0   		addq	%rdx, %rax
 1479 0025 F20F1045 		movsd	-24(%rbp), %xmm0
 1479      E8
 1480 002a F20F1100 		movsd	%xmm0, (%rax)
 1481 002e 90       		nop
 1482 002f 5D       		popq	%rbp
 1483              		.cfi_def_cfa 7, 8
 1484 0030 C3       		ret
 1485              		.cfi_endproc
 1486              	.LFE1158:
 1488              		.section	.text._ZN8Solution5set_uEid,"axG",@progbits,_ZN8Solution5set_uEid,comdat
 1489              		.align 2
 1490              		.weak	_ZN8Solution5set_uEid
GAS LISTING /tmp/cc2K2nX4.s 			page 42


 1492              	_ZN8Solution5set_uEid:
 1493              	.LFB1159:
  27:include/Solution.h ****         void set_u( int i,double arg) {u[i] =arg;};
 1494              		.loc 6 27 0
 1495              		.cfi_startproc
 1496 0000 55       		pushq	%rbp
 1497              		.cfi_def_cfa_offset 16
 1498              		.cfi_offset 6, -16
 1499 0001 4889E5   		movq	%rsp, %rbp
 1500              		.cfi_def_cfa_register 6
 1501 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1502 0008 8975F4   		movl	%esi, -12(%rbp)
 1503 000b F20F1145 		movsd	%xmm0, -24(%rbp)
 1503      E8
 1504              		.loc 6 27 0
 1505 0010 488B45F8 		movq	-8(%rbp), %rax
 1506 0014 488B4010 		movq	16(%rax), %rax
 1507 0018 8B55F4   		movl	-12(%rbp), %edx
 1508 001b 4863D2   		movslq	%edx, %rdx
 1509 001e 48C1E203 		salq	$3, %rdx
 1510 0022 4801D0   		addq	%rdx, %rax
 1511 0025 F20F1045 		movsd	-24(%rbp), %xmm0
 1511      E8
 1512 002a F20F1100 		movsd	%xmm0, (%rax)
 1513 002e 90       		nop
 1514 002f 5D       		popq	%rbp
 1515              		.cfi_def_cfa 7, 8
 1516 0030 C3       		ret
 1517              		.cfi_endproc
 1518              	.LFE1159:
 1520              		.section	.text._ZN8Solution5set_vEid,"axG",@progbits,_ZN8Solution5set_vEid,comdat
 1521              		.align 2
 1522              		.weak	_ZN8Solution5set_vEid
 1524              	_ZN8Solution5set_vEid:
 1525              	.LFB1160:
  28:include/Solution.h ****         void set_v( int i,double arg) {v[i] =arg;};
 1526              		.loc 6 28 0
 1527              		.cfi_startproc
 1528 0000 55       		pushq	%rbp
 1529              		.cfi_def_cfa_offset 16
 1530              		.cfi_offset 6, -16
 1531 0001 4889E5   		movq	%rsp, %rbp
 1532              		.cfi_def_cfa_register 6
 1533 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1534 0008 8975F4   		movl	%esi, -12(%rbp)
 1535 000b F20F1145 		movsd	%xmm0, -24(%rbp)
 1535      E8
 1536              		.loc 6 28 0
 1537 0010 488B45F8 		movq	-8(%rbp), %rax
 1538 0014 488B4018 		movq	24(%rax), %rax
 1539 0018 8B55F4   		movl	-12(%rbp), %edx
 1540 001b 4863D2   		movslq	%edx, %rdx
 1541 001e 48C1E203 		salq	$3, %rdx
 1542 0022 4801D0   		addq	%rdx, %rax
 1543 0025 F20F1045 		movsd	-24(%rbp), %xmm0
 1543      E8
 1544 002a F20F1100 		movsd	%xmm0, (%rax)
GAS LISTING /tmp/cc2K2nX4.s 			page 43


 1545 002e 90       		nop
 1546 002f 5D       		popq	%rbp
 1547              		.cfi_def_cfa 7, 8
 1548 0030 C3       		ret
 1549              		.cfi_endproc
 1550              	.LFE1160:
 1552              		.section	.text._ZN8Solution7add_rhoEid,"axG",@progbits,_ZN8Solution7add_rhoEid,comdat
 1553              		.align 2
 1554              		.weak	_ZN8Solution7add_rhoEid
 1556              	_ZN8Solution7add_rhoEid:
 1557              	.LFB1162:
  29:include/Solution.h ****         void set_w( int i,double arg) {w[i] =arg;};
  30:include/Solution.h ****         void assign_pressure_gradient( vector_var _gradient, vector_var gradient_origin,
  31:include/Solution.h ****             vector_var origin_magnitude,Mesh &Mesh);
  32:include/Solution.h ****         void assign_velocity_gradient( vector_var _gradient, vector_var gradient_origin,
  33:include/Solution.h ****             vector_var origin_magnitude,Mesh &Mesh);
  34:include/Solution.h ****         void update ( double rho, double u, double v, double w , int i);
  35:include/Solution.h **** 
  36:include/Solution.h ****         void output (std::string output_location, global_variables &globals,
  37:include/Solution.h ****         domain_geometry &geometry) ;
  38:include/Solution.h ****         void clone( Solution &soln_a);
  39:include/Solution.h ****         void post_process(double pre_condition_gamma, Mesh &mesh, global_variables &globals,
  40:include/Solution.h ****                           initial_conditions &initials);
  41:include/Solution.h ****         void add_rho(int i, double arg) { rho[i] = rho[i] + arg;};
 1558              		.loc 6 41 0
 1559              		.cfi_startproc
 1560 0000 55       		pushq	%rbp
 1561              		.cfi_def_cfa_offset 16
 1562              		.cfi_offset 6, -16
 1563 0001 4889E5   		movq	%rsp, %rbp
 1564              		.cfi_def_cfa_register 6
 1565 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1566 0008 8975F4   		movl	%esi, -12(%rbp)
 1567 000b F20F1145 		movsd	%xmm0, -24(%rbp)
 1567      E8
 1568              		.loc 6 41 0
 1569 0010 488B45F8 		movq	-8(%rbp), %rax
 1570 0014 488B4008 		movq	8(%rax), %rax
 1571 0018 8B55F4   		movl	-12(%rbp), %edx
 1572 001b 4863D2   		movslq	%edx, %rdx
 1573 001e 48C1E203 		salq	$3, %rdx
 1574 0022 4801C2   		addq	%rax, %rdx
 1575 0025 488B45F8 		movq	-8(%rbp), %rax
 1576 0029 488B4008 		movq	8(%rax), %rax
 1577 002d 8B4DF4   		movl	-12(%rbp), %ecx
 1578 0030 4863C9   		movslq	%ecx, %rcx
 1579 0033 48C1E103 		salq	$3, %rcx
 1580 0037 4801C8   		addq	%rcx, %rax
 1581 003a F20F1000 		movsd	(%rax), %xmm0
 1582 003e F20F5845 		addsd	-24(%rbp), %xmm0
 1582      E8
 1583 0043 F20F1102 		movsd	%xmm0, (%rdx)
 1584 0047 90       		nop
 1585 0048 5D       		popq	%rbp
 1586              		.cfi_def_cfa 7, 8
 1587 0049 C3       		ret
 1588              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 44


 1589              	.LFE1162:
 1591              		.section	.text._ZN8Solution5add_uEid,"axG",@progbits,_ZN8Solution5add_uEid,comdat
 1592              		.align 2
 1593              		.weak	_ZN8Solution5add_uEid
 1595              	_ZN8Solution5add_uEid:
 1596              	.LFB1163:
  42:include/Solution.h ****         void add_u(int i, double arg) { u[i] = u[i] + arg;}
 1597              		.loc 6 42 0
 1598              		.cfi_startproc
 1599 0000 55       		pushq	%rbp
 1600              		.cfi_def_cfa_offset 16
 1601              		.cfi_offset 6, -16
 1602 0001 4889E5   		movq	%rsp, %rbp
 1603              		.cfi_def_cfa_register 6
 1604 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1605 0008 8975F4   		movl	%esi, -12(%rbp)
 1606 000b F20F1145 		movsd	%xmm0, -24(%rbp)
 1606      E8
 1607              		.loc 6 42 0
 1608 0010 488B45F8 		movq	-8(%rbp), %rax
 1609 0014 488B4010 		movq	16(%rax), %rax
 1610 0018 8B55F4   		movl	-12(%rbp), %edx
 1611 001b 4863D2   		movslq	%edx, %rdx
 1612 001e 48C1E203 		salq	$3, %rdx
 1613 0022 4801C2   		addq	%rax, %rdx
 1614 0025 488B45F8 		movq	-8(%rbp), %rax
 1615 0029 488B4010 		movq	16(%rax), %rax
 1616 002d 8B4DF4   		movl	-12(%rbp), %ecx
 1617 0030 4863C9   		movslq	%ecx, %rcx
 1618 0033 48C1E103 		salq	$3, %rcx
 1619 0037 4801C8   		addq	%rcx, %rax
 1620 003a F20F1000 		movsd	(%rax), %xmm0
 1621 003e F20F5845 		addsd	-24(%rbp), %xmm0
 1621      E8
 1622 0043 F20F1102 		movsd	%xmm0, (%rdx)
 1623 0047 90       		nop
 1624 0048 5D       		popq	%rbp
 1625              		.cfi_def_cfa 7, 8
 1626 0049 C3       		ret
 1627              		.cfi_endproc
 1628              	.LFE1163:
 1630              		.section	.text._ZN8Solution5add_vEid,"axG",@progbits,_ZN8Solution5add_vEid,comdat
 1631              		.align 2
 1632              		.weak	_ZN8Solution5add_vEid
 1634              	_ZN8Solution5add_vEid:
 1635              	.LFB1164:
  43:include/Solution.h ****         void add_v (int i , double arg) {v[i] = v[i] + arg;}
 1636              		.loc 6 43 0
 1637              		.cfi_startproc
 1638 0000 55       		pushq	%rbp
 1639              		.cfi_def_cfa_offset 16
 1640              		.cfi_offset 6, -16
 1641 0001 4889E5   		movq	%rsp, %rbp
 1642              		.cfi_def_cfa_register 6
 1643 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1644 0008 8975F4   		movl	%esi, -12(%rbp)
 1645 000b F20F1145 		movsd	%xmm0, -24(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 45


 1645      E8
 1646              		.loc 6 43 0
 1647 0010 488B45F8 		movq	-8(%rbp), %rax
 1648 0014 488B4018 		movq	24(%rax), %rax
 1649 0018 8B55F4   		movl	-12(%rbp), %edx
 1650 001b 4863D2   		movslq	%edx, %rdx
 1651 001e 48C1E203 		salq	$3, %rdx
 1652 0022 4801C2   		addq	%rax, %rdx
 1653 0025 488B45F8 		movq	-8(%rbp), %rax
 1654 0029 488B4018 		movq	24(%rax), %rax
 1655 002d 8B4DF4   		movl	-12(%rbp), %ecx
 1656 0030 4863C9   		movslq	%ecx, %rcx
 1657 0033 48C1E103 		salq	$3, %rcx
 1658 0037 4801C8   		addq	%rcx, %rax
 1659 003a F20F1000 		movsd	(%rax), %xmm0
 1660 003e F20F5845 		addsd	-24(%rbp), %xmm0
 1660      E8
 1661 0043 F20F1102 		movsd	%xmm0, (%rdx)
 1662 0047 90       		nop
 1663 0048 5D       		popq	%rbp
 1664              		.cfi_def_cfa 7, 8
 1665 0049 C3       		ret
 1666              		.cfi_endproc
 1667              	.LFE1164:
 1669              		.section	.text._ZN15external_forces9get_forceEi,"axG",@progbits,_ZN15external_forces9get_forceEi,c
 1670              		.align 2
 1671              		.weak	_ZN15external_forces9get_forceEi
 1673              	_ZN15external_forces9get_forceEi:
 1674              	.LFB1166:
 1675              		.file 7 "include/external_forces.h"
   1:include/external_forces.h **** #ifndef EXTERNAL_FORCES_H
   2:include/external_forces.h **** #define EXTERNAL_FORCES_H
   3:include/external_forces.h **** 
   4:include/external_forces.h **** 
   5:include/external_forces.h **** class external_forces
   6:include/external_forces.h **** {
   7:include/external_forces.h ****     public:
   8:include/external_forces.h ****         external_forces(int _total_nodes);
   9:include/external_forces.h ****         virtual ~external_forces();
  10:include/external_forces.h ****         void set_uniform_force(double magnitude);
  11:include/external_forces.h ****         double get_force( int i) {return force[i];};
 1676              		.loc 7 11 0
 1677              		.cfi_startproc
 1678 0000 55       		pushq	%rbp
 1679              		.cfi_def_cfa_offset 16
 1680              		.cfi_offset 6, -16
 1681 0001 4889E5   		movq	%rsp, %rbp
 1682              		.cfi_def_cfa_register 6
 1683 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1684 0008 8975F4   		movl	%esi, -12(%rbp)
 1685              		.loc 7 11 0
 1686 000b 488B45F8 		movq	-8(%rbp), %rax
 1687 000f 488B4008 		movq	8(%rax), %rax
 1688 0013 8B55F4   		movl	-12(%rbp), %edx
 1689 0016 4863D2   		movslq	%edx, %rdx
 1690 0019 48C1E203 		salq	$3, %rdx
 1691 001d 4801D0   		addq	%rdx, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 46


 1692 0020 F20F1000 		movsd	(%rax), %xmm0
 1693 0024 5D       		popq	%rbp
 1694              		.cfi_def_cfa 7, 8
 1695 0025 C3       		ret
 1696              		.cfi_endproc
 1697              	.LFE1166:
 1699              		.local	_ZStL8__ioinit
 1700              		.comm	_ZStL8__ioinit,1,1
 1701              		.section	.text._ZNSt14numeric_limitsIdE7epsilonEv,"axG",@progbits,_ZNSt14numeric_limitsIdE7epsilon
 1702              		.weak	_ZNSt14numeric_limitsIdE7epsilonEv
 1704              	_ZNSt14numeric_limitsIdE7epsilonEv:
 1705              	.LFB2330:
 1706              		.file 8 "/usr/include/c++/5/limits"
   1:/usr/include/c++/5/limits **** // The template and inlines for the numeric_limits classes. -*- C++ -*-
   2:/usr/include/c++/5/limits **** 
   3:/usr/include/c++/5/limits **** // Copyright (C) 1999-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/limits **** //
   5:/usr/include/c++/5/limits **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/limits **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/limits **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/limits **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/limits **** // any later version.
  10:/usr/include/c++/5/limits **** 
  11:/usr/include/c++/5/limits **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/limits **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/limits **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/limits **** // GNU General Public License for more details.
  15:/usr/include/c++/5/limits **** 
  16:/usr/include/c++/5/limits **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/limits **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/limits **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/limits **** 
  20:/usr/include/c++/5/limits **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/limits **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/limits **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/limits **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/limits **** 
  25:/usr/include/c++/5/limits **** /** @file include/limits
  26:/usr/include/c++/5/limits ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/5/limits ****  */
  28:/usr/include/c++/5/limits **** 
  29:/usr/include/c++/5/limits **** // Note: this is not a conforming implementation.
  30:/usr/include/c++/5/limits **** // Written by Gabriel Dos Reis <gdr@codesourcery.com>
  31:/usr/include/c++/5/limits **** 
  32:/usr/include/c++/5/limits **** //
  33:/usr/include/c++/5/limits **** // ISO 14882:1998
  34:/usr/include/c++/5/limits **** // 18.2.1
  35:/usr/include/c++/5/limits **** //
  36:/usr/include/c++/5/limits **** 
  37:/usr/include/c++/5/limits **** #ifndef _GLIBCXX_NUMERIC_LIMITS
  38:/usr/include/c++/5/limits **** #define _GLIBCXX_NUMERIC_LIMITS 1
  39:/usr/include/c++/5/limits **** 
  40:/usr/include/c++/5/limits **** #pragma GCC system_header
  41:/usr/include/c++/5/limits **** 
  42:/usr/include/c++/5/limits **** #include <bits/c++config.h>
  43:/usr/include/c++/5/limits **** 
  44:/usr/include/c++/5/limits **** //
GAS LISTING /tmp/cc2K2nX4.s 			page 47


  45:/usr/include/c++/5/limits **** // The numeric_limits<> traits document implementation-defined aspects
  46:/usr/include/c++/5/limits **** // of fundamental arithmetic data types (integers and floating points).
  47:/usr/include/c++/5/limits **** // From Standard C++ point of view, there are 14 such types:
  48:/usr/include/c++/5/limits **** //   * integers
  49:/usr/include/c++/5/limits **** //         bool							(1)
  50:/usr/include/c++/5/limits **** //         char, signed char, unsigned char, wchar_t            (4)
  51:/usr/include/c++/5/limits **** //         short, unsigned short				(2)
  52:/usr/include/c++/5/limits **** //         int, unsigned					(2)
  53:/usr/include/c++/5/limits **** //         long, unsigned long					(2)
  54:/usr/include/c++/5/limits **** //
  55:/usr/include/c++/5/limits **** //   * floating points
  56:/usr/include/c++/5/limits **** //         float						(1)
  57:/usr/include/c++/5/limits **** //         double						(1)
  58:/usr/include/c++/5/limits **** //         long double						(1)
  59:/usr/include/c++/5/limits **** //
  60:/usr/include/c++/5/limits **** // GNU C++ understands (where supported by the host C-library)
  61:/usr/include/c++/5/limits **** //   * integer
  62:/usr/include/c++/5/limits **** //         long long, unsigned long long			(2)
  63:/usr/include/c++/5/limits **** //
  64:/usr/include/c++/5/limits **** // which brings us to 16 fundamental arithmetic data types in GNU C++.
  65:/usr/include/c++/5/limits **** //
  66:/usr/include/c++/5/limits **** //
  67:/usr/include/c++/5/limits **** // Since a numeric_limits<> is a bit tricky to get right, we rely on
  68:/usr/include/c++/5/limits **** // an interface composed of macros which should be defined in config/os
  69:/usr/include/c++/5/limits **** // or config/cpu when they differ from the generic (read arbitrary)
  70:/usr/include/c++/5/limits **** // definitions given here.
  71:/usr/include/c++/5/limits **** //
  72:/usr/include/c++/5/limits **** 
  73:/usr/include/c++/5/limits **** // These values can be overridden in the target configuration file.
  74:/usr/include/c++/5/limits **** // The default values are appropriate for many 32-bit targets.
  75:/usr/include/c++/5/limits **** 
  76:/usr/include/c++/5/limits **** // GCC only intrinsically supports modulo integral types.  The only remaining
  77:/usr/include/c++/5/limits **** // integral exceptional values is division by zero.  Only targets that do not
  78:/usr/include/c++/5/limits **** // signal division by zero in some "hard to ignore" way should use false.
  79:/usr/include/c++/5/limits **** #ifndef __glibcxx_integral_traps
  80:/usr/include/c++/5/limits **** # define __glibcxx_integral_traps true
  81:/usr/include/c++/5/limits **** #endif
  82:/usr/include/c++/5/limits **** 
  83:/usr/include/c++/5/limits **** // float
  84:/usr/include/c++/5/limits **** //
  85:/usr/include/c++/5/limits **** 
  86:/usr/include/c++/5/limits **** // Default values.  Should be overridden in configuration files if necessary.
  87:/usr/include/c++/5/limits **** 
  88:/usr/include/c++/5/limits **** #ifndef __glibcxx_float_has_denorm_loss
  89:/usr/include/c++/5/limits **** #  define __glibcxx_float_has_denorm_loss false
  90:/usr/include/c++/5/limits **** #endif
  91:/usr/include/c++/5/limits **** #ifndef __glibcxx_float_traps
  92:/usr/include/c++/5/limits **** #  define __glibcxx_float_traps false
  93:/usr/include/c++/5/limits **** #endif
  94:/usr/include/c++/5/limits **** #ifndef __glibcxx_float_tinyness_before
  95:/usr/include/c++/5/limits **** #  define __glibcxx_float_tinyness_before false
  96:/usr/include/c++/5/limits **** #endif
  97:/usr/include/c++/5/limits **** 
  98:/usr/include/c++/5/limits **** // double
  99:/usr/include/c++/5/limits **** 
 100:/usr/include/c++/5/limits **** // Default values.  Should be overridden in configuration files if necessary.
 101:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 48


 102:/usr/include/c++/5/limits **** #ifndef __glibcxx_double_has_denorm_loss
 103:/usr/include/c++/5/limits **** #  define __glibcxx_double_has_denorm_loss false
 104:/usr/include/c++/5/limits **** #endif
 105:/usr/include/c++/5/limits **** #ifndef __glibcxx_double_traps
 106:/usr/include/c++/5/limits **** #  define __glibcxx_double_traps false
 107:/usr/include/c++/5/limits **** #endif
 108:/usr/include/c++/5/limits **** #ifndef __glibcxx_double_tinyness_before
 109:/usr/include/c++/5/limits **** #  define __glibcxx_double_tinyness_before false
 110:/usr/include/c++/5/limits **** #endif
 111:/usr/include/c++/5/limits **** 
 112:/usr/include/c++/5/limits **** // long double
 113:/usr/include/c++/5/limits **** 
 114:/usr/include/c++/5/limits **** // Default values.  Should be overridden in configuration files if necessary.
 115:/usr/include/c++/5/limits **** 
 116:/usr/include/c++/5/limits **** #ifndef __glibcxx_long_double_has_denorm_loss
 117:/usr/include/c++/5/limits **** #  define __glibcxx_long_double_has_denorm_loss false
 118:/usr/include/c++/5/limits **** #endif
 119:/usr/include/c++/5/limits **** #ifndef __glibcxx_long_double_traps
 120:/usr/include/c++/5/limits **** #  define __glibcxx_long_double_traps false
 121:/usr/include/c++/5/limits **** #endif
 122:/usr/include/c++/5/limits **** #ifndef __glibcxx_long_double_tinyness_before
 123:/usr/include/c++/5/limits **** #  define __glibcxx_long_double_tinyness_before false
 124:/usr/include/c++/5/limits **** #endif
 125:/usr/include/c++/5/limits **** 
 126:/usr/include/c++/5/limits **** // You should not need to define any macros below this point.
 127:/usr/include/c++/5/limits **** 
 128:/usr/include/c++/5/limits **** #define __glibcxx_signed_b(T,B)	((T)(-1) < 0)
 129:/usr/include/c++/5/limits **** 
 130:/usr/include/c++/5/limits **** #define __glibcxx_min_b(T,B)					\
 131:/usr/include/c++/5/limits ****   (__glibcxx_signed_b (T,B) ? -__glibcxx_max_b (T,B) - 1 : (T)0)
 132:/usr/include/c++/5/limits **** 
 133:/usr/include/c++/5/limits **** #define __glibcxx_max_b(T,B)						\
 134:/usr/include/c++/5/limits ****   (__glibcxx_signed_b (T,B) ?						\
 135:/usr/include/c++/5/limits ****    (((((T)1 << (__glibcxx_digits_b (T,B) - 1)) - 1) << 1) + 1) : ~(T)0)
 136:/usr/include/c++/5/limits **** 
 137:/usr/include/c++/5/limits **** #define __glibcxx_digits_b(T,B)				\
 138:/usr/include/c++/5/limits ****   (B - __glibcxx_signed_b (T,B))
 139:/usr/include/c++/5/limits **** 
 140:/usr/include/c++/5/limits **** // The fraction 643/2136 approximates log10(2) to 7 significant digits.
 141:/usr/include/c++/5/limits **** #define __glibcxx_digits10_b(T,B)		\
 142:/usr/include/c++/5/limits ****   (__glibcxx_digits_b (T,B) * 643L / 2136)
 143:/usr/include/c++/5/limits **** 
 144:/usr/include/c++/5/limits **** #define __glibcxx_signed(T) \
 145:/usr/include/c++/5/limits ****   __glibcxx_signed_b (T, sizeof(T) * __CHAR_BIT__)
 146:/usr/include/c++/5/limits **** #define __glibcxx_min(T) \
 147:/usr/include/c++/5/limits ****   __glibcxx_min_b (T, sizeof(T) * __CHAR_BIT__)
 148:/usr/include/c++/5/limits **** #define __glibcxx_max(T) \
 149:/usr/include/c++/5/limits ****   __glibcxx_max_b (T, sizeof(T) * __CHAR_BIT__)
 150:/usr/include/c++/5/limits **** #define __glibcxx_digits(T) \
 151:/usr/include/c++/5/limits ****   __glibcxx_digits_b (T, sizeof(T) * __CHAR_BIT__)
 152:/usr/include/c++/5/limits **** #define __glibcxx_digits10(T) \
 153:/usr/include/c++/5/limits ****   __glibcxx_digits10_b (T, sizeof(T) * __CHAR_BIT__)
 154:/usr/include/c++/5/limits **** 
 155:/usr/include/c++/5/limits **** #define __glibcxx_max_digits10(T) \
 156:/usr/include/c++/5/limits ****   (2 + (T) * 643L / 2136)
 157:/usr/include/c++/5/limits **** 
 158:/usr/include/c++/5/limits **** namespace std _GLIBCXX_VISIBILITY(default)
GAS LISTING /tmp/cc2K2nX4.s 			page 49


 159:/usr/include/c++/5/limits **** {
 160:/usr/include/c++/5/limits **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 161:/usr/include/c++/5/limits **** 
 162:/usr/include/c++/5/limits ****   /**
 163:/usr/include/c++/5/limits ****    *  @brief Describes the rounding style for floating-point types.
 164:/usr/include/c++/5/limits ****    *
 165:/usr/include/c++/5/limits ****    *  This is used in the std::numeric_limits class.
 166:/usr/include/c++/5/limits ****   */
 167:/usr/include/c++/5/limits ****   enum float_round_style
 168:/usr/include/c++/5/limits ****   {
 169:/usr/include/c++/5/limits ****     round_indeterminate       = -1,    /// Intermediate.
 170:/usr/include/c++/5/limits ****     round_toward_zero         = 0,     /// To zero.
 171:/usr/include/c++/5/limits ****     round_to_nearest          = 1,     /// To the nearest representable value.
 172:/usr/include/c++/5/limits ****     round_toward_infinity     = 2,     /// To infinity.
 173:/usr/include/c++/5/limits ****     round_toward_neg_infinity = 3      /// To negative infinity.
 174:/usr/include/c++/5/limits ****   };
 175:/usr/include/c++/5/limits **** 
 176:/usr/include/c++/5/limits ****   /**
 177:/usr/include/c++/5/limits ****    *  @brief Describes the denormalization for floating-point types.
 178:/usr/include/c++/5/limits ****    *
 179:/usr/include/c++/5/limits ****    *  These values represent the presence or absence of a variable number
 180:/usr/include/c++/5/limits ****    *  of exponent bits.  This type is used in the std::numeric_limits class.
 181:/usr/include/c++/5/limits ****   */
 182:/usr/include/c++/5/limits ****   enum float_denorm_style
 183:/usr/include/c++/5/limits ****   {
 184:/usr/include/c++/5/limits ****     /// Indeterminate at compile time whether denormalized values are allowed.
 185:/usr/include/c++/5/limits ****     denorm_indeterminate = -1,
 186:/usr/include/c++/5/limits ****     /// The type does not allow denormalized values.
 187:/usr/include/c++/5/limits ****     denorm_absent        = 0,
 188:/usr/include/c++/5/limits ****     /// The type allows denormalized values.
 189:/usr/include/c++/5/limits ****     denorm_present       = 1
 190:/usr/include/c++/5/limits ****   };
 191:/usr/include/c++/5/limits **** 
 192:/usr/include/c++/5/limits ****   /**
 193:/usr/include/c++/5/limits ****    *  @brief Part of std::numeric_limits.
 194:/usr/include/c++/5/limits ****    *
 195:/usr/include/c++/5/limits ****    *  The @c static @c const members are usable as integral constant
 196:/usr/include/c++/5/limits ****    *  expressions.
 197:/usr/include/c++/5/limits ****    *
 198:/usr/include/c++/5/limits ****    *  @note This is a separate class for purposes of efficiency; you
 199:/usr/include/c++/5/limits ****    *        should only access these members as part of an instantiation
 200:/usr/include/c++/5/limits ****    *        of the std::numeric_limits class.
 201:/usr/include/c++/5/limits ****   */
 202:/usr/include/c++/5/limits ****   struct __numeric_limits_base
 203:/usr/include/c++/5/limits ****   {
 204:/usr/include/c++/5/limits ****     /** This will be true for all fundamental types (which have
 205:/usr/include/c++/5/limits **** 	specializations), and false for everything else.  */
 206:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_specialized = false;
 207:/usr/include/c++/5/limits **** 
 208:/usr/include/c++/5/limits ****     /** The number of @c radix digits that be represented without change:  for
 209:/usr/include/c++/5/limits **** 	integer types, the number of non-sign bits in the mantissa; for
 210:/usr/include/c++/5/limits **** 	floating types, the number of @c radix digits in the mantissa.  */
 211:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int digits = 0;
 212:/usr/include/c++/5/limits **** 
 213:/usr/include/c++/5/limits ****     /** The number of base 10 digits that can be represented without change. */
 214:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;
 215:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 50


 216:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 217:/usr/include/c++/5/limits ****     /** The number of base 10 digits required to ensure that values which
 218:/usr/include/c++/5/limits **** 	differ are always differentiated.  */
 219:/usr/include/c++/5/limits ****     static constexpr int max_digits10 = 0;
 220:/usr/include/c++/5/limits **** #endif
 221:/usr/include/c++/5/limits **** 
 222:/usr/include/c++/5/limits ****     /** True if the type is signed.  */
 223:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 224:/usr/include/c++/5/limits **** 
 225:/usr/include/c++/5/limits ****     /** True if the type is integer.  */
 226:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
 227:/usr/include/c++/5/limits **** 
 228:/usr/include/c++/5/limits ****     /** True if the type uses an exact representation. All integer types are
 229:/usr/include/c++/5/limits **** 	exact, but not all exact types are integer.  For example, rational and
 230:/usr/include/c++/5/limits **** 	fixed-exponent representations are exact but not integer. */
 231:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
 232:/usr/include/c++/5/limits **** 
 233:/usr/include/c++/5/limits ****     /** For integer types, specifies the base of the representation.  For
 234:/usr/include/c++/5/limits **** 	floating types, specifies the base of the exponent representation.  */
 235:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int radix = 0;
 236:/usr/include/c++/5/limits **** 
 237:/usr/include/c++/5/limits ****     /** The minimum negative integer such that @c radix raised to the power of
 238:/usr/include/c++/5/limits **** 	(one less than that integer) is a normalized floating point number.  */
 239:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 240:/usr/include/c++/5/limits **** 
 241:/usr/include/c++/5/limits ****     /** The minimum negative integer such that 10 raised to that power is in
 242:/usr/include/c++/5/limits **** 	the range of normalized floating point numbers.  */
 243:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 244:/usr/include/c++/5/limits **** 
 245:/usr/include/c++/5/limits ****     /** The maximum positive integer such that @c radix raised to the power of
 246:/usr/include/c++/5/limits **** 	(one less than that integer) is a representable finite floating point
 247:/usr/include/c++/5/limits **** 	number.  */
 248:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 249:/usr/include/c++/5/limits **** 
 250:/usr/include/c++/5/limits ****     /** The maximum positive integer such that 10 raised to that power is in
 251:/usr/include/c++/5/limits **** 	the range of representable finite floating point numbers.  */
 252:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 253:/usr/include/c++/5/limits **** 
 254:/usr/include/c++/5/limits ****     /** True if the type has a representation for positive infinity.  */
 255:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 256:/usr/include/c++/5/limits **** 
 257:/usr/include/c++/5/limits ****     /** True if the type has a representation for a quiet (non-signaling)
 258:/usr/include/c++/5/limits **** 	Not a Number.  */
 259:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 260:/usr/include/c++/5/limits **** 
 261:/usr/include/c++/5/limits ****     /** True if the type has a representation for a signaling
 262:/usr/include/c++/5/limits **** 	Not a Number.  */
 263:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 264:/usr/include/c++/5/limits **** 
 265:/usr/include/c++/5/limits ****     /** See std::float_denorm_style for more information.  */
 266:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent;
 267:/usr/include/c++/5/limits **** 
 268:/usr/include/c++/5/limits ****     /** True if loss of accuracy is detected as a denormalization loss,
 269:/usr/include/c++/5/limits **** 	rather than as an inexact result. */
 270:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 271:/usr/include/c++/5/limits **** 
 272:/usr/include/c++/5/limits ****     /** True if-and-only-if the type adheres to the IEC 559 standard, also
GAS LISTING /tmp/cc2K2nX4.s 			page 51


 273:/usr/include/c++/5/limits **** 	known as IEEE 754.  (Only makes sense for floating point types.)  */
 274:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 275:/usr/include/c++/5/limits **** 
 276:/usr/include/c++/5/limits ****     /** True if the set of values representable by the type is
 277:/usr/include/c++/5/limits **** 	finite.  All built-in types are bounded, this member would be
 278:/usr/include/c++/5/limits **** 	false for arbitrary precision types. */
 279:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_bounded = false;
 280:/usr/include/c++/5/limits **** 
 281:/usr/include/c++/5/limits ****     /** True if the type is @e modulo. A type is modulo if, for any
 282:/usr/include/c++/5/limits **** 	operation involving +, -, or * on values of that type whose
 283:/usr/include/c++/5/limits **** 	result would fall outside the range [min(),max()], the value
 284:/usr/include/c++/5/limits **** 	returned differs from the true value by an integer multiple of
 285:/usr/include/c++/5/limits **** 	max() - min() + 1. On most machines, this is false for floating
 286:/usr/include/c++/5/limits **** 	types, true for unsigned integers, and true for signed integers.
 287:/usr/include/c++/5/limits **** 	See PR22200 about signed integers.  */
 288:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 289:/usr/include/c++/5/limits **** 
 290:/usr/include/c++/5/limits ****     /** True if trapping is implemented for this type.  */
 291:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool traps = false;
 292:/usr/include/c++/5/limits **** 
 293:/usr/include/c++/5/limits ****     /** True if tininess is detected before rounding.  (see IEC 559)  */
 294:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 295:/usr/include/c++/5/limits **** 
 296:/usr/include/c++/5/limits ****     /** See std::float_round_style for more information.  This is only
 297:/usr/include/c++/5/limits **** 	meaningful for floating types; integer types will all be
 298:/usr/include/c++/5/limits **** 	round_toward_zero.  */
 299:/usr/include/c++/5/limits ****     static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = 
 300:/usr/include/c++/5/limits **** 						    round_toward_zero;
 301:/usr/include/c++/5/limits ****   };
 302:/usr/include/c++/5/limits **** 
 303:/usr/include/c++/5/limits ****   /**
 304:/usr/include/c++/5/limits ****    *  @brief Properties of fundamental types.
 305:/usr/include/c++/5/limits ****    *
 306:/usr/include/c++/5/limits ****    *  This class allows a program to obtain information about the
 307:/usr/include/c++/5/limits ****    *  representation of a fundamental type on a given platform.  For
 308:/usr/include/c++/5/limits ****    *  non-fundamental types, the functions will return 0 and the data
 309:/usr/include/c++/5/limits ****    *  members will all be @c false.
 310:/usr/include/c++/5/limits ****    *
 311:/usr/include/c++/5/limits ****    *  _GLIBCXX_RESOLVE_LIB_DEFECTS:  DRs 201 and 184 (hi Gaby!) are
 312:/usr/include/c++/5/limits ****    *  noted, but not incorporated in this documented (yet).
 313:/usr/include/c++/5/limits ****   */
 314:/usr/include/c++/5/limits ****   template<typename _Tp>
 315:/usr/include/c++/5/limits ****     struct numeric_limits : public __numeric_limits_base
 316:/usr/include/c++/5/limits ****     {
 317:/usr/include/c++/5/limits ****       /** The minimum finite value, or for floating types with
 318:/usr/include/c++/5/limits **** 	  denormalization, the minimum positive normalized value.  */
 319:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 320:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 321:/usr/include/c++/5/limits **** 
 322:/usr/include/c++/5/limits ****       /** The maximum finite value.  */
 323:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 324:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 325:/usr/include/c++/5/limits **** 
 326:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 327:/usr/include/c++/5/limits ****       /** A finite value x such that there is no other finite value y
 328:/usr/include/c++/5/limits ****        *  where y < x.  */
 329:/usr/include/c++/5/limits ****       static constexpr _Tp
GAS LISTING /tmp/cc2K2nX4.s 			page 52


 330:/usr/include/c++/5/limits ****       lowest() noexcept { return _Tp(); }
 331:/usr/include/c++/5/limits **** #endif
 332:/usr/include/c++/5/limits **** 
 333:/usr/include/c++/5/limits ****       /** The @e machine @e epsilon:  the difference between 1 and the least
 334:/usr/include/c++/5/limits **** 	  value greater than 1 that is representable.  */
 335:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 336:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 337:/usr/include/c++/5/limits **** 
 338:/usr/include/c++/5/limits ****       /** The maximum rounding error measurement (see LIA-1).  */
 339:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 340:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 341:/usr/include/c++/5/limits **** 
 342:/usr/include/c++/5/limits ****       /** The representation of positive infinity, if @c has_infinity.  */
 343:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 344:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 345:/usr/include/c++/5/limits **** 
 346:/usr/include/c++/5/limits ****       /** The representation of a quiet Not a Number,
 347:/usr/include/c++/5/limits **** 	  if @c has_quiet_NaN. */
 348:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 349:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 350:/usr/include/c++/5/limits **** 
 351:/usr/include/c++/5/limits ****       /** The representation of a signaling Not a Number, if
 352:/usr/include/c++/5/limits **** 	  @c has_signaling_NaN. */
 353:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 354:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 355:/usr/include/c++/5/limits **** 
 356:/usr/include/c++/5/limits ****       /** The minimum positive denormalized value.  For types where
 357:/usr/include/c++/5/limits **** 	  @c has_denorm is false, this is the minimum positive normalized
 358:/usr/include/c++/5/limits **** 	  value.  */
 359:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR _Tp
 360:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }
 361:/usr/include/c++/5/limits ****     };
 362:/usr/include/c++/5/limits **** 
 363:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 364:/usr/include/c++/5/limits ****   template<typename _Tp>
 365:/usr/include/c++/5/limits ****     struct numeric_limits<const _Tp>
 366:/usr/include/c++/5/limits ****     : public numeric_limits<_Tp> { };
 367:/usr/include/c++/5/limits **** 
 368:/usr/include/c++/5/limits ****   template<typename _Tp>
 369:/usr/include/c++/5/limits ****     struct numeric_limits<volatile _Tp>
 370:/usr/include/c++/5/limits ****     : public numeric_limits<_Tp> { };
 371:/usr/include/c++/5/limits **** 
 372:/usr/include/c++/5/limits ****   template<typename _Tp>
 373:/usr/include/c++/5/limits ****     struct numeric_limits<const volatile _Tp>
 374:/usr/include/c++/5/limits ****     : public numeric_limits<_Tp> { };
 375:/usr/include/c++/5/limits **** #endif
 376:/usr/include/c++/5/limits **** 
 377:/usr/include/c++/5/limits ****   // Now there follow 16 explicit specializations.  Yes, 16.  Make sure
 378:/usr/include/c++/5/limits ****   // you get the count right. (18 in c++0x mode)
 379:/usr/include/c++/5/limits **** 
 380:/usr/include/c++/5/limits ****   /// numeric_limits<bool> specialization.
 381:/usr/include/c++/5/limits ****   template<>
 382:/usr/include/c++/5/limits ****     struct numeric_limits<bool>
 383:/usr/include/c++/5/limits ****     {
 384:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 385:/usr/include/c++/5/limits **** 
 386:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
GAS LISTING /tmp/cc2K2nX4.s 			page 53


 387:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return false; }
 388:/usr/include/c++/5/limits **** 
 389:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 390:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return true; }
 391:/usr/include/c++/5/limits **** 
 392:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 393:/usr/include/c++/5/limits ****       static constexpr bool
 394:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 395:/usr/include/c++/5/limits **** #endif
 396:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = 1;
 397:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = 0;
 398:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 399:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 400:/usr/include/c++/5/limits **** #endif
 401:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 402:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 403:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 404:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 405:/usr/include/c++/5/limits **** 
 406:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 407:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return false; }
 408:/usr/include/c++/5/limits **** 
 409:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 410:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return false; }
 411:/usr/include/c++/5/limits **** 
 412:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 413:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 414:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 415:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 416:/usr/include/c++/5/limits **** 
 417:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 418:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 419:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 420:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 421:/usr/include/c++/5/limits ****        = denorm_absent;
 422:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 423:/usr/include/c++/5/limits **** 
 424:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 425:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return false; }
 426:/usr/include/c++/5/limits **** 
 427:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 428:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }
 429:/usr/include/c++/5/limits **** 
 430:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 431:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return false; }
 432:/usr/include/c++/5/limits **** 
 433:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR bool 
 434:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return false; }
 435:/usr/include/c++/5/limits **** 
 436:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 437:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 438:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 439:/usr/include/c++/5/limits **** 
 440:/usr/include/c++/5/limits ****       // It is not clear what it means for a boolean type to trap.
 441:/usr/include/c++/5/limits ****       // This is a DR on the LWG issue list.  Here, I use integer
 442:/usr/include/c++/5/limits ****       // promotion semantics.
 443:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
GAS LISTING /tmp/cc2K2nX4.s 			page 54


 444:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 445:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 446:/usr/include/c++/5/limits ****        = round_toward_zero;
 447:/usr/include/c++/5/limits ****     };
 448:/usr/include/c++/5/limits **** 
 449:/usr/include/c++/5/limits ****   /// numeric_limits<char> specialization.
 450:/usr/include/c++/5/limits ****   template<>
 451:/usr/include/c++/5/limits ****     struct numeric_limits<char>
 452:/usr/include/c++/5/limits ****     {
 453:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 454:/usr/include/c++/5/limits **** 
 455:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 456:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min(char); }
 457:/usr/include/c++/5/limits **** 
 458:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 459:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max(char); }
 460:/usr/include/c++/5/limits **** 
 461:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 462:/usr/include/c++/5/limits ****       static constexpr char 
 463:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 464:/usr/include/c++/5/limits **** #endif
 465:/usr/include/c++/5/limits **** 
 466:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (char);
 467:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (char);
 468:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 469:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 470:/usr/include/c++/5/limits **** #endif
 471:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (char);
 472:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 473:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 474:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 475:/usr/include/c++/5/limits **** 
 476:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 477:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 478:/usr/include/c++/5/limits **** 
 479:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 480:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 481:/usr/include/c++/5/limits **** 
 482:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 483:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 484:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 485:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 486:/usr/include/c++/5/limits **** 
 487:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 488:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 489:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 490:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 491:/usr/include/c++/5/limits ****        = denorm_absent;
 492:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 493:/usr/include/c++/5/limits **** 
 494:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR 
 495:/usr/include/c++/5/limits ****       char infinity() _GLIBCXX_USE_NOEXCEPT { return char(); }
 496:/usr/include/c++/5/limits **** 
 497:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 498:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }
 499:/usr/include/c++/5/limits **** 
 500:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
GAS LISTING /tmp/cc2K2nX4.s 			page 55


 501:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return char(); }
 502:/usr/include/c++/5/limits **** 
 503:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR char 
 504:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<char>(0); }
 505:/usr/include/c++/5/limits **** 
 506:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 507:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 508:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;
 509:/usr/include/c++/5/limits **** 
 510:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 511:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 512:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 513:/usr/include/c++/5/limits ****        = round_toward_zero;
 514:/usr/include/c++/5/limits ****     };
 515:/usr/include/c++/5/limits **** 
 516:/usr/include/c++/5/limits ****   /// numeric_limits<signed char> specialization.
 517:/usr/include/c++/5/limits ****   template<>
 518:/usr/include/c++/5/limits ****     struct numeric_limits<signed char>
 519:/usr/include/c++/5/limits ****     {
 520:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 521:/usr/include/c++/5/limits **** 
 522:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 523:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 524:/usr/include/c++/5/limits **** 
 525:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 526:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 527:/usr/include/c++/5/limits **** 
 528:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 529:/usr/include/c++/5/limits ****       static constexpr signed char 
 530:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 531:/usr/include/c++/5/limits **** #endif
 532:/usr/include/c++/5/limits **** 
 533:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (signed char);
 534:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
 535:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (signed char);
 536:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 537:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 538:/usr/include/c++/5/limits **** #endif
 539:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
 540:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 541:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 542:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 543:/usr/include/c++/5/limits **** 
 544:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 545:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 546:/usr/include/c++/5/limits **** 
 547:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 548:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 549:/usr/include/c++/5/limits **** 
 550:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 551:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 552:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 553:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 554:/usr/include/c++/5/limits **** 
 555:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 556:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 557:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
GAS LISTING /tmp/cc2K2nX4.s 			page 56


 558:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 559:/usr/include/c++/5/limits ****        = denorm_absent;
 560:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 561:/usr/include/c++/5/limits **** 
 562:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 563:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }
 564:/usr/include/c++/5/limits **** 
 565:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 566:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<signed char>(0); }
 567:/usr/include/c++/5/limits **** 
 568:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 569:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
 570:/usr/include/c++/5/limits ****       { return static_cast<signed char>(0); }
 571:/usr/include/c++/5/limits **** 
 572:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR signed char 
 573:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
 574:/usr/include/c++/5/limits ****       { return static_cast<signed char>(0); }
 575:/usr/include/c++/5/limits **** 
 576:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 577:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 578:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 579:/usr/include/c++/5/limits **** 
 580:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 581:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 582:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 583:/usr/include/c++/5/limits ****        = round_toward_zero;
 584:/usr/include/c++/5/limits ****     };
 585:/usr/include/c++/5/limits **** 
 586:/usr/include/c++/5/limits ****   /// numeric_limits<unsigned char> specialization.
 587:/usr/include/c++/5/limits ****   template<>
 588:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned char>
 589:/usr/include/c++/5/limits ****     {
 590:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 591:/usr/include/c++/5/limits **** 
 592:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 593:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 594:/usr/include/c++/5/limits **** 
 595:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 596:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 597:/usr/include/c++/5/limits **** 
 598:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 599:/usr/include/c++/5/limits ****       static constexpr unsigned char 
 600:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 601:/usr/include/c++/5/limits **** #endif
 602:/usr/include/c++/5/limits **** 
 603:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
 604:/usr/include/c++/5/limits ****        = __glibcxx_digits (unsigned char);
 605:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
 606:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (unsigned char);
 607:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 608:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 609:/usr/include/c++/5/limits **** #endif
 610:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 611:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 612:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 613:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 614:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 57


 615:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 616:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 617:/usr/include/c++/5/limits **** 
 618:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 619:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 620:/usr/include/c++/5/limits **** 
 621:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 622:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 623:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 624:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 625:/usr/include/c++/5/limits **** 
 626:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 627:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 628:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 629:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 630:/usr/include/c++/5/limits ****        = denorm_absent;
 631:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 632:/usr/include/c++/5/limits **** 
 633:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 634:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
 635:/usr/include/c++/5/limits ****       { return static_cast<unsigned char>(0); }
 636:/usr/include/c++/5/limits **** 
 637:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 638:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
 639:/usr/include/c++/5/limits ****       { return static_cast<unsigned char>(0); }
 640:/usr/include/c++/5/limits **** 
 641:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 642:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
 643:/usr/include/c++/5/limits ****       { return static_cast<unsigned char>(0); }
 644:/usr/include/c++/5/limits **** 
 645:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned char 
 646:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
 647:/usr/include/c++/5/limits ****       { return static_cast<unsigned char>(0); }
 648:/usr/include/c++/5/limits **** 
 649:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 650:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 651:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
 652:/usr/include/c++/5/limits **** 
 653:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 654:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 655:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 656:/usr/include/c++/5/limits ****        = round_toward_zero;
 657:/usr/include/c++/5/limits ****     };
 658:/usr/include/c++/5/limits **** 
 659:/usr/include/c++/5/limits ****   /// numeric_limits<wchar_t> specialization.
 660:/usr/include/c++/5/limits ****   template<>
 661:/usr/include/c++/5/limits ****     struct numeric_limits<wchar_t>
 662:/usr/include/c++/5/limits ****     {
 663:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 664:/usr/include/c++/5/limits **** 
 665:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 666:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min (wchar_t); }
 667:/usr/include/c++/5/limits **** 
 668:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 669:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max (wchar_t); }
 670:/usr/include/c++/5/limits **** 
 671:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
GAS LISTING /tmp/cc2K2nX4.s 			page 58


 672:/usr/include/c++/5/limits ****       static constexpr wchar_t
 673:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 674:/usr/include/c++/5/limits **** #endif
 675:/usr/include/c++/5/limits **** 
 676:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (wchar_t);
 677:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
 678:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (wchar_t);
 679:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 680:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 681:/usr/include/c++/5/limits **** #endif
 682:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = __glibcxx_signed (wchar_t);
 683:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 684:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 685:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 686:/usr/include/c++/5/limits **** 
 687:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 688:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 689:/usr/include/c++/5/limits **** 
 690:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 691:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 692:/usr/include/c++/5/limits **** 
 693:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 694:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 695:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 696:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 697:/usr/include/c++/5/limits **** 
 698:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 699:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 700:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 701:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 702:/usr/include/c++/5/limits ****        = denorm_absent;
 703:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 704:/usr/include/c++/5/limits **** 
 705:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 706:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 707:/usr/include/c++/5/limits **** 
 708:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 709:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 710:/usr/include/c++/5/limits **** 
 711:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 712:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 713:/usr/include/c++/5/limits **** 
 714:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR wchar_t 
 715:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return wchar_t(); }
 716:/usr/include/c++/5/limits **** 
 717:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 718:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 719:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = !is_signed;
 720:/usr/include/c++/5/limits **** 
 721:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 722:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 723:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 724:/usr/include/c++/5/limits ****        = round_toward_zero;
 725:/usr/include/c++/5/limits ****     };
 726:/usr/include/c++/5/limits **** 
 727:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 728:/usr/include/c++/5/limits ****   /// numeric_limits<char16_t> specialization.
GAS LISTING /tmp/cc2K2nX4.s 			page 59


 729:/usr/include/c++/5/limits ****   template<>
 730:/usr/include/c++/5/limits ****     struct numeric_limits<char16_t>
 731:/usr/include/c++/5/limits ****     {
 732:/usr/include/c++/5/limits ****       static constexpr bool is_specialized = true;
 733:/usr/include/c++/5/limits **** 
 734:/usr/include/c++/5/limits ****       static constexpr char16_t 
 735:/usr/include/c++/5/limits ****       min() noexcept { return __glibcxx_min (char16_t); }
 736:/usr/include/c++/5/limits **** 
 737:/usr/include/c++/5/limits ****       static constexpr char16_t 
 738:/usr/include/c++/5/limits ****       max() noexcept { return __glibcxx_max (char16_t); }
 739:/usr/include/c++/5/limits **** 
 740:/usr/include/c++/5/limits ****       static constexpr char16_t 
 741:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 742:/usr/include/c++/5/limits **** 
 743:/usr/include/c++/5/limits ****       static constexpr int digits = __glibcxx_digits (char16_t);
 744:/usr/include/c++/5/limits ****       static constexpr int digits10 = __glibcxx_digits10 (char16_t);
 745:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 746:/usr/include/c++/5/limits ****       static constexpr bool is_signed = __glibcxx_signed (char16_t);
 747:/usr/include/c++/5/limits ****       static constexpr bool is_integer = true;
 748:/usr/include/c++/5/limits ****       static constexpr bool is_exact = true;
 749:/usr/include/c++/5/limits ****       static constexpr int radix = 2;
 750:/usr/include/c++/5/limits **** 
 751:/usr/include/c++/5/limits ****       static constexpr char16_t 
 752:/usr/include/c++/5/limits ****       epsilon() noexcept { return 0; }
 753:/usr/include/c++/5/limits **** 
 754:/usr/include/c++/5/limits ****       static constexpr char16_t 
 755:/usr/include/c++/5/limits ****       round_error() noexcept { return 0; }
 756:/usr/include/c++/5/limits **** 
 757:/usr/include/c++/5/limits ****       static constexpr int min_exponent = 0;
 758:/usr/include/c++/5/limits ****       static constexpr int min_exponent10 = 0;
 759:/usr/include/c++/5/limits ****       static constexpr int max_exponent = 0;
 760:/usr/include/c++/5/limits ****       static constexpr int max_exponent10 = 0;
 761:/usr/include/c++/5/limits **** 
 762:/usr/include/c++/5/limits ****       static constexpr bool has_infinity = false;
 763:/usr/include/c++/5/limits ****       static constexpr bool has_quiet_NaN = false;
 764:/usr/include/c++/5/limits ****       static constexpr bool has_signaling_NaN = false;
 765:/usr/include/c++/5/limits ****       static constexpr float_denorm_style has_denorm = denorm_absent;
 766:/usr/include/c++/5/limits ****       static constexpr bool has_denorm_loss = false;
 767:/usr/include/c++/5/limits **** 
 768:/usr/include/c++/5/limits ****       static constexpr char16_t 
 769:/usr/include/c++/5/limits ****       infinity() noexcept { return char16_t(); }
 770:/usr/include/c++/5/limits **** 
 771:/usr/include/c++/5/limits ****       static constexpr char16_t 
 772:/usr/include/c++/5/limits ****       quiet_NaN() noexcept { return char16_t(); }
 773:/usr/include/c++/5/limits **** 
 774:/usr/include/c++/5/limits ****       static constexpr char16_t 
 775:/usr/include/c++/5/limits ****       signaling_NaN() noexcept { return char16_t(); }
 776:/usr/include/c++/5/limits **** 
 777:/usr/include/c++/5/limits ****       static constexpr char16_t 
 778:/usr/include/c++/5/limits ****       denorm_min() noexcept { return char16_t(); }
 779:/usr/include/c++/5/limits **** 
 780:/usr/include/c++/5/limits ****       static constexpr bool is_iec559 = false;
 781:/usr/include/c++/5/limits ****       static constexpr bool is_bounded = true;
 782:/usr/include/c++/5/limits ****       static constexpr bool is_modulo = !is_signed;
 783:/usr/include/c++/5/limits **** 
 784:/usr/include/c++/5/limits ****       static constexpr bool traps = __glibcxx_integral_traps;
 785:/usr/include/c++/5/limits ****       static constexpr bool tinyness_before = false;
GAS LISTING /tmp/cc2K2nX4.s 			page 60


 786:/usr/include/c++/5/limits ****       static constexpr float_round_style round_style = round_toward_zero;
 787:/usr/include/c++/5/limits ****     };
 788:/usr/include/c++/5/limits **** 
 789:/usr/include/c++/5/limits ****   /// numeric_limits<char32_t> specialization.
 790:/usr/include/c++/5/limits ****   template<>
 791:/usr/include/c++/5/limits ****     struct numeric_limits<char32_t>
 792:/usr/include/c++/5/limits ****     {
 793:/usr/include/c++/5/limits ****       static constexpr bool is_specialized = true;
 794:/usr/include/c++/5/limits **** 
 795:/usr/include/c++/5/limits ****       static constexpr char32_t 
 796:/usr/include/c++/5/limits ****       min() noexcept { return __glibcxx_min (char32_t); }
 797:/usr/include/c++/5/limits **** 
 798:/usr/include/c++/5/limits ****       static constexpr char32_t 
 799:/usr/include/c++/5/limits ****       max() noexcept { return __glibcxx_max (char32_t); }
 800:/usr/include/c++/5/limits **** 
 801:/usr/include/c++/5/limits ****       static constexpr char32_t 
 802:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 803:/usr/include/c++/5/limits **** 
 804:/usr/include/c++/5/limits ****       static constexpr int digits = __glibcxx_digits (char32_t);
 805:/usr/include/c++/5/limits ****       static constexpr int digits10 = __glibcxx_digits10 (char32_t);
 806:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 807:/usr/include/c++/5/limits ****       static constexpr bool is_signed = __glibcxx_signed (char32_t);
 808:/usr/include/c++/5/limits ****       static constexpr bool is_integer = true;
 809:/usr/include/c++/5/limits ****       static constexpr bool is_exact = true;
 810:/usr/include/c++/5/limits ****       static constexpr int radix = 2;
 811:/usr/include/c++/5/limits **** 
 812:/usr/include/c++/5/limits ****       static constexpr char32_t 
 813:/usr/include/c++/5/limits ****       epsilon() noexcept { return 0; }
 814:/usr/include/c++/5/limits **** 
 815:/usr/include/c++/5/limits ****       static constexpr char32_t 
 816:/usr/include/c++/5/limits ****       round_error() noexcept { return 0; }
 817:/usr/include/c++/5/limits **** 
 818:/usr/include/c++/5/limits ****       static constexpr int min_exponent = 0;
 819:/usr/include/c++/5/limits ****       static constexpr int min_exponent10 = 0;
 820:/usr/include/c++/5/limits ****       static constexpr int max_exponent = 0;
 821:/usr/include/c++/5/limits ****       static constexpr int max_exponent10 = 0;
 822:/usr/include/c++/5/limits **** 
 823:/usr/include/c++/5/limits ****       static constexpr bool has_infinity = false;
 824:/usr/include/c++/5/limits ****       static constexpr bool has_quiet_NaN = false;
 825:/usr/include/c++/5/limits ****       static constexpr bool has_signaling_NaN = false;
 826:/usr/include/c++/5/limits ****       static constexpr float_denorm_style has_denorm = denorm_absent;
 827:/usr/include/c++/5/limits ****       static constexpr bool has_denorm_loss = false;
 828:/usr/include/c++/5/limits **** 
 829:/usr/include/c++/5/limits ****       static constexpr char32_t 
 830:/usr/include/c++/5/limits ****       infinity() noexcept { return char32_t(); }
 831:/usr/include/c++/5/limits **** 
 832:/usr/include/c++/5/limits ****       static constexpr char32_t 
 833:/usr/include/c++/5/limits ****       quiet_NaN() noexcept { return char32_t(); }
 834:/usr/include/c++/5/limits **** 
 835:/usr/include/c++/5/limits ****       static constexpr char32_t 
 836:/usr/include/c++/5/limits ****       signaling_NaN() noexcept { return char32_t(); }
 837:/usr/include/c++/5/limits **** 
 838:/usr/include/c++/5/limits ****       static constexpr char32_t 
 839:/usr/include/c++/5/limits ****       denorm_min() noexcept { return char32_t(); }
 840:/usr/include/c++/5/limits **** 
 841:/usr/include/c++/5/limits ****       static constexpr bool is_iec559 = false;
 842:/usr/include/c++/5/limits ****       static constexpr bool is_bounded = true;
GAS LISTING /tmp/cc2K2nX4.s 			page 61


 843:/usr/include/c++/5/limits ****       static constexpr bool is_modulo = !is_signed;
 844:/usr/include/c++/5/limits **** 
 845:/usr/include/c++/5/limits ****       static constexpr bool traps = __glibcxx_integral_traps;
 846:/usr/include/c++/5/limits ****       static constexpr bool tinyness_before = false;
 847:/usr/include/c++/5/limits ****       static constexpr float_round_style round_style = round_toward_zero;
 848:/usr/include/c++/5/limits ****     };
 849:/usr/include/c++/5/limits **** #endif
 850:/usr/include/c++/5/limits **** 
 851:/usr/include/c++/5/limits ****   /// numeric_limits<short> specialization.
 852:/usr/include/c++/5/limits ****   template<>
 853:/usr/include/c++/5/limits ****     struct numeric_limits<short>
 854:/usr/include/c++/5/limits ****     {
 855:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 856:/usr/include/c++/5/limits **** 
 857:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 858:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 859:/usr/include/c++/5/limits **** 
 860:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 861:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 862:/usr/include/c++/5/limits **** 
 863:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 864:/usr/include/c++/5/limits ****       static constexpr short 
 865:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 866:/usr/include/c++/5/limits **** #endif
 867:/usr/include/c++/5/limits **** 
 868:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (short);
 869:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (short);
 870:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 871:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 872:/usr/include/c++/5/limits **** #endif
 873:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
 874:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 875:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 876:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 877:/usr/include/c++/5/limits **** 
 878:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 879:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 880:/usr/include/c++/5/limits **** 
 881:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 882:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 883:/usr/include/c++/5/limits **** 
 884:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 885:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 886:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 887:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
 888:/usr/include/c++/5/limits **** 
 889:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 890:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 891:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 892:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 893:/usr/include/c++/5/limits ****        = denorm_absent;
 894:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 895:/usr/include/c++/5/limits **** 
 896:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 897:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return short(); }
 898:/usr/include/c++/5/limits **** 
 899:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
GAS LISTING /tmp/cc2K2nX4.s 			page 62


 900:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }
 901:/usr/include/c++/5/limits **** 
 902:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 903:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return short(); }
 904:/usr/include/c++/5/limits **** 
 905:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR short 
 906:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return short(); }
 907:/usr/include/c++/5/limits **** 
 908:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 909:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 910:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
 911:/usr/include/c++/5/limits **** 
 912:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 913:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 914:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 915:/usr/include/c++/5/limits ****        = round_toward_zero;
 916:/usr/include/c++/5/limits ****     };
 917:/usr/include/c++/5/limits **** 
 918:/usr/include/c++/5/limits ****   /// numeric_limits<unsigned short> specialization.
 919:/usr/include/c++/5/limits ****   template<>
 920:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned short>
 921:/usr/include/c++/5/limits ****     {
 922:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 923:/usr/include/c++/5/limits **** 
 924:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 925:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 926:/usr/include/c++/5/limits **** 
 927:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 928:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__ * 2U + 1; }
 929:/usr/include/c++/5/limits **** 
 930:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 931:/usr/include/c++/5/limits ****       static constexpr unsigned short 
 932:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
 933:/usr/include/c++/5/limits **** #endif
 934:/usr/include/c++/5/limits **** 
 935:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
 936:/usr/include/c++/5/limits ****        = __glibcxx_digits (unsigned short);
 937:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
 938:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (unsigned short);
 939:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
 940:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
 941:/usr/include/c++/5/limits **** #endif
 942:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
 943:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
 944:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
 945:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
 946:/usr/include/c++/5/limits **** 
 947:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 948:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
 949:/usr/include/c++/5/limits **** 
 950:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 951:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
 952:/usr/include/c++/5/limits **** 
 953:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
 954:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
 955:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
 956:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
GAS LISTING /tmp/cc2K2nX4.s 			page 63


 957:/usr/include/c++/5/limits **** 
 958:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
 959:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
 960:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
 961:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
 962:/usr/include/c++/5/limits ****        = denorm_absent;
 963:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
 964:/usr/include/c++/5/limits **** 
 965:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 966:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
 967:/usr/include/c++/5/limits ****       { return static_cast<unsigned short>(0); }
 968:/usr/include/c++/5/limits **** 
 969:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 970:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
 971:/usr/include/c++/5/limits ****       { return static_cast<unsigned short>(0); }
 972:/usr/include/c++/5/limits **** 
 973:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 974:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
 975:/usr/include/c++/5/limits ****       { return static_cast<unsigned short>(0); }
 976:/usr/include/c++/5/limits **** 
 977:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned short 
 978:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
 979:/usr/include/c++/5/limits ****       { return static_cast<unsigned short>(0); }
 980:/usr/include/c++/5/limits **** 
 981:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
 982:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
 983:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
 984:/usr/include/c++/5/limits **** 
 985:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
 986:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
 987:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
 988:/usr/include/c++/5/limits ****        = round_toward_zero;
 989:/usr/include/c++/5/limits ****     };
 990:/usr/include/c++/5/limits **** 
 991:/usr/include/c++/5/limits ****   /// numeric_limits<int> specialization.
 992:/usr/include/c++/5/limits ****   template<>
 993:/usr/include/c++/5/limits ****     struct numeric_limits<int>
 994:/usr/include/c++/5/limits ****     {
 995:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
 996:/usr/include/c++/5/limits **** 
 997:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
 998:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }
 999:/usr/include/c++/5/limits **** 
1000:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1001:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }
1002:/usr/include/c++/5/limits **** 
1003:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1004:/usr/include/c++/5/limits ****       static constexpr int 
1005:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1006:/usr/include/c++/5/limits **** #endif
1007:/usr/include/c++/5/limits **** 
1008:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (int);
1009:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (int);
1010:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1011:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1012:/usr/include/c++/5/limits **** #endif
1013:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
GAS LISTING /tmp/cc2K2nX4.s 			page 64


1014:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1015:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1016:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1017:/usr/include/c++/5/limits **** 
1018:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1019:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1020:/usr/include/c++/5/limits **** 
1021:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1022:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1023:/usr/include/c++/5/limits **** 
1024:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1025:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1026:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1027:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1028:/usr/include/c++/5/limits **** 
1029:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1030:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1031:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1032:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1033:/usr/include/c++/5/limits ****        = denorm_absent;
1034:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1035:/usr/include/c++/5/limits **** 
1036:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1037:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1038:/usr/include/c++/5/limits **** 
1039:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1040:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1041:/usr/include/c++/5/limits **** 
1042:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1043:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1044:/usr/include/c++/5/limits **** 
1045:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR int 
1046:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<int>(0); }
1047:/usr/include/c++/5/limits **** 
1048:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1049:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1050:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1051:/usr/include/c++/5/limits **** 
1052:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1053:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1054:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1055:/usr/include/c++/5/limits ****        = round_toward_zero;
1056:/usr/include/c++/5/limits ****     };
1057:/usr/include/c++/5/limits **** 
1058:/usr/include/c++/5/limits ****   /// numeric_limits<unsigned int> specialization.
1059:/usr/include/c++/5/limits ****   template<>
1060:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned int>
1061:/usr/include/c++/5/limits ****     {
1062:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1063:/usr/include/c++/5/limits **** 
1064:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1065:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1066:/usr/include/c++/5/limits **** 
1067:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1068:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__ * 2U + 1; }
1069:/usr/include/c++/5/limits **** 
1070:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
GAS LISTING /tmp/cc2K2nX4.s 			page 65


1071:/usr/include/c++/5/limits ****       static constexpr unsigned int 
1072:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1073:/usr/include/c++/5/limits **** #endif
1074:/usr/include/c++/5/limits **** 
1075:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
1076:/usr/include/c++/5/limits ****        = __glibcxx_digits (unsigned int);
1077:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
1078:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (unsigned int);
1079:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1080:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1081:/usr/include/c++/5/limits **** #endif
1082:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1083:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1084:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1085:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1086:/usr/include/c++/5/limits **** 
1087:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1088:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1089:/usr/include/c++/5/limits **** 
1090:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1091:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1092:/usr/include/c++/5/limits **** 
1093:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1094:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1095:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1096:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1097:/usr/include/c++/5/limits **** 
1098:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1099:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1100:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1101:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1102:/usr/include/c++/5/limits ****        = denorm_absent;
1103:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1104:/usr/include/c++/5/limits **** 
1105:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1106:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned int>(0); }
1107:/usr/include/c++/5/limits **** 
1108:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1109:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1110:/usr/include/c++/5/limits ****       { return static_cast<unsigned int>(0); }
1111:/usr/include/c++/5/limits **** 
1112:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1113:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1114:/usr/include/c++/5/limits ****       { return static_cast<unsigned int>(0); }
1115:/usr/include/c++/5/limits **** 
1116:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned int 
1117:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1118:/usr/include/c++/5/limits ****       { return static_cast<unsigned int>(0); }
1119:/usr/include/c++/5/limits **** 
1120:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1121:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1122:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1123:/usr/include/c++/5/limits **** 
1124:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1125:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1126:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1127:/usr/include/c++/5/limits ****        = round_toward_zero;
GAS LISTING /tmp/cc2K2nX4.s 			page 66


1128:/usr/include/c++/5/limits ****     };
1129:/usr/include/c++/5/limits **** 
1130:/usr/include/c++/5/limits ****   /// numeric_limits<long> specialization.
1131:/usr/include/c++/5/limits ****   template<>
1132:/usr/include/c++/5/limits ****     struct numeric_limits<long>
1133:/usr/include/c++/5/limits ****     {
1134:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1135:/usr/include/c++/5/limits **** 
1136:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long
1137:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
1138:/usr/include/c++/5/limits **** 
1139:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1140:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
1141:/usr/include/c++/5/limits **** 
1142:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1143:/usr/include/c++/5/limits ****       static constexpr long 
1144:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1145:/usr/include/c++/5/limits **** #endif
1146:/usr/include/c++/5/limits **** 
1147:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_digits (long);
1148:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_digits10 (long);
1149:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1150:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1151:/usr/include/c++/5/limits **** #endif
1152:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1153:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1154:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1155:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1156:/usr/include/c++/5/limits **** 
1157:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1158:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1159:/usr/include/c++/5/limits **** 
1160:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1161:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1162:/usr/include/c++/5/limits **** 
1163:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1164:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1165:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1166:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1167:/usr/include/c++/5/limits **** 
1168:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1169:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1170:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1171:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1172:/usr/include/c++/5/limits ****        = denorm_absent;
1173:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1174:/usr/include/c++/5/limits **** 
1175:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1176:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1177:/usr/include/c++/5/limits **** 
1178:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1179:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1180:/usr/include/c++/5/limits **** 
1181:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
1182:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1183:/usr/include/c++/5/limits **** 
1184:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long 
GAS LISTING /tmp/cc2K2nX4.s 			page 67


1185:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long>(0); }
1186:/usr/include/c++/5/limits **** 
1187:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1188:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1189:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1190:/usr/include/c++/5/limits **** 
1191:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1192:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1193:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1194:/usr/include/c++/5/limits ****        = round_toward_zero;
1195:/usr/include/c++/5/limits ****     };
1196:/usr/include/c++/5/limits **** 
1197:/usr/include/c++/5/limits ****   /// numeric_limits<unsigned long> specialization.
1198:/usr/include/c++/5/limits ****   template<>
1199:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned long>
1200:/usr/include/c++/5/limits ****     {
1201:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1202:/usr/include/c++/5/limits **** 
1203:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1204:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1205:/usr/include/c++/5/limits **** 
1206:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1207:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__ * 2UL + 1; }
1208:/usr/include/c++/5/limits **** 
1209:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1210:/usr/include/c++/5/limits ****       static constexpr unsigned long 
1211:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1212:/usr/include/c++/5/limits **** #endif
1213:/usr/include/c++/5/limits **** 
1214:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
1215:/usr/include/c++/5/limits ****        = __glibcxx_digits (unsigned long);
1216:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
1217:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (unsigned long);
1218:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1219:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1220:/usr/include/c++/5/limits **** #endif
1221:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1222:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1223:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1224:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1225:/usr/include/c++/5/limits **** 
1226:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1227:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1228:/usr/include/c++/5/limits **** 
1229:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1230:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1231:/usr/include/c++/5/limits **** 
1232:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1233:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1234:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1235:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1236:/usr/include/c++/5/limits **** 
1237:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1238:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1239:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1240:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1241:/usr/include/c++/5/limits ****        = denorm_absent;
GAS LISTING /tmp/cc2K2nX4.s 			page 68


1242:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1243:/usr/include/c++/5/limits **** 
1244:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1245:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
1246:/usr/include/c++/5/limits ****       { return static_cast<unsigned long>(0); }
1247:/usr/include/c++/5/limits **** 
1248:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1249:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1250:/usr/include/c++/5/limits ****       { return static_cast<unsigned long>(0); }
1251:/usr/include/c++/5/limits **** 
1252:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1253:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1254:/usr/include/c++/5/limits ****       { return static_cast<unsigned long>(0); }
1255:/usr/include/c++/5/limits **** 
1256:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long 
1257:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1258:/usr/include/c++/5/limits ****       { return static_cast<unsigned long>(0); }
1259:/usr/include/c++/5/limits **** 
1260:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1261:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1262:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1263:/usr/include/c++/5/limits **** 
1264:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1265:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1266:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1267:/usr/include/c++/5/limits ****        = round_toward_zero;
1268:/usr/include/c++/5/limits ****     };
1269:/usr/include/c++/5/limits **** 
1270:/usr/include/c++/5/limits ****   /// numeric_limits<long long> specialization.
1271:/usr/include/c++/5/limits ****   template<>
1272:/usr/include/c++/5/limits ****     struct numeric_limits<long long>
1273:/usr/include/c++/5/limits ****     {
1274:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1275:/usr/include/c++/5/limits **** 
1276:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1277:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }
1278:/usr/include/c++/5/limits **** 
1279:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1280:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
1281:/usr/include/c++/5/limits **** 
1282:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1283:/usr/include/c++/5/limits ****       static constexpr long long 
1284:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1285:/usr/include/c++/5/limits **** #endif
1286:/usr/include/c++/5/limits **** 
1287:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
1288:/usr/include/c++/5/limits ****        = __glibcxx_digits (long long);
1289:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
1290:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (long long);
1291:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1292:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1293:/usr/include/c++/5/limits **** #endif
1294:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1295:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1296:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1297:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1298:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 69


1299:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1300:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1301:/usr/include/c++/5/limits **** 
1302:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1303:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1304:/usr/include/c++/5/limits **** 
1305:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1306:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1307:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1308:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1309:/usr/include/c++/5/limits **** 
1310:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1311:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1312:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1313:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1314:/usr/include/c++/5/limits ****        = denorm_absent;
1315:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1316:/usr/include/c++/5/limits **** 
1317:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1318:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1319:/usr/include/c++/5/limits **** 
1320:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1321:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1322:/usr/include/c++/5/limits **** 
1323:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1324:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1325:/usr/include/c++/5/limits ****       { return static_cast<long long>(0); }
1326:/usr/include/c++/5/limits **** 
1327:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR long long 
1328:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<long long>(0); }
1329:/usr/include/c++/5/limits **** 
1330:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1331:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1332:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1333:/usr/include/c++/5/limits **** 
1334:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1335:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1336:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1337:/usr/include/c++/5/limits ****        = round_toward_zero;
1338:/usr/include/c++/5/limits ****     };
1339:/usr/include/c++/5/limits **** 
1340:/usr/include/c++/5/limits ****   /// numeric_limits<unsigned long long> specialization.
1341:/usr/include/c++/5/limits ****   template<>
1342:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned long long>
1343:/usr/include/c++/5/limits ****     {
1344:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1345:/usr/include/c++/5/limits **** 
1346:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1347:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; }
1348:/usr/include/c++/5/limits **** 
1349:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1350:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__ * 2ULL + 1; }
1351:/usr/include/c++/5/limits **** 
1352:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1353:/usr/include/c++/5/limits ****       static constexpr unsigned long long 
1354:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }
1355:/usr/include/c++/5/limits **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 70


1356:/usr/include/c++/5/limits **** 
1357:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 
1358:/usr/include/c++/5/limits ****        = __glibcxx_digits (unsigned long long);
1359:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 
1360:/usr/include/c++/5/limits ****        = __glibcxx_digits10 (unsigned long long);
1361:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1362:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1363:/usr/include/c++/5/limits **** #endif
1364:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;
1365:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true;
1366:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true;
1367:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2;
1368:/usr/include/c++/5/limits **** 
1369:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1370:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; }
1371:/usr/include/c++/5/limits **** 
1372:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1373:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; }
1374:/usr/include/c++/5/limits **** 
1375:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0;
1376:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0;
1377:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0;
1378:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0;
1379:/usr/include/c++/5/limits **** 
1380:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;
1381:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;
1382:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;
1383:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 
1384:/usr/include/c++/5/limits ****        = denorm_absent;
1385:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;
1386:/usr/include/c++/5/limits **** 
1387:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1388:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT
1389:/usr/include/c++/5/limits ****       { return static_cast<unsigned long long>(0); }
1390:/usr/include/c++/5/limits **** 
1391:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1392:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT
1393:/usr/include/c++/5/limits ****       { return static_cast<unsigned long long>(0); }
1394:/usr/include/c++/5/limits **** 
1395:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1396:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT
1397:/usr/include/c++/5/limits ****       { return static_cast<unsigned long long>(0); }
1398:/usr/include/c++/5/limits **** 
1399:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned long long 
1400:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT
1401:/usr/include/c++/5/limits ****       { return static_cast<unsigned long long>(0); }
1402:/usr/include/c++/5/limits **** 
1403:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;
1404:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1405:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true;
1406:/usr/include/c++/5/limits **** 
1407:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps;
1408:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false;
1409:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1410:/usr/include/c++/5/limits ****        = round_toward_zero;
1411:/usr/include/c++/5/limits ****     };
1412:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 71


1413:/usr/include/c++/5/limits **** #if !defined(__STRICT_ANSI__)
1414:/usr/include/c++/5/limits **** 
1415:/usr/include/c++/5/limits **** #define __INT_N(TYPE, BITSIZE, EXT, UEXT)			\
1416:/usr/include/c++/5/limits ****   template<> 									\
1417:/usr/include/c++/5/limits ****     struct numeric_limits<TYPE> 						\
1418:/usr/include/c++/5/limits ****     { 										\
1419:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; 		\
1420:/usr/include/c++/5/limits ****  										\
1421:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1422:/usr/include/c++/5/limits **** 	min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } \
1423:/usr/include/c++/5/limits ****  										\
1424:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1425:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } 	\
1426:/usr/include/c++/5/limits ****  										\
1427:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 					\
1428:/usr/include/c++/5/limits ****        = BITSIZE - 1; 								\
1429:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 				\
1430:/usr/include/c++/5/limits ****        = (BITSIZE - 1) * 643L / 2136; 						\
1431:/usr/include/c++/5/limits ****       										\
1432:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; 			\
1433:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; 			\
1434:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; 			\
1435:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2; 				\
1436:/usr/include/c++/5/limits ****  										\
1437:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1438:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1439:/usr/include/c++/5/limits ****  										\
1440:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1441:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } 			\
1442:/usr/include/c++/5/limits ****  										\
1443:/usr/include/c++/5/limits ****       EXT									\
1444:/usr/include/c++/5/limits ****  										\
1445:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; 			\
1446:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; 			\
1447:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; 			\
1448:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; 			\
1449:/usr/include/c++/5/limits ****  										\
1450:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; 			\
1451:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; 		\
1452:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; 		\
1453:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 		\
1454:/usr/include/c++/5/limits ****        = denorm_absent; 							\
1455:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; 		\
1456:/usr/include/c++/5/limits ****  										\
1457:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1458:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT 						\
1459:/usr/include/c++/5/limits ****       { return static_cast<TYPE>(0); } 						\
1460:/usr/include/c++/5/limits ****  										\
1461:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1462:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1463:/usr/include/c++/5/limits ****       { return static_cast<TYPE>(0); } 						\
1464:/usr/include/c++/5/limits ****        										\
1465:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
1466:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1467:/usr/include/c++/5/limits ****       { return static_cast<TYPE>(0); } 						\
1468:/usr/include/c++/5/limits ****        										\
1469:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR TYPE 						\
GAS LISTING /tmp/cc2K2nX4.s 			page 72


1470:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT 					\
1471:/usr/include/c++/5/limits ****       { return static_cast<TYPE>(0); } 						\
1472:/usr/include/c++/5/limits ****  										\
1473:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; 			\
1474:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; 			\
1475:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; 			\
1476:/usr/include/c++/5/limits ****  										\
1477:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps 					\
1478:/usr/include/c++/5/limits ****        = __glibcxx_integral_traps; 						\
1479:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; 		\
1480:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 		\
1481:/usr/include/c++/5/limits ****        = round_toward_zero; 							\
1482:/usr/include/c++/5/limits ****     }; 										\
1483:/usr/include/c++/5/limits ****  										\
1484:/usr/include/c++/5/limits ****   template<> 									\
1485:/usr/include/c++/5/limits ****     struct numeric_limits<unsigned TYPE> 					\
1486:/usr/include/c++/5/limits ****     { 										\
1487:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; 		\
1488:/usr/include/c++/5/limits ****  										\
1489:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1490:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1491:/usr/include/c++/5/limits ****  										\
1492:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1493:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT						\
1494:/usr/include/c++/5/limits ****       { return  __glibcxx_max_b (unsigned TYPE, BITSIZE); }			\
1495:/usr/include/c++/5/limits ****  										\
1496:/usr/include/c++/5/limits ****       UEXT									\
1497:/usr/include/c++/5/limits ****  										\
1498:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits 					\
1499:/usr/include/c++/5/limits ****        = BITSIZE; 								\
1500:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 				\
1501:/usr/include/c++/5/limits ****        = BITSIZE * 643L / 2136; 						\
1502:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = false; 			\
1503:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; 			\
1504:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; 			\
1505:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = 2; 				\
1506:/usr/include/c++/5/limits ****  										\
1507:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1508:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } 				\
1509:/usr/include/c++/5/limits ****  										\
1510:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1511:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } 			\
1512:/usr/include/c++/5/limits ****  										\
1513:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; 			\
1514:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; 			\
1515:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; 			\
1516:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; 			\
1517:/usr/include/c++/5/limits ****  										\
1518:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; 			\
1519:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; 		\
1520:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; 		\
1521:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm 		\
1522:/usr/include/c++/5/limits ****        = denorm_absent; 							\
1523:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; 		\
1524:/usr/include/c++/5/limits ****  										\
1525:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1526:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT 						\
GAS LISTING /tmp/cc2K2nX4.s 			page 73


1527:/usr/include/c++/5/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1528:/usr/include/c++/5/limits ****  										\
1529:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1530:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1531:/usr/include/c++/5/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1532:/usr/include/c++/5/limits ****  										\
1533:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1534:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT 					\
1535:/usr/include/c++/5/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1536:/usr/include/c++/5/limits ****  										\
1537:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR unsigned TYPE 					\
1538:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT 					\
1539:/usr/include/c++/5/limits ****       { return static_cast<unsigned TYPE>(0); } 				\
1540:/usr/include/c++/5/limits ****  										\
1541:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; 			\
1542:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; 			\
1543:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true; 			\
1544:/usr/include/c++/5/limits ****  										\
1545:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; 	\
1546:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; 		\
1547:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 		\
1548:/usr/include/c++/5/limits ****        = round_toward_zero; 							\
1549:/usr/include/c++/5/limits ****     };
1550:/usr/include/c++/5/limits **** 
1551:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1552:/usr/include/c++/5/limits **** 
1553:/usr/include/c++/5/limits **** #define __INT_N_201103(TYPE)							\
1554:/usr/include/c++/5/limits ****       static constexpr TYPE 							\
1555:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }					\
1556:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1557:/usr/include/c++/5/limits **** 
1558:/usr/include/c++/5/limits **** #define __INT_N_U201103(TYPE)							\
1559:/usr/include/c++/5/limits ****       static constexpr unsigned TYPE 						\
1560:/usr/include/c++/5/limits ****       lowest() noexcept { return min(); }					\
1561:/usr/include/c++/5/limits ****       static constexpr int max_digits10 = 0;
1562:/usr/include/c++/5/limits **** 
1563:/usr/include/c++/5/limits **** #else
1564:/usr/include/c++/5/limits **** #define __INT_N_201103(TYPE)
1565:/usr/include/c++/5/limits **** #define __INT_N_U201103(TYPE)
1566:/usr/include/c++/5/limits **** #endif
1567:/usr/include/c++/5/limits **** 
1568:/usr/include/c++/5/limits **** #ifdef __GLIBCXX_TYPE_INT_N_0
1569:/usr/include/c++/5/limits ****   __INT_N(__GLIBCXX_TYPE_INT_N_0, __GLIBCXX_BITSIZE_INT_N_0,
1570:/usr/include/c++/5/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_0), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_0))
1571:/usr/include/c++/5/limits **** #endif
1572:/usr/include/c++/5/limits **** #ifdef __GLIBCXX_TYPE_INT_N_1
1573:/usr/include/c++/5/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_1, __GLIBCXX_BITSIZE_INT_N_1,
1574:/usr/include/c++/5/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_1), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_1))
1575:/usr/include/c++/5/limits **** #endif
1576:/usr/include/c++/5/limits **** #ifdef __GLIBCXX_TYPE_INT_N_2
1577:/usr/include/c++/5/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_2, __GLIBCXX_BITSIZE_INT_N_2,
1578:/usr/include/c++/5/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_2), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_2))
1579:/usr/include/c++/5/limits **** #endif
1580:/usr/include/c++/5/limits **** #ifdef __GLIBCXX_TYPE_INT_N_3
1581:/usr/include/c++/5/limits ****   __INT_N (__GLIBCXX_TYPE_INT_N_3, __GLIBCXX_BITSIZE_INT_N_3,
1582:/usr/include/c++/5/limits **** 	  __INT_N_201103 (__GLIBCXX_TYPE_INT_N_3), __INT_N_U201103 (__GLIBCXX_TYPE_INT_N_3))
1583:/usr/include/c++/5/limits **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 74


1584:/usr/include/c++/5/limits **** 
1585:/usr/include/c++/5/limits **** #undef __INT_N
1586:/usr/include/c++/5/limits **** #undef __INT_N_201103
1587:/usr/include/c++/5/limits **** #undef __INT_N_U201103
1588:/usr/include/c++/5/limits **** 
1589:/usr/include/c++/5/limits **** #endif
1590:/usr/include/c++/5/limits **** 
1591:/usr/include/c++/5/limits ****   /// numeric_limits<float> specialization.
1592:/usr/include/c++/5/limits ****   template<>
1593:/usr/include/c++/5/limits ****     struct numeric_limits<float>
1594:/usr/include/c++/5/limits ****     {
1595:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1596:/usr/include/c++/5/limits **** 
1597:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1598:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }
1599:/usr/include/c++/5/limits **** 
1600:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1601:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
1602:/usr/include/c++/5/limits **** 
1603:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1604:/usr/include/c++/5/limits ****       static constexpr float 
1605:/usr/include/c++/5/limits ****       lowest() noexcept { return -__FLT_MAX__; }
1606:/usr/include/c++/5/limits **** #endif
1607:/usr/include/c++/5/limits **** 
1608:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __FLT_MANT_DIG__;
1609:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __FLT_DIG__;
1610:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1611:/usr/include/c++/5/limits ****       static constexpr int max_digits10
1612:/usr/include/c++/5/limits **** 	 = __glibcxx_max_digits10 (__FLT_MANT_DIG__);
1613:/usr/include/c++/5/limits **** #endif
1614:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1615:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
1616:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
1617:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;
1618:/usr/include/c++/5/limits **** 
1619:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1620:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
1621:/usr/include/c++/5/limits **** 
1622:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1623:/usr/include/c++/5/limits ****       round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5F; }
1624:/usr/include/c++/5/limits **** 
1625:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent = __FLT_MIN_EXP__;
1626:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __FLT_MIN_10_EXP__;
1627:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent = __FLT_MAX_EXP__;
1628:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = __FLT_MAX_10_EXP__;
1629:/usr/include/c++/5/limits **** 
1630:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_infinity = __FLT_HAS_INFINITY__;
1631:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = __FLT_HAS_QUIET_NAN__;
1632:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = has_quiet_NaN;
1633:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm
1634:/usr/include/c++/5/limits **** 	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
1635:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss 
1636:/usr/include/c++/5/limits ****        = __glibcxx_float_has_denorm_loss;
1637:/usr/include/c++/5/limits **** 
1638:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1639:/usr/include/c++/5/limits ****       infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
1640:/usr/include/c++/5/limits **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 75


1641:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1642:/usr/include/c++/5/limits ****       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanf(""); }
1643:/usr/include/c++/5/limits **** 
1644:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1645:/usr/include/c++/5/limits ****       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansf(""); }
1646:/usr/include/c++/5/limits **** 
1647:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR float 
1648:/usr/include/c++/5/limits ****       denorm_min() _GLIBCXX_USE_NOEXCEPT { return __FLT_DENORM_MIN__; }
1649:/usr/include/c++/5/limits **** 
1650:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_iec559
1651:/usr/include/c++/5/limits **** 	= has_infinity && has_quiet_NaN && has_denorm == denorm_present;
1652:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true;
1653:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false;
1654:/usr/include/c++/5/limits **** 
1655:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_float_traps;
1656:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool tinyness_before 
1657:/usr/include/c++/5/limits ****        = __glibcxx_float_tinyness_before;
1658:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR float_round_style round_style 
1659:/usr/include/c++/5/limits ****        = round_to_nearest;
1660:/usr/include/c++/5/limits ****     };
1661:/usr/include/c++/5/limits **** 
1662:/usr/include/c++/5/limits **** #undef __glibcxx_float_has_denorm_loss
1663:/usr/include/c++/5/limits **** #undef __glibcxx_float_traps
1664:/usr/include/c++/5/limits **** #undef __glibcxx_float_tinyness_before
1665:/usr/include/c++/5/limits **** 
1666:/usr/include/c++/5/limits ****   /// numeric_limits<double> specialization.
1667:/usr/include/c++/5/limits ****   template<>
1668:/usr/include/c++/5/limits ****     struct numeric_limits<double>
1669:/usr/include/c++/5/limits ****     {
1670:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;
1671:/usr/include/c++/5/limits **** 
1672:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR double 
1673:/usr/include/c++/5/limits ****       min() _GLIBCXX_USE_NOEXCEPT { return __DBL_MIN__; }
1674:/usr/include/c++/5/limits **** 
1675:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR double 
1676:/usr/include/c++/5/limits ****       max() _GLIBCXX_USE_NOEXCEPT { return __DBL_MAX__; }
1677:/usr/include/c++/5/limits **** 
1678:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1679:/usr/include/c++/5/limits ****       static constexpr double 
1680:/usr/include/c++/5/limits ****       lowest() noexcept { return -__DBL_MAX__; }
1681:/usr/include/c++/5/limits **** #endif
1682:/usr/include/c++/5/limits **** 
1683:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits = __DBL_MANT_DIG__;
1684:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int digits10 = __DBL_DIG__;
1685:/usr/include/c++/5/limits **** #if __cplusplus >= 201103L
1686:/usr/include/c++/5/limits ****       static constexpr int max_digits10
1687:/usr/include/c++/5/limits **** 	 = __glibcxx_max_digits10 (__DBL_MANT_DIG__);
1688:/usr/include/c++/5/limits **** #endif
1689:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_signed = true;
1690:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
1691:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
1692:/usr/include/c++/5/limits ****       static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;
1693:/usr/include/c++/5/limits **** 
1694:/usr/include/c++/5/limits ****       static _GLIBCXX_CONSTEXPR double 
1695:/usr/include/c++/5/limits ****       epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }
 1707              		.loc 8 1695 0
 1708              		.cfi_startproc
GAS LISTING /tmp/cc2K2nX4.s 			page 76


 1709 0000 55       		pushq	%rbp
 1710              		.cfi_def_cfa_offset 16
 1711              		.cfi_offset 6, -16
 1712 0001 4889E5   		movq	%rsp, %rbp
 1713              		.cfi_def_cfa_register 6
 1714              		.loc 8 1695 0
 1715 0004 F20F1005 		movsd	.LC0(%rip), %xmm0
 1715      00000000 
 1716 000c 5D       		popq	%rbp
 1717              		.cfi_def_cfa 7, 8
 1718 000d C3       		ret
 1719              		.cfi_endproc
 1720              	.LFE2330:
 1722              		.text
 1723              		.align 2
 1724              		.globl	_ZN6SolverC2Ev
 1726              	_ZN6SolverC2Ev:
 1727              	.LFB7174:
 1728              		.file 9 "/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp"
   1:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <math.h>
   2:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <cmath>
   3:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include "Solver.h"
   4:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
   5:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include "vector_var.h"
   6:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <iostream>
   7:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include "Solution.h"
   8:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <fstream>
   9:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <global_variables.h>
  10:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include "residuals.h"
  11:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <cstdio>
  12:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <ctime>
  13:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include "artificial_dissipation.h"
  14:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <boost/math/special_functions/sign.hpp>
  15:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <limits>
  16:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <RungeKutta.h>
  17:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** #include <tecplot_output.h>
  18:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  19:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** using namespace std;
  20:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** Solver::Solver()
 1729              		.loc 9 20 0
 1730              		.cfi_startproc
 1731 0000 55       		pushq	%rbp
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 6, -16
 1734 0001 4889E5   		movq	%rsp, %rbp
 1735              		.cfi_def_cfa_register 6
 1736 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1737              	.LBB3:
 1738              		.loc 9 20 0
 1739 0008 BA000000 		movl	$_ZTV6Solver+16, %edx
 1739      00
 1740 000d 488B45F8 		movq	-8(%rbp), %rax
 1741 0011 488910   		movq	%rdx, (%rax)
 1742              	.LBE3:
  21:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
  22:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //ctor
  23:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
GAS LISTING /tmp/cc2K2nX4.s 			page 77


 1743              		.loc 9 23 0
 1744 0014 90       		nop
 1745 0015 5D       		popq	%rbp
 1746              		.cfi_def_cfa 7, 8
 1747 0016 C3       		ret
 1748              		.cfi_endproc
 1749              	.LFE7174:
 1751              		.globl	_ZN6SolverC1Ev
 1752              		.set	_ZN6SolverC1Ev,_ZN6SolverC2Ev
 1753 0017 90       		.align 2
 1754              		.globl	_ZN6SolverD2Ev
 1756              	_ZN6SolverD2Ev:
 1757              	.LFB7177:
  24:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  25:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** Solver::~Solver()
 1758              		.loc 9 25 0
 1759              		.cfi_startproc
 1760 0018 55       		pushq	%rbp
 1761              		.cfi_def_cfa_offset 16
 1762              		.cfi_offset 6, -16
 1763 0019 4889E5   		movq	%rsp, %rbp
 1764              		.cfi_def_cfa_register 6
 1765 001c 4883EC10 		subq	$16, %rsp
 1766 0020 48897DF8 		movq	%rdi, -8(%rbp)
 1767              	.LBB4:
 1768              		.loc 9 25 0
 1769 0024 BA000000 		movl	$_ZTV6Solver+16, %edx
 1769      00
 1770 0029 488B45F8 		movq	-8(%rbp), %rax
 1771 002d 488910   		movq	%rdx, (%rax)
 1772              	.LBE4:
  26:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
  27:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //dtor
  28:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 1773              		.loc 9 28 0
 1774 0030 B8000000 		movl	$0, %eax
 1774      00
 1775 0035 85C0     		testl	%eax, %eax
 1776 0037 740C     		je	.L112
 1777              		.loc 9 28 0 is_stmt 0 discriminator 1
 1778 0039 488B45F8 		movq	-8(%rbp), %rax
 1779 003d 4889C7   		movq	%rax, %rdi
 1780 0040 E8000000 		call	_ZdlPv
 1780      00
 1781              	.L112:
 1782              		.loc 9 28 0
 1783 0045 C9       		leave
 1784              		.cfi_def_cfa 7, 8
 1785 0046 C3       		ret
 1786              		.cfi_endproc
 1787              	.LFE7177:
 1789              		.globl	_ZN6SolverD1Ev
 1790              		.set	_ZN6SolverD1Ev,_ZN6SolverD2Ev
 1791 0047 90       		.align 2
 1792              		.globl	_ZN6SolverD0Ev
 1794              	_ZN6SolverD0Ev:
 1795              	.LFB7179:
GAS LISTING /tmp/cc2K2nX4.s 			page 78


  25:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
 1796              		.loc 9 25 0 is_stmt 1
 1797              		.cfi_startproc
 1798 0048 55       		pushq	%rbp
 1799              		.cfi_def_cfa_offset 16
 1800              		.cfi_offset 6, -16
 1801 0049 4889E5   		movq	%rsp, %rbp
 1802              		.cfi_def_cfa_register 6
 1803 004c 4883EC10 		subq	$16, %rsp
 1804 0050 48897DF8 		movq	%rdi, -8(%rbp)
 1805              		.loc 9 28 0
 1806 0054 488B45F8 		movq	-8(%rbp), %rax
 1807 0058 4889C7   		movq	%rax, %rdi
 1808 005b E8000000 		call	_ZN6SolverD1Ev
 1808      00
 1809 0060 488B45F8 		movq	-8(%rbp), %rax
 1810 0064 4889C7   		movq	%rax, %rdi
 1811 0067 E8000000 		call	_ZdlPv
 1811      00
 1812 006c C9       		leave
 1813              		.cfi_def_cfa 7, 8
 1814 006d C3       		ret
 1815              		.cfi_endproc
 1816              	.LFE7179:
 1818              		.align 2
 1819              		.globl	_ZN6Solver26cell_interface_initialiserERdR10vector_varR8flux_varS4_
 1821              	_ZN6Solver26cell_interface_initialiserERdR10vector_varR8flux_varS4_:
 1822              	.LFB7180:
  29:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  30:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  31:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::cell_interface_initialiser( double &rho_interface,vector_var &rho_u_interface,
  32:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                         flux_var &x_flux,flux_var &y_flux ){
 1823              		.loc 9 32 0
 1824              		.cfi_startproc
 1825 006e 55       		pushq	%rbp
 1826              		.cfi_def_cfa_offset 16
 1827              		.cfi_offset 6, -16
 1828 006f 4889E5   		movq	%rsp, %rbp
 1829              		.cfi_def_cfa_register 6
 1830 0072 48897DF8 		movq	%rdi, -8(%rbp)
 1831 0076 488975F0 		movq	%rsi, -16(%rbp)
 1832 007a 488955E8 		movq	%rdx, -24(%rbp)
 1833 007e 48894DE0 		movq	%rcx, -32(%rbp)
 1834 0082 4C8945D8 		movq	%r8, -40(%rbp)
  33:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // initialise variables
  34:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****      // add in reset function
  35:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     rho_interface = 0;
 1835              		.loc 9 35 0
 1836 0086 488B45F0 		movq	-16(%rbp), %rax
 1837 008a 660FEFC0 		pxor	%xmm0, %xmm0
 1838 008e F20F1100 		movsd	%xmm0, (%rax)
  36:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  37:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     rho_u_interface.x =0;
 1839              		.loc 9 37 0
 1840 0092 488B45E8 		movq	-24(%rbp), %rax
 1841 0096 660FEFC0 		pxor	%xmm0, %xmm0
 1842 009a F20F1140 		movsd	%xmm0, 8(%rax)
GAS LISTING /tmp/cc2K2nX4.s 			page 79


 1842      08
  38:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     rho_u_interface.y = 0;
 1843              		.loc 9 38 0
 1844 009f 488B45E8 		movq	-24(%rbp), %rax
 1845 00a3 660FEFC0 		pxor	%xmm0, %xmm0
 1846 00a7 F20F1140 		movsd	%xmm0, 16(%rax)
 1846      10
  39:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     rho_u_interface.z = 0;
 1847              		.loc 9 39 0
 1848 00ac 488B45E8 		movq	-24(%rbp), %rax
 1849 00b0 660FEFC0 		pxor	%xmm0, %xmm0
 1850 00b4 F20F1140 		movsd	%xmm0, 24(%rax)
 1850      18
  40:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  41:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     x_flux.P = 0;
 1851              		.loc 9 41 0
 1852 00b9 488B45E0 		movq	-32(%rbp), %rax
 1853 00bd 660FEFC0 		pxor	%xmm0, %xmm0
 1854 00c1 F20F1140 		movsd	%xmm0, 8(%rax)
 1854      08
  42:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     x_flux.momentum_x =0;
 1855              		.loc 9 42 0
 1856 00c6 488B45E0 		movq	-32(%rbp), %rax
 1857 00ca 660FEFC0 		pxor	%xmm0, %xmm0
 1858 00ce F20F1140 		movsd	%xmm0, 16(%rax)
 1858      10
  43:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     x_flux.momentum_y =0;
 1859              		.loc 9 43 0
 1860 00d3 488B45E0 		movq	-32(%rbp), %rax
 1861 00d7 660FEFC0 		pxor	%xmm0, %xmm0
 1862 00db F20F1140 		movsd	%xmm0, 24(%rax)
 1862      18
  44:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     x_flux.momentum_z =0;
 1863              		.loc 9 44 0
 1864 00e0 488B45E0 		movq	-32(%rbp), %rax
 1865 00e4 660FEFC0 		pxor	%xmm0, %xmm0
 1866 00e8 F20F1140 		movsd	%xmm0, 32(%rax)
 1866      20
  45:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  46:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     y_flux.P = 0;
 1867              		.loc 9 46 0
 1868 00ed 488B45D8 		movq	-40(%rbp), %rax
 1869 00f1 660FEFC0 		pxor	%xmm0, %xmm0
 1870 00f5 F20F1140 		movsd	%xmm0, 8(%rax)
 1870      08
  47:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     y_flux.momentum_x =0;
 1871              		.loc 9 47 0
 1872 00fa 488B45D8 		movq	-40(%rbp), %rax
 1873 00fe 660FEFC0 		pxor	%xmm0, %xmm0
 1874 0102 F20F1140 		movsd	%xmm0, 16(%rax)
 1874      10
  48:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     y_flux.momentum_y =0;
 1875              		.loc 9 48 0
 1876 0107 488B45D8 		movq	-40(%rbp), %rax
 1877 010b 660FEFC0 		pxor	%xmm0, %xmm0
 1878 010f F20F1140 		movsd	%xmm0, 24(%rax)
 1878      18
GAS LISTING /tmp/cc2K2nX4.s 			page 80


  49:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     y_flux.momentum_z =0;
 1879              		.loc 9 49 0
 1880 0114 488B45D8 		movq	-40(%rbp), %rax
 1881 0118 660FEFC0 		pxor	%xmm0, %xmm0
 1882 011c F20F1140 		movsd	%xmm0, 32(%rax)
 1882      20
  50:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  51:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 1883              		.loc 9 51 0
 1884 0121 90       		nop
 1885 0122 5D       		popq	%rbp
 1886              		.cfi_def_cfa 7, 8
 1887 0123 C3       		ret
 1888              		.cfi_endproc
 1889              	.LFE7180:
 1891              		.section	.text._ZN10vector_varC2ERKS_,"axG",@progbits,_ZN10vector_varC5ERKS_,comdat
 1892              		.align 2
 1893              		.weak	_ZN10vector_varC2ERKS_
 1895              	_ZN10vector_varC2ERKS_:
 1896              	.LFB7183:
   5:include/vector_var.h **** {
 1897              		.loc 5 5 0
 1898              		.cfi_startproc
 1899 0000 55       		pushq	%rbp
 1900              		.cfi_def_cfa_offset 16
 1901              		.cfi_offset 6, -16
 1902 0001 4889E5   		movq	%rsp, %rbp
 1903              		.cfi_def_cfa_register 6
 1904 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1905 0008 488975F0 		movq	%rsi, -16(%rbp)
 1906              	.LBB5:
   5:include/vector_var.h **** {
 1907              		.loc 5 5 0
 1908 000c BA000000 		movl	$_ZTV10vector_var+16, %edx
 1908      00
 1909 0011 488B45F8 		movq	-8(%rbp), %rax
 1910 0015 488910   		movq	%rdx, (%rax)
 1911 0018 488B45F0 		movq	-16(%rbp), %rax
 1912 001c F20F1040 		movsd	8(%rax), %xmm0
 1912      08
 1913 0021 488B45F8 		movq	-8(%rbp), %rax
 1914 0025 F20F1140 		movsd	%xmm0, 8(%rax)
 1914      08
 1915 002a 488B45F0 		movq	-16(%rbp), %rax
 1916 002e F20F1040 		movsd	16(%rax), %xmm0
 1916      10
 1917 0033 488B45F8 		movq	-8(%rbp), %rax
 1918 0037 F20F1140 		movsd	%xmm0, 16(%rax)
 1918      10
 1919 003c 488B45F0 		movq	-16(%rbp), %rax
 1920 0040 F20F1040 		movsd	24(%rax), %xmm0
 1920      18
 1921 0045 488B45F8 		movq	-8(%rbp), %rax
 1922 0049 F20F1140 		movsd	%xmm0, 24(%rax)
 1922      18
 1923              	.LBE5:
 1924 004e 90       		nop
GAS LISTING /tmp/cc2K2nX4.s 			page 81


 1925 004f 5D       		popq	%rbp
 1926              		.cfi_def_cfa 7, 8
 1927 0050 C3       		ret
 1928              		.cfi_endproc
 1929              	.LFE7183:
 1931              		.weak	_ZN10vector_varC1ERKS_
 1932              		.set	_ZN10vector_varC1ERKS_,_ZN10vector_varC2ERKS_
 1933              		.section	.text._ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_
 1934              		.weak	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__value
 1936              	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__ty
 1937              	.LFB7185:
 434:/usr/include/c++/5/cmath ****     {
 1938              		.loc 1 434 0
 1939              		.cfi_startproc
 1940 0000 55       		pushq	%rbp
 1941              		.cfi_def_cfa_offset 16
 1942              		.cfi_offset 6, -16
 1943 0001 4889E5   		movq	%rsp, %rbp
 1944              		.cfi_def_cfa_register 6
 1945 0004 4883EC20 		subq	$32, %rsp
 1946 0008 F20F1145 		movsd	%xmm0, -8(%rbp)
 1946      F8
 1947 000d 897DF4   		movl	%edi, -12(%rbp)
 437:/usr/include/c++/5/cmath ****     }
 1948              		.loc 1 437 0
 1949 0010 660FEFC0 		pxor	%xmm0, %xmm0
 1950 0014 F20F2A45 		cvtsi2sd	-12(%rbp), %xmm0
 1950      F4
 1951 0019 488B45F8 		movq	-8(%rbp), %rax
 1952 001d 660F28C8 		movapd	%xmm0, %xmm1
 1953 0021 488945E8 		movq	%rax, -24(%rbp)
 1954 0025 F20F1045 		movsd	-24(%rbp), %xmm0
 1954      E8
 1955 002a E8000000 		call	pow
 1955      00
 1956 002f 66480F7E 		movq	%xmm0, %rax
 1956      C0
 1957 0034 488945E8 		movq	%rax, -24(%rbp)
 1958 0038 F20F1045 		movsd	-24(%rbp), %xmm0
 1958      E8
 438:/usr/include/c++/5/cmath **** 
 1959              		.loc 1 438 0
 1960 003d C9       		leave
 1961              		.cfi_def_cfa 7, 8
 1962 003e C3       		ret
 1963              		.cfi_endproc
 1964              	.LFE7185:
 1966              		.text
 1967              		.align 2
 1968              		.globl	_ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi
 1970              	_ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi:
 1971              	.LFB7181:
  52:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  53:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  54:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** double Solver::feq_calc_incomp(double weight, vector_var e_alpha, vector_var u_lattice, double u_ma
  55:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         double cs, double rho_lattice, double rho_0, int k){
 1972              		.loc 9 55 0
GAS LISTING /tmp/cc2K2nX4.s 			page 82


 1973              		.cfi_startproc
 1974              		.cfi_personality 0x3,__gxx_personality_v0
 1975              		.cfi_lsda 0x3,.LLSDA7181
 1976 0124 55       		pushq	%rbp
 1977              		.cfi_def_cfa_offset 16
 1978              		.cfi_offset 6, -16
 1979 0125 4889E5   		movq	%rsp, %rbp
 1980              		.cfi_def_cfa_register 6
 1981 0128 53       		pushq	%rbx
 1982 0129 4881EC98 		subq	$152, %rsp
 1982      000000
 1983              		.cfi_offset 3, -24
 1984 0130 48897DA8 		movq	%rdi, -88(%rbp)
 1985 0134 F20F1145 		movsd	%xmm0, -96(%rbp)
 1985      A0
 1986 0139 48897598 		movq	%rsi, -104(%rbp)
 1987 013d 48895590 		movq	%rdx, -112(%rbp)
 1988 0141 F20F114D 		movsd	%xmm1, -120(%rbp)
 1988      88
 1989 0146 F20F1155 		movsd	%xmm2, -128(%rbp)
 1989      80
 1990 014b F20F119D 		movsd	%xmm3, -136(%rbp)
 1990      78FFFFFF 
 1991 0153 F20F11A5 		movsd	%xmm4, -144(%rbp)
 1991      70FFFFFF 
 1992 015b 898D6CFF 		movl	%ecx, -148(%rbp)
 1992      FFFF
 1993              		.loc 9 55 0
 1994 0161 64488B04 		movq	%fs:40, %rax
 1994      25280000 
 1994      00
 1995 016a 488945E8 		movq	%rax, -24(%rbp)
 1996 016e 31C0     		xorl	%eax, %eax
  56:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double feq;
  57:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  58:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  59:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = e_alpha.Dot_Product(u_lattice) *3.0 ;
 1997              		.loc 9 59 0
 1998 0170 488B5590 		movq	-112(%rbp), %rdx
 1999 0174 488D45C0 		leaq	-64(%rbp), %rax
 2000 0178 4889D6   		movq	%rdx, %rsi
 2001 017b 4889C7   		movq	%rax, %rdi
 2002 017e E8000000 		call	_ZN10vector_varC1ERKS_
 2002      00
 2003 0183 488D55C0 		leaq	-64(%rbp), %rdx
 2004 0187 488B4598 		movq	-104(%rbp), %rax
 2005 018b 4889D6   		movq	%rdx, %rsi
 2006 018e 4889C7   		movq	%rax, %rdi
 2007              	.LEHB0:
 2008 0191 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 2008      00
 2009              	.LEHE0:
 2010 0196 660F28C8 		movapd	%xmm0, %xmm1
 2011 019a F20F1005 		movsd	.LC2(%rip), %xmm0
 2011      00000000 
 2012 01a2 F20F59C1 		mulsd	%xmm1, %xmm0
 2013 01a6 F20F1145 		movsd	%xmm0, -72(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 83


 2013      B8
 2014 01ab 488D45C0 		leaq	-64(%rbp), %rax
 2015 01af 4889C7   		movq	%rax, %rdi
 2016 01b2 E8000000 		call	_ZN10vector_varD1Ev
 2016      00
  60:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2017              		.loc 9 60 0
 2018 01b7 488B5590 		movq	-112(%rbp), %rdx
 2019 01bb 488D45C0 		leaq	-64(%rbp), %rax
 2020 01bf 4889D6   		movq	%rdx, %rsi
 2021 01c2 4889C7   		movq	%rax, %rdi
 2022 01c5 E8000000 		call	_ZN10vector_varC1ERKS_
 2022      00
 2023 01ca 488D55C0 		leaq	-64(%rbp), %rdx
 2024 01ce 488B4598 		movq	-104(%rbp), %rax
 2025 01d2 4889D6   		movq	%rdx, %rsi
 2026 01d5 4889C7   		movq	%rax, %rdi
 2027              	.LEHB1:
 2028 01d8 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 2028      00
 2029              	.LEHE1:
 2030              		.loc 9 60 0 is_stmt 0 discriminator 2
 2031 01dd BF020000 		movl	$2, %edi
 2031      00
 2032 01e2 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 2032      00
 2033 01e7 F20F1185 		movsd	%xmm0, -160(%rbp)
 2033      60FFFFFF 
 2034 01ef F20F1045 		movsd	-120(%rbp), %xmm0
 2034      88
 2035 01f4 F20F5945 		mulsd	-128(%rbp), %xmm0
 2035      80
 2036 01f9 BF020000 		movl	$2, %edi
 2036      00
 2037 01fe E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 2037      00
 2038 0203 F20F10AD 		movsd	-160(%rbp), %xmm5
 2038      60FFFFFF 
 2039 020b F20F5CE8 		subsd	%xmm0, %xmm5
 2040 020f 660F28C5 		movapd	%xmm5, %xmm0
  61:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     *4.5;
 2041              		.loc 9 61 0 is_stmt 1 discriminator 2
 2042 0213 F20F100D 		movsd	.LC3(%rip), %xmm1
 2042      00000000 
 2043 021b F20F59C1 		mulsd	%xmm1, %xmm0
 2044 021f F20F104D 		movsd	-72(%rbp), %xmm1
 2044      B8
 2045 0224 F20F58C1 		addsd	%xmm1, %xmm0
 2046 0228 F20F1145 		movsd	%xmm0, -72(%rbp)
 2046      B8
  60:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2047              		.loc 9 60 0 discriminator 2
 2048 022d 488D45C0 		leaq	-64(%rbp), %rax
 2049 0231 4889C7   		movq	%rax, %rdi
 2050 0234 E8000000 		call	_ZN10vector_varD1Ev
 2050      00
  62:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq= feq *weight *rho_0 ;
GAS LISTING /tmp/cc2K2nX4.s 			page 84


 2051              		.loc 9 62 0 discriminator 2
 2052 0239 F20F1045 		movsd	-72(%rbp), %xmm0
 2052      B8
 2053 023e F20F5945 		mulsd	-96(%rbp), %xmm0
 2053      A0
 2054 0243 F20F5985 		mulsd	-144(%rbp), %xmm0
 2054      70FFFFFF 
 2055 024b F20F1145 		movsd	%xmm0, -72(%rbp)
 2055      B8
  63:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****      feq = feq + weight *rho_lattice ;
 2056              		.loc 9 63 0 discriminator 2
 2057 0250 F20F1045 		movsd	-96(%rbp), %xmm0
 2057      A0
 2058 0255 F20F5985 		mulsd	-136(%rbp), %xmm0
 2058      78FFFFFF 
 2059 025d F20F104D 		movsd	-72(%rbp), %xmm1
 2059      B8
 2060 0262 F20F58C1 		addsd	%xmm1, %xmm0
 2061 0266 F20F1145 		movsd	%xmm0, -72(%rbp)
 2061      B8
  64:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  65:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     return feq;
 2062              		.loc 9 65 0 discriminator 2
 2063 026b F20F1045 		movsd	-72(%rbp), %xmm0
 2063      B8
  66:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  67:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 2064              		.loc 9 67 0 discriminator 2
 2065 0270 488B45E8 		movq	-24(%rbp), %rax
 2066 0274 64483304 		xorq	%fs:40, %rax
 2066      25280000 
 2066      00
 2067 027d 743B     		je	.L123
 2068 027f EB34     		jmp	.L126
 2069              	.L124:
 2070 0281 4889C3   		movq	%rax, %rbx
  59:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2071              		.loc 9 59 0
 2072 0284 488D45C0 		leaq	-64(%rbp), %rax
 2073 0288 4889C7   		movq	%rax, %rdi
 2074 028b E8000000 		call	_ZN10vector_varD1Ev
 2074      00
 2075 0290 4889D8   		movq	%rbx, %rax
 2076 0293 4889C7   		movq	%rax, %rdi
 2077              	.LEHB2:
 2078 0296 E8000000 		call	_Unwind_Resume
 2078      00
 2079              	.L125:
 2080 029b 4889C3   		movq	%rax, %rbx
  60:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     *4.5;
 2081              		.loc 9 60 0
 2082 029e 488D45C0 		leaq	-64(%rbp), %rax
 2083 02a2 4889C7   		movq	%rax, %rdi
 2084 02a5 E8000000 		call	_ZN10vector_varD1Ev
 2084      00
 2085 02aa 4889D8   		movq	%rbx, %rax
 2086 02ad 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 85


 2087 02b0 E8000000 		call	_Unwind_Resume
 2087      00
 2088              	.LEHE2:
 2089              	.L126:
 2090              		.loc 9 67 0
 2091 02b5 E8000000 		call	__stack_chk_fail
 2091      00
 2092              	.L123:
 2093 02ba 4881C498 		addq	$152, %rsp
 2093      000000
 2094 02c1 5B       		popq	%rbx
 2095 02c2 5D       		popq	%rbp
 2096              		.cfi_def_cfa 7, 8
 2097 02c3 C3       		ret
 2098              		.cfi_endproc
 2099              	.LFE7181:
 2100              		.globl	__gxx_personality_v0
 2101              		.section	.gcc_except_table,"a",@progbits
 2102              	.LLSDA7181:
 2103 0000 FF       		.byte	0xff
 2104 0001 FF       		.byte	0xff
 2105 0002 01       		.byte	0x1
 2106 0003 10       		.uleb128 .LLSDACSE7181-.LLSDACSB7181
 2107              	.LLSDACSB7181:
 2108 0004 6D       		.uleb128 .LEHB0-.LFB7181
 2109 0005 05       		.uleb128 .LEHE0-.LEHB0
 2110 0006 DD02     		.uleb128 .L124-.LFB7181
 2111 0008 00       		.uleb128 0
 2112 0009 B401     		.uleb128 .LEHB1-.LFB7181
 2113 000b 05       		.uleb128 .LEHE1-.LEHB1
 2114 000c F702     		.uleb128 .L125-.LFB7181
 2115 000e 00       		.uleb128 0
 2116 000f F202     		.uleb128 .LEHB2-.LFB7181
 2117 0011 1F       		.uleb128 .LEHE2-.LEHB2
 2118 0012 00       		.uleb128 0
 2119 0013 00       		.uleb128 0
 2120              	.LLSDACSE7181:
 2121              		.text
 2123              		.align 2
 2124              		.globl	_ZN6Solver8feq_calcEd10vector_varS0_ddd
 2126              	_ZN6Solver8feq_calcEd10vector_varS0_ddd:
 2127              	.LFB7186:
  68:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  69:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  70:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** double Solver::feq_calc(double weight, vector_var e_alpha, vector_var u_lattice, double u_magnitude
  71:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         double cs, double rho_lattice){
 2128              		.loc 9 71 0
 2129              		.cfi_startproc
 2130              		.cfi_personality 0x3,__gxx_personality_v0
 2131              		.cfi_lsda 0x3,.LLSDA7186
 2132 02c4 55       		pushq	%rbp
 2133              		.cfi_def_cfa_offset 16
 2134              		.cfi_offset 6, -16
 2135 02c5 4889E5   		movq	%rsp, %rbp
 2136              		.cfi_def_cfa_register 6
 2137 02c8 53       		pushq	%rbx
 2138 02c9 4881EC88 		subq	$136, %rsp
GAS LISTING /tmp/cc2K2nX4.s 			page 86


 2138      000000
 2139              		.cfi_offset 3, -24
 2140 02d0 48897DA8 		movq	%rdi, -88(%rbp)
 2141 02d4 F20F1145 		movsd	%xmm0, -96(%rbp)
 2141      A0
 2142 02d9 48897598 		movq	%rsi, -104(%rbp)
 2143 02dd 48895590 		movq	%rdx, -112(%rbp)
 2144 02e1 F20F114D 		movsd	%xmm1, -120(%rbp)
 2144      88
 2145 02e6 F20F1155 		movsd	%xmm2, -128(%rbp)
 2145      80
 2146 02eb F20F119D 		movsd	%xmm3, -136(%rbp)
 2146      78FFFFFF 
 2147              		.loc 9 71 0
 2148 02f3 64488B04 		movq	%fs:40, %rax
 2148      25280000 
 2148      00
 2149 02fc 488945E8 		movq	%rax, -24(%rbp)
 2150 0300 31C0     		xorl	%eax, %eax
  72:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double feq;
  73:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  74:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  75:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = 1.0  ;
 2151              		.loc 9 75 0
 2152 0302 F20F1005 		movsd	.LC4(%rip), %xmm0
 2152      00000000 
 2153 030a F20F1145 		movsd	%xmm0, -72(%rbp)
 2153      B8
  76:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq
  77:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         + e_alpha.Dot_Product(u_lattice) *3.0 ;
 2154              		.loc 9 77 0
 2155 030f 488B5590 		movq	-112(%rbp), %rdx
 2156 0313 488D45C0 		leaq	-64(%rbp), %rax
 2157 0317 4889D6   		movq	%rdx, %rsi
 2158 031a 4889C7   		movq	%rax, %rdi
 2159 031d E8000000 		call	_ZN10vector_varC1ERKS_
 2159      00
 2160 0322 488D55C0 		leaq	-64(%rbp), %rdx
 2161 0326 488B4598 		movq	-104(%rbp), %rax
 2162 032a 4889D6   		movq	%rdx, %rsi
 2163 032d 4889C7   		movq	%rax, %rdi
 2164              	.LEHB3:
 2165 0330 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 2165      00
 2166              	.LEHE3:
 2167 0335 660F28C8 		movapd	%xmm0, %xmm1
 2168 0339 F20F1005 		movsd	.LC2(%rip), %xmm0
 2168      00000000 
 2169 0341 F20F59C1 		mulsd	%xmm1, %xmm0
 2170 0345 F20F104D 		movsd	-72(%rbp), %xmm1
 2170      B8
 2171 034a F20F58C1 		addsd	%xmm1, %xmm0
 2172 034e F20F1145 		movsd	%xmm0, -72(%rbp)
 2172      B8
 2173 0353 488D45C0 		leaq	-64(%rbp), %rax
 2174 0357 4889C7   		movq	%rax, %rdi
 2175 035a E8000000 		call	_ZN10vector_varD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 87


 2175      00
  78:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2176              		.loc 9 78 0
 2177 035f 488B5590 		movq	-112(%rbp), %rdx
 2178 0363 488D45C0 		leaq	-64(%rbp), %rax
 2179 0367 4889D6   		movq	%rdx, %rsi
 2180 036a 4889C7   		movq	%rax, %rdi
 2181 036d E8000000 		call	_ZN10vector_varC1ERKS_
 2181      00
 2182 0372 488D55C0 		leaq	-64(%rbp), %rdx
 2183 0376 488B4598 		movq	-104(%rbp), %rax
 2184 037a 4889D6   		movq	%rdx, %rsi
 2185 037d 4889C7   		movq	%rax, %rdi
 2186              	.LEHB4:
 2187 0380 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 2187      00
 2188              	.LEHE4:
 2189              		.loc 9 78 0 is_stmt 0 discriminator 2
 2190 0385 BF020000 		movl	$2, %edi
 2190      00
 2191 038a E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 2191      00
 2192 038f F20F1185 		movsd	%xmm0, -144(%rbp)
 2192      70FFFFFF 
 2193 0397 F20F1045 		movsd	-120(%rbp), %xmm0
 2193      88
 2194 039c F20F5945 		mulsd	-128(%rbp), %xmm0
 2194      80
 2195 03a1 BF020000 		movl	$2, %edi
 2195      00
 2196 03a6 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 2196      00
 2197 03ab F20F10A5 		movsd	-144(%rbp), %xmm4
 2197      70FFFFFF 
 2198 03b3 F20F5CE0 		subsd	%xmm0, %xmm4
 2199 03b7 660F28C4 		movapd	%xmm4, %xmm0
  79:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     *4.5;
 2200              		.loc 9 79 0 is_stmt 1 discriminator 2
 2201 03bb F20F100D 		movsd	.LC3(%rip), %xmm1
 2201      00000000 
 2202 03c3 F20F59C1 		mulsd	%xmm1, %xmm0
 2203 03c7 F20F104D 		movsd	-72(%rbp), %xmm1
 2203      B8
 2204 03cc F20F58C1 		addsd	%xmm1, %xmm0
 2205 03d0 F20F1145 		movsd	%xmm0, -72(%rbp)
 2205      B8
  78:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2206              		.loc 9 78 0 discriminator 2
 2207 03d5 488D45C0 		leaq	-64(%rbp), %rax
 2208 03d9 4889C7   		movq	%rax, %rdi
 2209 03dc E8000000 		call	_ZN10vector_varD1Ev
 2209      00
  80:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq= feq *weight *rho_lattice ;
 2210              		.loc 9 80 0 discriminator 2
 2211 03e1 F20F1045 		movsd	-72(%rbp), %xmm0
 2211      B8
 2212 03e6 F20F5945 		mulsd	-96(%rbp), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 88


 2212      A0
 2213 03eb F20F5985 		mulsd	-136(%rbp), %xmm0
 2213      78FFFFFF 
 2214 03f3 F20F1145 		movsd	%xmm0, -72(%rbp)
 2214      B8
  81:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  82:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     return feq;
 2215              		.loc 9 82 0 discriminator 2
 2216 03f8 F20F1045 		movsd	-72(%rbp), %xmm0
 2216      B8
  83:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  84:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 2217              		.loc 9 84 0 discriminator 2
 2218 03fd 488B45E8 		movq	-24(%rbp), %rax
 2219 0401 64483304 		xorq	%fs:40, %rax
 2219      25280000 
 2219      00
 2220 040a 743B     		je	.L131
 2221 040c EB34     		jmp	.L134
 2222              	.L132:
 2223 040e 4889C3   		movq	%rax, %rbx
  77:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     feq = feq + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),2) )
 2224              		.loc 9 77 0
 2225 0411 488D45C0 		leaq	-64(%rbp), %rax
 2226 0415 4889C7   		movq	%rax, %rdi
 2227 0418 E8000000 		call	_ZN10vector_varD1Ev
 2227      00
 2228 041d 4889D8   		movq	%rbx, %rax
 2229 0420 4889C7   		movq	%rax, %rdi
 2230              	.LEHB5:
 2231 0423 E8000000 		call	_Unwind_Resume
 2231      00
 2232              	.L133:
 2233 0428 4889C3   		movq	%rax, %rbx
  78:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     *4.5;
 2234              		.loc 9 78 0
 2235 042b 488D45C0 		leaq	-64(%rbp), %rax
 2236 042f 4889C7   		movq	%rax, %rdi
 2237 0432 E8000000 		call	_ZN10vector_varD1Ev
 2237      00
 2238 0437 4889D8   		movq	%rbx, %rax
 2239 043a 4889C7   		movq	%rax, %rdi
 2240 043d E8000000 		call	_Unwind_Resume
 2240      00
 2241              	.LEHE5:
 2242              	.L134:
 2243              		.loc 9 84 0
 2244 0442 E8000000 		call	__stack_chk_fail
 2244      00
 2245              	.L131:
 2246 0447 4881C488 		addq	$136, %rsp
 2246      000000
 2247 044e 5B       		popq	%rbx
 2248 044f 5D       		popq	%rbp
 2249              		.cfi_def_cfa 7, 8
 2250 0450 C3       		ret
 2251              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 89


 2252              	.LFE7186:
 2253              		.section	.gcc_except_table
 2254              	.LLSDA7186:
 2255 0014 FF       		.byte	0xff
 2256 0015 FF       		.byte	0xff
 2257 0016 01       		.byte	0x1
 2258 0017 10       		.uleb128 .LLSDACSE7186-.LLSDACSB7186
 2259              	.LLSDACSB7186:
 2260 0018 6C       		.uleb128 .LEHB3-.LFB7186
 2261 0019 05       		.uleb128 .LEHE3-.LEHB3
 2262 001a CA02     		.uleb128 .L132-.LFB7186
 2263 001c 00       		.uleb128 0
 2264 001d BC01     		.uleb128 .LEHB4-.LFB7186
 2265 001f 05       		.uleb128 .LEHE4-.LEHB4
 2266 0020 E402     		.uleb128 .L133-.LFB7186
 2267 0022 00       		.uleb128 0
 2268 0023 DF02     		.uleb128 .LEHB5-.LFB7186
 2269 0025 1F       		.uleb128 .LEHE5-.LEHB5
 2270 0026 00       		.uleb128 0
 2271 0027 00       		.uleb128 0
 2272              	.LLSDACSE7186:
 2273              		.text
 2275              		.section	.text._ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_,
 2276              		.weak	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 2278              	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_:
 2279              	.LFB7188:
 494:/usr/include/c++/5/cmath ****     { return __builtin_sqrt(__x); }
 2280              		.loc 1 494 0
 2281              		.cfi_startproc
 2282 0000 55       		pushq	%rbp
 2283              		.cfi_def_cfa_offset 16
 2284              		.cfi_offset 6, -16
 2285 0001 4889E5   		movq	%rsp, %rbp
 2286              		.cfi_def_cfa_register 6
 2287 0004 4883EC10 		subq	$16, %rsp
 2288 0008 897DFC   		movl	%edi, -4(%rbp)
 495:/usr/include/c++/5/cmath **** 
 2289              		.loc 1 495 0
 2290 000b 660FEFC9 		pxor	%xmm1, %xmm1
 2291 000f F20F2A4D 		cvtsi2sd	-4(%rbp), %xmm1
 2291      FC
 2292 0014 F20F51C1 		sqrtsd	%xmm1, %xmm0
 2293 0018 660F2EC0 		ucomisd	%xmm0, %xmm0
 2294 001c 7A06     		jp	.L137
 2295 001e 660F2EC0 		ucomisd	%xmm0, %xmm0
 2296 0022 7409     		je	.L136
 2297              	.L137:
 2298 0024 660F28C1 		movapd	%xmm1, %xmm0
 2299 0028 E8000000 		call	sqrt
 2299      00
 2300              	.L136:
 2301 002d C9       		leave
 2302              		.cfi_def_cfa 7, 8
 2303 002e C3       		ret
 2304              		.cfi_endproc
 2305              	.LFE7188:
 2307              		.section	.rodata
GAS LISTING /tmp/cc2K2nX4.s 			page 90


 2308              	.LC5:
 2309 0001 2F657272 		.string	"/error.txt"
 2309      6F722E74 
 2309      787400
 2310              	.LC7:
 2311 000c 2C2000   		.string	", "
 2312              	.LC8:
 2313 000f 202C2046 		.string	" , FMG cycle: "
 2313      4D472063 
 2313      79636C65 
 2313      3A2000
 2314              	.LC9:
 2315 001e 74696D65 		.string	"time t="
 2315      20743D00 
 2316              	.LC10:
 2317 0026 20657272 		.string	" error e ="
 2317      6F722065 
 2317      203D00
 2318              		.text
 2319 0451 90       		.align 2
 2320              		.globl	_ZN6Solver17Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16gl
 2322              	_ZN6Solver17Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_var
 2323              	.LFB7187:
  85:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  86:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  87:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::Mesh_Solver_Clean( Mesh &Mesh , Solution &soln, Boundary_Conditions &bcs,
  88:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    external_forces &source,global_variables &globals, domain_geomet
  89:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    initial_conditions &init_conds, quad_bcs_plus &quad_bcs_orig, in
  90:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    Solution &residual, int fmg)
  91:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
 2324              		.loc 9 91 0
 2325              		.cfi_startproc
 2326              		.cfi_personality 0x3,__gxx_personality_v0
 2327              		.cfi_lsda 0x3,.LLSDA7187
 2328 0452 55       		pushq	%rbp
 2329              		.cfi_def_cfa_offset 16
 2330              		.cfi_offset 6, -16
 2331 0453 4889E5   		movq	%rsp, %rbp
 2332              		.cfi_def_cfa_register 6
 2333 0456 4155     		pushq	%r13
 2334 0458 4154     		pushq	%r12
 2335 045a 53       		pushq	%rbx
 2336 045b 4881EC68 		subq	$3688, %rsp
 2336      0E0000
 2337              		.cfi_offset 13, -24
 2338              		.cfi_offset 12, -32
 2339              		.cfi_offset 3, -40
 2340 0462 4889BDF8 		movq	%rdi, -3592(%rbp)
 2340      F1FFFF
 2341 0469 4889B5F0 		movq	%rsi, -3600(%rbp)
 2341      F1FFFF
 2342 0470 488995E8 		movq	%rdx, -3608(%rbp)
 2342      F1FFFF
 2343 0477 48898DE0 		movq	%rcx, -3616(%rbp)
 2343      F1FFFF
 2344 047e 4C8985D8 		movq	%r8, -3624(%rbp)
 2344      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 91


 2345 0485 4C898DD0 		movq	%r9, -3632(%rbp)
 2345      F1FFFF
 2346 048c 488B4510 		movq	16(%rbp), %rax
 2347 0490 488985C8 		movq	%rax, -3640(%rbp)
 2347      F1FFFF
 2348 0497 488B4518 		movq	24(%rbp), %rax
 2349 049b 488985C0 		movq	%rax, -3648(%rbp)
 2349      F1FFFF
 2350 04a2 488B4520 		movq	32(%rbp), %rax
 2351 04a6 488985B8 		movq	%rax, -3656(%rbp)
 2351      F1FFFF
 2352 04ad 488B4530 		movq	48(%rbp), %rax
 2353 04b1 488985B0 		movq	%rax, -3664(%rbp)
 2353      F1FFFF
 2354              		.loc 9 91 0
 2355 04b8 64488B04 		movq	%fs:40, %rax
 2355      25280000 
 2355      00
 2356 04c1 488945D8 		movq	%rax, -40(%rbp)
 2357 04c5 31C0     		xorl	%eax, %eax
  92:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
  93:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     ///Declarations
  94:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     RungeKutta rk4;
 2358              		.loc 9 94 0
 2359 04c7 488D8540 		leaq	-1728(%rbp), %rax
 2359      F9FFFF
 2360 04ce 4889C7   		movq	%rax, %rdi
 2361              	.LEHB6:
 2362 04d1 E8000000 		call	_ZN10RungeKuttaC1Ev
 2362      00
 2363              	.LEHE6:
  95:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 2364              		.loc 9 95 0
 2365 04d6 488B85F0 		movq	-3600(%rbp), %rax
 2365      F1FFFF
 2366 04dd 4889C7   		movq	%rax, %rdi
 2367 04e0 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2367      00
 2368 04e5 89C2     		movl	%eax, %edx
 2369 04e7 488D85A0 		leaq	-2656(%rbp), %rax
 2369      F5FFFF
 2370 04ee 89D6     		movl	%edx, %esi
 2371 04f0 4889C7   		movq	%rax, %rdi
 2372              	.LEHB7:
 2373 04f3 E8000000 		call	_ZN8SolutionC1Ei
 2373      00
 2374              	.LEHE7:
  96:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
 2375              		.loc 9 96 0
 2376 04f8 488B85F0 		movq	-3600(%rbp), %rax
 2376      F1FFFF
 2377 04ff 4889C7   		movq	%rax, %rdi
 2378 0502 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2378      00
 2379 0507 89C2     		movl	%eax, %edx
 2380 0509 488D85F0 		leaq	-2576(%rbp), %rax
 2380      F5FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 92


 2381 0510 89D6     		movl	%edx, %esi
 2382 0512 4889C7   		movq	%rax, %rdi
 2383              	.LEHB8:
 2384 0515 E8000000 		call	_ZN8SolutionC1Ei
 2384      00
 2385              	.LEHE8:
  97:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 2386              		.loc 9 97 0
 2387 051a 488B85F0 		movq	-3600(%rbp), %rax
 2387      F1FFFF
 2388 0521 4889C7   		movq	%rax, %rdi
 2389 0524 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2389      00
 2390 0529 89C2     		movl	%eax, %edx
 2391 052b 488D8540 		leaq	-2496(%rbp), %rax
 2391      F6FFFF
 2392 0532 89D6     		movl	%edx, %esi
 2393 0534 4889C7   		movq	%rax, %rdi
 2394              	.LEHB9:
 2395 0537 E8000000 		call	_ZN8SolutionC1Ei
 2395      00
 2396              	.LEHE9:
  98:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 2397              		.loc 9 98 0
 2398 053c 488B85F0 		movq	-3600(%rbp), %rax
 2398      F1FFFF
 2399 0543 4889C7   		movq	%rax, %rdi
 2400 0546 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2400      00
 2401 054b 89C2     		movl	%eax, %edx
 2402 054d 488D8590 		leaq	-2416(%rbp), %rax
 2402      F6FFFF
 2403 0554 89D6     		movl	%edx, %esi
 2404 0556 4889C7   		movq	%rax, %rdi
 2405              	.LEHB10:
 2406 0559 E8000000 		call	_ZN8SolutionC1Ei
 2406      00
 2407              	.LEHE10:
  99:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 2408              		.loc 9 99 0
 2409 055e 488B85F0 		movq	-3600(%rbp), %rax
 2409      F1FFFF
 2410 0565 4889C7   		movq	%rax, %rdi
 2411 0568 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2411      00
 2412 056d 89C2     		movl	%eax, %edx
 2413 056f 488D85E0 		leaq	-2336(%rbp), %rax
 2413      F6FFFF
 2414 0576 89D6     		movl	%edx, %esi
 2415 0578 4889C7   		movq	%rax, %rdi
 2416              	.LEHB11:
 2417 057b E8000000 		call	_ZN8SolutionC1Ei
 2417      00
 2418              	.LEHE11:
 100:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 2419              		.loc 9 100 0
 2420 0580 488D85B0 		leaq	-2896(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 93


 2420      F4FFFF
 2421 0587 4889C7   		movq	%rax, %rdi
 2422              	.LEHB12:
 2423 058a E8000000 		call	_ZN8flux_varC1Ev
 2423      00
 2424              	.LEHE12:
 101:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 102:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double delta_t = globals.time_marching_step;
 2425              		.loc 9 102 0
 2426 058f 488B85D0 		movq	-3632(%rbp), %rax
 2426      F1FFFF
 2427 0596 F20F1040 		movsd	64(%rax), %xmm0
 2427      40
 2428 059b F20F1185 		movsd	%xmm0, -3528(%rbp)
 2428      38F2FFFF 
 103:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double duration;
 104:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double local_tolerance;
 105:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_interface,feq_interface,fneq_interface;
 106:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 107:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_lattice ;
 108:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double feq_lattice [9], feq_int_debug[9], fneq_int_debug[9];
 109:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_lattice_deb[9], v_lattice[9], rho_lattice_deb[9];
 110:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double lattice_weight [9];
 111:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double time;
 112:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_bc, rho_bc,  v_bc;
 113:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_magnitude;
 114:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double mom_flux_const;
 115:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double f1,f2,f3;
 116:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::clock_t start;
 117:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::ofstream error_output ;
 2429              		.loc 9 117 0
 2430 05a3 488D85D0 		leaq	-560(%rbp), %rax
 2430      FDFFFF
 2431 05aa 4889C7   		movq	%rax, %rdi
 2432              	.LEHB13:
 2433 05ad E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev
 2433      00
 2434              	.LEHE13:
 118:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 2435              		.loc 9 118 0
 2436 05b2 488D85C0 		leaq	-2112(%rbp), %rax
 2436      F7FFFF
 2437 05b9 4889C7   		movq	%rax, %rdi
 2438 05bc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev
 2438      00
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 2439              		.loc 9 119 0
 2440 05c1 488D85B0 		leaq	-3408(%rbp), %rax
 2440      F2FFFF
 2441 05c8 4889C7   		movq	%rax, %rdi
 2442              	.LEHB14:
 2443 05cb E8000000 		call	_ZN10vector_varC1Ev
 2443      00
 2444              	.LEHE14:
 2445              		.loc 9 119 0 is_stmt 0 discriminator 1
 2446 05d0 488D85D0 		leaq	-3376(%rbp), %rax
 2446      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 94


 2447 05d7 4889C7   		movq	%rax, %rdi
 2448              	.LEHB15:
 2449 05da E8000000 		call	_ZN10vector_varC1Ev
 2449      00
 2450              	.LEHE15:
 2451              		.loc 9 119 0 discriminator 3
 2452 05df 488D85F0 		leaq	-3344(%rbp), %rax
 2452      F2FFFF
 2453 05e6 4889C7   		movq	%rax, %rdi
 2454              	.LEHB16:
 2455 05e9 E8000000 		call	_ZN10vector_varC1Ev
 2455      00
 2456              	.LEHE16:
 2457              		.loc 9 119 0 discriminator 5
 2458 05ee 488D8510 		leaq	-3312(%rbp), %rax
 2458      F3FFFF
 2459 05f5 4889C7   		movq	%rax, %rdi
 2460              	.LEHB17:
 2461 05f8 E8000000 		call	_ZN10vector_varC1Ev
 2461      00
 2462              	.LEHE17:
 2463              		.loc 9 119 0 discriminator 7
 2464 05fd 488D8530 		leaq	-3280(%rbp), %rax
 2464      F3FFFF
 2465 0604 4889C7   		movq	%rax, %rdi
 2466              	.LEHB18:
 2467 0607 E8000000 		call	_ZN10vector_varC1Ev
 2467      00
 2468              	.LEHE18:
 2469              		.loc 9 119 0 discriminator 9
 2470 060c 488D8550 		leaq	-3248(%rbp), %rax
 2470      F3FFFF
 2471 0613 4889C7   		movq	%rax, %rdi
 2472              	.LEHB19:
 2473 0616 E8000000 		call	_ZN10vector_varC1Ev
 2473      00
 2474              	.LEHE19:
 2475              		.loc 9 119 0 discriminator 11
 2476 061b 488D8570 		leaq	-3216(%rbp), %rax
 2476      F3FFFF
 2477 0622 4889C7   		movq	%rax, %rdi
 2478              	.LEHB20:
 2479 0625 E8000000 		call	_ZN10vector_varC1Ev
 2479      00
 2480              	.LEHE20:
 2481              		.loc 9 119 0 discriminator 13
 2482 062a 488D8590 		leaq	-3184(%rbp), %rax
 2482      F3FFFF
 2483 0631 4889C7   		movq	%rax, %rdi
 2484              	.LEHB21:
 2485 0634 E8000000 		call	_ZN10vector_varC1Ev
 2485      00
 2486              	.LEHE21:
 120:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 2487              		.loc 9 120 0 is_stmt 1
 2488 0639 488D85B0 		leaq	-3152(%rbp), %rax
 2488      F3FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 95


 2489 0640 4889C7   		movq	%rax, %rdi
 2490              	.LEHB22:
 2491 0643 E8000000 		call	_ZN10vector_varC1Ev
 2491      00
 2492              	.LEHE22:
 121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 2493              		.loc 9 121 0
 2494 0648 488D85D0 		leaq	-3120(%rbp), %rax
 2494      F3FFFF
 2495 064f 4889C7   		movq	%rax, %rdi
 2496              	.LEHB23:
 2497 0652 E8000000 		call	_ZN10vector_varC1Ev
 2497      00
 2498              	.LEHE23:
 2499              		.loc 9 121 0 is_stmt 0 discriminator 1
 2500 0657 488D85F0 		leaq	-3088(%rbp), %rax
 2500      F3FFFF
 2501 065e 4889C7   		movq	%rax, %rdi
 2502              	.LEHB24:
 2503 0661 E8000000 		call	_ZN10vector_varC1Ev
 2503      00
 2504              	.LEHE24:
 2505              		.loc 9 121 0 discriminator 3
 2506 0666 488D8510 		leaq	-3056(%rbp), %rax
 2506      F4FFFF
 2507 066d 4889C7   		movq	%rax, %rdi
 2508              	.LEHB25:
 2509 0670 E8000000 		call	_ZN10vector_varC1Ev
 2509      00
 2510              	.LEHE25:
 122:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 123:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_normal;
 2511              		.loc 9 123 0 is_stmt 1
 2512 0675 488D8530 		leaq	-3024(%rbp), %rax
 2512      F4FFFF
 2513 067c 4889C7   		movq	%rax, %rdi
 2514              	.LEHB26:
 2515 067f E8000000 		call	_ZN10vector_varC1Ev
 2515      00
 2516              	.LEHE26:
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
 2517              		.loc 9 124 0
 2518 0684 4C8DA5B0 		leaq	-848(%rbp), %r12
 2518      FCFFFF
 2519 068b BB080000 		movl	$8, %ebx
 2519      00
 2520 0690 4D89E5   		movq	%r12, %r13
 2521              	.L141:
 2522              		.loc 9 124 0 is_stmt 0 discriminator 5
 2523 0693 4883FBFF 		cmpq	$-1, %rbx
 2524 0697 7412     		je	.L140
 2525              		.loc 9 124 0 discriminator 3
 2526 0699 4C89EF   		movq	%r13, %rdi
 2527              	.LEHB27:
 2528 069c E8000000 		call	_ZN10vector_varC1Ev
 2528      00
 2529              	.LEHE27:
GAS LISTING /tmp/cc2K2nX4.s 			page 96


 2530              		.loc 9 124 0 discriminator 4
 2531 06a1 4983C520 		addq	$32, %r13
 2532 06a5 4883EB01 		subq	$1, %rbx
 2533 06a9 EBE8     		jmp	.L141
 2534              	.L140:
 125:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 2535              		.loc 9 125 0 is_stmt 1 discriminator 2
 2536 06ab 488D8590 		leaq	-3440(%rbp), %rax
 2536      F2FFFF
 2537 06b2 4889C7   		movq	%rax, %rdi
 2538 06b5 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEC1Ev
 2538      00
 126:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 127:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // vector_var flux_e_alpha;
 128:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     residuals convergence_residual;
 2539              		.loc 9 128 0 discriminator 2
 2540 06ba 488D8530 		leaq	-2256(%rbp), %rax
 2540      F7FFFF
 2541 06c1 4889C7   		movq	%rax, %rdi
 2542              	.LEHB28:
 2543 06c4 E8000000 		call	_ZN9residualsC1Ev
 2543      00
 2544              	.LEHE28:
 129:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 2545              		.loc 9 129 0
 2546 06c9 488D85E0 		leaq	-2848(%rbp), %rax
 2546      F4FFFF
 2547 06d0 4889C7   		movq	%rax, %rdi
 2548              	.LEHB29:
 2549 06d3 E8000000 		call	_ZN8flux_varC1Ev
 2549      00
 2550              	.LEHE29:
 2551              		.loc 9 129 0 is_stmt 0 discriminator 1
 2552 06d8 488D8510 		leaq	-2800(%rbp), %rax
 2552      F5FFFF
 2553 06df 4889C7   		movq	%rax, %rdi
 2554              	.LEHB30:
 2555 06e2 E8000000 		call	_ZN8flux_varC1Ev
 2555      00
 2556              	.LEHE30:
 130:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 2557              		.loc 9 130 0 is_stmt 1
 2558 06e7 488D8540 		leaq	-2752(%rbp), %rax
 2558      F5FFFF
 2559 06ee 4889C7   		movq	%rax, %rdi
 2560              	.LEHB31:
 2561 06f1 E8000000 		call	_ZN8flux_varC1Ev
 2561      00
 2562              	.LEHE31:
 131:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var debug [4] ,debug_flux[4],arti_debug [4];
 2563              		.loc 9 132 0
 2564 06f6 4C8DA590 		leaq	-1648(%rbp), %r12
 2564      F9FFFF
 2565 06fd BB030000 		movl	$3, %ebx
 2565      00
 2566 0702 4D89E5   		movq	%r12, %r13
GAS LISTING /tmp/cc2K2nX4.s 			page 97


 2567              	.L143:
 2568              		.loc 9 132 0 is_stmt 0 discriminator 5
 2569 0705 4883FBFF 		cmpq	$-1, %rbx
 2570 0709 7412     		je	.L142
 2571              		.loc 9 132 0 discriminator 3
 2572 070b 4C89EF   		movq	%r13, %rdi
 2573              	.LEHB32:
 2574 070e E8000000 		call	_ZN8flux_varC1Ev
 2574      00
 2575              	.LEHE32:
 2576              		.loc 9 132 0 discriminator 4
 2577 0713 4983C528 		addq	$40, %r13
 2578 0717 4883EB01 		subq	$1, %rbx
 2579 071b EBE8     		jmp	.L143
 2580              	.L142:
 2581              		.loc 9 132 0 discriminator 2
 2582 071d 4C8DA530 		leaq	-1488(%rbp), %r12
 2582      FAFFFF
 2583 0724 BB030000 		movl	$3, %ebx
 2583      00
 2584 0729 4D89E5   		movq	%r12, %r13
 2585              	.L145:
 2586              		.loc 9 132 0 discriminator 10
 2587 072c 4883FBFF 		cmpq	$-1, %rbx
 2588 0730 7412     		je	.L144
 2589              		.loc 9 132 0 discriminator 8
 2590 0732 4C89EF   		movq	%r13, %rdi
 2591              	.LEHB33:
 2592 0735 E8000000 		call	_ZN8flux_varC1Ev
 2592      00
 2593              	.LEHE33:
 2594              		.loc 9 132 0 discriminator 9
 2595 073a 4983C528 		addq	$40, %r13
 2596 073e 4883EB01 		subq	$1, %rbx
 2597 0742 EBE8     		jmp	.L145
 2598              	.L144:
 2599              		.loc 9 132 0 discriminator 7
 2600 0744 4C8DA5D0 		leaq	-1328(%rbp), %r12
 2600      FAFFFF
 2601 074b BB030000 		movl	$3, %ebx
 2601      00
 2602 0750 4D89E5   		movq	%r12, %r13
 2603              	.L147:
 2604              		.loc 9 132 0 discriminator 15
 2605 0753 4883FBFF 		cmpq	$-1, %rbx
 2606 0757 7412     		je	.L146
 2607              		.loc 9 132 0 discriminator 13
 2608 0759 4C89EF   		movq	%r13, %rdi
 2609              	.LEHB34:
 2610 075c E8000000 		call	_ZN8flux_varC1Ev
 2610      00
 2611              	.LEHE34:
 2612              		.loc 9 132 0 discriminator 14
 2613 0761 4983C528 		addq	$40, %r13
 2614 0765 4883EB01 		subq	$1, %rbx
 2615 0769 EBE8     		jmp	.L147
 2616              	.L146:
GAS LISTING /tmp/cc2K2nX4.s 			page 98


 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 2617              		.loc 9 133 0 is_stmt 1 discriminator 12
 2618 076b 4C8DA570 		leaq	-1168(%rbp), %r12
 2618      FBFFFF
 2619 0772 BB030000 		movl	$3, %ebx
 2619      00
 2620 0777 4D89E5   		movq	%r12, %r13
 2621              	.L149:
 2622              		.loc 9 133 0 is_stmt 0 discriminator 5
 2623 077a 4883FBFF 		cmpq	$-1, %rbx
 2624 077e 7412     		je	.L148
 2625              		.loc 9 133 0 discriminator 3
 2626 0780 4C89EF   		movq	%r13, %rdi
 2627              	.LEHB35:
 2628 0783 E8000000 		call	_ZN8flux_varC1Ev
 2628      00
 2629              	.LEHE35:
 2630              		.loc 9 133 0 discriminator 4
 2631 0788 4983C528 		addq	$40, %r13
 2632 078c 4883EB01 		subq	$1, %rbx
 2633 0790 EBE8     		jmp	.L149
 2634              	.L148:
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 2635              		.loc 9 134 0 is_stmt 1 discriminator 2
 2636 0792 4C8DA510 		leaq	-1008(%rbp), %r12
 2636      FCFFFF
 2637 0799 BB030000 		movl	$3, %ebx
 2637      00
 2638 079e 4D89E5   		movq	%r12, %r13
 2639              	.L151:
 2640              		.loc 9 134 0 is_stmt 0 discriminator 5
 2641 07a1 4883FBFF 		cmpq	$-1, %rbx
 2642 07a5 7412     		je	.L150
 2643              		.loc 9 134 0 discriminator 3
 2644 07a7 4C89EF   		movq	%r13, %rdi
 2645              	.LEHB36:
 2646 07aa E8000000 		call	_ZN8flux_varC1Ev
 2646      00
 2647              	.LEHE36:
 2648              		.loc 9 134 0 discriminator 4
 2649 07af 4983C528 		addq	$40, %r13
 2650 07b3 4883EB01 		subq	$1, %rbx
 2651 07b7 EBE8     		jmp	.L151
 2652              	.L150:
 135:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 136:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc_var bc;
 137:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 138:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int neighbour;
 139:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int bc_node;
 140:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int timesteps;
 141:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //calculate timesteps
 142:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 143:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 144:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 145:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 146:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     ///Initialisations
 147:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 99


 148:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     dt = 1.0; // timestepping for streaming // non-dim equals 1
 2653              		.loc 9 148 0 is_stmt 1 discriminator 2
 2654 07b9 488B85F8 		movq	-3592(%rbp), %rax
 2654      F1FFFF
 2655 07c0 F20F1005 		movsd	.LC4(%rip), %xmm0
 2655      00000000 
 2656 07c8 F20F1140 		movsd	%xmm0, 8(%rax)
 2656      08
 149:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     c = 1; // assume lattice spacing is equal to streaming timestep
 2657              		.loc 9 149 0 discriminator 2
 2658 07cd 488B85F8 		movq	-3592(%rbp), %rax
 2658      F1FFFF
 2659 07d4 F20F1005 		movsd	.LC4(%rip), %xmm0
 2659      00000000 
 2660 07dc F20F1140 		movsd	%xmm0, 32(%rax)
 2660      20
 150:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     cs = c/sqrt(3);
 2661              		.loc 9 150 0 discriminator 2
 2662 07e1 488B85F8 		movq	-3592(%rbp), %rax
 2662      F1FFFF
 2663 07e8 F20F1068 		movsd	32(%rax), %xmm5
 2663      20
 2664 07ed F20F11AD 		movsd	%xmm5, -3672(%rbp)
 2664      A8F1FFFF 
 2665 07f5 BF030000 		movl	$3, %edi
 2665      00
 2666 07fa E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 2666      00
 2667 07ff F20F10AD 		movsd	-3672(%rbp), %xmm5
 2667      A8F1FFFF 
 2668 0807 F20F5EE8 		divsd	%xmm0, %xmm5
 2669 080b 660F28C5 		movapd	%xmm5, %xmm0
 2670 080f 488B85F8 		movq	-3592(%rbp), %rax
 2670      F1FFFF
 2671 0816 F20F1140 		movsd	%xmm0, 40(%rax)
 2671      28
 151:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     tau = globals.tau;
 2672              		.loc 9 151 0 discriminator 2
 2673 081b 488B85D0 		movq	-3632(%rbp), %rax
 2673      F1FFFF
 2674 0822 F20F1040 		movsd	96(%rax), %xmm0
 2674      60
 2675 0827 488B85F8 		movq	-3592(%rbp), %rax
 2675      F1FFFF
 2676 082e F20F1140 		movsd	%xmm0, 16(%rax)
 2676      10
 152:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp_soln.clone(soln);
 2677              		.loc 9 152 0 discriminator 2
 2678 0833 488B95E8 		movq	-3608(%rbp), %rdx
 2678      F1FFFF
 2679 083a 488D85A0 		leaq	-2656(%rbp), %rax
 2679      F5FFFF
 2680 0841 4889D6   		movq	%rdx, %rsi
 2681 0844 4889C7   		movq	%rax, %rdi
 2682              	.LEHB37:
 2683 0847 E8000000 		call	_ZN8Solution5cloneERS_
 2683      00
GAS LISTING /tmp/cc2K2nX4.s 			page 100


 153:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln_t0.clone(soln);
 2684              		.loc 9 153 0
 2685 084c 488B95E8 		movq	-3608(%rbp), %rdx
 2685      F1FFFF
 2686 0853 488D85F0 		leaq	-2576(%rbp), %rax
 2686      F5FFFF
 2687 085a 4889D6   		movq	%rdx, %rsi
 2688 085d 4889C7   		movq	%rax, %rdi
 2689 0860 E8000000 		call	_ZN8Solution5cloneERS_
 2689      00
 154:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     local_tolerance = globals.tolerance;
 2690              		.loc 9 154 0
 2691 0865 488B85D0 		movq	-3632(%rbp), %rax
 2691      F1FFFF
 2692 086c F20F1040 		movsd	40(%rax), %xmm0
 2692      28
 2693 0871 F20F1185 		movsd	%xmm0, -3520(%rbp)
 2693      40F2FFFF 
 155:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     timesteps = ceil( globals.simulation_length/delta_t);
 2694              		.loc 9 155 0
 2695 0879 488B85D0 		movq	-3632(%rbp), %rax
 2695      F1FFFF
 2696 0880 F20F1040 		movsd	56(%rax), %xmm0
 2696      38
 2697 0885 F20F5E85 		divsd	-3528(%rbp), %xmm0
 2697      38F2FFFF 
 2698 088d E8000000 		call	ceil
 2698      00
 2699 0892 F20F2CC0 		cvttsd2si	%xmm0, %eax
 2700 0896 898524F2 		movl	%eax, -3548(%rbp)
 2700      FFFF
 156:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     output_dir = globals.output_file +"/error.txt";
 2701              		.loc 9 156 0
 2702 089c 488B85D0 		movq	-3632(%rbp), %rax
 2702      F1FFFF
 2703 08a3 488D88D8 		leaq	216(%rax), %rcx
 2703      000000
 2704 08aa 488D85E0 		leaq	-2080(%rbp), %rax
 2704      F7FFFF
 2705 08b1 BA000000 		movl	$.LC5, %edx
 2705      00
 2706 08b6 4889CE   		movq	%rcx, %rsi
 2707 08b9 4889C7   		movq	%rax, %rdi
 2708 08bc E8000000 		call	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 2708      00
 2709              	.LEHE37:
 2710              		.loc 9 156 0 is_stmt 0 discriminator 1
 2711 08c1 488D95E0 		leaq	-2080(%rbp), %rdx
 2711      F7FFFF
 2712 08c8 488D85C0 		leaq	-2112(%rbp), %rax
 2712      F7FFFF
 2713 08cf 4889D6   		movq	%rdx, %rsi
 2714 08d2 4889C7   		movq	%rax, %rdi
 2715              	.LEHB38:
 2716 08d5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
 2716      00
 2717              	.LEHE38:
GAS LISTING /tmp/cc2K2nX4.s 			page 101


 2718              		.loc 9 156 0 discriminator 3
 2719 08da 488D85E0 		leaq	-2080(%rbp), %rax
 2719      F7FFFF
 2720 08e1 4889C7   		movq	%rax, %rdi
 2721 08e4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 2721      00
 157:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****    // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::out);
 158:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     error_output.open(output_dir.c_str(), ios::out);
 2722              		.loc 9 158 0 is_stmt 1 discriminator 3
 2723 08e9 488D85C0 		leaq	-2112(%rbp), %rax
 2723      F7FFFF
 2724 08f0 4889C7   		movq	%rax, %rdi
 2725 08f3 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
 2725      00
 2726 08f8 4889C1   		movq	%rax, %rcx
 2727 08fb 488D85D0 		leaq	-560(%rbp), %rax
 2727      FDFFFF
 2728 0902 BA100000 		movl	$16, %edx
 2728      00
 2729 0907 4889CE   		movq	%rcx, %rsi
 2730 090a 4889C7   		movq	%rax, %rdi
 2731              	.LEHB39:
 2732 090d E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode
 2732      00
 159:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     populate_e_alpha(e_alpha,lattice_weight,c,globals.PI,9);
 2733              		.loc 9 159 0
 2734 0912 488B85D0 		movq	-3632(%rbp), %rax
 2734      F1FFFF
 2735 0919 F20F1040 		movsd	32(%rax), %xmm0
 2735      20
 2736 091e 488B85F8 		movq	-3592(%rbp), %rax
 2736      F1FFFF
 2737 0925 488B7820 		movq	32(%rax), %rdi
 2738 0929 488D95F0 		leaq	-1808(%rbp), %rdx
 2738      F8FFFF
 2739 0930 488DB590 		leaq	-3440(%rbp), %rsi
 2739      F2FFFF
 2740 0937 488B85F8 		movq	-3592(%rbp), %rax
 2740      F1FFFF
 2741 093e B9090000 		movl	$9, %ecx
 2741      00
 2742 0943 660F28C8 		movapd	%xmm0, %xmm1
 2743 0947 4889BDA8 		movq	%rdi, -3672(%rbp)
 2743      F1FFFF
 2744 094e F20F1085 		movsd	-3672(%rbp), %xmm0
 2744      A8F1FFFF 
 2745 0956 4889C7   		movq	%rax, %rdi
 2746 0959 E8000000 		call	_ZN6Solver16populate_e_alphaERSt6vectorI10vector_varSaIS1_EEPdddi
 2746      00
 2747              	.LBB6:
 160:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 161:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // loop in time
 162:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     for (int t= 0; t < timesteps; t++){
 2748              		.loc 9 162 0
 2749 095e C78504F2 		movl	$0, -3580(%rbp)
 2749      FFFF0000 
 2749      0000
GAS LISTING /tmp/cc2K2nX4.s 			page 102


 2750              	.L180:
 2751              		.loc 9 162 0 is_stmt 0 discriminator 1
 2752 0968 8B8504F2 		movl	-3580(%rbp), %eax
 2752      FFFF
 2753 096e 3B8524F2 		cmpl	-3548(%rbp), %eax
 2753      FFFF
 2754 0974 0F8D5F1A 		jge	.L152
 2754      0000
 2755              	.LBB7:
 163:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                        // soln is the solution at the start of every
 164:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // RK step.(rk = n) Temp_soln holds the values at end of
 165:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // step.(rk = n+1)
 166:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         soln_t0.clone(soln);    // soln_t0 holds solution at start of time step
 2756              		.loc 9 166 0 is_stmt 1
 2757 097a 488B95E8 		movq	-3608(%rbp), %rdx
 2757      F1FFFF
 2758 0981 488D85F0 		leaq	-2576(%rbp), %rax
 2758      F5FFFF
 2759 0988 4889D6   		movq	%rdx, %rsi
 2760 098b 4889C7   		movq	%rax, %rdi
 2761 098e E8000000 		call	_ZN8Solution5cloneERS_
 2761      00
 167:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         temp_soln.clone(soln);                        // t= 0, rk = 0
 2762              		.loc 9 167 0
 2763 0993 488B95E8 		movq	-3608(%rbp), %rdx
 2763      F1FFFF
 2764 099a 488D85A0 		leaq	-2656(%rbp), %rax
 2764      F5FFFF
 2765 09a1 4889D6   		movq	%rdx, %rsi
 2766 09a4 4889C7   		movq	%rax, %rdi
 2767 09a7 E8000000 		call	_ZN8Solution5cloneERS_
 2767      00
 168:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 169:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         convergence_residual.reset();
 2768              		.loc 9 169 0
 2769 09ac 488D8530 		leaq	-2256(%rbp), %rax
 2769      F7FFFF
 2770 09b3 4889C7   		movq	%rax, %rdi
 2771 09b6 E8000000 		call	_ZN9residuals5resetEv
 2771      00
 2772              	.LBB8:
 170:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 171:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for( int rk = 0; rk < rk4.timesteps; rk++){
 2773              		.loc 9 171 0
 2774 09bb C78508F2 		movl	$0, -3576(%rbp)
 2774      FFFF0000 
 2774      0000
 2775              	.L168:
 2776              		.loc 9 171 0 is_stmt 0 discriminator 1
 2777 09c5 8B8588F9 		movl	-1656(%rbp), %eax
 2777      FFFF
 2778 09cb 3B8508F2 		cmpl	-3576(%rbp), %eax
 2778      FFFF
 2779 09d1 0F8EC615 		jle	.L153
 2779      0000
 2780              	.LBB9:
 172:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 103


 173:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 174:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 175:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 176:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //update temp_soln boundary conditions
 177:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              temp_soln.update_bcs(bcs,Mesh,domain);
 2781              		.loc 9 177 0 is_stmt 1
 2782 09d7 488B8DC8 		movq	-3640(%rbp), %rcx
 2782      F1FFFF
 2783 09de 488B95F0 		movq	-3600(%rbp), %rdx
 2783      F1FFFF
 2784 09e5 488BB5E0 		movq	-3616(%rbp), %rsi
 2784      F1FFFF
 2785 09ec 488D85A0 		leaq	-2656(%rbp), %rax
 2785      F5FFFF
 2786 09f3 4889C7   		movq	%rax, %rdi
 2787 09f6 E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 2787      00
 178:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 179:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              residual_worker.Initialise(); //set to zeros
 2788              		.loc 9 179 0
 2789 09fb 488D8540 		leaq	-2496(%rbp), %rax
 2789      F6FFFF
 2790 0a02 4889C7   		movq	%rax, %rdi
 2791 0a05 E8000000 		call	_ZN8Solution10InitialiseEv
 2791      00
 2792              	.LEHE39:
 2793              	.LBB10:
 180:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              // loop through each node
 181:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****               for (int i=0 ; i < Mesh.get_total_cells() ; i ++) {
 2794              		.loc 9 181 0
 2795 0a0a C7850CF2 		movl	$0, -3572(%rbp)
 2795      FFFF0000 
 2795      0000
 2796              	.L164:
 2797              		.loc 9 181 0 is_stmt 0 discriminator 1
 2798 0a14 488B85F0 		movq	-3600(%rbp), %rax
 2798      F1FFFF
 2799 0a1b 4889C7   		movq	%rax, %rdi
 2800 0a1e E8000000 		call	_ZN4Mesh15get_total_cellsEv
 2800      00
 2801 0a23 3B850CF2 		cmpl	-3572(%rbp), %eax
 2801      FFFF
 2802 0a29 0F9FC0   		setg	%al
 2803 0a2c 84C0     		testb	%al, %al
 2804 0a2e 0F84CB11 		je	.L154
 2804      0000
 2805              	.LBB11:
 2806              	.LBB12:
 182:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 183:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 184:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // skip if a boundary node
 185:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( bcs.get_bc_include(i)){
 2807              		.loc 9 185 0 is_stmt 1
 2808 0a34 8B950CF2 		movl	-3572(%rbp), %edx
 2808      FFFF
 2809 0a3a 488B85E0 		movq	-3616(%rbp), %rax
 2809      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 104


 2810 0a41 89D6     		movl	%edx, %esi
 2811 0a43 4889C7   		movq	%rax, %rdi
 2812 0a46 E8000000 		call	_ZN19Boundary_Conditions14get_bc_includeEi
 2812      00
 2813 0a4b 84C0     		testb	%al, %al
 2814 0a4d 0F84A011 		je	.L155
 2814      0000
 2815              	.LBB13:
 186:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 187:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // volume initialisers
 188:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     interface_area = 0.0;
 2816              		.loc 9 188 0
 2817 0a53 660FEFC0 		pxor	%xmm0, %xmm0
 2818 0a57 F20F1185 		movsd	%xmm0, -3536(%rbp)
 2818      30F2FFFF 
 189:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 190:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 191:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.x = Mesh.get_centroid_x(i);
 2819              		.loc 9 191 0
 2820 0a5f 8B950CF2 		movl	-3572(%rbp), %edx
 2820      FFFF
 2821 0a65 488B85F0 		movq	-3600(%rbp), %rax
 2821      F1FFFF
 2822 0a6c 89D6     		movl	%edx, %esi
 2823 0a6e 4889C7   		movq	%rax, %rdi
 2824 0a71 E8000000 		call	_ZN4Mesh14get_centroid_xEi
 2824      00
 2825 0a76 66480F7E 		movq	%xmm0, %rax
 2825      C0
 2826 0a7b 488985B8 		movq	%rax, -3400(%rbp)
 2826      F2FFFF
 192:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.y = Mesh.get_centroid_y(i);
 2827              		.loc 9 192 0
 2828 0a82 8B950CF2 		movl	-3572(%rbp), %edx
 2828      FFFF
 2829 0a88 488B85F0 		movq	-3600(%rbp), %rax
 2829      F1FFFF
 2830 0a8f 89D6     		movl	%edx, %esi
 2831 0a91 4889C7   		movq	%rax, %rdi
 2832 0a94 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 2832      00
 2833 0a99 66480F7E 		movq	%xmm0, %rax
 2833      C0
 2834 0a9e 488985C0 		movq	%rax, -3392(%rbp)
 2834      F2FFFF
 193:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.z = Mesh.get_centroid_z(i);
 2835              		.loc 9 193 0
 2836 0aa5 8B950CF2 		movl	-3572(%rbp), %edx
 2836      FFFF
 2837 0aab 488B85F0 		movq	-3600(%rbp), %rax
 2837      F1FFFF
 2838 0ab2 89D6     		movl	%edx, %esi
 2839 0ab4 4889C7   		movq	%rax, %rdi
 2840 0ab7 E8000000 		call	_ZN4Mesh14get_centroid_zEi
 2840      00
 2841 0abc 66480F7E 		movq	%xmm0, %rax
 2841      C0
GAS LISTING /tmp/cc2K2nX4.s 			page 105


 2842 0ac1 488985C8 		movq	%rax, -3384(%rbp)
 2842      F2FFFF
 194:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // add in reset function
 195:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.P =0.0;
 2843              		.loc 9 195 0
 2844 0ac8 660FEFC0 		pxor	%xmm0, %xmm0
 2845 0acc F20F1185 		movsd	%xmm0, -2744(%rbp)
 2845      48F5FFFF 
 196:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_x =0.0;
 2846              		.loc 9 196 0
 2847 0ad4 660FEFC0 		pxor	%xmm0, %xmm0
 2848 0ad8 F20F1185 		movsd	%xmm0, -2736(%rbp)
 2848      50F5FFFF 
 197:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_y = 0.0;
 2849              		.loc 9 197 0
 2850 0ae0 660FEFC0 		pxor	%xmm0, %xmm0
 2851 0ae4 F20F1185 		movsd	%xmm0, -2728(%rbp)
 2851      58F5FFFF 
 198:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_z = 0.0;
 2852              		.loc 9 198 0
 2853 0aec 660FEFC0 		pxor	%xmm0, %xmm0
 2854 0af0 F20F1185 		movsd	%xmm0, -2720(%rbp)
 2854      60F5FFFF 
 2855              	.LBB14:
 199:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 200:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     for (int j= 2; j <4; j++ ){
 2856              		.loc 9 200 0
 2857 0af8 C78510F2 		movl	$2, -3568(%rbp)
 2857      FFFF0200 
 2857      0000
 2858              	.L163:
 2859              		.loc 9 200 0 is_stmt 0 discriminator 1
 2860 0b02 83BD10F2 		cmpl	$3, -3568(%rbp)
 2860      FFFF03
 2861 0b09 0F8FE410 		jg	.L155
 2861      0000
 2862              	.LBB15:
 201:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 2863              		.loc 9 201 0 is_stmt 1
 2864 0b0f C68570F5 		movb	$0, -2704(%rbp)
 2864      FFFF00
 202:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_interface_variables( j, i,interface_node, neighbour,
 203:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  interface_area,cell_normal, bcs, bc, Mesh,
 204:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  cell_2);
 2865              		.loc 9 204 0
 2866 0b16 4C8D8D30 		leaq	-3536(%rbp), %r9
 2866      F2FFFF
 2867 0b1d 4C8D8500 		leaq	-3584(%rbp), %r8
 2867      F2FFFF
 2868 0b24 488D8DF0 		leaq	-3344(%rbp), %rcx
 2868      F2FFFF
 2869 0b2b 8B950CF2 		movl	-3572(%rbp), %edx
 2869      FFFF
 2870 0b31 8BB510F2 		movl	-3568(%rbp), %esi
 2870      FFFF
 2871 0b37 488B85F8 		movq	-3592(%rbp), %rax
 2871      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 106


 2872 0b3e 4883EC08 		subq	$8, %rsp
 2873 0b42 488DBDD0 		leaq	-3376(%rbp), %rdi
 2873      F2FFFF
 2874 0b49 57       		pushq	%rdi
 2875 0b4a FFB5F0F1 		pushq	-3600(%rbp)
 2875      FFFF
 2876 0b50 488DBD70 		leaq	-2704(%rbp), %rdi
 2876      F5FFFF
 2877 0b57 57       		pushq	%rdi
 2878 0b58 FFB5E0F1 		pushq	-3616(%rbp)
 2878      FFFF
 2879 0b5e 488DBD30 		leaq	-3024(%rbp), %rdi
 2879      F4FFFF
 2880 0b65 57       		pushq	%rdi
 2881 0b66 4889C7   		movq	%rax, %rdi
 2882 0b69 E8000000 		call	_ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_varE
 2882      00
 2883 0b6e 4883C430 		addq	$48, %rsp
 205:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 206:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_interface_initialiser( rho_interface, rho_u_interface, x_flux,y_flux);
 2884              		.loc 9 206 0
 2885 0b72 488DBD10 		leaq	-2800(%rbp), %rdi
 2885      F5FFFF
 2886 0b79 488D8DE0 		leaq	-2848(%rbp), %rcx
 2886      F4FFFF
 2887 0b80 488D95F0 		leaq	-3088(%rbp), %rdx
 2887      F3FFFF
 2888 0b87 488DB528 		leaq	-3544(%rbp), %rsi
 2888      F2FFFF
 2889 0b8e 488B85F8 		movq	-3592(%rbp), %rax
 2889      F1FFFF
 2890 0b95 4989F8   		movq	%rdi, %r8
 2891 0b98 4889C7   		movq	%rax, %rdi
 2892 0b9b E8000000 		call	_ZN6Solver26cell_interface_initialiserERdR10vector_varR8flux_varS4_
 2892      00
 207:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // use soln for neighbour values as these refelct real boundary conditions
 208:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // temp_soln should update continuously through RK stepping
 209:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_rho.Get_Gradient(temp_soln.get_rho(i), temp_soln.get_rho(neighbour),c
 2893              		.loc 9 209 0
 2894 0ba0 488D95D0 		leaq	-3376(%rbp), %rdx
 2894      F2FFFF
 2895 0ba7 488D8590 		leaq	-2928(%rbp), %rax
 2895      F4FFFF
 2896 0bae 4889D6   		movq	%rdx, %rsi
 2897 0bb1 4889C7   		movq	%rax, %rdi
 2898 0bb4 E8000000 		call	_ZN10vector_varC1ERKS_
 2898      00
 2899 0bb9 488D95B0 		leaq	-3408(%rbp), %rdx
 2899      F2FFFF
 2900 0bc0 488D8570 		leaq	-2960(%rbp), %rax
 2900      F4FFFF
 2901 0bc7 4889D6   		movq	%rdx, %rsi
 2902 0bca 4889C7   		movq	%rax, %rdi
 2903 0bcd E8000000 		call	_ZN10vector_varC1ERKS_
 2903      00
 2904 0bd2 8B9500F2 		movl	-3584(%rbp), %edx
 2904      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 107


 2905 0bd8 488D85A0 		leaq	-2656(%rbp), %rax
 2905      F5FFFF
 2906 0bdf 89D6     		movl	%edx, %esi
 2907 0be1 4889C7   		movq	%rax, %rdi
 2908 0be4 E8000000 		call	_ZN8Solution7get_rhoEi
 2908      00
 2909 0be9 F20F1185 		movsd	%xmm0, -3672(%rbp)
 2909      A8F1FFFF 
 2910 0bf1 8B950CF2 		movl	-3572(%rbp), %edx
 2910      FFFF
 2911 0bf7 488D85A0 		leaq	-2656(%rbp), %rax
 2911      F5FFFF
 2912 0bfe 89D6     		movl	%edx, %esi
 2913 0c00 4889C7   		movq	%rax, %rdi
 2914 0c03 E8000000 		call	_ZN8Solution7get_rhoEi
 2914      00
 2915 0c08 488D9590 		leaq	-2928(%rbp), %rdx
 2915      F4FFFF
 2916 0c0f 488D8D70 		leaq	-2960(%rbp), %rcx
 2916      F4FFFF
 2917 0c16 488D8590 		leaq	-3184(%rbp), %rax
 2917      F3FFFF
 2918 0c1d 4889CE   		movq	%rcx, %rsi
 2919 0c20 F20F108D 		movsd	-3672(%rbp), %xmm1
 2919      A8F1FFFF 
 2920 0c28 4889C7   		movq	%rax, %rdi
 2921              	.LEHB40:
 2922 0c2b E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 2922      00
 2923              	.LEHE40:
 2924              		.loc 9 209 0 is_stmt 0 discriminator 2
 2925 0c30 488D8570 		leaq	-2960(%rbp), %rax
 2925      F4FFFF
 2926 0c37 4889C7   		movq	%rax, %rdi
 2927 0c3a E8000000 		call	_ZN10vector_varD1Ev
 2927      00
 2928 0c3f 488D8590 		leaq	-2928(%rbp), %rax
 2928      F4FFFF
 2929 0c46 4889C7   		movq	%rax, %rdi
 2930 0c49 E8000000 		call	_ZN10vector_varD1Ev
 2930      00
 210:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), temp_soln.get_u(neighbour),cell_1,
 2931              		.loc 9 210 0 is_stmt 1 discriminator 2
 2932 0c4e 488D95D0 		leaq	-3376(%rbp), %rdx
 2932      F2FFFF
 2933 0c55 488D8590 		leaq	-2928(%rbp), %rax
 2933      F4FFFF
 2934 0c5c 4889D6   		movq	%rdx, %rsi
 2935 0c5f 4889C7   		movq	%rax, %rdi
 2936 0c62 E8000000 		call	_ZN10vector_varC1ERKS_
 2936      00
 2937 0c67 488D95B0 		leaq	-3408(%rbp), %rdx
 2937      F2FFFF
 2938 0c6e 488D8570 		leaq	-2960(%rbp), %rax
 2938      F4FFFF
 2939 0c75 4889D6   		movq	%rdx, %rsi
 2940 0c78 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 108


 2941 0c7b E8000000 		call	_ZN10vector_varC1ERKS_
 2941      00
 2942 0c80 8B9500F2 		movl	-3584(%rbp), %edx
 2942      FFFF
 2943 0c86 488D85A0 		leaq	-2656(%rbp), %rax
 2943      F5FFFF
 2944 0c8d 89D6     		movl	%edx, %esi
 2945 0c8f 4889C7   		movq	%rax, %rdi
 2946 0c92 E8000000 		call	_ZN8Solution5get_uEi
 2946      00
 2947 0c97 F20F1185 		movsd	%xmm0, -3672(%rbp)
 2947      A8F1FFFF 
 2948 0c9f 8B950CF2 		movl	-3572(%rbp), %edx
 2948      FFFF
 2949 0ca5 488D85A0 		leaq	-2656(%rbp), %rax
 2949      F5FFFF
 2950 0cac 89D6     		movl	%edx, %esi
 2951 0cae 4889C7   		movq	%rax, %rdi
 2952 0cb1 E8000000 		call	_ZN8Solution5get_uEi
 2952      00
 2953 0cb6 488D9590 		leaq	-2928(%rbp), %rdx
 2953      F4FFFF
 2954 0cbd 488D8D70 		leaq	-2960(%rbp), %rcx
 2954      F4FFFF
 2955 0cc4 488D8530 		leaq	-3280(%rbp), %rax
 2955      F3FFFF
 2956 0ccb 4889CE   		movq	%rcx, %rsi
 2957 0cce F20F108D 		movsd	-3672(%rbp), %xmm1
 2957      A8F1FFFF 
 2958 0cd6 4889C7   		movq	%rax, %rdi
 2959              	.LEHB41:
 2960 0cd9 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 2960      00
 2961              	.LEHE41:
 2962 0cde 488D8570 		leaq	-2960(%rbp), %rax
 2962      F4FFFF
 2963 0ce5 4889C7   		movq	%rax, %rdi
 2964 0ce8 E8000000 		call	_ZN10vector_varD1Ev
 2964      00
 2965 0ced 488D8590 		leaq	-2928(%rbp), %rax
 2965      F4FFFF
 2966 0cf4 4889C7   		movq	%rax, %rdi
 2967 0cf7 E8000000 		call	_ZN10vector_varD1Ev
 2967      00
 211:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), temp_soln.get_v(neighbour),cell_1,
 2968              		.loc 9 211 0 discriminator 2
 2969 0cfc 488D95D0 		leaq	-3376(%rbp), %rdx
 2969      F2FFFF
 2970 0d03 488D8590 		leaq	-2928(%rbp), %rax
 2970      F4FFFF
 2971 0d0a 4889D6   		movq	%rdx, %rsi
 2972 0d0d 4889C7   		movq	%rax, %rdi
 2973 0d10 E8000000 		call	_ZN10vector_varC1ERKS_
 2973      00
 2974 0d15 488D95B0 		leaq	-3408(%rbp), %rdx
 2974      F2FFFF
 2975 0d1c 488D8570 		leaq	-2960(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 109


 2975      F4FFFF
 2976 0d23 4889D6   		movq	%rdx, %rsi
 2977 0d26 4889C7   		movq	%rax, %rdi
 2978 0d29 E8000000 		call	_ZN10vector_varC1ERKS_
 2978      00
 2979 0d2e 8B9500F2 		movl	-3584(%rbp), %edx
 2979      FFFF
 2980 0d34 488D85A0 		leaq	-2656(%rbp), %rax
 2980      F5FFFF
 2981 0d3b 89D6     		movl	%edx, %esi
 2982 0d3d 4889C7   		movq	%rax, %rdi
 2983 0d40 E8000000 		call	_ZN8Solution5get_vEi
 2983      00
 2984 0d45 F20F1185 		movsd	%xmm0, -3672(%rbp)
 2984      A8F1FFFF 
 2985 0d4d 8B950CF2 		movl	-3572(%rbp), %edx
 2985      FFFF
 2986 0d53 488D85A0 		leaq	-2656(%rbp), %rax
 2986      F5FFFF
 2987 0d5a 89D6     		movl	%edx, %esi
 2988 0d5c 4889C7   		movq	%rax, %rdi
 2989 0d5f E8000000 		call	_ZN8Solution5get_vEi
 2989      00
 2990 0d64 488D9590 		leaq	-2928(%rbp), %rdx
 2990      F4FFFF
 2991 0d6b 488D8D70 		leaq	-2960(%rbp), %rcx
 2991      F4FFFF
 2992 0d72 488D8550 		leaq	-3248(%rbp), %rax
 2992      F3FFFF
 2993 0d79 4889CE   		movq	%rcx, %rsi
 2994 0d7c F20F108D 		movsd	-3672(%rbp), %xmm1
 2994      A8F1FFFF 
 2995 0d84 4889C7   		movq	%rax, %rdi
 2996              	.LEHB42:
 2997 0d87 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 2997      00
 2998              	.LEHE42:
 2999 0d8c 488D8570 		leaq	-2960(%rbp), %rax
 2999      F4FFFF
 3000 0d93 4889C7   		movq	%rax, %rdi
 3001 0d96 E8000000 		call	_ZN10vector_varD1Ev
 3001      00
 3002 0d9b 488D8590 		leaq	-2928(%rbp), %rax
 3002      F4FFFF
 3003 0da2 4889C7   		movq	%rax, %rdi
 3004 0da5 E8000000 		call	_ZN10vector_varD1Ev
 3004      00
 212:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add in reset function
 213:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.x = 0;
 3005              		.loc 9 213 0 discriminator 2
 3006 0daa 660FEFC0 		pxor	%xmm0, %xmm0
 3007 0dae F20F1185 		movsd	%xmm0, -3208(%rbp)
 3007      78F3FFFF 
 214:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.y = 0;
 3008              		.loc 9 214 0 discriminator 2
 3009 0db6 660FEFC0 		pxor	%xmm0, %xmm0
 3010 0dba F20F1185 		movsd	%xmm0, -3200(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 110


 3010      80F3FFFF 
 215:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.z = 0; //update for 3d
 3011              		.loc 9 215 0 discriminator 2
 3012 0dc2 660FEFC0 		pxor	%xmm0, %xmm0
 3013 0dc6 F20F1185 		movsd	%xmm0, -3192(%rbp)
 3013      88F3FFFF 
 3014              	.LBB16:
 216:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 217:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // using D2Q9 , loop through each lattice node
 218:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 3015              		.loc 9 218 0 discriminator 2
 3016 0dce C78514F2 		movl	$0, -3564(%rbp)
 3016      FFFF0000 
 3016      0000
 3017              	.L158:
 3018 0dd8 83BD14F2 		cmpl	$8, -3564(%rbp)
 3018      FFFF08
 3019 0ddf 0F8F6005 		jg	.L157
 3019      0000
 219:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             /// GET change in magnitude across the lattice
 220:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                           //  e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 221:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 222:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //f( r- e*c*dt) relative to cell_centroid
 223:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             lattice_node.relative_vectors(interface_node,cell_1,e_alpha[k],dt);
 3020              		.loc 9 223 0
 3021 0de5 488B85F8 		movq	-3592(%rbp), %rax
 3021      F1FFFF
 3022 0dec 488B5808 		movq	8(%rax), %rbx
 3023 0df0 8B8514F2 		movl	-3564(%rbp), %eax
 3023      FFFF
 3024 0df6 4863D0   		movslq	%eax, %rdx
 3025 0df9 488D8590 		leaq	-3440(%rbp), %rax
 3025      F2FFFF
 3026 0e00 4889D6   		movq	%rdx, %rsi
 3027 0e03 4889C7   		movq	%rax, %rdi
 3028 0e06 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3028      00
 3029 0e0b 4889C2   		movq	%rax, %rdx
 3030 0e0e 488D8590 		leaq	-2928(%rbp), %rax
 3030      F4FFFF
 3031 0e15 4889D6   		movq	%rdx, %rsi
 3032 0e18 4889C7   		movq	%rax, %rdi
 3033 0e1b E8000000 		call	_ZN10vector_varC1ERKS_
 3033      00
 3034 0e20 488D95B0 		leaq	-3408(%rbp), %rdx
 3034      F2FFFF
 3035 0e27 488D8570 		leaq	-2960(%rbp), %rax
 3035      F4FFFF
 3036 0e2e 4889D6   		movq	%rdx, %rsi
 3037 0e31 4889C7   		movq	%rax, %rdi
 3038 0e34 E8000000 		call	_ZN10vector_varC1ERKS_
 3038      00
 3039 0e39 488D95F0 		leaq	-3344(%rbp), %rdx
 3039      F2FFFF
 3040 0e40 488D8550 		leaq	-2992(%rbp), %rax
 3040      F4FFFF
 3041 0e47 4889D6   		movq	%rdx, %rsi
GAS LISTING /tmp/cc2K2nX4.s 			page 111


 3042 0e4a 4889C7   		movq	%rax, %rdi
 3043 0e4d E8000000 		call	_ZN10vector_varC1ERKS_
 3043      00
 3044 0e52 488D8D90 		leaq	-2928(%rbp), %rcx
 3044      F4FFFF
 3045 0e59 488D9570 		leaq	-2960(%rbp), %rdx
 3045      F4FFFF
 3046 0e60 488DB550 		leaq	-2992(%rbp), %rsi
 3046      F4FFFF
 3047 0e67 488D8510 		leaq	-3312(%rbp), %rax
 3047      F3FFFF
 3048 0e6e 48899DA8 		movq	%rbx, -3672(%rbp)
 3048      F1FFFF
 3049 0e75 F20F1085 		movsd	-3672(%rbp), %xmm0
 3049      A8F1FFFF 
 3050 0e7d 4889C7   		movq	%rax, %rdi
 3051              	.LEHB43:
 3052 0e80 E8000000 		call	_ZN10vector_var16relative_vectorsES_S_S_d
 3052      00
 3053              	.LEHE43:
 3054              		.loc 9 223 0 is_stmt 0 discriminator 2
 3055 0e85 488D8550 		leaq	-2992(%rbp), %rax
 3055      F4FFFF
 3056 0e8c 4889C7   		movq	%rax, %rdi
 3057 0e8f E8000000 		call	_ZN10vector_varD1Ev
 3057      00
 3058 0e94 488D8570 		leaq	-2960(%rbp), %rax
 3058      F4FFFF
 3059 0e9b 4889C7   		movq	%rax, %rdi
 3060 0e9e E8000000 		call	_ZN10vector_varD1Ev
 3060      00
 3061 0ea3 488D8590 		leaq	-2928(%rbp), %rax
 3061      F4FFFF
 3062 0eaa 4889C7   		movq	%rax, %rdi
 3063 0ead E8000000 		call	_ZN10vector_varD1Ev
 3063      00
 224:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 225:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // y = mx + c
 226:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             relative_interface.relative_vectors(interface_node,cell_1,e_alpha[k],0.
 3064              		.loc 9 226 0 is_stmt 1 discriminator 2
 3065 0eb2 8B8514F2 		movl	-3564(%rbp), %eax
 3065      FFFF
 3066 0eb8 4863D0   		movslq	%eax, %rdx
 3067 0ebb 488D8590 		leaq	-3440(%rbp), %rax
 3067      F2FFFF
 3068 0ec2 4889D6   		movq	%rdx, %rsi
 3069 0ec5 4889C7   		movq	%rax, %rdi
 3070 0ec8 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3070      00
 3071 0ecd 4889C2   		movq	%rax, %rdx
 3072 0ed0 488D8590 		leaq	-2928(%rbp), %rax
 3072      F4FFFF
 3073 0ed7 4889D6   		movq	%rdx, %rsi
 3074 0eda 4889C7   		movq	%rax, %rdi
 3075 0edd E8000000 		call	_ZN10vector_varC1ERKS_
 3075      00
 3076 0ee2 488D95B0 		leaq	-3408(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 112


 3076      F2FFFF
 3077 0ee9 488D8570 		leaq	-2960(%rbp), %rax
 3077      F4FFFF
 3078 0ef0 4889D6   		movq	%rdx, %rsi
 3079 0ef3 4889C7   		movq	%rax, %rdi
 3080 0ef6 E8000000 		call	_ZN10vector_varC1ERKS_
 3080      00
 3081 0efb 488D95F0 		leaq	-3344(%rbp), %rdx
 3081      F2FFFF
 3082 0f02 488D8550 		leaq	-2992(%rbp), %rax
 3082      F4FFFF
 3083 0f09 4889D6   		movq	%rdx, %rsi
 3084 0f0c 4889C7   		movq	%rax, %rdi
 3085 0f0f E8000000 		call	_ZN10vector_varC1ERKS_
 3085      00
 3086 0f14 488D8D90 		leaq	-2928(%rbp), %rcx
 3086      F4FFFF
 3087 0f1b 488D9570 		leaq	-2960(%rbp), %rdx
 3087      F4FFFF
 3088 0f22 488DB550 		leaq	-2992(%rbp), %rsi
 3088      F4FFFF
 3089 0f29 488D85B0 		leaq	-3152(%rbp), %rax
 3089      F3FFFF
 3090 0f30 660FEFC0 		pxor	%xmm0, %xmm0
 3091 0f34 4889C7   		movq	%rax, %rdi
 3092              	.LEHB44:
 3093 0f37 E8000000 		call	_ZN10vector_var16relative_vectorsES_S_S_d
 3093      00
 3094              	.LEHE44:
 3095 0f3c 488D8550 		leaq	-2992(%rbp), %rax
 3095      F4FFFF
 3096 0f43 4889C7   		movq	%rax, %rdi
 3097 0f46 E8000000 		call	_ZN10vector_varD1Ev
 3097      00
 3098 0f4b 488D8570 		leaq	-2960(%rbp), %rax
 3098      F4FFFF
 3099 0f52 4889C7   		movq	%rax, %rdi
 3100 0f55 E8000000 		call	_ZN10vector_varD1Ev
 3100      00
 3101 0f5a 488D8590 		leaq	-2928(%rbp), %rax
 3101      F4FFFF
 3102 0f61 4889C7   		movq	%rax, %rdi
 3103 0f64 E8000000 		call	_ZN10vector_varD1Ev
 3103      00
 227:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 228:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              // lattice densities are scalars but need to have gradients relative t
 229:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 230:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_lattice = delta_rho.Dot_Product(lattice_node) +temp_soln.get_rho(i)
 3104              		.loc 9 230 0 discriminator 2
 3105 0f69 488D9510 		leaq	-3312(%rbp), %rdx
 3105      F3FFFF
 3106 0f70 488D8590 		leaq	-2928(%rbp), %rax
 3106      F4FFFF
 3107 0f77 4889D6   		movq	%rdx, %rsi
 3108 0f7a 4889C7   		movq	%rax, %rdi
 3109 0f7d E8000000 		call	_ZN10vector_varC1ERKS_
 3109      00
GAS LISTING /tmp/cc2K2nX4.s 			page 113


 3110 0f82 488D9590 		leaq	-2928(%rbp), %rdx
 3110      F4FFFF
 3111 0f89 488D8590 		leaq	-3184(%rbp), %rax
 3111      F3FFFF
 3112 0f90 4889D6   		movq	%rdx, %rsi
 3113 0f93 4889C7   		movq	%rax, %rdi
 3114              	.LEHB45:
 3115 0f96 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 3115      00
 3116              	.LEHE45:
 3117 0f9b F20F1185 		movsd	%xmm0, -3672(%rbp)
 3117      A8F1FFFF 
 3118 0fa3 8B950CF2 		movl	-3572(%rbp), %edx
 3118      FFFF
 3119 0fa9 488D85A0 		leaq	-2656(%rbp), %rax
 3119      F5FFFF
 3120 0fb0 89D6     		movl	%edx, %esi
 3121 0fb2 4889C7   		movq	%rax, %rdi
 3122 0fb5 E8000000 		call	_ZN8Solution7get_rhoEi
 3122      00
 3123 0fba F20F5885 		addsd	-3672(%rbp), %xmm0
 3123      A8F1FFFF 
 3124 0fc2 F20F1185 		movsd	%xmm0, -3512(%rbp)
 3124      48F2FFFF 
 3125 0fca 488D8590 		leaq	-2928(%rbp), %rax
 3125      F4FFFF
 3126 0fd1 4889C7   		movq	%rax, %rdi
 3127 0fd4 E8000000 		call	_ZN10vector_varD1Ev
 3127      00
 231:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 232:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.x = (delta_u.Dot_Product(lattice_node) + temp_soln.get_u(i) )
 3128              		.loc 9 232 0 discriminator 2
 3129 0fd9 488D9510 		leaq	-3312(%rbp), %rdx
 3129      F3FFFF
 3130 0fe0 488D8590 		leaq	-2928(%rbp), %rax
 3130      F4FFFF
 3131 0fe7 4889D6   		movq	%rdx, %rsi
 3132 0fea 4889C7   		movq	%rax, %rdi
 3133 0fed E8000000 		call	_ZN10vector_varC1ERKS_
 3133      00
 3134 0ff2 488D9590 		leaq	-2928(%rbp), %rdx
 3134      F4FFFF
 3135 0ff9 488D8530 		leaq	-3280(%rbp), %rax
 3135      F3FFFF
 3136 1000 4889D6   		movq	%rdx, %rsi
 3137 1003 4889C7   		movq	%rax, %rdi
 3138              	.LEHB46:
 3139 1006 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 3139      00
 3140              	.LEHE46:
 3141 100b F20F1185 		movsd	%xmm0, -3672(%rbp)
 3141      A8F1FFFF 
 3142 1013 8B950CF2 		movl	-3572(%rbp), %edx
 3142      FFFF
 3143 1019 488D85A0 		leaq	-2656(%rbp), %rax
 3143      F5FFFF
 3144 1020 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 114


 3145 1022 4889C7   		movq	%rax, %rdi
 3146 1025 E8000000 		call	_ZN8Solution5get_uEi
 3146      00
 3147 102a F20F5885 		addsd	-3672(%rbp), %xmm0
 3147      A8F1FFFF 
 3148 1032 F20F1185 		movsd	%xmm0, -3112(%rbp)
 3148      D8F3FFFF 
 3149 103a 488D8590 		leaq	-2928(%rbp), %rax
 3149      F4FFFF
 3150 1041 4889C7   		movq	%rax, %rdi
 3151 1044 E8000000 		call	_ZN10vector_varD1Ev
 3151      00
 233:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.y = (delta_v.Dot_Product(lattice_node) + temp_soln.get_v(i)) 
 3152              		.loc 9 233 0 discriminator 2
 3153 1049 488D9510 		leaq	-3312(%rbp), %rdx
 3153      F3FFFF
 3154 1050 488D8590 		leaq	-2928(%rbp), %rax
 3154      F4FFFF
 3155 1057 4889D6   		movq	%rdx, %rsi
 3156 105a 4889C7   		movq	%rax, %rdi
 3157 105d E8000000 		call	_ZN10vector_varC1ERKS_
 3157      00
 3158 1062 488D9590 		leaq	-2928(%rbp), %rdx
 3158      F4FFFF
 3159 1069 488D8550 		leaq	-3248(%rbp), %rax
 3159      F3FFFF
 3160 1070 4889D6   		movq	%rdx, %rsi
 3161 1073 4889C7   		movq	%rax, %rdi
 3162              	.LEHB47:
 3163 1076 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 3163      00
 3164              	.LEHE47:
 3165 107b F20F1185 		movsd	%xmm0, -3672(%rbp)
 3165      A8F1FFFF 
 3166 1083 8B950CF2 		movl	-3572(%rbp), %edx
 3166      FFFF
 3167 1089 488D85A0 		leaq	-2656(%rbp), %rax
 3167      F5FFFF
 3168 1090 89D6     		movl	%edx, %esi
 3169 1092 4889C7   		movq	%rax, %rdi
 3170 1095 E8000000 		call	_ZN8Solution5get_vEi
 3170      00
 3171 109a F20F5885 		addsd	-3672(%rbp), %xmm0
 3171      A8F1FFFF 
 3172 10a2 F20F1185 		movsd	%xmm0, -3104(%rbp)
 3172      E0F3FFFF 
 3173 10aa 488D8590 		leaq	-2928(%rbp), %rax
 3173      F4FFFF
 3174 10b1 4889C7   		movq	%rax, %rdi
 3175 10b4 E8000000 		call	_ZN10vector_varD1Ev
 3175      00
 234:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.z = 0;
 3176              		.loc 9 234 0 discriminator 2
 3177 10b9 660FEFC0 		pxor	%xmm0, %xmm0
 3178 10bd F20F1185 		movsd	%xmm0, -3096(%rbp)
 3178      E8F3FFFF 
 235:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 115


 236:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              u_magnitude = u_lattice.Magnitude();
 3179              		.loc 9 236 0 discriminator 2
 3180 10c5 488D85D0 		leaq	-3120(%rbp), %rax
 3180      F3FFFF
 3181 10cc 4889C7   		movq	%rax, %rdi
 3182              	.LEHB48:
 3183 10cf E8000000 		call	_ZN10vector_var9MagnitudeEv
 3183      00
 3184              	.LEHE48:
 3185 10d4 66480F7E 		movq	%xmm0, %rax
 3185      C0
 3186 10d9 48898550 		movq	%rax, -3504(%rbp)
 3186      F2FFFF
 237:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 238:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //feq_lattice[k] = feq_calc(lattice_weight,e_alpha,u_lattice,u_magnitud
 239:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //                          rho_lattice) ;
 240:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = feq_calc_incomp(lattice_weight[k],e_alpha[k],u_lattice
 3187              		.loc 9 240 0 discriminator 2
 3188 10e0 488D85F0 		leaq	-2576(%rbp), %rax
 3188      F5FFFF
 3189 10e7 4889C7   		movq	%rax, %rdi
 3190 10ea E8000000 		call	_ZN8Solution15get_average_rhoEv
 3190      00
 3191 10ef F20F1185 		movsd	%xmm0, -3672(%rbp)
 3191      A8F1FFFF 
 3192 10f7 488B85F8 		movq	-3592(%rbp), %rax
 3192      F1FFFF
 3193 10fe F20F1078 		movsd	40(%rax), %xmm7
 3193      28
 3194 1103 F20F11BD 		movsd	%xmm7, -3680(%rbp)
 3194      A0F1FFFF 
 3195 110b 488D95D0 		leaq	-3120(%rbp), %rdx
 3195      F3FFFF
 3196 1112 488D8590 		leaq	-2928(%rbp), %rax
 3196      F4FFFF
 3197 1119 4889D6   		movq	%rdx, %rsi
 3198 111c 4889C7   		movq	%rax, %rdi
 3199 111f E8000000 		call	_ZN10vector_varC1ERKS_
 3199      00
 3200 1124 8B8514F2 		movl	-3564(%rbp), %eax
 3200      FFFF
 3201 112a 4863D0   		movslq	%eax, %rdx
 3202 112d 488D8590 		leaq	-3440(%rbp), %rax
 3202      F2FFFF
 3203 1134 4889D6   		movq	%rdx, %rsi
 3204 1137 4889C7   		movq	%rax, %rdi
 3205 113a E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3205      00
 3206 113f 4889C2   		movq	%rax, %rdx
 3207 1142 488D8570 		leaq	-2960(%rbp), %rax
 3207      F4FFFF
 3208 1149 4889D6   		movq	%rdx, %rsi
 3209 114c 4889C7   		movq	%rax, %rdi
 3210 114f E8000000 		call	_ZN10vector_varC1ERKS_
 3210      00
 3211 1154 8B8514F2 		movl	-3564(%rbp), %eax
 3211      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 116


 3212 115a 4898     		cltq
 3213 115c 488BBCC5 		movq	-1808(%rbp,%rax,8), %rdi
 3213      F0F8FFFF 
 3214 1164 8B8D14F2 		movl	-3564(%rbp), %ecx
 3214      FFFF
 3215 116a F20F108D 		movsd	-3512(%rbp), %xmm1
 3215      48F2FFFF 
 3216 1172 F20F1085 		movsd	-3504(%rbp), %xmm0
 3216      50F2FFFF 
 3217 117a 488D9590 		leaq	-2928(%rbp), %rdx
 3217      F4FFFF
 3218 1181 488DB570 		leaq	-2960(%rbp), %rsi
 3218      F4FFFF
 3219 1188 488B85F8 		movq	-3592(%rbp), %rax
 3219      F1FFFF
 3220 118f F20F10A5 		movsd	-3672(%rbp), %xmm4
 3220      A8F1FFFF 
 3221 1197 660F28D9 		movapd	%xmm1, %xmm3
 3222 119b F20F1095 		movsd	-3680(%rbp), %xmm2
 3222      A0F1FFFF 
 3223 11a3 660F28C8 		movapd	%xmm0, %xmm1
 3224 11a7 4889BDA8 		movq	%rdi, -3672(%rbp)
 3224      F1FFFF
 3225 11ae F20F1085 		movsd	-3672(%rbp), %xmm0
 3225      A8F1FFFF 
 3226 11b6 4889C7   		movq	%rax, %rdi
 3227              	.LEHB49:
 3228 11b9 E8000000 		call	_ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi
 3228      00
 3229              	.LEHE49:
 3230              		.loc 9 240 0 is_stmt 0 discriminator 1
 3231 11be 66480F7E 		movq	%xmm0, %rdx
 3231      C2
 241:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                       rho_lattice,soln_t0.get_average_rho(), k) ;
 3232              		.loc 9 241 0 is_stmt 1 discriminator 1
 3233 11c3 8B8514F2 		movl	-3564(%rbp), %eax
 3233      FFFF
 3234 11c9 4898     		cltq
 3235 11cb 488994C5 		movq	%rdx, -2048(%rbp,%rax,8)
 3235      00F8FFFF 
 240:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                       rho_lattice,soln_t0.get_average_rho(), k) ;
 3236              		.loc 9 240 0 discriminator 1
 3237 11d3 488D8570 		leaq	-2960(%rbp), %rax
 3237      F4FFFF
 3238 11da 4889C7   		movq	%rax, %rdi
 3239 11dd E8000000 		call	_ZN10vector_varD1Ev
 3239      00
 3240 11e2 488D8590 		leaq	-2928(%rbp), %rax
 3240      F4FFFF
 3241 11e9 4889C7   		movq	%rax, %rdi
 3242 11ec E8000000 		call	_ZN10vector_varD1Ev
 3242      00
 242:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_interface = rho_interface + feq_lattice[k];
 3243              		.loc 9 242 0 discriminator 1
 3244 11f1 8B8514F2 		movl	-3564(%rbp), %eax
 3244      FFFF
 3245 11f7 4898     		cltq
GAS LISTING /tmp/cc2K2nX4.s 			page 117


 3246 11f9 F20F108C 		movsd	-2048(%rbp,%rax,8), %xmm1
 3246      C500F8FF 
 3246      FF
 3247 1202 F20F1085 		movsd	-3544(%rbp), %xmm0
 3247      28F2FFFF 
 3248 120a F20F58C1 		addsd	%xmm1, %xmm0
 3249 120e F20F1185 		movsd	%xmm0, -3544(%rbp)
 3249      28F2FFFF 
 243:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.x = rho_u_interface.x + feq_lattice[k] * e_alpha[k].x;
 3250              		.loc 9 243 0 discriminator 1
 3251 1216 F20F10AD 		movsd	-3080(%rbp), %xmm5
 3251      F8F3FFFF 
 3252 121e F20F11AD 		movsd	%xmm5, -3672(%rbp)
 3252      A8F1FFFF 
 3253 1226 8B8514F2 		movl	-3564(%rbp), %eax
 3253      FFFF
 3254 122c 4898     		cltq
 3255 122e F20F10B4 		movsd	-2048(%rbp,%rax,8), %xmm6
 3255      C500F8FF 
 3255      FF
 3256 1237 F20F11B5 		movsd	%xmm6, -3680(%rbp)
 3256      A0F1FFFF 
 3257 123f 8B8514F2 		movl	-3564(%rbp), %eax
 3257      FFFF
 3258 1245 4863D0   		movslq	%eax, %rdx
 3259 1248 488D8590 		leaq	-3440(%rbp), %rax
 3259      F2FFFF
 3260 124f 4889D6   		movq	%rdx, %rsi
 3261 1252 4889C7   		movq	%rax, %rdi
 3262 1255 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3262      00
 3263 125a F20F1040 		movsd	8(%rax), %xmm0
 3263      08
 3264 125f F20F5985 		mulsd	-3680(%rbp), %xmm0
 3264      A0F1FFFF 
 3265 1267 F20F5885 		addsd	-3672(%rbp), %xmm0
 3265      A8F1FFFF 
 3266 126f F20F1185 		movsd	%xmm0, -3080(%rbp)
 3266      F8F3FFFF 
 244:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.y = rho_u_interface.y + feq_lattice[k] * e_alpha[k].y;
 3267              		.loc 9 244 0 discriminator 1
 3268 1277 F20F109D 		movsd	-3072(%rbp), %xmm3
 3268      00F4FFFF 
 3269 127f F20F119D 		movsd	%xmm3, -3672(%rbp)
 3269      A8F1FFFF 
 3270 1287 8B8514F2 		movl	-3564(%rbp), %eax
 3270      FFFF
 3271 128d 4898     		cltq
 3272 128f F20F10A4 		movsd	-2048(%rbp,%rax,8), %xmm4
 3272      C500F8FF 
 3272      FF
 3273 1298 F20F11A5 		movsd	%xmm4, -3680(%rbp)
 3273      A0F1FFFF 
 3274 12a0 8B8514F2 		movl	-3564(%rbp), %eax
 3274      FFFF
 3275 12a6 4863D0   		movslq	%eax, %rdx
 3276 12a9 488D8590 		leaq	-3440(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 118


 3276      F2FFFF
 3277 12b0 4889D6   		movq	%rdx, %rsi
 3278 12b3 4889C7   		movq	%rax, %rdi
 3279 12b6 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3279      00
 3280 12bb F20F1040 		movsd	16(%rax), %xmm0
 3280      10
 3281 12c0 F20F5985 		mulsd	-3680(%rbp), %xmm0
 3281      A0F1FFFF 
 3282 12c8 F20F5885 		addsd	-3672(%rbp), %xmm0
 3282      A8F1FFFF 
 3283 12d0 F20F1185 		movsd	%xmm0, -3072(%rbp)
 3283      00F4FFFF 
 245:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.z = rho_u_interface.z + feq_lattice[k] * e_alpha[k].z;
 3284              		.loc 9 245 0 discriminator 1
 3285 12d8 F20F10BD 		movsd	-3064(%rbp), %xmm7
 3285      08F4FFFF 
 3286 12e0 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 3286      A8F1FFFF 
 3287 12e8 8B8514F2 		movl	-3564(%rbp), %eax
 3287      FFFF
 3288 12ee 4898     		cltq
 3289 12f0 F20F10AC 		movsd	-2048(%rbp,%rax,8), %xmm5
 3289      C500F8FF 
 3289      FF
 3290 12f9 F20F11AD 		movsd	%xmm5, -3680(%rbp)
 3290      A0F1FFFF 
 3291 1301 8B8514F2 		movl	-3564(%rbp), %eax
 3291      FFFF
 3292 1307 4863D0   		movslq	%eax, %rdx
 3293 130a 488D8590 		leaq	-3440(%rbp), %rax
 3293      F2FFFF
 3294 1311 4889D6   		movq	%rdx, %rsi
 3295 1314 4889C7   		movq	%rax, %rdi
 3296 1317 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3296      00
 3297 131c F20F1040 		movsd	24(%rax), %xmm0
 3297      18
 3298 1321 F20F5985 		mulsd	-3680(%rbp), %xmm0
 3298      A0F1FFFF 
 3299 1329 F20F5885 		addsd	-3672(%rbp), %xmm0
 3299      A8F1FFFF 
 3300 1331 F20F1185 		movsd	%xmm0, -3064(%rbp)
 3300      08F4FFFF 
 218:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             /// GET change in magnitude across the lattice
 3301              		.loc 9 218 0 discriminator 1
 3302 1339 838514F2 		addl	$1, -3564(%rbp)
 3302      FFFF01
 3303 1340 E993FAFF 		jmp	.L158
 3303      FF
 3304              	.L157:
 3305              	.LBE16:
 246:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 247:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 248:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                          // divide rho * u to get u but only after complete summation
 249:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 250:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_interface.x = rho_u_interface.x /soln_t0.get_average_rho();
GAS LISTING /tmp/cc2K2nX4.s 			page 119


 3306              		.loc 9 250 0
 3307 1345 F20F10B5 		movsd	-3080(%rbp), %xmm6
 3307      F8F3FFFF 
 3308 134d F20F11B5 		movsd	%xmm6, -3672(%rbp)
 3308      A8F1FFFF 
 3309 1355 488D85F0 		leaq	-2576(%rbp), %rax
 3309      F5FFFF
 3310 135c 4889C7   		movq	%rax, %rdi
 3311 135f E8000000 		call	_ZN8Solution15get_average_rhoEv
 3311      00
 3312 1364 F20F10B5 		movsd	-3672(%rbp), %xmm6
 3312      A8F1FFFF 
 3313 136c F20F5EF0 		divsd	%xmm0, %xmm6
 3314 1370 660F28C6 		movapd	%xmm6, %xmm0
 3315 1374 F20F1185 		movsd	%xmm0, -3048(%rbp)
 3315      18F4FFFF 
 251:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_interface.y = rho_u_interface.y /soln_t0.get_average_rho();
 3316              		.loc 9 251 0
 3317 137c F20F10BD 		movsd	-3072(%rbp), %xmm7
 3317      00F4FFFF 
 3318 1384 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 3318      A8F1FFFF 
 3319 138c 488D85F0 		leaq	-2576(%rbp), %rax
 3319      F5FFFF
 3320 1393 4889C7   		movq	%rax, %rdi
 3321 1396 E8000000 		call	_ZN8Solution15get_average_rhoEv
 3321      00
 3322 139b F20F10BD 		movsd	-3672(%rbp), %xmm7
 3322      A8F1FFFF 
 3323 13a3 F20F5EF8 		divsd	%xmm0, %xmm7
 3324 13a7 660F28C7 		movapd	%xmm7, %xmm0
 3325 13ab F20F1185 		movsd	%xmm0, -3040(%rbp)
 3325      20F4FFFF 
 252:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_interface.z = rho_u_interface.z /soln_t0.get_average_rho();
 3326              		.loc 9 252 0
 3327 13b3 F20F10A5 		movsd	-3064(%rbp), %xmm4
 3327      08F4FFFF 
 3328 13bb F20F11A5 		movsd	%xmm4, -3672(%rbp)
 3328      A8F1FFFF 
 3329 13c3 488D85F0 		leaq	-2576(%rbp), %rax
 3329      F5FFFF
 3330 13ca 4889C7   		movq	%rax, %rdi
 3331 13cd E8000000 		call	_ZN8Solution15get_average_rhoEv
 3331      00
 3332 13d2 F20F10A5 		movsd	-3672(%rbp), %xmm4
 3332      A8F1FFFF 
 3333 13da F20F5EE0 		divsd	%xmm0, %xmm4
 3334 13de 660F28C4 		movapd	%xmm4, %xmm0
 3335 13e2 F20F1185 		movsd	%xmm0, -3032(%rbp)
 3335      28F4FFFF 
 253:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_magnitude = u_interface.Magnitude();
 3336              		.loc 9 253 0
 3337 13ea 488D8510 		leaq	-3056(%rbp), %rax
 3337      F4FFFF
 3338 13f1 4889C7   		movq	%rax, %rdi
 3339              	.LEHB50:
 3340 13f4 E8000000 		call	_ZN10vector_var9MagnitudeEv
GAS LISTING /tmp/cc2K2nX4.s 			page 120


 3340      00
 3341              	.LEHE50:
 3342 13f9 66480F7E 		movq	%xmm0, %rax
 3342      C0
 3343 13fe 48898550 		movq	%rax, -3504(%rbp)
 3343      F2FFFF
 3344              	.LBB17:
 254:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 255:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //interface nodes
 256:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 3345              		.loc 9 256 0
 3346 1405 C78518F2 		movl	$0, -3560(%rbp)
 3346      FFFF0000 
 3346      0000
 3347              	.L160:
 3348              		.loc 9 256 0 is_stmt 0 discriminator 2
 3349 140f 83BD18F2 		cmpl	$8, -3560(%rbp)
 3349      FFFF08
 3350 1416 0F8F4B04 		jg	.L159
 3350      0000
 257:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 258:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 259:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 260:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // get feq at cell interface
 261:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface =feq_calc_incomp(lattice_weight[k],e_alpha[k], u_interfac
 3351              		.loc 9 261 0 is_stmt 1
 3352 141c 488D85F0 		leaq	-2576(%rbp), %rax
 3352      F5FFFF
 3353 1423 4889C7   		movq	%rax, %rdi
 3354 1426 E8000000 		call	_ZN8Solution15get_average_rhoEv
 3354      00
 3355 142b F20F1185 		movsd	%xmm0, -3672(%rbp)
 3355      A8F1FFFF 
 3356 1433 F20F10B5 		movsd	-3544(%rbp), %xmm6
 3356      28F2FFFF 
 3357 143b F20F11B5 		movsd	%xmm6, -3680(%rbp)
 3357      A0F1FFFF 
 3358 1443 488B85F8 		movq	-3592(%rbp), %rax
 3358      F1FFFF
 3359 144a F20F1078 		movsd	40(%rax), %xmm7
 3359      28
 3360 144f F20F11BD 		movsd	%xmm7, -3688(%rbp)
 3360      98F1FFFF 
 3361 1457 488D9510 		leaq	-3056(%rbp), %rdx
 3361      F4FFFF
 3362 145e 488D8590 		leaq	-2928(%rbp), %rax
 3362      F4FFFF
 3363 1465 4889D6   		movq	%rdx, %rsi
 3364 1468 4889C7   		movq	%rax, %rdi
 3365 146b E8000000 		call	_ZN10vector_varC1ERKS_
 3365      00
 3366 1470 8B8518F2 		movl	-3560(%rbp), %eax
 3366      FFFF
 3367 1476 4863D0   		movslq	%eax, %rdx
 3368 1479 488D8590 		leaq	-3440(%rbp), %rax
 3368      F2FFFF
 3369 1480 4889D6   		movq	%rdx, %rsi
GAS LISTING /tmp/cc2K2nX4.s 			page 121


 3370 1483 4889C7   		movq	%rax, %rdi
 3371 1486 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3371      00
 3372 148b 4889C2   		movq	%rax, %rdx
 3373 148e 488D8570 		leaq	-2960(%rbp), %rax
 3373      F4FFFF
 3374 1495 4889D6   		movq	%rdx, %rsi
 3375 1498 4889C7   		movq	%rax, %rdi
 3376 149b E8000000 		call	_ZN10vector_varC1ERKS_
 3376      00
 3377 14a0 8B8518F2 		movl	-3560(%rbp), %eax
 3377      FFFF
 3378 14a6 4898     		cltq
 3379 14a8 488BBCC5 		movq	-1808(%rbp,%rax,8), %rdi
 3379      F0F8FFFF 
 262:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 3380              		.loc 9 262 0
 3381 14b0 8B8D18F2 		movl	-3560(%rbp), %ecx
 3381      FFFF
 3382 14b6 F20F1085 		movsd	-3504(%rbp), %xmm0
 3382      50F2FFFF 
 3383 14be 488D9590 		leaq	-2928(%rbp), %rdx
 3383      F4FFFF
 3384 14c5 488DB570 		leaq	-2960(%rbp), %rsi
 3384      F4FFFF
 3385 14cc 488B85F8 		movq	-3592(%rbp), %rax
 3385      F1FFFF
 3386 14d3 F20F10A5 		movsd	-3672(%rbp), %xmm4
 3386      A8F1FFFF 
 3387 14db F20F109D 		movsd	-3680(%rbp), %xmm3
 3387      A0F1FFFF 
 3388 14e3 F20F1095 		movsd	-3688(%rbp), %xmm2
 3388      98F1FFFF 
 3389 14eb 660F28C8 		movapd	%xmm0, %xmm1
 3390 14ef 4889BDA8 		movq	%rdi, -3672(%rbp)
 3390      F1FFFF
 3391 14f6 F20F1085 		movsd	-3672(%rbp), %xmm0
 3391      A8F1FFFF 
 3392 14fe 4889C7   		movq	%rax, %rdi
 3393              	.LEHB51:
 3394 1501 E8000000 		call	_ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi
 3394      00
 3395              	.LEHE51:
 3396 1506 66480F7E 		movq	%xmm0, %rax
 3396      C0
 3397 150b 48898558 		movq	%rax, -3496(%rbp)
 3397      F2FFFF
 261:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 3398              		.loc 9 261 0
 3399 1512 488D8570 		leaq	-2960(%rbp), %rax
 3399      F4FFFF
 3400 1519 4889C7   		movq	%rax, %rdi
 3401 151c E8000000 		call	_ZN10vector_varD1Ev
 3401      00
 3402 1521 488D8590 		leaq	-2928(%rbp), %rax
 3402      F4FFFF
 3403 1528 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 122


 3404 152b E8000000 		call	_ZN10vector_varD1Ev
 3404      00
 263:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             fneq_interface = -tau * ( feq_interface -feq_lattice[k]);
 3405              		.loc 9 263 0
 3406 1530 488B85F8 		movq	-3592(%rbp), %rax
 3406      F1FFFF
 3407 1537 F20F1048 		movsd	16(%rax), %xmm1
 3407      10
 3408 153c F20F1005 		movsd	.LC6(%rip), %xmm0
 3408      00000000 
 3409 1544 660F57C8 		xorpd	%xmm0, %xmm1
 3410 1548 8B8518F2 		movl	-3560(%rbp), %eax
 3410      FFFF
 3411 154e 4898     		cltq
 3412 1550 F20F1094 		movsd	-2048(%rbp,%rax,8), %xmm2
 3412      C500F8FF 
 3412      FF
 3413 1559 F20F1085 		movsd	-3496(%rbp), %xmm0
 3413      58F2FFFF 
 3414 1561 F20F5CC2 		subsd	%xmm2, %xmm0
 3415 1565 F20F59C1 		mulsd	%xmm1, %xmm0
 3416 1569 F20F1185 		movsd	%xmm0, -3488(%rbp)
 3416      60F2FFFF 
 264:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 265:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     feq_int_debug[k] = feq_interface;
 3417              		.loc 9 265 0
 3418 1571 8B8518F2 		movl	-3560(%rbp), %eax
 3418      FFFF
 3419 1577 4898     		cltq
 3420 1579 F20F1085 		movsd	-3496(%rbp), %xmm0
 3420      58F2FFFF 
 3421 1581 F20F1184 		movsd	%xmm0, -1968(%rbp,%rax,8)
 3421      C550F8FF 
 3421      FF
 266:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     fneq_int_debug[k] = fneq_interface;
 3422              		.loc 9 266 0
 3423 158a 8B8518F2 		movl	-3560(%rbp), %eax
 3423      FFFF
 3424 1590 4898     		cltq
 3425 1592 F20F1085 		movsd	-3488(%rbp), %xmm0
 3425      60F2FFFF 
 3426 159a F20F1184 		movsd	%xmm0, -1888(%rbp,%rax,8)
 3426      C5A0F8FF 
 3426      FF
 267:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              //calculate fluxes from feq and fneq
 268:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             mom_flux_const = ( feq_interface + (1-1/(2*tau))*fneq_interface);
 3427              		.loc 9 268 0
 3428 15a3 488B85F8 		movq	-3592(%rbp), %rax
 3428      F1FFFF
 3429 15aa F20F1040 		movsd	16(%rax), %xmm0
 3429      10
 3430 15af F20F58C0 		addsd	%xmm0, %xmm0
 3431 15b3 F20F100D 		movsd	.LC4(%rip), %xmm1
 3431      00000000 
 3432 15bb F20F5EC8 		divsd	%xmm0, %xmm1
 3433 15bf 660F28C1 		movapd	%xmm1, %xmm0
 3434 15c3 F20F100D 		movsd	.LC4(%rip), %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 123


 3434      00000000 
 3435 15cb F20F5CC8 		subsd	%xmm0, %xmm1
 3436 15cf 660F28C1 		movapd	%xmm1, %xmm0
 3437 15d3 F20F5985 		mulsd	-3488(%rbp), %xmm0
 3437      60F2FFFF 
 3438 15db F20F5885 		addsd	-3496(%rbp), %xmm0
 3438      58F2FFFF 
 3439 15e3 F20F1185 		movsd	%xmm0, -3480(%rbp)
 3439      68F2FFFF 
 269:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 270:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.P = x_flux.P + e_alpha[k].x* feq_interface;
 3440              		.loc 9 270 0
 3441 15eb F20F109D 		movsd	-2840(%rbp), %xmm3
 3441      E8F4FFFF 
 3442 15f3 F20F119D 		movsd	%xmm3, -3672(%rbp)
 3442      A8F1FFFF 
 3443 15fb 8B8518F2 		movl	-3560(%rbp), %eax
 3443      FFFF
 3444 1601 4863D0   		movslq	%eax, %rdx
 3445 1604 488D8590 		leaq	-3440(%rbp), %rax
 3445      F2FFFF
 3446 160b 4889D6   		movq	%rdx, %rsi
 3447 160e 4889C7   		movq	%rax, %rdi
 3448 1611 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3448      00
 3449 1616 F20F1040 		movsd	8(%rax), %xmm0
 3449      08
 3450 161b F20F5985 		mulsd	-3496(%rbp), %xmm0
 3450      58F2FFFF 
 3451 1623 F20F5885 		addsd	-3672(%rbp), %xmm0
 3451      A8F1FFFF 
 3452 162b F20F1185 		movsd	%xmm0, -2840(%rbp)
 3452      E8F4FFFF 
 271:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.P = y_flux.P +  e_alpha[k].y * feq_interface;
 3453              		.loc 9 271 0
 3454 1633 F20F10A5 		movsd	-2792(%rbp), %xmm4
 3454      18F5FFFF 
 3455 163b F20F11A5 		movsd	%xmm4, -3672(%rbp)
 3455      A8F1FFFF 
 3456 1643 8B8518F2 		movl	-3560(%rbp), %eax
 3456      FFFF
 3457 1649 4863D0   		movslq	%eax, %rdx
 3458 164c 488D8590 		leaq	-3440(%rbp), %rax
 3458      F2FFFF
 3459 1653 4889D6   		movq	%rdx, %rsi
 3460 1656 4889C7   		movq	%rax, %rdi
 3461 1659 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3461      00
 3462 165e F20F1040 		movsd	16(%rax), %xmm0
 3462      10
 3463 1663 F20F5985 		mulsd	-3496(%rbp), %xmm0
 3463      58F2FFFF 
 3464 166b F20F5885 		addsd	-3672(%rbp), %xmm0
 3464      A8F1FFFF 
 3465 1673 F20F1185 		movsd	%xmm0, -2792(%rbp)
 3465      18F5FFFF 
 272:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_x = x_flux.momentum_x + e_alpha[k].x * (e_alpha[k].x) *
GAS LISTING /tmp/cc2K2nX4.s 			page 124


 3466              		.loc 9 272 0
 3467 167b F20F10B5 		movsd	-2832(%rbp), %xmm6
 3467      F0F4FFFF 
 3468 1683 F20F11B5 		movsd	%xmm6, -3672(%rbp)
 3468      A8F1FFFF 
 3469 168b 8B8518F2 		movl	-3560(%rbp), %eax
 3469      FFFF
 3470 1691 4863D0   		movslq	%eax, %rdx
 3471 1694 488D8590 		leaq	-3440(%rbp), %rax
 3471      F2FFFF
 3472 169b 4889D6   		movq	%rdx, %rsi
 3473 169e 4889C7   		movq	%rax, %rdi
 3474 16a1 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3474      00
 3475 16a6 F20F1050 		movsd	8(%rax), %xmm2
 3475      08
 3476 16ab F20F1195 		movsd	%xmm2, -3680(%rbp)
 3476      A0F1FFFF 
 3477 16b3 8B8518F2 		movl	-3560(%rbp), %eax
 3477      FFFF
 3478 16b9 4863D0   		movslq	%eax, %rdx
 3479 16bc 488D8590 		leaq	-3440(%rbp), %rax
 3479      F2FFFF
 3480 16c3 4889D6   		movq	%rdx, %rsi
 3481 16c6 4889C7   		movq	%rax, %rdi
 3482 16c9 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3482      00
 3483 16ce F20F1040 		movsd	8(%rax), %xmm0
 3483      08
 3484 16d3 F20F5985 		mulsd	-3680(%rbp), %xmm0
 3484      A0F1FFFF 
 3485 16db F20F5985 		mulsd	-3480(%rbp), %xmm0
 3485      68F2FFFF 
 3486 16e3 F20F5885 		addsd	-3672(%rbp), %xmm0
 3486      A8F1FFFF 
 3487 16eb F20F1185 		movsd	%xmm0, -2832(%rbp)
 3487      F0F4FFFF 
 273:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_y = x_flux.momentum_y + e_alpha[k].x*(e_alpha[k].y) *mo
 3488              		.loc 9 273 0
 3489 16f3 F20F10BD 		movsd	-2824(%rbp), %xmm7
 3489      F8F4FFFF 
 3490 16fb F20F11BD 		movsd	%xmm7, -3672(%rbp)
 3490      A8F1FFFF 
 3491 1703 8B8518F2 		movl	-3560(%rbp), %eax
 3491      FFFF
 3492 1709 4863D0   		movslq	%eax, %rdx
 3493 170c 488D8590 		leaq	-3440(%rbp), %rax
 3493      F2FFFF
 3494 1713 4889D6   		movq	%rdx, %rsi
 3495 1716 4889C7   		movq	%rax, %rdi
 3496 1719 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3496      00
 3497 171e F20F1068 		movsd	8(%rax), %xmm5
 3497      08
 3498 1723 F20F11AD 		movsd	%xmm5, -3680(%rbp)
 3498      A0F1FFFF 
 3499 172b 8B8518F2 		movl	-3560(%rbp), %eax
GAS LISTING /tmp/cc2K2nX4.s 			page 125


 3499      FFFF
 3500 1731 4863D0   		movslq	%eax, %rdx
 3501 1734 488D8590 		leaq	-3440(%rbp), %rax
 3501      F2FFFF
 3502 173b 4889D6   		movq	%rdx, %rsi
 3503 173e 4889C7   		movq	%rax, %rdi
 3504 1741 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3504      00
 3505 1746 F20F1040 		movsd	16(%rax), %xmm0
 3505      10
 3506 174b F20F5985 		mulsd	-3680(%rbp), %xmm0
 3506      A0F1FFFF 
 3507 1753 F20F5985 		mulsd	-3480(%rbp), %xmm0
 3507      68F2FFFF 
 3508 175b F20F5885 		addsd	-3672(%rbp), %xmm0
 3508      A8F1FFFF 
 3509 1763 F20F1185 		movsd	%xmm0, -2824(%rbp)
 3509      F8F4FFFF 
 274:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_x = y_flux.momentum_x + e_alpha[k].y*(e_alpha[k].x) * m
 3510              		.loc 9 274 0
 3511 176b F20F109D 		movsd	-2784(%rbp), %xmm3
 3511      20F5FFFF 
 3512 1773 F20F119D 		movsd	%xmm3, -3672(%rbp)
 3512      A8F1FFFF 
 3513 177b 8B8518F2 		movl	-3560(%rbp), %eax
 3513      FFFF
 3514 1781 4863D0   		movslq	%eax, %rdx
 3515 1784 488D8590 		leaq	-3440(%rbp), %rax
 3515      F2FFFF
 3516 178b 4889D6   		movq	%rdx, %rsi
 3517 178e 4889C7   		movq	%rax, %rdi
 3518 1791 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3518      00
 3519 1796 F20F1060 		movsd	16(%rax), %xmm4
 3519      10
 3520 179b F20F11A5 		movsd	%xmm4, -3680(%rbp)
 3520      A0F1FFFF 
 3521 17a3 8B8518F2 		movl	-3560(%rbp), %eax
 3521      FFFF
 3522 17a9 4863D0   		movslq	%eax, %rdx
 3523 17ac 488D8590 		leaq	-3440(%rbp), %rax
 3523      F2FFFF
 3524 17b3 4889D6   		movq	%rdx, %rsi
 3525 17b6 4889C7   		movq	%rax, %rdi
 3526 17b9 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3526      00
 3527 17be F20F1040 		movsd	8(%rax), %xmm0
 3527      08
 3528 17c3 F20F5985 		mulsd	-3680(%rbp), %xmm0
 3528      A0F1FFFF 
 3529 17cb F20F5985 		mulsd	-3480(%rbp), %xmm0
 3529      68F2FFFF 
 3530 17d3 F20F5885 		addsd	-3672(%rbp), %xmm0
 3530      A8F1FFFF 
 3531 17db F20F1185 		movsd	%xmm0, -2784(%rbp)
 3531      20F5FFFF 
 275:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_y = y_flux.momentum_y + e_alpha[k].y * (e_alpha[k].y) *
GAS LISTING /tmp/cc2K2nX4.s 			page 126


 3532              		.loc 9 275 0
 3533 17e3 F20F10B5 		movsd	-2776(%rbp), %xmm6
 3533      28F5FFFF 
 3534 17eb F20F11B5 		movsd	%xmm6, -3672(%rbp)
 3534      A8F1FFFF 
 3535 17f3 8B8518F2 		movl	-3560(%rbp), %eax
 3535      FFFF
 3536 17f9 4863D0   		movslq	%eax, %rdx
 3537 17fc 488D8590 		leaq	-3440(%rbp), %rax
 3537      F2FFFF
 3538 1803 4889D6   		movq	%rdx, %rsi
 3539 1806 4889C7   		movq	%rax, %rdi
 3540 1809 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3540      00
 3541 180e F20F1050 		movsd	16(%rax), %xmm2
 3541      10
 3542 1813 F20F1195 		movsd	%xmm2, -3680(%rbp)
 3542      A0F1FFFF 
 3543 181b 8B8518F2 		movl	-3560(%rbp), %eax
 3543      FFFF
 3544 1821 4863D0   		movslq	%eax, %rdx
 3545 1824 488D8590 		leaq	-3440(%rbp), %rax
 3545      F2FFFF
 3546 182b 4889D6   		movq	%rdx, %rsi
 3547 182e 4889C7   		movq	%rax, %rdi
 3548 1831 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 3548      00
 3549 1836 F20F1040 		movsd	16(%rax), %xmm0
 3549      10
 3550 183b F20F5985 		mulsd	-3680(%rbp), %xmm0
 3550      A0F1FFFF 
 3551 1843 F20F5985 		mulsd	-3480(%rbp), %xmm0
 3551      68F2FFFF 
 3552 184b F20F5885 		addsd	-3672(%rbp), %xmm0
 3552      A8F1FFFF 
 3553 1853 F20F1185 		movsd	%xmm0, -2776(%rbp)
 3553      28F5FFFF 
 256:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 3554              		.loc 9 256 0
 3555 185b 838518F2 		addl	$1, -3560(%rbp)
 3555      FFFF01
 3556 1862 E9A8FBFF 		jmp	.L160
 3556      FF
 3557              	.L159:
 3558              	.LBE17:
 276:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 277:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 278:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 279:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //calculate cell_flux across boundary
 280:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.P =  -1*interface_area *
 3559              		.loc 9 280 0
 3560 1867 F20F108D 		movsd	-3536(%rbp), %xmm1
 3560      30F2FFFF 
 3561 186f F20F1005 		movsd	.LC6(%rip), %xmm0
 3561      00000000 
 3562 1877 660F57C8 		xorpd	%xmm0, %xmm1
 281:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.P *cell_normal.x + y_flux.P * cell_normal.y);
GAS LISTING /tmp/cc2K2nX4.s 			page 127


 3563              		.loc 9 281 0
 3564 187b F20F1095 		movsd	-2840(%rbp), %xmm2
 3564      E8F4FFFF 
 3565 1883 F20F1085 		movsd	-3016(%rbp), %xmm0
 3565      38F4FFFF 
 3566 188b F20F59D0 		mulsd	%xmm0, %xmm2
 3567 188f F20F109D 		movsd	-2792(%rbp), %xmm3
 3567      18F5FFFF 
 3568 1897 F20F1085 		movsd	-3008(%rbp), %xmm0
 3568      40F4FFFF 
 3569 189f F20F59C3 		mulsd	%xmm3, %xmm0
 3570 18a3 F20F58C2 		addsd	%xmm2, %xmm0
 280:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.P *cell_normal.x + y_flux.P * cell_normal.y);
 3571              		.loc 9 280 0
 3572 18a7 F20F59C1 		mulsd	%xmm1, %xmm0
 3573              		.loc 9 281 0
 3574 18ab F20F1185 		movsd	%xmm0, -2744(%rbp)
 3574      48F5FFFF 
 282:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_x = -1*interface_area *
 3575              		.loc 9 282 0
 3576 18b3 F20F108D 		movsd	-3536(%rbp), %xmm1
 3576      30F2FFFF 
 3577 18bb F20F1005 		movsd	.LC6(%rip), %xmm0
 3577      00000000 
 3578 18c3 660F57C8 		xorpd	%xmm0, %xmm1
 283:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.momentum_x *cell_normal.x + y_flux.momentum_x * cell_normal.y);
 3579              		.loc 9 283 0
 3580 18c7 F20F1095 		movsd	-2832(%rbp), %xmm2
 3580      F0F4FFFF 
 3581 18cf F20F1085 		movsd	-3016(%rbp), %xmm0
 3581      38F4FFFF 
 3582 18d7 F20F59D0 		mulsd	%xmm0, %xmm2
 3583 18db F20F109D 		movsd	-2784(%rbp), %xmm3
 3583      20F5FFFF 
 3584 18e3 F20F1085 		movsd	-3008(%rbp), %xmm0
 3584      40F4FFFF 
 3585 18eb F20F59C3 		mulsd	%xmm3, %xmm0
 3586 18ef F20F58C2 		addsd	%xmm2, %xmm0
 282:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_x = -1*interface_area *
 3587              		.loc 9 282 0
 3588 18f3 F20F59C1 		mulsd	%xmm1, %xmm0
 3589              		.loc 9 283 0
 3590 18f7 F20F1185 		movsd	%xmm0, -2736(%rbp)
 3590      50F5FFFF 
 284:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_y = -1*interface_area *
 3591              		.loc 9 284 0
 3592 18ff F20F108D 		movsd	-3536(%rbp), %xmm1
 3592      30F2FFFF 
 3593 1907 F20F1005 		movsd	.LC6(%rip), %xmm0
 3593      00000000 
 3594 190f 660F57C8 		xorpd	%xmm0, %xmm1
 285:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.momentum_y *cell_normal.x + y_flux.momentum_y * cell_normal.y);
 3595              		.loc 9 285 0
 3596 1913 F20F1095 		movsd	-2824(%rbp), %xmm2
 3596      F8F4FFFF 
 3597 191b F20F1085 		movsd	-3016(%rbp), %xmm0
 3597      38F4FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 128


 3598 1923 F20F59D0 		mulsd	%xmm0, %xmm2
 3599 1927 F20F109D 		movsd	-2776(%rbp), %xmm3
 3599      28F5FFFF 
 3600 192f F20F1085 		movsd	-3008(%rbp), %xmm0
 3600      40F4FFFF 
 3601 1937 F20F59C3 		mulsd	%xmm3, %xmm0
 3602 193b F20F58C2 		addsd	%xmm2, %xmm0
 284:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_y = -1*interface_area *
 3603              		.loc 9 284 0
 3604 193f F20F59C1 		mulsd	%xmm1, %xmm0
 3605              		.loc 9 285 0
 3606 1943 F20F1185 		movsd	%xmm0, -2728(%rbp)
 3606      58F5FFFF 
 286:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 287:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 288:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 289:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 290:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add density flux to current cell and neighbouring cell
 291:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_rho(i,cell_flux.P/Mesh.get_cell_volume(i));
 3607              		.loc 9 291 0
 3608 194b F20F10AD 		movsd	-2744(%rbp), %xmm5
 3608      48F5FFFF 
 3609 1953 F20F11AD 		movsd	%xmm5, -3672(%rbp)
 3609      A8F1FFFF 
 3610 195b 8B950CF2 		movl	-3572(%rbp), %edx
 3610      FFFF
 3611 1961 488B85F0 		movq	-3600(%rbp), %rax
 3611      F1FFFF
 3612 1968 89D6     		movl	%edx, %esi
 3613 196a 4889C7   		movq	%rax, %rdi
 3614 196d E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3614      00
 3615 1972 F20F10AD 		movsd	-3672(%rbp), %xmm5
 3615      A8F1FFFF 
 3616 197a F20F5EE8 		divsd	%xmm0, %xmm5
 3617 197e 660F28C5 		movapd	%xmm5, %xmm0
 3618 1982 8B950CF2 		movl	-3572(%rbp), %edx
 3618      FFFF
 3619 1988 488D8540 		leaq	-2496(%rbp), %rax
 3619      F6FFFF
 3620 198f 89D6     		movl	%edx, %esi
 3621 1991 4889C7   		movq	%rax, %rdi
 3622 1994 E8000000 		call	_ZN8Solution7add_rhoEid
 3622      00
 292:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_rho(neighbour, -cell_flux.P/Mesh.get_cell_volume(neighb
 3623              		.loc 9 292 0
 3624 1999 F20F108D 		movsd	-2744(%rbp), %xmm1
 3624      48F5FFFF 
 3625 19a1 F20F1005 		movsd	.LC6(%rip), %xmm0
 3625      00000000 
 3626 19a9 660F57C8 		xorpd	%xmm0, %xmm1
 3627 19ad F20F118D 		movsd	%xmm1, -3672(%rbp)
 3627      A8F1FFFF 
 3628 19b5 8B9500F2 		movl	-3584(%rbp), %edx
 3628      FFFF
 3629 19bb 488B85F0 		movq	-3600(%rbp), %rax
 3629      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 129


 3630 19c2 89D6     		movl	%edx, %esi
 3631 19c4 4889C7   		movq	%rax, %rdi
 3632 19c7 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3632      00
 3633 19cc F20F108D 		movsd	-3672(%rbp), %xmm1
 3633      A8F1FFFF 
 3634 19d4 F20F5EC8 		divsd	%xmm0, %xmm1
 3635 19d8 660F28C1 		movapd	%xmm1, %xmm0
 3636 19dc 8B9500F2 		movl	-3584(%rbp), %edx
 3636      FFFF
 3637 19e2 488D8540 		leaq	-2496(%rbp), %rax
 3637      F6FFFF
 3638 19e9 89D6     		movl	%edx, %esi
 3639 19eb 4889C7   		movq	%rax, %rdi
 3640 19ee E8000000 		call	_ZN8Solution7add_rhoEid
 3640      00
 293:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 294:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add x momentum
 295:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_u(i,cell_flux.momentum_x/Mesh.get_cell_volume(i));
 3641              		.loc 9 295 0
 3642 19f3 F20F10B5 		movsd	-2736(%rbp), %xmm6
 3642      50F5FFFF 
 3643 19fb F20F11B5 		movsd	%xmm6, -3672(%rbp)
 3643      A8F1FFFF 
 3644 1a03 8B950CF2 		movl	-3572(%rbp), %edx
 3644      FFFF
 3645 1a09 488B85F0 		movq	-3600(%rbp), %rax
 3645      F1FFFF
 3646 1a10 89D6     		movl	%edx, %esi
 3647 1a12 4889C7   		movq	%rax, %rdi
 3648 1a15 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3648      00
 3649 1a1a F20F10B5 		movsd	-3672(%rbp), %xmm6
 3649      A8F1FFFF 
 3650 1a22 F20F5EF0 		divsd	%xmm0, %xmm6
 3651 1a26 660F28C6 		movapd	%xmm6, %xmm0
 3652 1a2a 8B950CF2 		movl	-3572(%rbp), %edx
 3652      FFFF
 3653 1a30 488D8540 		leaq	-2496(%rbp), %rax
 3653      F6FFFF
 3654 1a37 89D6     		movl	%edx, %esi
 3655 1a39 4889C7   		movq	%rax, %rdi
 3656 1a3c E8000000 		call	_ZN8Solution5add_uEid
 3656      00
 296:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_u(neighbour, -cell_flux.momentum_x/Mesh.get_cell_volume
 3657              		.loc 9 296 0
 3658 1a41 F20F108D 		movsd	-2736(%rbp), %xmm1
 3658      50F5FFFF 
 3659 1a49 F20F1005 		movsd	.LC6(%rip), %xmm0
 3659      00000000 
 3660 1a51 660F57C8 		xorpd	%xmm0, %xmm1
 3661 1a55 F20F118D 		movsd	%xmm1, -3672(%rbp)
 3661      A8F1FFFF 
 3662 1a5d 8B9500F2 		movl	-3584(%rbp), %edx
 3662      FFFF
 3663 1a63 488B85F0 		movq	-3600(%rbp), %rax
 3663      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 130


 3664 1a6a 89D6     		movl	%edx, %esi
 3665 1a6c 4889C7   		movq	%rax, %rdi
 3666 1a6f E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3666      00
 3667 1a74 F20F108D 		movsd	-3672(%rbp), %xmm1
 3667      A8F1FFFF 
 3668 1a7c F20F5EC8 		divsd	%xmm0, %xmm1
 3669 1a80 660F28C1 		movapd	%xmm1, %xmm0
 3670 1a84 8B9500F2 		movl	-3584(%rbp), %edx
 3670      FFFF
 3671 1a8a 488D8540 		leaq	-2496(%rbp), %rax
 3671      F6FFFF
 3672 1a91 89D6     		movl	%edx, %esi
 3673 1a93 4889C7   		movq	%rax, %rdi
 3674 1a96 E8000000 		call	_ZN8Solution5add_uEid
 3674      00
 297:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 298:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add y momentum
 299:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_v(i,cell_flux.momentum_y/Mesh.get_cell_volume(i));
 3675              		.loc 9 299 0
 3676 1a9b F20F10BD 		movsd	-2728(%rbp), %xmm7
 3676      58F5FFFF 
 3677 1aa3 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 3677      A8F1FFFF 
 3678 1aab 8B950CF2 		movl	-3572(%rbp), %edx
 3678      FFFF
 3679 1ab1 488B85F0 		movq	-3600(%rbp), %rax
 3679      F1FFFF
 3680 1ab8 89D6     		movl	%edx, %esi
 3681 1aba 4889C7   		movq	%rax, %rdi
 3682 1abd E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3682      00
 3683 1ac2 F20F10BD 		movsd	-3672(%rbp), %xmm7
 3683      A8F1FFFF 
 3684 1aca F20F5EF8 		divsd	%xmm0, %xmm7
 3685 1ace 660F28C7 		movapd	%xmm7, %xmm0
 3686 1ad2 8B950CF2 		movl	-3572(%rbp), %edx
 3686      FFFF
 3687 1ad8 488D8540 		leaq	-2496(%rbp), %rax
 3687      F6FFFF
 3688 1adf 89D6     		movl	%edx, %esi
 3689 1ae1 4889C7   		movq	%rax, %rdi
 3690 1ae4 E8000000 		call	_ZN8Solution5add_vEid
 3690      00
 300:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_v(neighbour, -cell_flux.momentum_y/Mesh.get_cell_volume
 3691              		.loc 9 300 0
 3692 1ae9 F20F108D 		movsd	-2728(%rbp), %xmm1
 3692      58F5FFFF 
 3693 1af1 F20F1005 		movsd	.LC6(%rip), %xmm0
 3693      00000000 
 3694 1af9 660F57C8 		xorpd	%xmm0, %xmm1
 3695 1afd F20F118D 		movsd	%xmm1, -3672(%rbp)
 3695      A8F1FFFF 
 3696 1b05 8B9500F2 		movl	-3584(%rbp), %edx
 3696      FFFF
 3697 1b0b 488B85F0 		movq	-3600(%rbp), %rax
 3697      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 131


 3698 1b12 89D6     		movl	%edx, %esi
 3699 1b14 4889C7   		movq	%rax, %rdi
 3700 1b17 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 3700      00
 3701 1b1c F20F108D 		movsd	-3672(%rbp), %xmm1
 3701      A8F1FFFF 
 3702 1b24 F20F5EC8 		divsd	%xmm0, %xmm1
 3703 1b28 660F28C1 		movapd	%xmm1, %xmm0
 3704 1b2c 8B9500F2 		movl	-3584(%rbp), %edx
 3704      FFFF
 3705 1b32 488D8540 		leaq	-2496(%rbp), %rax
 3705      F6FFFF
 3706 1b39 89D6     		movl	%edx, %esi
 3707 1b3b 4889C7   		movq	%rax, %rdi
 3708 1b3e E8000000 		call	_ZN8Solution5add_vEid
 3708      00
 301:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 302:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if ( j == 2){
 3709              		.loc 9 302 0
 3710 1b43 83BD10F2 		cmpl	$2, -3568(%rbp)
 3710      FFFF02
 3711 1b4a 7549     		jne	.L161
 303:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 rj2.update(cell_flux.P, cell_flux.momentum_x,cell_flux.momentum_y,0
 3712              		.loc 9 303 0
 3713 1b4c F20F108D 		movsd	-2728(%rbp), %xmm1
 3713      58F5FFFF 
 3714 1b54 F20F1085 		movsd	-2736(%rbp), %xmm0
 3714      50F5FFFF 
 3715 1b5c 488B9548 		movq	-2744(%rbp), %rdx
 3715      F5FFFF
 3716 1b63 8B8D0CF2 		movl	-3572(%rbp), %ecx
 3716      FFFF
 3717 1b69 488D8590 		leaq	-2416(%rbp), %rax
 3717      F6FFFF
 3718 1b70 89CE     		movl	%ecx, %esi
 3719 1b72 660FEFDB 		pxor	%xmm3, %xmm3
 3720 1b76 660F28D1 		movapd	%xmm1, %xmm2
 3721 1b7a 660F28C8 		movapd	%xmm0, %xmm1
 3722 1b7e 488995A8 		movq	%rdx, -3672(%rbp)
 3722      F1FFFF
 3723 1b85 F20F1085 		movsd	-3672(%rbp), %xmm0
 3723      A8F1FFFF 
 3724 1b8d 4889C7   		movq	%rax, %rdi
 3725              	.LEHB52:
 3726 1b90 E8000000 		call	_ZN8Solution6updateEddddi
 3726      00
 3727              	.L161:
 304:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 305:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if (j==3){
 3728              		.loc 9 305 0
 3729 1b95 83BD10F2 		cmpl	$3, -3568(%rbp)
 3729      FFFF03
 3730 1b9c 7549     		jne	.L162
 306:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 307:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rj3.update(cell_flux.P, cell_flux.momentum_x,cell_flux.momentum_y,0.0,i
 3731              		.loc 9 307 0
 3732 1b9e F20F108D 		movsd	-2728(%rbp), %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 132


 3732      58F5FFFF 
 3733 1ba6 F20F1085 		movsd	-2736(%rbp), %xmm0
 3733      50F5FFFF 
 3734 1bae 488B9548 		movq	-2744(%rbp), %rdx
 3734      F5FFFF
 3735 1bb5 8B8D0CF2 		movl	-3572(%rbp), %ecx
 3735      FFFF
 3736 1bbb 488D85E0 		leaq	-2336(%rbp), %rax
 3736      F6FFFF
 3737 1bc2 89CE     		movl	%ecx, %esi
 3738 1bc4 660FEFDB 		pxor	%xmm3, %xmm3
 3739 1bc8 660F28D1 		movapd	%xmm1, %xmm2
 3740 1bcc 660F28C8 		movapd	%xmm0, %xmm1
 3741 1bd0 488995A8 		movq	%rdx, -3672(%rbp)
 3741      F1FFFF
 3742 1bd7 F20F1085 		movsd	-3672(%rbp), %xmm0
 3742      A8F1FFFF 
 3743 1bdf 4889C7   		movq	%rax, %rdi
 3744 1be2 E8000000 		call	_ZN8Solution6updateEddddi
 3744      00
 3745              	.L162:
 3746              	.LBE15:
 200:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 3747              		.loc 9 200 0 discriminator 2
 3748 1be7 838510F2 		addl	$1, -3568(%rbp)
 3748      FFFF01
 3749 1bee E90FEFFF 		jmp	.L163
 3749      FF
 3750              	.L155:
 3751              	.LBE14:
 3752              	.LBE13:
 3753              	.LBE12:
 3754              	.LBE11:
 181:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 3755              		.loc 9 181 0 discriminator 2
 3756 1bf3 83850CF2 		addl	$1, -3572(%rbp)
 3756      FFFF01
 3757 1bfa E915EEFF 		jmp	.L164
 3757      FF
 3758              	.L154:
 3759              	.LBE10:
 3760              	.LBB25:
 308:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 309:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 310:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 311:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 312:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
 313:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 314:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 315:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****           //  residual_worker.remove_double_errors();
 316:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 317:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //update RK values
 318:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             for( int i=0; i < Mesh.get_total_cells(); i++){
 3761              		.loc 9 318 0
 3762 1bff C7851CF2 		movl	$0, -3556(%rbp)
 3762      FFFF0000 
 3762      0000
GAS LISTING /tmp/cc2K2nX4.s 			page 133


 3763              	.L167:
 3764              		.loc 9 318 0 is_stmt 0 discriminator 1
 3765 1c09 488B85F0 		movq	-3600(%rbp), %rax
 3765      F1FFFF
 3766 1c10 4889C7   		movq	%rax, %rdi
 3767 1c13 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 3767      00
 3768 1c18 3B851CF2 		cmpl	-3556(%rbp), %eax
 3768      FFFF
 3769 1c1e 0F9FC0   		setg	%al
 3770 1c21 84C0     		testb	%al, %al
 3771 1c23 0F846803 		je	.L165
 3771      0000
 319:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 320:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 3772              		.loc 9 320 0 is_stmt 1
 3773 1c29 8B951CF2 		movl	-3556(%rbp), %edx
 3773      FFFF
 3774 1c2f 488B85E0 		movq	-3616(%rbp), %rax
 3774      F1FFFF
 3775 1c36 89D6     		movl	%edx, %esi
 3776 1c38 4889C7   		movq	%rax, %rdi
 3777 1c3b E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 3777      00
 3778 1c40 83F001   		xorl	$1, %eax
 3779 1c43 84C0     		testb	%al, %al
 3780 1c45 0F843A03 		je	.L166
 3780      0000
 321:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 322:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // update intermediate macroscopic variables
 323:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f1 = soln_t0.get_rho(i) + residual_worker.get_rho(i)*delta_t *rk4.alpha[rk+1] ;
 3781              		.loc 9 323 0
 3782 1c4b 8B951CF2 		movl	-3556(%rbp), %edx
 3782      FFFF
 3783 1c51 488D85F0 		leaq	-2576(%rbp), %rax
 3783      F5FFFF
 3784 1c58 89D6     		movl	%edx, %esi
 3785 1c5a 4889C7   		movq	%rax, %rdi
 3786 1c5d E8000000 		call	_ZN8Solution7get_rhoEi
 3786      00
 3787 1c62 F20F1185 		movsd	%xmm0, -3672(%rbp)
 3787      A8F1FFFF 
 3788 1c6a 8B951CF2 		movl	-3556(%rbp), %edx
 3788      FFFF
 3789 1c70 488D8540 		leaq	-2496(%rbp), %rax
 3789      F6FFFF
 3790 1c77 89D6     		movl	%edx, %esi
 3791 1c79 4889C7   		movq	%rax, %rdi
 3792 1c7c E8000000 		call	_ZN8Solution7get_rhoEi
 3792      00
 3793 1c81 F20F5985 		mulsd	-3528(%rbp), %xmm0
 3793      38F2FFFF 
 3794 1c89 8B8508F2 		movl	-3576(%rbp), %eax
 3794      FFFF
 3795 1c8f 83C001   		addl	$1, %eax
 3796 1c92 4898     		cltq
 3797 1c94 F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 134


 3797      C548F9FF 
 3797      FF
 3798 1c9d F20F59C1 		mulsd	%xmm1, %xmm0
 3799 1ca1 F20F5885 		addsd	-3672(%rbp), %xmm0
 3799      A8F1FFFF 
 3800 1ca9 F20F1185 		movsd	%xmm0, -3472(%rbp)
 3800      70F2FFFF 
 324:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f2 = soln_t0.get_u(i) + residual_worker.get_u(i) *delta_t*rk4.alpha[rk +1];
 3801              		.loc 9 324 0
 3802 1cb1 8B951CF2 		movl	-3556(%rbp), %edx
 3802      FFFF
 3803 1cb7 488D85F0 		leaq	-2576(%rbp), %rax
 3803      F5FFFF
 3804 1cbe 89D6     		movl	%edx, %esi
 3805 1cc0 4889C7   		movq	%rax, %rdi
 3806 1cc3 E8000000 		call	_ZN8Solution5get_uEi
 3806      00
 3807 1cc8 F20F1185 		movsd	%xmm0, -3672(%rbp)
 3807      A8F1FFFF 
 3808 1cd0 8B951CF2 		movl	-3556(%rbp), %edx
 3808      FFFF
 3809 1cd6 488D8540 		leaq	-2496(%rbp), %rax
 3809      F6FFFF
 3810 1cdd 89D6     		movl	%edx, %esi
 3811 1cdf 4889C7   		movq	%rax, %rdi
 3812 1ce2 E8000000 		call	_ZN8Solution5get_uEi
 3812      00
 3813 1ce7 F20F5985 		mulsd	-3528(%rbp), %xmm0
 3813      38F2FFFF 
 3814 1cef 8B8508F2 		movl	-3576(%rbp), %eax
 3814      FFFF
 3815 1cf5 83C001   		addl	$1, %eax
 3816 1cf8 4898     		cltq
 3817 1cfa F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
 3817      C548F9FF 
 3817      FF
 3818 1d03 F20F59C1 		mulsd	%xmm1, %xmm0
 3819 1d07 F20F5885 		addsd	-3672(%rbp), %xmm0
 3819      A8F1FFFF 
 3820 1d0f F20F1185 		movsd	%xmm0, -3464(%rbp)
 3820      78F2FFFF 
 325:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 = soln_t0.get_v(i) + residual_worker.get_v(i) *delta_t*rk4.alpha[rk+1];
 3821              		.loc 9 325 0
 3822 1d17 8B951CF2 		movl	-3556(%rbp), %edx
 3822      FFFF
 3823 1d1d 488D85F0 		leaq	-2576(%rbp), %rax
 3823      F5FFFF
 3824 1d24 89D6     		movl	%edx, %esi
 3825 1d26 4889C7   		movq	%rax, %rdi
 3826 1d29 E8000000 		call	_ZN8Solution5get_vEi
 3826      00
 3827 1d2e F20F1185 		movsd	%xmm0, -3672(%rbp)
 3827      A8F1FFFF 
 3828 1d36 8B951CF2 		movl	-3556(%rbp), %edx
 3828      FFFF
 3829 1d3c 488D8540 		leaq	-2496(%rbp), %rax
 3829      F6FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 135


 3830 1d43 89D6     		movl	%edx, %esi
 3831 1d45 4889C7   		movq	%rax, %rdi
 3832 1d48 E8000000 		call	_ZN8Solution5get_vEi
 3832      00
 3833 1d4d F20F5985 		mulsd	-3528(%rbp), %xmm0
 3833      38F2FFFF 
 3834 1d55 8B8508F2 		movl	-3576(%rbp), %eax
 3834      FFFF
 3835 1d5b 83C001   		addl	$1, %eax
 3836 1d5e 4898     		cltq
 3837 1d60 F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
 3837      C548F9FF 
 3837      FF
 3838 1d69 F20F59C1 		mulsd	%xmm1, %xmm0
 3839 1d6d F20F5885 		addsd	-3672(%rbp), %xmm0
 3839      A8F1FFFF 
 3840 1d75 F20F1185 		movsd	%xmm0, -3456(%rbp)
 3840      80F2FFFF 
 326:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 327:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                       // change momentum to velocity
 328:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f2 = f2/soln_t0.get_average_rho();
 3841              		.loc 9 328 0
 3842 1d7d 488D85F0 		leaq	-2576(%rbp), %rax
 3842      F5FFFF
 3843 1d84 4889C7   		movq	%rax, %rdi
 3844 1d87 E8000000 		call	_ZN8Solution15get_average_rhoEv
 3844      00
 3845 1d8c 660F28C8 		movapd	%xmm0, %xmm1
 3846 1d90 F20F1085 		movsd	-3464(%rbp), %xmm0
 3846      78F2FFFF 
 3847 1d98 F20F5EC1 		divsd	%xmm1, %xmm0
 3848 1d9c F20F1185 		movsd	%xmm0, -3464(%rbp)
 3848      78F2FFFF 
 329:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 =f3/soln_t0.get_average_rho();
 3849              		.loc 9 329 0
 3850 1da4 488D85F0 		leaq	-2576(%rbp), %rax
 3850      F5FFFF
 3851 1dab 4889C7   		movq	%rax, %rdi
 3852 1dae E8000000 		call	_ZN8Solution15get_average_rhoEv
 3852      00
 3853 1db3 660F28C8 		movapd	%xmm0, %xmm1
 3854 1db7 F20F1085 		movsd	-3456(%rbp), %xmm0
 3854      80F2FFFF 
 3855 1dbf F20F5EC1 		divsd	%xmm1, %xmm0
 3856 1dc3 F20F1185 		movsd	%xmm0, -3456(%rbp)
 3856      80F2FFFF 
 330:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 331:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     temp_soln.update(f1,f2,f3,0.0, i);
 3857              		.loc 9 331 0
 3858 1dcb 8B8D1CF2 		movl	-3556(%rbp), %ecx
 3858      FFFF
 3859 1dd1 F20F108D 		movsd	-3456(%rbp), %xmm1
 3859      80F2FFFF 
 3860 1dd9 F20F1085 		movsd	-3464(%rbp), %xmm0
 3860      78F2FFFF 
 3861 1de1 488B9570 		movq	-3472(%rbp), %rdx
 3861      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 136


 3862 1de8 488D85A0 		leaq	-2656(%rbp), %rax
 3862      F5FFFF
 3863 1def 89CE     		movl	%ecx, %esi
 3864 1df1 660FEFDB 		pxor	%xmm3, %xmm3
 3865 1df5 660F28D1 		movapd	%xmm1, %xmm2
 3866 1df9 660F28C8 		movapd	%xmm0, %xmm1
 3867 1dfd 488995A8 		movq	%rdx, -3672(%rbp)
 3867      F1FFFF
 3868 1e04 F20F1085 		movsd	-3672(%rbp), %xmm0
 3868      A8F1FFFF 
 3869 1e0c 4889C7   		movq	%rax, %rdi
 3870 1e0f E8000000 		call	_ZN8Solution6updateEddddi
 3870      00
 332:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 333:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //add contribution
 334:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_rho(i, delta_t* rk4.beta[rk] * residual_worker.get_rho(i));
 3871              		.loc 9 334 0
 3872 1e14 8B8508F2 		movl	-3576(%rbp), %eax
 3872      FFFF
 3873 1e1a 4898     		cltq
 3874 1e1c 4883C004 		addq	$4, %rax
 3875 1e20 F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 3875      C548F9FF 
 3875      FF
 3876 1e29 F20F5985 		mulsd	-3528(%rbp), %xmm0
 3876      38F2FFFF 
 3877 1e31 F20F1185 		movsd	%xmm0, -3672(%rbp)
 3877      A8F1FFFF 
 3878 1e39 8B951CF2 		movl	-3556(%rbp), %edx
 3878      FFFF
 3879 1e3f 488D8540 		leaq	-2496(%rbp), %rax
 3879      F6FFFF
 3880 1e46 89D6     		movl	%edx, %esi
 3881 1e48 4889C7   		movq	%rax, %rdi
 3882 1e4b E8000000 		call	_ZN8Solution7get_rhoEi
 3882      00
 3883 1e50 F20F5985 		mulsd	-3672(%rbp), %xmm0
 3883      A8F1FFFF 
 3884 1e58 8B951CF2 		movl	-3556(%rbp), %edx
 3884      FFFF
 3885 1e5e 488B85E8 		movq	-3608(%rbp), %rax
 3885      F1FFFF
 3886 1e65 89D6     		movl	%edx, %esi
 3887 1e67 4889C7   		movq	%rax, %rdi
 3888 1e6a E8000000 		call	_ZN8Solution7add_rhoEid
 3888      00
 335:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_u(i, delta_t* rk4.beta[rk] * residual_worker.get_u(i));
 3889              		.loc 9 335 0
 3890 1e6f 8B8508F2 		movl	-3576(%rbp), %eax
 3890      FFFF
 3891 1e75 4898     		cltq
 3892 1e77 4883C004 		addq	$4, %rax
 3893 1e7b F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 3893      C548F9FF 
 3893      FF
 3894 1e84 F20F5985 		mulsd	-3528(%rbp), %xmm0
 3894      38F2FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 137


 3895 1e8c F20F1185 		movsd	%xmm0, -3672(%rbp)
 3895      A8F1FFFF 
 3896 1e94 8B951CF2 		movl	-3556(%rbp), %edx
 3896      FFFF
 3897 1e9a 488D8540 		leaq	-2496(%rbp), %rax
 3897      F6FFFF
 3898 1ea1 89D6     		movl	%edx, %esi
 3899 1ea3 4889C7   		movq	%rax, %rdi
 3900 1ea6 E8000000 		call	_ZN8Solution5get_uEi
 3900      00
 3901 1eab F20F5985 		mulsd	-3672(%rbp), %xmm0
 3901      A8F1FFFF 
 3902 1eb3 8B951CF2 		movl	-3556(%rbp), %edx
 3902      FFFF
 3903 1eb9 488B85E8 		movq	-3608(%rbp), %rax
 3903      F1FFFF
 3904 1ec0 89D6     		movl	%edx, %esi
 3905 1ec2 4889C7   		movq	%rax, %rdi
 3906 1ec5 E8000000 		call	_ZN8Solution5add_uEid
 3906      00
 336:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_v(i, delta_t* rk4.beta[rk] * residual_worker.get_v(i));
 3907              		.loc 9 336 0
 3908 1eca 8B8508F2 		movl	-3576(%rbp), %eax
 3908      FFFF
 3909 1ed0 4898     		cltq
 3910 1ed2 4883C004 		addq	$4, %rax
 3911 1ed6 F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 3911      C548F9FF 
 3911      FF
 3912 1edf F20F5985 		mulsd	-3528(%rbp), %xmm0
 3912      38F2FFFF 
 3913 1ee7 F20F1185 		movsd	%xmm0, -3672(%rbp)
 3913      A8F1FFFF 
 3914 1eef 8B951CF2 		movl	-3556(%rbp), %edx
 3914      FFFF
 3915 1ef5 488D8540 		leaq	-2496(%rbp), %rax
 3915      F6FFFF
 3916 1efc 89D6     		movl	%edx, %esi
 3917 1efe 4889C7   		movq	%rax, %rdi
 3918 1f01 E8000000 		call	_ZN8Solution5get_vEi
 3918      00
 3919 1f06 F20F5985 		mulsd	-3672(%rbp), %xmm0
 3919      A8F1FFFF 
 3920 1f0e 8B951CF2 		movl	-3556(%rbp), %edx
 3920      FFFF
 3921 1f14 488B85E8 		movq	-3608(%rbp), %rax
 3921      F1FFFF
 3922 1f1b 89D6     		movl	%edx, %esi
 3923 1f1d 4889C7   		movq	%rax, %rdi
 3924 1f20 E8000000 		call	_ZN8Solution5add_vEid
 3924      00
 337:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 338:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( residual_worker.get_u(i) < 0  ){
 3925              		.loc 9 338 0
 3926 1f25 8B951CF2 		movl	-3556(%rbp), %edx
 3926      FFFF
 3927 1f2b 488D8540 		leaq	-2496(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 138


 3927      F6FFFF
 3928 1f32 89D6     		movl	%edx, %esi
 3929 1f34 4889C7   		movq	%rax, %rdi
 3930 1f37 E8000000 		call	_ZN8Solution5get_uEi
 3930      00
 3931 1f3c 660F28C8 		movapd	%xmm0, %xmm1
 3932 1f40 660FEFC0 		pxor	%xmm0, %xmm0
 3933 1f44 660F2EC1 		ucomisd	%xmm1, %xmm0
 3934 1f48 0F97C0   		seta	%al
 3935 1f4b 84C0     		testb	%al, %al
 3936 1f4d 7436     		je	.L166
 339:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if( ! bcs.get_bc(i)){
 3937              		.loc 9 339 0
 3938 1f4f 8B951CF2 		movl	-3556(%rbp), %edx
 3938      FFFF
 3939 1f55 488B85E0 		movq	-3616(%rbp), %rax
 3939      F1FFFF
 3940 1f5c 89D6     		movl	%edx, %esi
 3941 1f5e 4889C7   		movq	%rax, %rdi
 3942 1f61 E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 3942      00
 3943 1f66 83F001   		xorl	$1, %eax
 3944 1f69 84C0     		testb	%al, %al
 3945 1f6b 7418     		je	.L166
 340:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 f2 = f2 + f3;
 3946              		.loc 9 340 0
 3947 1f6d F20F1085 		movsd	-3464(%rbp), %xmm0
 3947      78F2FFFF 
 3948 1f75 F20F5885 		addsd	-3456(%rbp), %xmm0
 3948      80F2FFFF 
 3949 1f7d F20F1185 		movsd	%xmm0, -3464(%rbp)
 3949      78F2FFFF 
 3950              	.L166:
 318:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 3951              		.loc 9 318 0 discriminator 2
 3952 1f85 83851CF2 		addl	$1, -3556(%rbp)
 3952      FFFF01
 3953 1f8c E978FCFF 		jmp	.L167
 3953      FF
 3954              	.L165:
 3955              	.LBE25:
 3956              	.LBE9:
 171:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 3957              		.loc 9 171 0 discriminator 2
 3958 1f91 838508F2 		addl	$1, -3576(%rbp)
 3958      FFFF01
 3959 1f98 E928EAFF 		jmp	.L168
 3959      FF
 3960              	.L153:
 3961              	.LBE8:
 3962              	.LBB28:
 341:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 342:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 343:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 344:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 }
 345:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 346:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
GAS LISTING /tmp/cc2K2nX4.s 			page 139


 347:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 348:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 349:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 350:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 351:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for( int i = 0; i < Mesh.get_total_cells(); i++){
 3963              		.loc 9 351 0
 3964 1f9d C78520F2 		movl	$0, -3552(%rbp)
 3964      FFFF0000 
 3964      0000
 3965              	.L176:
 3966              		.loc 9 351 0 is_stmt 0 discriminator 1
 3967 1fa7 488B85F0 		movq	-3600(%rbp), %rax
 3967      F1FFFF
 3968 1fae 4889C7   		movq	%rax, %rdi
 3969 1fb1 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 3969      00
 3970 1fb6 3B8520F2 		cmpl	-3552(%rbp), %eax
 3970      FFFF
 3971 1fbc 0F9FC0   		setg	%al
 3972 1fbf 84C0     		testb	%al, %al
 3973 1fc1 0F849B01 		je	.L169
 3973      0000
 352:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 3974              		.loc 9 352 0 is_stmt 1
 3975 1fc7 8B9520F2 		movl	-3552(%rbp), %edx
 3975      FFFF
 3976 1fcd 488B85E0 		movq	-3616(%rbp), %rax
 3976      F1FFFF
 3977 1fd4 89D6     		movl	%edx, %esi
 3978 1fd6 4889C7   		movq	%rax, %rdi
 3979 1fd9 E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 3979      00
 3980 1fde 83F001   		xorl	$1, %eax
 3981 1fe1 84C0     		testb	%al, %al
 3982 1fe3 0F846D01 		je	.L170
 3982      0000
 353:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     convergence_residual.add_ansys_l2_norm_residuals(soln.get_rho(i),soln_t0.get_rh
 3983              		.loc 9 353 0
 3984 1fe9 8B9520F2 		movl	-3552(%rbp), %edx
 3984      FFFF
 3985 1fef 488D85F0 		leaq	-2576(%rbp), %rax
 3985      F5FFFF
 3986 1ff6 89D6     		movl	%edx, %esi
 3987 1ff8 4889C7   		movq	%rax, %rdi
 3988 1ffb E8000000 		call	_ZN8Solution5get_vEi
 3988      00
 3989 2000 F20F1185 		movsd	%xmm0, -3672(%rbp)
 3989      A8F1FFFF 
 3990 2008 8B9520F2 		movl	-3552(%rbp), %edx
 3990      FFFF
 3991 200e 488B85E8 		movq	-3608(%rbp), %rax
 3991      F1FFFF
 3992 2015 89D6     		movl	%edx, %esi
 3993 2017 4889C7   		movq	%rax, %rdi
 3994 201a E8000000 		call	_ZN8Solution5get_vEi
 3994      00
 3995 201f F20F1185 		movsd	%xmm0, -3680(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 140


 3995      A0F1FFFF 
 3996 2027 8B9520F2 		movl	-3552(%rbp), %edx
 3996      FFFF
 3997 202d 488D85F0 		leaq	-2576(%rbp), %rax
 3997      F5FFFF
 3998 2034 89D6     		movl	%edx, %esi
 3999 2036 4889C7   		movq	%rax, %rdi
 4000 2039 E8000000 		call	_ZN8Solution5get_uEi
 4000      00
 4001 203e F20F1185 		movsd	%xmm0, -3688(%rbp)
 4001      98F1FFFF 
 4002 2046 8B9520F2 		movl	-3552(%rbp), %edx
 4002      FFFF
 4003 204c 488B85E8 		movq	-3608(%rbp), %rax
 4003      F1FFFF
 4004 2053 89D6     		movl	%edx, %esi
 4005 2055 4889C7   		movq	%rax, %rdi
 4006 2058 E8000000 		call	_ZN8Solution5get_uEi
 4006      00
 4007 205d F20F1185 		movsd	%xmm0, -3696(%rbp)
 4007      90F1FFFF 
 4008 2065 8B9520F2 		movl	-3552(%rbp), %edx
 4008      FFFF
 4009 206b 488D85F0 		leaq	-2576(%rbp), %rax
 4009      F5FFFF
 4010 2072 89D6     		movl	%edx, %esi
 4011 2074 4889C7   		movq	%rax, %rdi
 4012 2077 E8000000 		call	_ZN8Solution7get_rhoEi
 4012      00
 4013 207c F20F1185 		movsd	%xmm0, -3704(%rbp)
 4013      88F1FFFF 
 4014 2084 8B9520F2 		movl	-3552(%rbp), %edx
 4014      FFFF
 4015 208a 488B85E8 		movq	-3608(%rbp), %rax
 4015      F1FFFF
 4016 2091 89D6     		movl	%edx, %esi
 4017 2093 4889C7   		movq	%rax, %rdi
 4018 2096 E8000000 		call	_ZN8Solution7get_rhoEi
 4018      00
 4019 209b 660F28F8 		movapd	%xmm0, %xmm7
 354:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     ,soln.get_u(i),soln_t0.get_u(i),
 355:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     soln.get_v(i),soln_t0.get_v(i),delta_t);
 4020              		.loc 9 355 0
 4021 209f F20F1085 		movsd	-3528(%rbp), %xmm0
 4021      38F2FFFF 
 4022 20a7 488D8530 		leaq	-2256(%rbp), %rax
 4022      F7FFFF
 4023 20ae 660F28F0 		movapd	%xmm0, %xmm6
 4024 20b2 F20F10AD 		movsd	-3672(%rbp), %xmm5
 4024      A8F1FFFF 
 4025 20ba F20F10A5 		movsd	-3680(%rbp), %xmm4
 4025      A0F1FFFF 
 4026 20c2 F20F109D 		movsd	-3688(%rbp), %xmm3
 4026      98F1FFFF 
 4027 20ca F20F1095 		movsd	-3696(%rbp), %xmm2
 4027      90F1FFFF 
 4028 20d2 F20F108D 		movsd	-3704(%rbp), %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 141


 4028      88F1FFFF 
 4029 20da 660F28C7 		movapd	%xmm7, %xmm0
 4030 20de 4889C7   		movq	%rax, %rdi
 4031 20e1 E8000000 		call	_ZN9residuals27add_ansys_l2_norm_residualsEddddddd
 4031      00
 356:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                        //error checking
 357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if (std::isnan(temp_soln.get_rho(i)) || std::isnan(temp_soln.get_u(i))) {
 4032              		.loc 9 357 0
 4033 20e6 8B9520F2 		movl	-3552(%rbp), %edx
 4033      FFFF
 4034 20ec 488D85A0 		leaq	-2656(%rbp), %rax
 4034      F5FFFF
 4035 20f3 89D6     		movl	%edx, %esi
 4036 20f5 4889C7   		movq	%rax, %rdi
 4037 20f8 E8000000 		call	_ZN8Solution7get_rhoEi
 4037      00
 4038 20fd E8000000 		call	_ZSt5isnand
 4038      00
 4039 2102 84C0     		testb	%al, %al
 4040 2104 7520     		jne	.L171
 4041              		.loc 9 357 0 is_stmt 0 discriminator 2
 4042 2106 8B9520F2 		movl	-3552(%rbp), %edx
 4042      FFFF
 4043 210c 488D85A0 		leaq	-2656(%rbp), %rax
 4043      F5FFFF
 4044 2113 89D6     		movl	%edx, %esi
 4045 2115 4889C7   		movq	%rax, %rdi
 4046 2118 E8000000 		call	_ZN8Solution5get_uEi
 4046      00
 4047 211d E8000000 		call	_ZSt5isnand
 4047      00
 4048 2122 84C0     		testb	%al, %al
 4049 2124 7407     		je	.L172
 4050              	.L171:
 4051              		.loc 9 357 0 discriminator 3
 4052 2126 B8010000 		movl	$1, %eax
 4052      00
 4053 212b EB05     		jmp	.L173
 4054              	.L172:
 4055              		.loc 9 357 0 discriminator 4
 4056 212d B8000000 		movl	$0, %eax
 4056      00
 4057              	.L173:
 4058              		.loc 9 357 0 discriminator 6
 4059 2132 84C0     		testb	%al, %al
 4060 2134 7420     		je	.L170
 358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     if( mg == 0){
 4061              		.loc 9 358 0 is_stmt 1
 4062 2136 837D2800 		cmpl	$0, 40(%rbp)
 4063 213a 750F     		jne	.L174
 359:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                         error_output.close();
 4064              		.loc 9 359 0
 4065 213c 488D85D0 		leaq	-560(%rbp), %rax
 4065      FDFFFF
 4066 2143 4889C7   		movq	%rax, %rdi
 4067 2146 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 4067      00
GAS LISTING /tmp/cc2K2nX4.s 			page 142


 4068              	.L174:
 4069 214b 41BC0000 		movl	$0, %r12d
 4069      0000
 360:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     }
 361:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     return;
 4070              		.loc 9 361 0
 4071 2151 E9980200 		jmp	.L175
 4071      00
 4072              	.L170:
 351:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 4073              		.loc 9 351 0 discriminator 2
 4074 2156 838520F2 		addl	$1, -3552(%rbp)
 4074      FFFF01
 4075 215d E945FEFF 		jmp	.L176
 4075      FF
 4076              	.L169:
 4077              	.LBE28:
 362:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             }
 363:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 364:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 }
 365:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 366:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 367:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         convergence_residual.ansys_5_iter_rms(t);
 4078              		.loc 9 367 0
 4079 2162 8B9504F2 		movl	-3580(%rbp), %edx
 4079      FFFF
 4080 2168 488D8530 		leaq	-2256(%rbp), %rax
 4080      F7FFFF
 4081 216f 89D6     		movl	%edx, %esi
 4082 2171 4889C7   		movq	%rax, %rdi
 4083 2174 E8000000 		call	_ZN9residuals16ansys_5_iter_rmsEi
 4083      00
 4084              	.LBB29:
 368:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 369:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if( mg == 0 && t%1000 == 1){
 4085              		.loc 9 369 0
 4086 2179 837D2800 		cmpl	$0, 40(%rbp)
 4087 217d 0F850702 		jne	.L177
 4087      0000
 4088              		.loc 9 369 0 is_stmt 0 discriminator 1
 4089 2183 8B8D04F2 		movl	-3580(%rbp), %ecx
 4089      FFFF
 4090 2189 BAD34D62 		movl	$274877907, %edx
 4090      10
 4091 218e 89C8     		movl	%ecx, %eax
 4092 2190 F7EA     		imull	%edx
 4093 2192 C1FA06   		sarl	$6, %edx
 4094 2195 89C8     		movl	%ecx, %eax
 4095 2197 C1F81F   		sarl	$31, %eax
 4096 219a 29C2     		subl	%eax, %edx
 4097 219c 89D0     		movl	%edx, %eax
 4098 219e 69C0E803 		imull	$1000, %eax, %eax
 4098      0000
 4099 21a4 29C1     		subl	%eax, %ecx
 4100 21a6 89C8     		movl	%ecx, %eax
 4101 21a8 83F801   		cmpl	$1, %eax
 4102 21ab 0F85D901 		jne	.L177
GAS LISTING /tmp/cc2K2nX4.s 			page 143


 4102      0000
 4103              	.LBB30:
 370:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             time = t*delta_t;
 4104              		.loc 9 370 0 is_stmt 1
 4105 21b1 660FEFC0 		pxor	%xmm0, %xmm0
 4106 21b5 F20F2A85 		cvtsi2sd	-3580(%rbp), %xmm0
 4106      04F2FFFF 
 4107 21bd F20F5985 		mulsd	-3528(%rbp), %xmm0
 4107      38F2FFFF 
 4108 21c5 F20F1185 		movsd	%xmm0, -3448(%rbp)
 4108      88F2FFFF 
 371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.rho_rms << ", " << convergence_residual.u_rms << ", " <<
 373:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4109              		.loc 9 373 0
 4110 21cd 488B9D48 		movq	-2232(%rbp), %rbx
 4110      F7FFFF
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4111              		.loc 9 372 0
 4112 21d4 4C8BA540 		movq	-2240(%rbp), %r12
 4112      F7FFFF
 4113 21db 4C8BAD38 		movq	-2248(%rbp), %r13
 4113      F7FFFF
 371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 4114              		.loc 9 371 0
 4115 21e2 488D8530 		leaq	-2256(%rbp), %rax
 4115      F7FFFF
 4116 21e9 4889C7   		movq	%rax, %rdi
 4117 21ec E8000000 		call	_ZN9residuals9max_errorEv
 4117      00
 4118 21f1 F20F1185 		movsd	%xmm0, -3672(%rbp)
 4118      A8F1FFFF 
 4119 21f9 8B9504F2 		movl	-3580(%rbp), %edx
 4119      FFFF
 4120 21ff 488D85D0 		leaq	-560(%rbp), %rax
 4120      FDFFFF
 4121 2206 89D6     		movl	%edx, %esi
 4122 2208 4889C7   		movq	%rax, %rdi
 4123 220b E8000000 		call	_ZNSolsEi
 4123      00
 371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 4124              		.loc 9 371 0 is_stmt 0 discriminator 1
 4125 2210 BE000000 		movl	$.LC7, %esi
 4125      00
 4126 2215 4889C7   		movq	%rax, %rdi
 4127 2218 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4127      00
 371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 4128              		.loc 9 371 0 discriminator 2
 4129 221d F20F1085 		movsd	-3672(%rbp), %xmm0
 4129      A8F1FFFF 
 4130 2225 4889C7   		movq	%rax, %rdi
 4131 2228 E8000000 		call	_ZNSolsEd
 4131      00
 371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 4132              		.loc 9 371 0 discriminator 3
 4133 222d BE000000 		movl	$.LC7, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 144


 4133      00
 4134 2232 4889C7   		movq	%rax, %rdi
 4135 2235 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4135      00
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4136              		.loc 9 372 0 is_stmt 1 discriminator 4
 4137 223a 4C89ADA8 		movq	%r13, -3672(%rbp)
 4137      F1FFFF
 4138 2241 F20F1085 		movsd	-3672(%rbp), %xmm0
 4138      A8F1FFFF 
 4139 2249 4889C7   		movq	%rax, %rdi
 4140 224c E8000000 		call	_ZNSolsEd
 4140      00
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4141              		.loc 9 372 0 is_stmt 0 discriminator 5
 4142 2251 BE000000 		movl	$.LC7, %esi
 4142      00
 4143 2256 4889C7   		movq	%rax, %rdi
 4144 2259 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4144      00
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4145              		.loc 9 372 0 discriminator 1
 4146 225e 4C89A5A8 		movq	%r12, -3672(%rbp)
 4146      F1FFFF
 4147 2265 F20F1085 		movsd	-3672(%rbp), %xmm0
 4147      A8F1FFFF 
 4148 226d 4889C7   		movq	%rax, %rdi
 4149 2270 E8000000 		call	_ZNSolsEd
 4149      00
 372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 4150              		.loc 9 372 0 discriminator 2
 4151 2275 BE000000 		movl	$.LC7, %esi
 4151      00
 4152 227a 4889C7   		movq	%rax, %rdi
 4153 227d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4153      00
 4154              		.loc 9 373 0 is_stmt 1 discriminator 3
 4155 2282 48899DA8 		movq	%rbx, -3672(%rbp)
 4155      F1FFFF
 4156 2289 F20F1085 		movsd	-3672(%rbp), %xmm0
 4156      A8F1FFFF 
 4157 2291 4889C7   		movq	%rax, %rdi
 4158 2294 E8000000 		call	_ZNSolsEd
 4158      00
 4159              		.loc 9 373 0 is_stmt 0 discriminator 4
 4160 2299 BE000000 		movl	$.LC8, %esi
 4160      00
 4161 229e 4889C7   		movq	%rax, %rdi
 4162 22a1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4162      00
 4163              		.loc 9 373 0 discriminator 1
 4164 22a6 4889C2   		movq	%rax, %rdx
 4165 22a9 8B4538   		movl	56(%rbp), %eax
 4166 22ac 89C6     		movl	%eax, %esi
 4167 22ae 4889D7   		movq	%rdx, %rdi
 4168 22b1 E8000000 		call	_ZNSolsEi
 4168      00
GAS LISTING /tmp/cc2K2nX4.s 			page 145


 4169              		.loc 9 373 0 discriminator 2
 4170 22b6 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 4170      00
 4171 22bb 4889C7   		movq	%rax, %rdi
 4172 22be E8000000 		call	_ZNSolsEPFRSoS_E
 4172      00
 374:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             cout << "time t=" << time  << " error e =" << convergence_residual.max_error() << std::
 4173              		.loc 9 374 0 is_stmt 1
 4174 22c3 488D8530 		leaq	-2256(%rbp), %rax
 4174      F7FFFF
 4175 22ca 4889C7   		movq	%rax, %rdi
 4176 22cd E8000000 		call	_ZN9residuals9max_errorEv
 4176      00
 4177 22d2 F20F1185 		movsd	%xmm0, -3672(%rbp)
 4177      A8F1FFFF 
 4178 22da BE000000 		movl	$.LC9, %esi
 4178      00
 4179 22df BF000000 		movl	$_ZSt4cout, %edi
 4179      00
 4180 22e4 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4180      00
 4181              		.loc 9 374 0 is_stmt 0 discriminator 1
 4182 22e9 4889C2   		movq	%rax, %rdx
 4183 22ec 488B8588 		movq	-3448(%rbp), %rax
 4183      F2FFFF
 4184 22f3 488985A0 		movq	%rax, -3680(%rbp)
 4184      F1FFFF
 4185 22fa F20F1085 		movsd	-3680(%rbp), %xmm0
 4185      A0F1FFFF 
 4186 2302 4889D7   		movq	%rdx, %rdi
 4187 2305 E8000000 		call	_ZNSolsEd
 4187      00
 4188              		.loc 9 374 0 discriminator 2
 4189 230a BE000000 		movl	$.LC10, %esi
 4189      00
 4190 230f 4889C7   		movq	%rax, %rdi
 4191 2312 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4191      00
 4192              		.loc 9 374 0 discriminator 3
 4193 2317 F20F1085 		movsd	-3672(%rbp), %xmm0
 4193      A8F1FFFF 
 4194 231f 4889C7   		movq	%rax, %rdi
 4195 2322 E8000000 		call	_ZNSolsEd
 4195      00
 4196              		.loc 9 374 0 discriminator 4
 4197 2327 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 4197      00
 4198 232c 4889C7   		movq	%rax, %rdi
 4199 232f E8000000 		call	_ZNSolsEPFRSoS_E
 4199      00
 375:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 376:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             tecplot_output solution(globals,Mesh,soln,bcs,2,time);
 4200              		.loc 9 376 0 is_stmt 1
 4201 2334 488BBD88 		movq	-3448(%rbp), %rdi
 4201      F2FFFF
 4202 233b 4C8B85E0 		movq	-3616(%rbp), %r8
 4202      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 146


 4203 2342 488B8DE8 		movq	-3608(%rbp), %rcx
 4203      F1FFFF
 4204 2349 488B95F0 		movq	-3600(%rbp), %rdx
 4204      F1FFFF
 4205 2350 488BB5D0 		movq	-3632(%rbp), %rsi
 4205      F1FFFF
 4206 2357 488D8590 		leaq	-2928(%rbp), %rax
 4206      F4FFFF
 4207 235e 4889BDA8 		movq	%rdi, -3672(%rbp)
 4207      F1FFFF
 4208 2365 F20F1085 		movsd	-3672(%rbp), %xmm0
 4208      A8F1FFFF 
 4209 236d 41B90200 		movl	$2, %r9d
 4209      0000
 4210 2373 4889C7   		movq	%rax, %rdi
 4211 2376 E8000000 		call	_ZN14tecplot_outputC1ER16global_variablesR4MeshR8SolutionR19Boundary_Conditionsid
 4211      00
 4212              		.loc 9 376 0 is_stmt 0 discriminator 1
 4213 237b 488D8590 		leaq	-2928(%rbp), %rax
 4213      F4FFFF
 4214 2382 4889C7   		movq	%rax, %rdi
 4215 2385 E8000000 		call	_ZN14tecplot_outputD1Ev
 4215      00
 4216              	.L177:
 4217              	.LBE30:
 4218              	.LBE29:
 377:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 378:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 379:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 380:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 381:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 382:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 383:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 384:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 385:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 386:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 387:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if ( convergence_residual.max_error() < local_tolerance){
 4219              		.loc 9 387 0 is_stmt 1
 4220 238a 488D8530 		leaq	-2256(%rbp), %rax
 4220      F7FFFF
 4221 2391 4889C7   		movq	%rax, %rdi
 4222 2394 E8000000 		call	_ZN9residuals9max_errorEv
 4222      00
 4223 2399 660F28C8 		movapd	%xmm0, %xmm1
 4224 239d F20F1085 		movsd	-3520(%rbp), %xmm0
 4224      40F2FFFF 
 4225 23a5 660F2EC1 		ucomisd	%xmm1, %xmm0
 4226 23a9 0F97C0   		seta	%al
 4227 23ac 84C0     		testb	%al, %al
 4228 23ae 741D     		je	.L178
 388:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             if( mg == 0){
 4229              		.loc 9 388 0
 4230 23b0 837D2800 		cmpl	$0, 40(%rbp)
 4231 23b4 750F     		jne	.L179
 389:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 error_output.close();
 4232              		.loc 9 389 0
 4233 23b6 488D85D0 		leaq	-560(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 147


 4233      FDFFFF
 4234 23bd 4889C7   		movq	%rax, %rdi
 4235 23c0 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 4235      00
 4236              	.L179:
 4237 23c5 41BC0000 		movl	$0, %r12d
 4237      0000
 390:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
 391:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             return ;
 4238              		.loc 9 391 0
 4239 23cb EB21     		jmp	.L175
 4240              	.L178:
 4241              	.LBE7:
 162:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                        // soln is the solution at the start of every
 4242              		.loc 9 162 0 discriminator 2
 4243 23cd 838504F2 		addl	$1, -3580(%rbp)
 4243      FFFF01
 4244 23d4 E98FE5FF 		jmp	.L180
 4244      FF
 4245              	.L152:
 4246              	.LBE6:
 392:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 393:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 394:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 395:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 396:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 397:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 398:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 399:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     error_output.close();
 4247              		.loc 9 399 0
 4248 23d9 488D85D0 		leaq	-560(%rbp), %rax
 4248      FDFFFF
 4249 23e0 4889C7   		movq	%rax, %rdi
 4250 23e3 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 4250      00
 4251              	.LEHE52:
 4252 23e8 41BC0100 		movl	$1, %r12d
 4252      0000
 4253              	.L175:
 4254 23ee 488D9D10 		leaq	-1008(%rbp), %rbx
 4254      FCFFFF
 4255 23f5 4881C3A0 		addq	$160, %rbx
 4255      000000
 4256              	.L182:
 4257 23fc 488D8510 		leaq	-1008(%rbp), %rax
 4257      FCFFFF
 4258 2403 4839C3   		cmpq	%rax, %rbx
 4259 2406 7411     		je	.L181
 4260 2408 4883EB28 		subq	$40, %rbx
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4261              		.loc 9 134 0 discriminator 4
 4262 240c 488B03   		movq	(%rbx), %rax
 4263 240f 488B00   		movq	(%rax), %rax
 4264 2412 4889DF   		movq	%rbx, %rdi
 4265 2415 FFD0     		call	*%rax
 4266 2417 EBE3     		jmp	.L182
 4267              	.L181:
GAS LISTING /tmp/cc2K2nX4.s 			page 148


 4268 2419 4183FC01 		cmpl	$1, %r12d
 4269 241d 7408     		je	.L440
 4270 241f 41BC0000 		movl	$0, %r12d
 4270      0000
 4271 2425 EB07     		jmp	.L186
 4272              	.L440:
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4273              		.loc 9 134 0 is_stmt 0
 4274 2427 90       		nop
 4275 2428 41BC0100 		movl	$1, %r12d
 4275      0000
 4276              	.L186:
 4277 242e 488D9D70 		leaq	-1168(%rbp), %rbx
 4277      FBFFFF
 4278 2435 4881C3A0 		addq	$160, %rbx
 4278      000000
 4279              	.L188:
 4280 243c 488D8570 		leaq	-1168(%rbp), %rax
 4280      FBFFFF
 4281 2443 4839C3   		cmpq	%rax, %rbx
 4282 2446 7411     		je	.L187
 4283 2448 4883EB28 		subq	$40, %rbx
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 4284              		.loc 9 133 0 is_stmt 1 discriminator 9
 4285 244c 488B03   		movq	(%rbx), %rax
 4286 244f 488B00   		movq	(%rax), %rax
 4287 2452 4889DF   		movq	%rbx, %rdi
 4288 2455 FFD0     		call	*%rax
 4289 2457 EBE3     		jmp	.L188
 4290              	.L187:
 4291 2459 4183FC01 		cmpl	$1, %r12d
 4292 245d 7408     		je	.L441
 4293 245f 41BC0000 		movl	$0, %r12d
 4293      0000
 4294 2465 EB07     		jmp	.L192
 4295              	.L441:
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 4296              		.loc 9 133 0 is_stmt 0
 4297 2467 90       		nop
 4298 2468 41BC0100 		movl	$1, %r12d
 4298      0000
 4299              	.L192:
 4300 246e 488D9DD0 		leaq	-1328(%rbp), %rbx
 4300      FAFFFF
 4301 2475 4881C3A0 		addq	$160, %rbx
 4301      000000
 4302              	.L194:
 4303 247c 488D85D0 		leaq	-1328(%rbp), %rax
 4303      FAFFFF
 4304 2483 4839C3   		cmpq	%rax, %rbx
 4305 2486 7411     		je	.L193
 4306 2488 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4307              		.loc 9 132 0 is_stmt 1 discriminator 14
 4308 248c 488B03   		movq	(%rbx), %rax
 4309 248f 488B00   		movq	(%rax), %rax
 4310 2492 4889DF   		movq	%rbx, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 149


 4311 2495 FFD0     		call	*%rax
 4312 2497 EBE3     		jmp	.L194
 4313              	.L193:
 4314 2499 4183FC01 		cmpl	$1, %r12d
 4315 249d 7408     		je	.L442
 4316 249f 41BC0000 		movl	$0, %r12d
 4316      0000
 4317 24a5 EB07     		jmp	.L198
 4318              	.L442:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4319              		.loc 9 132 0 is_stmt 0
 4320 24a7 90       		nop
 4321 24a8 41BC0100 		movl	$1, %r12d
 4321      0000
 4322              	.L198:
 4323 24ae 488D9D30 		leaq	-1488(%rbp), %rbx
 4323      FAFFFF
 4324 24b5 4881C3A0 		addq	$160, %rbx
 4324      000000
 4325              	.L200:
 4326 24bc 488D8530 		leaq	-1488(%rbp), %rax
 4326      FAFFFF
 4327 24c3 4839C3   		cmpq	%rax, %rbx
 4328 24c6 7411     		je	.L199
 4329 24c8 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4330              		.loc 9 132 0 discriminator 19
 4331 24cc 488B03   		movq	(%rbx), %rax
 4332 24cf 488B00   		movq	(%rax), %rax
 4333 24d2 4889DF   		movq	%rbx, %rdi
 4334 24d5 FFD0     		call	*%rax
 4335 24d7 EBE3     		jmp	.L200
 4336              	.L199:
 4337 24d9 4183FC01 		cmpl	$1, %r12d
 4338 24dd 7408     		je	.L443
 4339 24df 41BC0000 		movl	$0, %r12d
 4339      0000
 4340 24e5 EB07     		jmp	.L204
 4341              	.L443:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4342              		.loc 9 132 0
 4343 24e7 90       		nop
 4344 24e8 41BC0100 		movl	$1, %r12d
 4344      0000
 4345              	.L204:
 4346 24ee 488D9D90 		leaq	-1648(%rbp), %rbx
 4346      F9FFFF
 4347 24f5 4881C3A0 		addq	$160, %rbx
 4347      000000
 4348              	.L206:
 4349 24fc 488D8590 		leaq	-1648(%rbp), %rax
 4349      F9FFFF
 4350 2503 4839C3   		cmpq	%rax, %rbx
 4351 2506 7411     		je	.L205
 4352 2508 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4353              		.loc 9 132 0 discriminator 24
GAS LISTING /tmp/cc2K2nX4.s 			page 150


 4354 250c 488B03   		movq	(%rbx), %rax
 4355 250f 488B00   		movq	(%rax), %rax
 4356 2512 4889DF   		movq	%rbx, %rdi
 4357 2515 FFD0     		call	*%rax
 4358 2517 EBE3     		jmp	.L206
 4359              	.L205:
 4360 2519 4183FC01 		cmpl	$1, %r12d
 4361 251d 7407     		je	.L444
 4362 251f BB000000 		movl	$0, %ebx
 4362      00
 4363 2524 EB06     		jmp	.L210
 4364              	.L444:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4365              		.loc 9 132 0
 4366 2526 90       		nop
 4367 2527 BB010000 		movl	$1, %ebx
 4367      00
 4368              	.L210:
 4369 252c 488D8540 		leaq	-2752(%rbp), %rax
 4369      F5FFFF
 4370 2533 4889C7   		movq	%rax, %rdi
 4371 2536 E8000000 		call	_ZN8flux_varD1Ev
 4371      00
 4372 253b 83FB01   		cmpl	$1, %ebx
 4373 253e 7407     		je	.L445
 4374 2540 BB000000 		movl	$0, %ebx
 4374      00
 4375 2545 EB06     		jmp	.L214
 4376              	.L445:
 130:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 4377              		.loc 9 130 0 is_stmt 1
 4378 2547 90       		nop
 4379 2548 BB010000 		movl	$1, %ebx
 4379      00
 4380              	.L214:
 4381 254d 488D8510 		leaq	-2800(%rbp), %rax
 4381      F5FFFF
 4382 2554 4889C7   		movq	%rax, %rdi
 4383 2557 E8000000 		call	_ZN8flux_varD1Ev
 4383      00
 4384 255c 83FB01   		cmpl	$1, %ebx
 4385 255f 7407     		je	.L446
 4386 2561 BB000000 		movl	$0, %ebx
 4386      00
 4387 2566 EB06     		jmp	.L218
 4388              	.L446:
 129:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 4389              		.loc 9 129 0
 4390 2568 90       		nop
 4391 2569 BB010000 		movl	$1, %ebx
 4391      00
 4392              	.L218:
 4393 256e 488D85E0 		leaq	-2848(%rbp), %rax
 4393      F4FFFF
 4394 2575 4889C7   		movq	%rax, %rdi
 4395 2578 E8000000 		call	_ZN8flux_varD1Ev
 4395      00
GAS LISTING /tmp/cc2K2nX4.s 			page 151


 4396 257d 83FB01   		cmpl	$1, %ebx
 4397 2580 7407     		je	.L447
 4398 2582 BB000000 		movl	$0, %ebx
 4398      00
 4399 2587 EB06     		jmp	.L222
 4400              	.L447:
 4401 2589 90       		nop
 4402 258a BB010000 		movl	$1, %ebx
 4402      00
 4403              	.L222:
 4404 258f 488D8530 		leaq	-2256(%rbp), %rax
 4404      F7FFFF
 4405 2596 4889C7   		movq	%rax, %rdi
 4406 2599 E8000000 		call	_ZN9residualsD1Ev
 4406      00
 4407 259e 83FB01   		cmpl	$1, %ebx
 4408 25a1 7407     		je	.L448
 4409 25a3 BB000000 		movl	$0, %ebx
 4409      00
 4410 25a8 EB06     		jmp	.L226
 4411              	.L448:
 128:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 4412              		.loc 9 128 0
 4413 25aa 90       		nop
 4414 25ab BB010000 		movl	$1, %ebx
 4414      00
 4415              	.L226:
 4416 25b0 488D8590 		leaq	-3440(%rbp), %rax
 4416      F2FFFF
 4417 25b7 4889C7   		movq	%rax, %rdi
 4418 25ba E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EED1Ev
 4418      00
 4419 25bf 83FB01   		cmpl	$1, %ebx
 4420 25c2 7408     		je	.L449
 4421 25c4 41BC0000 		movl	$0, %r12d
 4421      0000
 4422 25ca EB07     		jmp	.L230
 4423              	.L449:
 125:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4424              		.loc 9 125 0
 4425 25cc 90       		nop
 4426 25cd 41BC0100 		movl	$1, %r12d
 4426      0000
 4427              	.L230:
 4428 25d3 488D9DB0 		leaq	-848(%rbp), %rbx
 4428      FCFFFF
 4429 25da 4881C320 		addq	$288, %rbx
 4429      010000
 4430              	.L232:
 4431 25e1 488D85B0 		leaq	-848(%rbp), %rax
 4431      FCFFFF
 4432 25e8 4839C3   		cmpq	%rax, %rbx
 4433 25eb 7411     		je	.L231
 4434 25ed 4883EB20 		subq	$32, %rbx
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 4435              		.loc 9 124 0 discriminator 39
 4436 25f1 488B03   		movq	(%rbx), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 152


 4437 25f4 488B00   		movq	(%rax), %rax
 4438 25f7 4889DF   		movq	%rbx, %rdi
 4439 25fa FFD0     		call	*%rax
 4440 25fc EBE3     		jmp	.L232
 4441              	.L231:
 4442 25fe 4183FC01 		cmpl	$1, %r12d
 4443 2602 7407     		je	.L450
 4444 2604 BB000000 		movl	$0, %ebx
 4444      00
 4445 2609 EB06     		jmp	.L236
 4446              	.L450:
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 4447              		.loc 9 124 0 is_stmt 0
 4448 260b 90       		nop
 4449 260c BB010000 		movl	$1, %ebx
 4449      00
 4450              	.L236:
 4451 2611 488D8530 		leaq	-3024(%rbp), %rax
 4451      F4FFFF
 4452 2618 4889C7   		movq	%rax, %rdi
 4453 261b E8000000 		call	_ZN10vector_varD1Ev
 4453      00
 4454 2620 83FB01   		cmpl	$1, %ebx
 4455 2623 7407     		je	.L451
 4456 2625 BB000000 		movl	$0, %ebx
 4456      00
 4457 262a EB06     		jmp	.L240
 4458              	.L451:
 123:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
 4459              		.loc 9 123 0 is_stmt 1
 4460 262c 90       		nop
 4461 262d BB010000 		movl	$1, %ebx
 4461      00
 4462              	.L240:
 4463 2632 488D8510 		leaq	-3056(%rbp), %rax
 4463      F4FFFF
 4464 2639 4889C7   		movq	%rax, %rdi
 4465 263c E8000000 		call	_ZN10vector_varD1Ev
 4465      00
 4466 2641 83FB01   		cmpl	$1, %ebx
 4467 2644 7407     		je	.L452
 4468 2646 BB000000 		movl	$0, %ebx
 4468      00
 4469 264b EB06     		jmp	.L244
 4470              	.L452:
 121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4471              		.loc 9 121 0
 4472 264d 90       		nop
 4473 264e BB010000 		movl	$1, %ebx
 4473      00
 4474              	.L244:
 4475 2653 488D85F0 		leaq	-3088(%rbp), %rax
 4475      F3FFFF
 4476 265a 4889C7   		movq	%rax, %rdi
 4477 265d E8000000 		call	_ZN10vector_varD1Ev
 4477      00
 4478 2662 83FB01   		cmpl	$1, %ebx
GAS LISTING /tmp/cc2K2nX4.s 			page 153


 4479 2665 7407     		je	.L453
 4480 2667 BB000000 		movl	$0, %ebx
 4480      00
 4481 266c EB06     		jmp	.L248
 4482              	.L453:
 4483 266e 90       		nop
 4484 266f BB010000 		movl	$1, %ebx
 4484      00
 4485              	.L248:
 4486 2674 488D85D0 		leaq	-3120(%rbp), %rax
 4486      F3FFFF
 4487 267b 4889C7   		movq	%rax, %rdi
 4488 267e E8000000 		call	_ZN10vector_varD1Ev
 4488      00
 4489 2683 83FB01   		cmpl	$1, %ebx
 4490 2686 7407     		je	.L454
 4491 2688 BB000000 		movl	$0, %ebx
 4491      00
 4492 268d EB06     		jmp	.L252
 4493              	.L454:
 4494 268f 90       		nop
 4495 2690 BB010000 		movl	$1, %ebx
 4495      00
 4496              	.L252:
 4497 2695 488D85B0 		leaq	-3152(%rbp), %rax
 4497      F3FFFF
 4498 269c 4889C7   		movq	%rax, %rdi
 4499 269f E8000000 		call	_ZN10vector_varD1Ev
 4499      00
 4500 26a4 83FB01   		cmpl	$1, %ebx
 4501 26a7 7407     		je	.L455
 4502 26a9 BB000000 		movl	$0, %ebx
 4502      00
 4503 26ae EB06     		jmp	.L256
 4504              	.L455:
 120:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 4505              		.loc 9 120 0
 4506 26b0 90       		nop
 4507 26b1 BB010000 		movl	$1, %ebx
 4507      00
 4508              	.L256:
 4509 26b6 488D8590 		leaq	-3184(%rbp), %rax
 4509      F3FFFF
 4510 26bd 4889C7   		movq	%rax, %rdi
 4511 26c0 E8000000 		call	_ZN10vector_varD1Ev
 4511      00
 4512 26c5 83FB01   		cmpl	$1, %ebx
 4513 26c8 7407     		je	.L456
 4514 26ca BB000000 		movl	$0, %ebx
 4514      00
 4515 26cf EB06     		jmp	.L260
 4516              	.L456:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 4517              		.loc 9 119 0
 4518 26d1 90       		nop
 4519 26d2 BB010000 		movl	$1, %ebx
 4519      00
GAS LISTING /tmp/cc2K2nX4.s 			page 154


 4520              	.L260:
 4521 26d7 488D8570 		leaq	-3216(%rbp), %rax
 4521      F3FFFF
 4522 26de 4889C7   		movq	%rax, %rdi
 4523 26e1 E8000000 		call	_ZN10vector_varD1Ev
 4523      00
 4524 26e6 83FB01   		cmpl	$1, %ebx
 4525 26e9 7407     		je	.L457
 4526 26eb BB000000 		movl	$0, %ebx
 4526      00
 4527 26f0 EB06     		jmp	.L264
 4528              	.L457:
 4529 26f2 90       		nop
 4530 26f3 BB010000 		movl	$1, %ebx
 4530      00
 4531              	.L264:
 4532 26f8 488D8550 		leaq	-3248(%rbp), %rax
 4532      F3FFFF
 4533 26ff 4889C7   		movq	%rax, %rdi
 4534 2702 E8000000 		call	_ZN10vector_varD1Ev
 4534      00
 4535 2707 83FB01   		cmpl	$1, %ebx
 4536 270a 7407     		je	.L458
 4537 270c BB000000 		movl	$0, %ebx
 4537      00
 4538 2711 EB06     		jmp	.L268
 4539              	.L458:
 4540 2713 90       		nop
 4541 2714 BB010000 		movl	$1, %ebx
 4541      00
 4542              	.L268:
 4543 2719 488D8530 		leaq	-3280(%rbp), %rax
 4543      F3FFFF
 4544 2720 4889C7   		movq	%rax, %rdi
 4545 2723 E8000000 		call	_ZN10vector_varD1Ev
 4545      00
 4546 2728 83FB01   		cmpl	$1, %ebx
 4547 272b 7407     		je	.L459
 4548 272d BB000000 		movl	$0, %ebx
 4548      00
 4549 2732 EB06     		jmp	.L272
 4550              	.L459:
 4551 2734 90       		nop
 4552 2735 BB010000 		movl	$1, %ebx
 4552      00
 4553              	.L272:
 4554 273a 488D8510 		leaq	-3312(%rbp), %rax
 4554      F3FFFF
 4555 2741 4889C7   		movq	%rax, %rdi
 4556 2744 E8000000 		call	_ZN10vector_varD1Ev
 4556      00
 4557 2749 83FB01   		cmpl	$1, %ebx
 4558 274c 7407     		je	.L460
 4559 274e BB000000 		movl	$0, %ebx
 4559      00
 4560 2753 EB06     		jmp	.L276
 4561              	.L460:
GAS LISTING /tmp/cc2K2nX4.s 			page 155


 4562 2755 90       		nop
 4563 2756 BB010000 		movl	$1, %ebx
 4563      00
 4564              	.L276:
 4565 275b 488D85F0 		leaq	-3344(%rbp), %rax
 4565      F2FFFF
 4566 2762 4889C7   		movq	%rax, %rdi
 4567 2765 E8000000 		call	_ZN10vector_varD1Ev
 4567      00
 4568 276a 83FB01   		cmpl	$1, %ebx
 4569 276d 7407     		je	.L461
 4570 276f BB000000 		movl	$0, %ebx
 4570      00
 4571 2774 EB06     		jmp	.L280
 4572              	.L461:
 4573 2776 90       		nop
 4574 2777 BB010000 		movl	$1, %ebx
 4574      00
 4575              	.L280:
 4576 277c 488D85D0 		leaq	-3376(%rbp), %rax
 4576      F2FFFF
 4577 2783 4889C7   		movq	%rax, %rdi
 4578 2786 E8000000 		call	_ZN10vector_varD1Ev
 4578      00
 4579 278b 83FB01   		cmpl	$1, %ebx
 4580 278e 7407     		je	.L462
 4581 2790 BB000000 		movl	$0, %ebx
 4581      00
 4582 2795 EB06     		jmp	.L284
 4583              	.L462:
 4584 2797 90       		nop
 4585 2798 BB010000 		movl	$1, %ebx
 4585      00
 4586              	.L284:
 4587 279d 488D85B0 		leaq	-3408(%rbp), %rax
 4587      F2FFFF
 4588 27a4 4889C7   		movq	%rax, %rdi
 4589 27a7 E8000000 		call	_ZN10vector_varD1Ev
 4589      00
 4590 27ac 83FB01   		cmpl	$1, %ebx
 4591 27af 7407     		je	.L463
 4592 27b1 BB000000 		movl	$0, %ebx
 4592      00
 4593 27b6 EB06     		jmp	.L288
 4594              	.L463:
 4595 27b8 90       		nop
 4596 27b9 BB010000 		movl	$1, %ebx
 4596      00
 4597              	.L288:
 4598 27be 488D85C0 		leaq	-2112(%rbp), %rax
 4598      F7FFFF
 4599 27c5 4889C7   		movq	%rax, %rdi
 4600 27c8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 4600      00
 4601 27cd 83FB01   		cmpl	$1, %ebx
 4602 27d0 7407     		je	.L464
 4603 27d2 BB000000 		movl	$0, %ebx
GAS LISTING /tmp/cc2K2nX4.s 			page 156


 4603      00
 4604 27d7 EB06     		jmp	.L292
 4605              	.L464:
 118:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 4606              		.loc 9 118 0
 4607 27d9 90       		nop
 4608 27da BB010000 		movl	$1, %ebx
 4608      00
 4609              	.L292:
 4610 27df 488D85D0 		leaq	-560(%rbp), %rax
 4610      FDFFFF
 4611 27e6 4889C7   		movq	%rax, %rdi
 4612 27e9 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 4612      00
 4613 27ee 83FB01   		cmpl	$1, %ebx
 4614 27f1 7407     		je	.L465
 4615 27f3 BB000000 		movl	$0, %ebx
 4615      00
 4616 27f8 EB06     		jmp	.L296
 4617              	.L465:
 117:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 4618              		.loc 9 117 0
 4619 27fa 90       		nop
 4620 27fb BB010000 		movl	$1, %ebx
 4620      00
 4621              	.L296:
 4622 2800 488D85B0 		leaq	-2896(%rbp), %rax
 4622      F4FFFF
 4623 2807 4889C7   		movq	%rax, %rdi
 4624 280a E8000000 		call	_ZN8flux_varD1Ev
 4624      00
 4625 280f 83FB01   		cmpl	$1, %ebx
 4626 2812 7407     		je	.L466
 4627 2814 BB000000 		movl	$0, %ebx
 4627      00
 4628 2819 EB06     		jmp	.L300
 4629              	.L466:
 100:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 4630              		.loc 9 100 0
 4631 281b 90       		nop
 4632 281c BB010000 		movl	$1, %ebx
 4632      00
 4633              	.L300:
 4634 2821 488D85E0 		leaq	-2336(%rbp), %rax
 4634      F6FFFF
 4635 2828 4889C7   		movq	%rax, %rdi
 4636 282b E8000000 		call	_ZN8SolutionD1Ev
 4636      00
 4637 2830 83FB01   		cmpl	$1, %ebx
 4638 2833 7407     		je	.L467
 4639 2835 BB000000 		movl	$0, %ebx
 4639      00
 4640 283a EB06     		jmp	.L304
 4641              	.L467:
  99:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 4642              		.loc 9 99 0
 4643 283c 90       		nop
GAS LISTING /tmp/cc2K2nX4.s 			page 157


 4644 283d BB010000 		movl	$1, %ebx
 4644      00
 4645              	.L304:
 4646 2842 488D8590 		leaq	-2416(%rbp), %rax
 4646      F6FFFF
 4647 2849 4889C7   		movq	%rax, %rdi
 4648 284c E8000000 		call	_ZN8SolutionD1Ev
 4648      00
 4649 2851 83FB01   		cmpl	$1, %ebx
 4650 2854 7407     		je	.L468
 4651 2856 BB000000 		movl	$0, %ebx
 4651      00
 4652 285b EB06     		jmp	.L308
 4653              	.L468:
  98:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 4654              		.loc 9 98 0
 4655 285d 90       		nop
 4656 285e BB010000 		movl	$1, %ebx
 4656      00
 4657              	.L308:
 4658 2863 488D8540 		leaq	-2496(%rbp), %rax
 4658      F6FFFF
 4659 286a 4889C7   		movq	%rax, %rdi
 4660 286d E8000000 		call	_ZN8SolutionD1Ev
 4660      00
 4661 2872 83FB01   		cmpl	$1, %ebx
 4662 2875 7407     		je	.L469
 4663 2877 BB000000 		movl	$0, %ebx
 4663      00
 4664 287c EB06     		jmp	.L312
 4665              	.L469:
  97:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 4666              		.loc 9 97 0
 4667 287e 90       		nop
 4668 287f BB010000 		movl	$1, %ebx
 4668      00
 4669              	.L312:
 4670 2884 488D85F0 		leaq	-2576(%rbp), %rax
 4670      F5FFFF
 4671 288b 4889C7   		movq	%rax, %rdi
 4672 288e E8000000 		call	_ZN8SolutionD1Ev
 4672      00
 4673 2893 83FB01   		cmpl	$1, %ebx
 4674 2896 7407     		je	.L470
 4675 2898 BB000000 		movl	$0, %ebx
 4675      00
 4676 289d EB06     		jmp	.L316
 4677              	.L470:
  96:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 4678              		.loc 9 96 0
 4679 289f 90       		nop
 4680 28a0 BB010000 		movl	$1, %ebx
 4680      00
 4681              	.L316:
 4682 28a5 488D85A0 		leaq	-2656(%rbp), %rax
 4682      F5FFFF
 4683 28ac 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 158


 4684 28af E8000000 		call	_ZN8SolutionD1Ev
 4684      00
 4685 28b4 83FB01   		cmpl	$1, %ebx
 4686 28b7 7407     		je	.L471
 4687 28b9 BB000000 		movl	$0, %ebx
 4687      00
 4688 28be EB06     		jmp	.L320
 4689              	.L471:
  95:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
 4690              		.loc 9 95 0
 4691 28c0 90       		nop
 4692 28c1 BB010000 		movl	$1, %ebx
 4692      00
 4693              	.L320:
 4694 28c6 488D8540 		leaq	-1728(%rbp), %rax
 4694      F9FFFF
 4695 28cd 4889C7   		movq	%rax, %rdi
 4696 28d0 E8000000 		call	_ZN10RungeKuttaD1Ev
 4696      00
 4697 28d5 83FB01   		cmpl	$1, %ebx
  94:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 4698              		.loc 9 94 0
 4699 28d8 90       		nop
 400:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 401:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 402:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 4700              		.loc 9 402 0
 4701 28d9 488B45D8 		movq	-40(%rbp), %rax
 4702 28dd 64483304 		xorq	%fs:40, %rax
 4702      25280000 
 4702      00
 4703 28e6 0F844B06 		je	.L396
 4703      0000
 4704 28ec E9410600 		jmp	.L439
 4704      00
 4705              	.L417:
 4706 28f1 4989C5   		movq	%rax, %r13
 4707 28f4 4D85E4   		testq	%r12, %r12
 4708 28f7 7426     		je	.L325
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 4709              		.loc 9 124 0 discriminator 88
 4710 28f9 B8080000 		movl	$8, %eax
 4710      00
 4711 28fe 4829D8   		subq	%rbx, %rax
 4712 2901 48C1E005 		salq	$5, %rax
 4713 2905 498D1C04 		leaq	(%r12,%rax), %rbx
 4714              	.L326:
 4715 2909 4C39E3   		cmpq	%r12, %rbx
 4716 290c 7411     		je	.L325
 4717 290e 4883EB20 		subq	$32, %rbx
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 4718              		.loc 9 124 0 is_stmt 0 discriminator 92
 4719 2912 488B03   		movq	(%rbx), %rax
 4720 2915 488B00   		movq	(%rax), %rax
 4721 2918 4889DF   		movq	%rbx, %rdi
 4722 291b FFD0     		call	*%rax
 4723 291d EBEA     		jmp	.L326
GAS LISTING /tmp/cc2K2nX4.s 			page 159


 4724              	.L325:
 4725 291f 4C89EB   		movq	%r13, %rbx
 4726 2922 E9520400 		jmp	.L327
 4726      00
 4727              	.L422:
 4728 2927 4989C5   		movq	%rax, %r13
 4729 292a 4D85E4   		testq	%r12, %r12
 4730 292d 7433     		je	.L329
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4731              		.loc 9 132 0 is_stmt 1 discriminator 94
 4732 292f B8030000 		movl	$3, %eax
 4732      00
 4733 2934 4829D8   		subq	%rbx, %rax
 4734 2937 4889C2   		movq	%rax, %rdx
 4735 293a 4889D0   		movq	%rdx, %rax
 4736 293d 48C1E002 		salq	$2, %rax
 4737 2941 4801D0   		addq	%rdx, %rax
 4738 2944 48C1E003 		salq	$3, %rax
 4739 2948 498D1C04 		leaq	(%r12,%rax), %rbx
 4740              	.L330:
 4741 294c 4C39E3   		cmpq	%r12, %rbx
 4742 294f 7411     		je	.L329
 4743 2951 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4744              		.loc 9 132 0 is_stmt 0 discriminator 98
 4745 2955 488B03   		movq	(%rbx), %rax
 4746 2958 488B00   		movq	(%rax), %rax
 4747 295b 4889DF   		movq	%rbx, %rdi
 4748 295e FFD0     		call	*%rax
 4749 2960 EBEA     		jmp	.L330
 4750              	.L329:
 4751 2962 4C89EB   		movq	%r13, %rbx
 4752 2965 E97F0300 		jmp	.L331
 4752      00
 4753              	.L423:
 4754 296a 4989C5   		movq	%rax, %r13
 4755 296d 4D85E4   		testq	%r12, %r12
 4756 2970 7433     		je	.L333
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4757              		.loc 9 132 0 discriminator 100
 4758 2972 B8030000 		movl	$3, %eax
 4758      00
 4759 2977 4829D8   		subq	%rbx, %rax
 4760 297a 4889C2   		movq	%rax, %rdx
 4761 297d 4889D0   		movq	%rdx, %rax
 4762 2980 48C1E002 		salq	$2, %rax
 4763 2984 4801D0   		addq	%rdx, %rax
 4764 2987 48C1E003 		salq	$3, %rax
 4765 298b 498D1C04 		leaq	(%r12,%rax), %rbx
 4766              	.L334:
 4767 298f 4C39E3   		cmpq	%r12, %rbx
 4768 2992 7411     		je	.L333
 4769 2994 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4770              		.loc 9 132 0 discriminator 104
 4771 2998 488B03   		movq	(%rbx), %rax
 4772 299b 488B00   		movq	(%rax), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 160


 4773 299e 4889DF   		movq	%rbx, %rdi
 4774 29a1 FFD0     		call	*%rax
 4775 29a3 EBEA     		jmp	.L334
 4776              	.L333:
 4777 29a5 4D89EC   		movq	%r13, %r12
 4778 29a8 E90E0300 		jmp	.L335
 4778      00
 4779              	.L424:
 4780 29ad 4989C5   		movq	%rax, %r13
 4781 29b0 4D85E4   		testq	%r12, %r12
 4782 29b3 7433     		je	.L337
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4783              		.loc 9 132 0 discriminator 106
 4784 29b5 B8030000 		movl	$3, %eax
 4784      00
 4785 29ba 4829D8   		subq	%rbx, %rax
 4786 29bd 4889C2   		movq	%rax, %rdx
 4787 29c0 4889D0   		movq	%rdx, %rax
 4788 29c3 48C1E002 		salq	$2, %rax
 4789 29c7 4801D0   		addq	%rdx, %rax
 4790 29ca 48C1E003 		salq	$3, %rax
 4791 29ce 498D1C04 		leaq	(%r12,%rax), %rbx
 4792              	.L338:
 4793 29d2 4C39E3   		cmpq	%r12, %rbx
 4794 29d5 7411     		je	.L337
 4795 29d7 4883EB28 		subq	$40, %rbx
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 4796              		.loc 9 132 0 discriminator 110
 4797 29db 488B03   		movq	(%rbx), %rax
 4798 29de 488B00   		movq	(%rax), %rax
 4799 29e1 4889DF   		movq	%rbx, %rdi
 4800 29e4 FFD0     		call	*%rax
 4801 29e6 EBEA     		jmp	.L338
 4802              	.L337:
 4803 29e8 4D89EC   		movq	%r13, %r12
 4804 29eb E9A00200 		jmp	.L339
 4804      00
 4805              	.L425:
 4806 29f0 4989C5   		movq	%rax, %r13
 4807 29f3 4D85E4   		testq	%r12, %r12
 4808 29f6 7433     		je	.L341
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 4809              		.loc 9 133 0 is_stmt 1 discriminator 112
 4810 29f8 B8030000 		movl	$3, %eax
 4810      00
 4811 29fd 4829D8   		subq	%rbx, %rax
 4812 2a00 4889C2   		movq	%rax, %rdx
 4813 2a03 4889D0   		movq	%rdx, %rax
 4814 2a06 48C1E002 		salq	$2, %rax
 4815 2a0a 4801D0   		addq	%rdx, %rax
 4816 2a0d 48C1E003 		salq	$3, %rax
 4817 2a11 498D1C04 		leaq	(%r12,%rax), %rbx
 4818              	.L342:
 4819 2a15 4C39E3   		cmpq	%r12, %rbx
 4820 2a18 7411     		je	.L341
 4821 2a1a 4883EB28 		subq	$40, %rbx
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
GAS LISTING /tmp/cc2K2nX4.s 			page 161


 4822              		.loc 9 133 0 is_stmt 0 discriminator 116
 4823 2a1e 488B03   		movq	(%rbx), %rax
 4824 2a21 488B00   		movq	(%rax), %rax
 4825 2a24 4889DF   		movq	%rbx, %rdi
 4826 2a27 FFD0     		call	*%rax
 4827 2a29 EBEA     		jmp	.L342
 4828              	.L341:
 4829 2a2b 4D89EC   		movq	%r13, %r12
 4830 2a2e E9320200 		jmp	.L343
 4830      00
 4831              	.L426:
 4832 2a33 4989C5   		movq	%rax, %r13
 4833 2a36 4D85E4   		testq	%r12, %r12
 4834 2a39 7433     		je	.L345
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4835              		.loc 9 134 0 is_stmt 1 discriminator 118
 4836 2a3b B8030000 		movl	$3, %eax
 4836      00
 4837 2a40 4829D8   		subq	%rbx, %rax
 4838 2a43 4889C2   		movq	%rax, %rdx
 4839 2a46 4889D0   		movq	%rdx, %rax
 4840 2a49 48C1E002 		salq	$2, %rax
 4841 2a4d 4801D0   		addq	%rdx, %rax
 4842 2a50 48C1E003 		salq	$3, %rax
 4843 2a54 498D1C04 		leaq	(%r12,%rax), %rbx
 4844              	.L346:
 4845 2a58 4C39E3   		cmpq	%r12, %rbx
 4846 2a5b 7411     		je	.L345
 4847 2a5d 4883EB28 		subq	$40, %rbx
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4848              		.loc 9 134 0 is_stmt 0 discriminator 122
 4849 2a61 488B03   		movq	(%rbx), %rax
 4850 2a64 488B00   		movq	(%rax), %rax
 4851 2a67 4889DF   		movq	%rbx, %rdi
 4852 2a6a FFD0     		call	*%rax
 4853 2a6c EBEA     		jmp	.L346
 4854              	.L345:
 4855 2a6e 4D89EC   		movq	%r13, %r12
 4856 2a71 E9C40100 		jmp	.L347
 4856      00
 4857              	.L428:
 4858 2a76 4889C3   		movq	%rax, %rbx
 156:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****    // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::out);
 4859              		.loc 9 156 0 is_stmt 1
 4860 2a79 488D85E0 		leaq	-2080(%rbp), %rax
 4860      F7FFFF
 4861 2a80 4889C7   		movq	%rax, %rdi
 4862 2a83 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 4862      00
 4863 2a88 4989DC   		movq	%rbx, %r12
 4864 2a8b E97F0100 		jmp	.L349
 4864      00
 4865              	.L429:
 4866 2a90 4889C3   		movq	%rax, %rbx
 4867              	.LBB33:
 4868              	.LBB32:
 4869              	.LBB31:
GAS LISTING /tmp/cc2K2nX4.s 			page 162


 4870              	.LBB27:
 4871              	.LBB26:
 4872              	.LBB24:
 4873              	.LBB23:
 4874              	.LBB22:
 4875              	.LBB21:
 4876              	.LBB20:
 209:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), temp_soln.get_u(neighbour),cell_1,
 4877              		.loc 9 209 0
 4878 2a93 488D8570 		leaq	-2960(%rbp), %rax
 4878      F4FFFF
 4879 2a9a 4889C7   		movq	%rax, %rdi
 4880 2a9d E8000000 		call	_ZN10vector_varD1Ev
 4880      00
 4881 2aa2 488D8590 		leaq	-2928(%rbp), %rax
 4881      F4FFFF
 4882 2aa9 4889C7   		movq	%rax, %rdi
 4883 2aac E8000000 		call	_ZN10vector_varD1Ev
 4883      00
 4884 2ab1 4989DC   		movq	%rbx, %r12
 4885 2ab4 E9560100 		jmp	.L349
 4885      00
 4886              	.L430:
 4887 2ab9 4889C3   		movq	%rax, %rbx
 210:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), temp_soln.get_v(neighbour),cell_1,
 4888              		.loc 9 210 0
 4889 2abc 488D8570 		leaq	-2960(%rbp), %rax
 4889      F4FFFF
 4890 2ac3 4889C7   		movq	%rax, %rdi
 4891 2ac6 E8000000 		call	_ZN10vector_varD1Ev
 4891      00
 4892 2acb 488D8590 		leaq	-2928(%rbp), %rax
 4892      F4FFFF
 4893 2ad2 4889C7   		movq	%rax, %rdi
 4894 2ad5 E8000000 		call	_ZN10vector_varD1Ev
 4894      00
 4895 2ada 4989DC   		movq	%rbx, %r12
 4896 2add E92D0100 		jmp	.L349
 4896      00
 4897              	.L431:
 4898 2ae2 4889C3   		movq	%rax, %rbx
 211:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add in reset function
 4899              		.loc 9 211 0
 4900 2ae5 488D8570 		leaq	-2960(%rbp), %rax
 4900      F4FFFF
 4901 2aec 4889C7   		movq	%rax, %rdi
 4902 2aef E8000000 		call	_ZN10vector_varD1Ev
 4902      00
 4903 2af4 488D8590 		leaq	-2928(%rbp), %rax
 4903      F4FFFF
 4904 2afb 4889C7   		movq	%rax, %rdi
 4905 2afe E8000000 		call	_ZN10vector_varD1Ev
 4905      00
 4906 2b03 4989DC   		movq	%rbx, %r12
 4907 2b06 E9040100 		jmp	.L349
 4907      00
 4908              	.L432:
GAS LISTING /tmp/cc2K2nX4.s 			page 163


 4909 2b0b 4889C3   		movq	%rax, %rbx
 4910              	.LBB18:
 223:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4911              		.loc 9 223 0
 4912 2b0e 488D8550 		leaq	-2992(%rbp), %rax
 4912      F4FFFF
 4913 2b15 4889C7   		movq	%rax, %rdi
 4914 2b18 E8000000 		call	_ZN10vector_varD1Ev
 4914      00
 4915 2b1d 488D8570 		leaq	-2960(%rbp), %rax
 4915      F4FFFF
 4916 2b24 4889C7   		movq	%rax, %rdi
 4917 2b27 E8000000 		call	_ZN10vector_varD1Ev
 4917      00
 4918 2b2c 488D8590 		leaq	-2928(%rbp), %rax
 4918      F4FFFF
 4919 2b33 4889C7   		movq	%rax, %rdi
 4920 2b36 E8000000 		call	_ZN10vector_varD1Ev
 4920      00
 4921 2b3b 4989DC   		movq	%rbx, %r12
 4922 2b3e E9CC0000 		jmp	.L349
 4922      00
 4923              	.L433:
 4924 2b43 4889C3   		movq	%rax, %rbx
 226:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4925              		.loc 9 226 0
 4926 2b46 488D8550 		leaq	-2992(%rbp), %rax
 4926      F4FFFF
 4927 2b4d 4889C7   		movq	%rax, %rdi
 4928 2b50 E8000000 		call	_ZN10vector_varD1Ev
 4928      00
 4929 2b55 488D8570 		leaq	-2960(%rbp), %rax
 4929      F4FFFF
 4930 2b5c 4889C7   		movq	%rax, %rdi
 4931 2b5f E8000000 		call	_ZN10vector_varD1Ev
 4931      00
 4932 2b64 488D8590 		leaq	-2928(%rbp), %rax
 4932      F4FFFF
 4933 2b6b 4889C7   		movq	%rax, %rdi
 4934 2b6e E8000000 		call	_ZN10vector_varD1Ev
 4934      00
 4935 2b73 4989DC   		movq	%rbx, %r12
 4936 2b76 E9940000 		jmp	.L349
 4936      00
 4937              	.L434:
 4938 2b7b 4889C3   		movq	%rax, %rbx
 230:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4939              		.loc 9 230 0
 4940 2b7e 488D8590 		leaq	-2928(%rbp), %rax
 4940      F4FFFF
 4941 2b85 4889C7   		movq	%rax, %rdi
 4942 2b88 E8000000 		call	_ZN10vector_varD1Ev
 4942      00
 4943 2b8d 4989DC   		movq	%rbx, %r12
 4944 2b90 EB7D     		jmp	.L349
 4945              	.L435:
 4946 2b92 4889C3   		movq	%rax, %rbx
GAS LISTING /tmp/cc2K2nX4.s 			page 164


 232:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.y = (delta_v.Dot_Product(lattice_node) + temp_soln.get_v(i)) 
 4947              		.loc 9 232 0
 4948 2b95 488D8590 		leaq	-2928(%rbp), %rax
 4948      F4FFFF
 4949 2b9c 4889C7   		movq	%rax, %rdi
 4950 2b9f E8000000 		call	_ZN10vector_varD1Ev
 4950      00
 4951 2ba4 4989DC   		movq	%rbx, %r12
 4952 2ba7 EB66     		jmp	.L349
 4953              	.L436:
 4954 2ba9 4889C3   		movq	%rax, %rbx
 233:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.z = 0;
 4955              		.loc 9 233 0
 4956 2bac 488D8590 		leaq	-2928(%rbp), %rax
 4956      F4FFFF
 4957 2bb3 4889C7   		movq	%rax, %rdi
 4958 2bb6 E8000000 		call	_ZN10vector_varD1Ev
 4958      00
 4959 2bbb 4989DC   		movq	%rbx, %r12
 4960 2bbe EB4F     		jmp	.L349
 4961              	.L437:
 4962 2bc0 4889C3   		movq	%rax, %rbx
 240:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                       rho_lattice,soln_t0.get_average_rho(), k) ;
 4963              		.loc 9 240 0
 4964 2bc3 488D8570 		leaq	-2960(%rbp), %rax
 4964      F4FFFF
 4965 2bca 4889C7   		movq	%rax, %rdi
 4966 2bcd E8000000 		call	_ZN10vector_varD1Ev
 4966      00
 4967 2bd2 488D8590 		leaq	-2928(%rbp), %rax
 4967      F4FFFF
 4968 2bd9 4889C7   		movq	%rax, %rdi
 4969 2bdc E8000000 		call	_ZN10vector_varD1Ev
 4969      00
 4970 2be1 4989DC   		movq	%rbx, %r12
 4971 2be4 EB29     		jmp	.L349
 4972              	.L438:
 4973 2be6 4889C3   		movq	%rax, %rbx
 4974              	.LBE18:
 4975              	.LBB19:
 261:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 4976              		.loc 9 261 0
 4977 2be9 488D8570 		leaq	-2960(%rbp), %rax
 4977      F4FFFF
 4978 2bf0 4889C7   		movq	%rax, %rdi
 4979 2bf3 E8000000 		call	_ZN10vector_varD1Ev
 4979      00
 4980 2bf8 488D8590 		leaq	-2928(%rbp), %rax
 4980      F4FFFF
 4981 2bff 4889C7   		movq	%rax, %rdi
 4982 2c02 E8000000 		call	_ZN10vector_varD1Ev
 4982      00
 4983 2c07 4989DC   		movq	%rbx, %r12
 4984 2c0a EB03     		jmp	.L349
 4985              	.L427:
 4986 2c0c 4989C4   		movq	%rax, %r12
 4987              	.L349:
GAS LISTING /tmp/cc2K2nX4.s 			page 165


 4988              	.LBE19:
 4989              	.LBE20:
 4990              	.LBE21:
 4991              	.LBE22:
 4992              	.LBE23:
 4993              	.LBE24:
 4994              	.LBE26:
 4995              	.LBE27:
 4996              	.LBE31:
 4997              	.LBE32:
 4998              	.LBE33:
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 4999              		.loc 9 134 0
 5000 2c0f 488D9D10 		leaq	-1008(%rbp), %rbx
 5000      FCFFFF
 5001 2c16 4881C3A0 		addq	$160, %rbx
 5001      000000
 5002              	.L361:
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5003              		.loc 9 134 0 is_stmt 0 discriminator 8
 5004 2c1d 488D8510 		leaq	-1008(%rbp), %rax
 5004      FCFFFF
 5005 2c24 4839C3   		cmpq	%rax, %rbx
 5006 2c27 7411     		je	.L347
 134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5007              		.loc 9 134 0 discriminator 7
 5008 2c29 4883EB28 		subq	$40, %rbx
 5009 2c2d 488B03   		movq	(%rbx), %rax
 5010 2c30 488B00   		movq	(%rax), %rax
 5011 2c33 4889DF   		movq	%rbx, %rdi
 5012 2c36 FFD0     		call	*%rax
 5013 2c38 EBE3     		jmp	.L361
 5014              	.L347:
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 5015              		.loc 9 133 0 is_stmt 1
 5016 2c3a 488D9D70 		leaq	-1168(%rbp), %rbx
 5016      FBFFFF
 5017 2c41 4881C3A0 		addq	$160, %rbx
 5017      000000
 5018              	.L363:
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 5019              		.loc 9 133 0 is_stmt 0 discriminator 8
 5020 2c48 488D8570 		leaq	-1168(%rbp), %rax
 5020      FBFFFF
 5021 2c4f 4839C3   		cmpq	%rax, %rbx
 5022 2c52 7411     		je	.L343
 133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 5023              		.loc 9 133 0 discriminator 7
 5024 2c54 4883EB28 		subq	$40, %rbx
 5025 2c58 488B03   		movq	(%rbx), %rax
 5026 2c5b 488B00   		movq	(%rax), %rax
 5027 2c5e 4889DF   		movq	%rbx, %rdi
 5028 2c61 FFD0     		call	*%rax
 5029 2c63 EBE3     		jmp	.L363
 5030              	.L343:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5031              		.loc 9 132 0 is_stmt 1
GAS LISTING /tmp/cc2K2nX4.s 			page 166


 5032 2c65 488D9DD0 		leaq	-1328(%rbp), %rbx
 5032      FAFFFF
 5033 2c6c 4881C3A0 		addq	$160, %rbx
 5033      000000
 5034              	.L365:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5035              		.loc 9 132 0 is_stmt 0 discriminator 18
 5036 2c73 488D85D0 		leaq	-1328(%rbp), %rax
 5036      FAFFFF
 5037 2c7a 4839C3   		cmpq	%rax, %rbx
 5038 2c7d 7411     		je	.L339
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5039              		.loc 9 132 0 discriminator 17
 5040 2c7f 4883EB28 		subq	$40, %rbx
 5041 2c83 488B03   		movq	(%rbx), %rax
 5042 2c86 488B00   		movq	(%rax), %rax
 5043 2c89 4889DF   		movq	%rbx, %rdi
 5044 2c8c FFD0     		call	*%rax
 5045 2c8e EBE3     		jmp	.L365
 5046              	.L339:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5047              		.loc 9 132 0
 5048 2c90 488D9D30 		leaq	-1488(%rbp), %rbx
 5048      FAFFFF
 5049 2c97 4881C3A0 		addq	$160, %rbx
 5049      000000
 5050              	.L367:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5051              		.loc 9 132 0 discriminator 21
 5052 2c9e 488D8530 		leaq	-1488(%rbp), %rax
 5052      FAFFFF
 5053 2ca5 4839C3   		cmpq	%rax, %rbx
 5054 2ca8 7411     		je	.L335
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5055              		.loc 9 132 0 discriminator 20
 5056 2caa 4883EB28 		subq	$40, %rbx
 5057 2cae 488B03   		movq	(%rbx), %rax
 5058 2cb1 488B00   		movq	(%rax), %rax
 5059 2cb4 4889DF   		movq	%rbx, %rdi
 5060 2cb7 FFD0     		call	*%rax
 5061 2cb9 EBE3     		jmp	.L367
 5062              	.L335:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5063              		.loc 9 132 0
 5064 2cbb 488D9D90 		leaq	-1648(%rbp), %rbx
 5064      F9FFFF
 5065 2cc2 4881C3A0 		addq	$160, %rbx
 5065      000000
 5066              	.L369:
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5067              		.loc 9 132 0 discriminator 24
 5068 2cc9 488D8590 		leaq	-1648(%rbp), %rax
 5068      F9FFFF
 5069 2cd0 4839C3   		cmpq	%rax, %rbx
 5070 2cd3 7411     		je	.L368
 132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5071              		.loc 9 132 0 discriminator 23
GAS LISTING /tmp/cc2K2nX4.s 			page 167


 5072 2cd5 4883EB28 		subq	$40, %rbx
 5073 2cd9 488B03   		movq	(%rbx), %rax
 5074 2cdc 488B00   		movq	(%rax), %rax
 5075 2cdf 4889DF   		movq	%rbx, %rdi
 5076 2ce2 FFD0     		call	*%rax
 5077 2ce4 EBE3     		jmp	.L369
 5078              	.L368:
 5079 2ce6 4C89E3   		movq	%r12, %rbx
 5080              	.L331:
 130:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 5081              		.loc 9 130 0 is_stmt 1
 5082 2ce9 488D8540 		leaq	-2752(%rbp), %rax
 5082      F5FFFF
 5083 2cf0 4889C7   		movq	%rax, %rdi
 5084 2cf3 E8000000 		call	_ZN8flux_varD1Ev
 5084      00
 5085 2cf8 EB03     		jmp	.L370
 5086              	.L421:
 5087 2cfa 4889C3   		movq	%rax, %rbx
 5088              	.L370:
 129:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 5089              		.loc 9 129 0
 5090 2cfd 488D8510 		leaq	-2800(%rbp), %rax
 5090      F5FFFF
 5091 2d04 4889C7   		movq	%rax, %rdi
 5092 2d07 E8000000 		call	_ZN8flux_varD1Ev
 5092      00
 5093 2d0c EB03     		jmp	.L371
 5094              	.L420:
 5095 2d0e 4889C3   		movq	%rax, %rbx
 5096              	.L371:
 129:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 5097              		.loc 9 129 0 is_stmt 0 discriminator 2
 5098 2d11 488D85E0 		leaq	-2848(%rbp), %rax
 5098      F4FFFF
 5099 2d18 4889C7   		movq	%rax, %rdi
 5100 2d1b E8000000 		call	_ZN8flux_varD1Ev
 5100      00
 5101 2d20 EB03     		jmp	.L372
 5102              	.L419:
 5103 2d22 4889C3   		movq	%rax, %rbx
 5104              	.L372:
 128:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 5105              		.loc 9 128 0 is_stmt 1
 5106 2d25 488D8530 		leaq	-2256(%rbp), %rax
 5106      F7FFFF
 5107 2d2c 4889C7   		movq	%rax, %rdi
 5108 2d2f E8000000 		call	_ZN9residualsD1Ev
 5108      00
 5109 2d34 EB03     		jmp	.L373
 5110              	.L418:
 5111 2d36 4889C3   		movq	%rax, %rbx
 5112              	.L373:
 125:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5113              		.loc 9 125 0
 5114 2d39 488D8590 		leaq	-3440(%rbp), %rax
 5114      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 168


 5115 2d40 4889C7   		movq	%rax, %rdi
 5116 2d43 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EED1Ev
 5116      00
 5117 2d48 4989DC   		movq	%rbx, %r12
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 5118              		.loc 9 124 0
 5119 2d4b 488D9DB0 		leaq	-848(%rbp), %rbx
 5119      FCFFFF
 5120 2d52 4881C320 		addq	$288, %rbx
 5120      010000
 5121              	.L375:
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 5122              		.loc 9 124 0 is_stmt 0 discriminator 8
 5123 2d59 488D85B0 		leaq	-848(%rbp), %rax
 5123      FCFFFF
 5124 2d60 4839C3   		cmpq	%rax, %rbx
 5125 2d63 7411     		je	.L374
 124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 5126              		.loc 9 124 0 discriminator 7
 5127 2d65 4883EB20 		subq	$32, %rbx
 5128 2d69 488B03   		movq	(%rbx), %rax
 5129 2d6c 488B00   		movq	(%rax), %rax
 5130 2d6f 4889DF   		movq	%rbx, %rdi
 5131 2d72 FFD0     		call	*%rax
 5132 2d74 EBE3     		jmp	.L375
 5133              	.L374:
 5134 2d76 4C89E3   		movq	%r12, %rbx
 5135              	.L327:
 123:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
 5136              		.loc 9 123 0 is_stmt 1
 5137 2d79 488D8530 		leaq	-3024(%rbp), %rax
 5137      F4FFFF
 5138 2d80 4889C7   		movq	%rax, %rdi
 5139 2d83 E8000000 		call	_ZN10vector_varD1Ev
 5139      00
 5140 2d88 EB03     		jmp	.L376
 5141              	.L416:
 5142 2d8a 4889C3   		movq	%rax, %rbx
 5143              	.L376:
 121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5144              		.loc 9 121 0
 5145 2d8d 488D8510 		leaq	-3056(%rbp), %rax
 5145      F4FFFF
 5146 2d94 4889C7   		movq	%rax, %rdi
 5147 2d97 E8000000 		call	_ZN10vector_varD1Ev
 5147      00
 5148 2d9c EB03     		jmp	.L377
 5149              	.L415:
 5150 2d9e 4889C3   		movq	%rax, %rbx
 5151              	.L377:
 121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5152              		.loc 9 121 0 is_stmt 0 discriminator 4
 5153 2da1 488D85F0 		leaq	-3088(%rbp), %rax
 5153      F3FFFF
 5154 2da8 4889C7   		movq	%rax, %rdi
 5155 2dab E8000000 		call	_ZN10vector_varD1Ev
 5155      00
GAS LISTING /tmp/cc2K2nX4.s 			page 169


 5156 2db0 EB03     		jmp	.L378
 5157              	.L414:
 5158 2db2 4889C3   		movq	%rax, %rbx
 5159              	.L378:
 121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 5160              		.loc 9 121 0 discriminator 2
 5161 2db5 488D85D0 		leaq	-3120(%rbp), %rax
 5161      F3FFFF
 5162 2dbc 4889C7   		movq	%rax, %rdi
 5163 2dbf E8000000 		call	_ZN10vector_varD1Ev
 5163      00
 5164 2dc4 EB03     		jmp	.L379
 5165              	.L413:
 5166 2dc6 4889C3   		movq	%rax, %rbx
 5167              	.L379:
 120:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 5168              		.loc 9 120 0 is_stmt 1
 5169 2dc9 488D85B0 		leaq	-3152(%rbp), %rax
 5169      F3FFFF
 5170 2dd0 4889C7   		movq	%rax, %rdi
 5171 2dd3 E8000000 		call	_ZN10vector_varD1Ev
 5171      00
 5172 2dd8 EB03     		jmp	.L380
 5173              	.L412:
 5174 2dda 4889C3   		movq	%rax, %rbx
 5175              	.L380:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5176              		.loc 9 119 0
 5177 2ddd 488D8590 		leaq	-3184(%rbp), %rax
 5177      F3FFFF
 5178 2de4 4889C7   		movq	%rax, %rdi
 5179 2de7 E8000000 		call	_ZN10vector_varD1Ev
 5179      00
 5180 2dec EB03     		jmp	.L381
 5181              	.L411:
 5182 2dee 4889C3   		movq	%rax, %rbx
 5183              	.L381:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5184              		.loc 9 119 0 is_stmt 0 discriminator 14
 5185 2df1 488D8570 		leaq	-3216(%rbp), %rax
 5185      F3FFFF
 5186 2df8 4889C7   		movq	%rax, %rdi
 5187 2dfb E8000000 		call	_ZN10vector_varD1Ev
 5187      00
 5188 2e00 EB03     		jmp	.L382
 5189              	.L410:
 5190 2e02 4889C3   		movq	%rax, %rbx
 5191              	.L382:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5192              		.loc 9 119 0 discriminator 12
 5193 2e05 488D8550 		leaq	-3248(%rbp), %rax
 5193      F3FFFF
 5194 2e0c 4889C7   		movq	%rax, %rdi
 5195 2e0f E8000000 		call	_ZN10vector_varD1Ev
 5195      00
 5196 2e14 EB03     		jmp	.L383
 5197              	.L409:
GAS LISTING /tmp/cc2K2nX4.s 			page 170


 5198 2e16 4889C3   		movq	%rax, %rbx
 5199              	.L383:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5200              		.loc 9 119 0 discriminator 10
 5201 2e19 488D8530 		leaq	-3280(%rbp), %rax
 5201      F3FFFF
 5202 2e20 4889C7   		movq	%rax, %rdi
 5203 2e23 E8000000 		call	_ZN10vector_varD1Ev
 5203      00
 5204 2e28 EB03     		jmp	.L384
 5205              	.L408:
 5206 2e2a 4889C3   		movq	%rax, %rbx
 5207              	.L384:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5208              		.loc 9 119 0 discriminator 8
 5209 2e2d 488D8510 		leaq	-3312(%rbp), %rax
 5209      F3FFFF
 5210 2e34 4889C7   		movq	%rax, %rdi
 5211 2e37 E8000000 		call	_ZN10vector_varD1Ev
 5211      00
 5212 2e3c EB03     		jmp	.L385
 5213              	.L407:
 5214 2e3e 4889C3   		movq	%rax, %rbx
 5215              	.L385:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5216              		.loc 9 119 0 discriminator 6
 5217 2e41 488D85F0 		leaq	-3344(%rbp), %rax
 5217      F2FFFF
 5218 2e48 4889C7   		movq	%rax, %rdi
 5219 2e4b E8000000 		call	_ZN10vector_varD1Ev
 5219      00
 5220 2e50 EB03     		jmp	.L386
 5221              	.L406:
 5222 2e52 4889C3   		movq	%rax, %rbx
 5223              	.L386:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5224              		.loc 9 119 0 discriminator 4
 5225 2e55 488D85D0 		leaq	-3376(%rbp), %rax
 5225      F2FFFF
 5226 2e5c 4889C7   		movq	%rax, %rdi
 5227 2e5f E8000000 		call	_ZN10vector_varD1Ev
 5227      00
 5228 2e64 EB03     		jmp	.L387
 5229              	.L405:
 5230 2e66 4889C3   		movq	%rax, %rbx
 5231              	.L387:
 119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5232              		.loc 9 119 0 discriminator 2
 5233 2e69 488D85B0 		leaq	-3408(%rbp), %rax
 5233      F2FFFF
 5234 2e70 4889C7   		movq	%rax, %rdi
 5235 2e73 E8000000 		call	_ZN10vector_varD1Ev
 5235      00
 5236 2e78 EB03     		jmp	.L388
 5237              	.L404:
 5238 2e7a 4889C3   		movq	%rax, %rbx
 5239              	.L388:
GAS LISTING /tmp/cc2K2nX4.s 			page 171


 118:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 5240              		.loc 9 118 0 is_stmt 1
 5241 2e7d 488D85C0 		leaq	-2112(%rbp), %rax
 5241      F7FFFF
 5242 2e84 4889C7   		movq	%rax, %rdi
 5243 2e87 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 5243      00
 117:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 5244              		.loc 9 117 0
 5245 2e8c 488D85D0 		leaq	-560(%rbp), %rax
 5245      FDFFFF
 5246 2e93 4889C7   		movq	%rax, %rdi
 5247 2e96 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 5247      00
 5248 2e9b EB03     		jmp	.L389
 5249              	.L403:
 5250 2e9d 4889C3   		movq	%rax, %rbx
 5251              	.L389:
 100:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 5252              		.loc 9 100 0
 5253 2ea0 488D85B0 		leaq	-2896(%rbp), %rax
 5253      F4FFFF
 5254 2ea7 4889C7   		movq	%rax, %rdi
 5255 2eaa E8000000 		call	_ZN8flux_varD1Ev
 5255      00
 5256 2eaf EB03     		jmp	.L390
 5257              	.L402:
 5258 2eb1 4889C3   		movq	%rax, %rbx
 5259              	.L390:
  99:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 5260              		.loc 9 99 0
 5261 2eb4 488D85E0 		leaq	-2336(%rbp), %rax
 5261      F6FFFF
 5262 2ebb 4889C7   		movq	%rax, %rdi
 5263 2ebe E8000000 		call	_ZN8SolutionD1Ev
 5263      00
 5264 2ec3 EB03     		jmp	.L391
 5265              	.L401:
 5266 2ec5 4889C3   		movq	%rax, %rbx
 5267              	.L391:
  98:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 5268              		.loc 9 98 0
 5269 2ec8 488D8590 		leaq	-2416(%rbp), %rax
 5269      F6FFFF
 5270 2ecf 4889C7   		movq	%rax, %rdi
 5271 2ed2 E8000000 		call	_ZN8SolutionD1Ev
 5271      00
 5272 2ed7 EB03     		jmp	.L392
 5273              	.L400:
 5274 2ed9 4889C3   		movq	%rax, %rbx
 5275              	.L392:
  97:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 5276              		.loc 9 97 0
 5277 2edc 488D8540 		leaq	-2496(%rbp), %rax
 5277      F6FFFF
 5278 2ee3 4889C7   		movq	%rax, %rdi
 5279 2ee6 E8000000 		call	_ZN8SolutionD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 172


 5279      00
 5280 2eeb EB03     		jmp	.L393
 5281              	.L399:
 5282 2eed 4889C3   		movq	%rax, %rbx
 5283              	.L393:
  96:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 5284              		.loc 9 96 0
 5285 2ef0 488D85F0 		leaq	-2576(%rbp), %rax
 5285      F5FFFF
 5286 2ef7 4889C7   		movq	%rax, %rdi
 5287 2efa E8000000 		call	_ZN8SolutionD1Ev
 5287      00
 5288 2eff EB03     		jmp	.L394
 5289              	.L398:
 5290 2f01 4889C3   		movq	%rax, %rbx
 5291              	.L394:
  95:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
 5292              		.loc 9 95 0
 5293 2f04 488D85A0 		leaq	-2656(%rbp), %rax
 5293      F5FFFF
 5294 2f0b 4889C7   		movq	%rax, %rdi
 5295 2f0e E8000000 		call	_ZN8SolutionD1Ev
 5295      00
 5296 2f13 EB03     		jmp	.L395
 5297              	.L397:
 5298 2f15 4889C3   		movq	%rax, %rbx
 5299              	.L395:
  94:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 5300              		.loc 9 94 0
 5301 2f18 488D8540 		leaq	-1728(%rbp), %rax
 5301      F9FFFF
 5302 2f1f 4889C7   		movq	%rax, %rdi
 5303 2f22 E8000000 		call	_ZN10RungeKuttaD1Ev
 5303      00
 5304 2f27 4889D8   		movq	%rbx, %rax
 5305 2f2a 4889C7   		movq	%rax, %rdi
 5306              	.LEHB53:
 5307 2f2d E8000000 		call	_Unwind_Resume
 5307      00
 5308              	.LEHE53:
 5309              	.L439:
 5310              		.loc 9 402 0
 5311 2f32 E8000000 		call	__stack_chk_fail
 5311      00
 5312              	.L396:
 5313 2f37 488D65E8 		leaq	-24(%rbp), %rsp
 5314 2f3b 5B       		popq	%rbx
 5315 2f3c 415C     		popq	%r12
 5316 2f3e 415D     		popq	%r13
 5317 2f40 5D       		popq	%rbp
 5318              		.cfi_def_cfa 7, 8
 5319 2f41 C3       		ret
 5320              		.cfi_endproc
 5321              	.LFE7187:
 5322              		.section	.gcc_except_table
 5323              	.LLSDA7187:
 5324 0028 FF       		.byte	0xff
GAS LISTING /tmp/cc2K2nX4.s 			page 173


 5325 0029 FF       		.byte	0xff
 5326 002a 01       		.byte	0x1
 5327 002b 9F02     		.uleb128 .LLSDACSE7187-.LLSDACSB7187
 5328              	.LLSDACSB7187:
 5329 002d 7F       		.uleb128 .LEHB6-.LFB7187
 5330 002e 05       		.uleb128 .LEHE6-.LEHB6
 5331 002f 00       		.uleb128 0
 5332 0030 00       		.uleb128 0
 5333 0031 A101     		.uleb128 .LEHB7-.LFB7187
 5334 0033 05       		.uleb128 .LEHE7-.LEHB7
 5335 0034 C355     		.uleb128 .L397-.LFB7187
 5336 0036 00       		.uleb128 0
 5337 0037 C301     		.uleb128 .LEHB8-.LFB7187
 5338 0039 05       		.uleb128 .LEHE8-.LEHB8
 5339 003a AF55     		.uleb128 .L398-.LFB7187
 5340 003c 00       		.uleb128 0
 5341 003d E501     		.uleb128 .LEHB9-.LFB7187
 5342 003f 05       		.uleb128 .LEHE9-.LEHB9
 5343 0040 9B55     		.uleb128 .L399-.LFB7187
 5344 0042 00       		.uleb128 0
 5345 0043 8702     		.uleb128 .LEHB10-.LFB7187
 5346 0045 05       		.uleb128 .LEHE10-.LEHB10
 5347 0046 8755     		.uleb128 .L400-.LFB7187
 5348 0048 00       		.uleb128 0
 5349 0049 A902     		.uleb128 .LEHB11-.LFB7187
 5350 004b 05       		.uleb128 .LEHE11-.LEHB11
 5351 004c F354     		.uleb128 .L401-.LFB7187
 5352 004e 00       		.uleb128 0
 5353 004f B802     		.uleb128 .LEHB12-.LFB7187
 5354 0051 05       		.uleb128 .LEHE12-.LEHB12
 5355 0052 DF54     		.uleb128 .L402-.LFB7187
 5356 0054 00       		.uleb128 0
 5357 0055 DB02     		.uleb128 .LEHB13-.LFB7187
 5358 0057 05       		.uleb128 .LEHE13-.LEHB13
 5359 0058 CB54     		.uleb128 .L403-.LFB7187
 5360 005a 00       		.uleb128 0
 5361 005b F902     		.uleb128 .LEHB14-.LFB7187
 5362 005d 05       		.uleb128 .LEHE14-.LEHB14
 5363 005e A854     		.uleb128 .L404-.LFB7187
 5364 0060 00       		.uleb128 0
 5365 0061 8803     		.uleb128 .LEHB15-.LFB7187
 5366 0063 05       		.uleb128 .LEHE15-.LEHB15
 5367 0064 9454     		.uleb128 .L405-.LFB7187
 5368 0066 00       		.uleb128 0
 5369 0067 9703     		.uleb128 .LEHB16-.LFB7187
 5370 0069 05       		.uleb128 .LEHE16-.LEHB16
 5371 006a 8054     		.uleb128 .L406-.LFB7187
 5372 006c 00       		.uleb128 0
 5373 006d A603     		.uleb128 .LEHB17-.LFB7187
 5374 006f 05       		.uleb128 .LEHE17-.LEHB17
 5375 0070 EC53     		.uleb128 .L407-.LFB7187
 5376 0072 00       		.uleb128 0
 5377 0073 B503     		.uleb128 .LEHB18-.LFB7187
 5378 0075 05       		.uleb128 .LEHE18-.LEHB18
 5379 0076 D853     		.uleb128 .L408-.LFB7187
 5380 0078 00       		.uleb128 0
 5381 0079 C403     		.uleb128 .LEHB19-.LFB7187
GAS LISTING /tmp/cc2K2nX4.s 			page 174


 5382 007b 05       		.uleb128 .LEHE19-.LEHB19
 5383 007c C453     		.uleb128 .L409-.LFB7187
 5384 007e 00       		.uleb128 0
 5385 007f D303     		.uleb128 .LEHB20-.LFB7187
 5386 0081 05       		.uleb128 .LEHE20-.LEHB20
 5387 0082 B053     		.uleb128 .L410-.LFB7187
 5388 0084 00       		.uleb128 0
 5389 0085 E203     		.uleb128 .LEHB21-.LFB7187
 5390 0087 05       		.uleb128 .LEHE21-.LEHB21
 5391 0088 9C53     		.uleb128 .L411-.LFB7187
 5392 008a 00       		.uleb128 0
 5393 008b F103     		.uleb128 .LEHB22-.LFB7187
 5394 008d 05       		.uleb128 .LEHE22-.LEHB22
 5395 008e 8853     		.uleb128 .L412-.LFB7187
 5396 0090 00       		.uleb128 0
 5397 0091 8004     		.uleb128 .LEHB23-.LFB7187
 5398 0093 05       		.uleb128 .LEHE23-.LEHB23
 5399 0094 F452     		.uleb128 .L413-.LFB7187
 5400 0096 00       		.uleb128 0
 5401 0097 8F04     		.uleb128 .LEHB24-.LFB7187
 5402 0099 05       		.uleb128 .LEHE24-.LEHB24
 5403 009a E052     		.uleb128 .L414-.LFB7187
 5404 009c 00       		.uleb128 0
 5405 009d 9E04     		.uleb128 .LEHB25-.LFB7187
 5406 009f 05       		.uleb128 .LEHE25-.LEHB25
 5407 00a0 CC52     		.uleb128 .L415-.LFB7187
 5408 00a2 00       		.uleb128 0
 5409 00a3 AD04     		.uleb128 .LEHB26-.LFB7187
 5410 00a5 05       		.uleb128 .LEHE26-.LEHB26
 5411 00a6 B852     		.uleb128 .L416-.LFB7187
 5412 00a8 00       		.uleb128 0
 5413 00a9 CA04     		.uleb128 .LEHB27-.LFB7187
 5414 00ab 05       		.uleb128 .LEHE27-.LEHB27
 5415 00ac 9F49     		.uleb128 .L417-.LFB7187
 5416 00ae 00       		.uleb128 0
 5417 00af F204     		.uleb128 .LEHB28-.LFB7187
 5418 00b1 05       		.uleb128 .LEHE28-.LEHB28
 5419 00b2 E451     		.uleb128 .L418-.LFB7187
 5420 00b4 00       		.uleb128 0
 5421 00b5 8105     		.uleb128 .LEHB29-.LFB7187
 5422 00b7 05       		.uleb128 .LEHE29-.LEHB29
 5423 00b8 D051     		.uleb128 .L419-.LFB7187
 5424 00ba 00       		.uleb128 0
 5425 00bb 9005     		.uleb128 .LEHB30-.LFB7187
 5426 00bd 05       		.uleb128 .LEHE30-.LEHB30
 5427 00be BC51     		.uleb128 .L420-.LFB7187
 5428 00c0 00       		.uleb128 0
 5429 00c1 9F05     		.uleb128 .LEHB31-.LFB7187
 5430 00c3 05       		.uleb128 .LEHE31-.LEHB31
 5431 00c4 A851     		.uleb128 .L421-.LFB7187
 5432 00c6 00       		.uleb128 0
 5433 00c7 BC05     		.uleb128 .LEHB32-.LFB7187
 5434 00c9 05       		.uleb128 .LEHE32-.LEHB32
 5435 00ca D549     		.uleb128 .L422-.LFB7187
 5436 00cc 00       		.uleb128 0
 5437 00cd E305     		.uleb128 .LEHB33-.LFB7187
 5438 00cf 05       		.uleb128 .LEHE33-.LEHB33
GAS LISTING /tmp/cc2K2nX4.s 			page 175


 5439 00d0 984A     		.uleb128 .L423-.LFB7187
 5440 00d2 00       		.uleb128 0
 5441 00d3 8A06     		.uleb128 .LEHB34-.LFB7187
 5442 00d5 05       		.uleb128 .LEHE34-.LEHB34
 5443 00d6 DB4A     		.uleb128 .L424-.LFB7187
 5444 00d8 00       		.uleb128 0
 5445 00d9 B106     		.uleb128 .LEHB35-.LFB7187
 5446 00db 05       		.uleb128 .LEHE35-.LEHB35
 5447 00dc 9E4B     		.uleb128 .L425-.LFB7187
 5448 00de 00       		.uleb128 0
 5449 00df D806     		.uleb128 .LEHB36-.LFB7187
 5450 00e1 05       		.uleb128 .LEHE36-.LEHB36
 5451 00e2 E14B     		.uleb128 .L426-.LFB7187
 5452 00e4 00       		.uleb128 0
 5453 00e5 F507     		.uleb128 .LEHB37-.LFB7187
 5454 00e7 7A       		.uleb128 .LEHE37-.LEHB37
 5455 00e8 BA4F     		.uleb128 .L427-.LFB7187
 5456 00ea 00       		.uleb128 0
 5457 00eb 8309     		.uleb128 .LEHB38-.LFB7187
 5458 00ed 05       		.uleb128 .LEHE38-.LEHB38
 5459 00ee A44C     		.uleb128 .L428-.LFB7187
 5460 00f0 00       		.uleb128 0
 5461 00f1 BB09     		.uleb128 .LEHB39-.LFB7187
 5462 00f3 FD01     		.uleb128 .LEHE39-.LEHB39
 5463 00f5 BA4F     		.uleb128 .L427-.LFB7187
 5464 00f7 00       		.uleb128 0
 5465 00f8 D90F     		.uleb128 .LEHB40-.LFB7187
 5466 00fa 05       		.uleb128 .LEHE40-.LEHB40
 5467 00fb BE4C     		.uleb128 .L429-.LFB7187
 5468 00fd 00       		.uleb128 0
 5469 00fe 8711     		.uleb128 .LEHB41-.LFB7187
 5470 0100 05       		.uleb128 .LEHE41-.LEHB41
 5471 0101 E74C     		.uleb128 .L430-.LFB7187
 5472 0103 00       		.uleb128 0
 5473 0104 B512     		.uleb128 .LEHB42-.LFB7187
 5474 0106 05       		.uleb128 .LEHE42-.LEHB42
 5475 0107 904D     		.uleb128 .L431-.LFB7187
 5476 0109 00       		.uleb128 0
 5477 010a AE14     		.uleb128 .LEHB43-.LFB7187
 5478 010c 05       		.uleb128 .LEHE43-.LEHB43
 5479 010d B94D     		.uleb128 .L432-.LFB7187
 5480 010f 00       		.uleb128 0
 5481 0110 E515     		.uleb128 .LEHB44-.LFB7187
 5482 0112 05       		.uleb128 .LEHE44-.LEHB44
 5483 0113 F14D     		.uleb128 .L433-.LFB7187
 5484 0115 00       		.uleb128 0
 5485 0116 C416     		.uleb128 .LEHB45-.LFB7187
 5486 0118 05       		.uleb128 .LEHE45-.LEHB45
 5487 0119 A94E     		.uleb128 .L434-.LFB7187
 5488 011b 00       		.uleb128 0
 5489 011c B417     		.uleb128 .LEHB46-.LFB7187
 5490 011e 05       		.uleb128 .LEHE46-.LEHB46
 5491 011f C04E     		.uleb128 .L435-.LFB7187
 5492 0121 00       		.uleb128 0
 5493 0122 A418     		.uleb128 .LEHB47-.LFB7187
 5494 0124 05       		.uleb128 .LEHE47-.LEHB47
 5495 0125 D74E     		.uleb128 .L436-.LFB7187
GAS LISTING /tmp/cc2K2nX4.s 			page 176


 5496 0127 00       		.uleb128 0
 5497 0128 FD18     		.uleb128 .LEHB48-.LFB7187
 5498 012a 05       		.uleb128 .LEHE48-.LEHB48
 5499 012b BA4F     		.uleb128 .L427-.LFB7187
 5500 012d 00       		.uleb128 0
 5501 012e E71A     		.uleb128 .LEHB49-.LFB7187
 5502 0130 05       		.uleb128 .LEHE49-.LEHB49
 5503 0131 EE4E     		.uleb128 .L437-.LFB7187
 5504 0133 00       		.uleb128 0
 5505 0134 A21F     		.uleb128 .LEHB50-.LFB7187
 5506 0136 05       		.uleb128 .LEHE50-.LEHB50
 5507 0137 BA4F     		.uleb128 .L427-.LFB7187
 5508 0139 00       		.uleb128 0
 5509 013a AF21     		.uleb128 .LEHB51-.LFB7187
 5510 013c 05       		.uleb128 .LEHE51-.LEHB51
 5511 013d 944F     		.uleb128 .L438-.LFB7187
 5512 013f 00       		.uleb128 0
 5513 0140 BE2E     		.uleb128 .LEHB52-.LFB7187
 5514 0142 D810     		.uleb128 .LEHE52-.LEHB52
 5515 0144 BA4F     		.uleb128 .L427-.LFB7187
 5516 0146 00       		.uleb128 0
 5517 0147 DB55     		.uleb128 .LEHB53-.LFB7187
 5518 0149 05       		.uleb128 .LEHE53-.LEHB53
 5519 014a 00       		.uleb128 0
 5520 014b 00       		.uleb128 0
 5521              	.LLSDACSE7187:
 5522              		.text
 5524              		.align 2
 5525              		.globl	_ZN6Solver25Uniform_Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_for
 5527              	_ZN6Solver25Uniform_Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16gl
 5528              	.LFB7189:
 403:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 404:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 405:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 406:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::Uniform_Mesh_Solver_Clean( Mesh &Mesh , Solution &soln, Boundary_Conditions &bcs,
 407:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    external_forces &source,global_variables &globals, domain_geomet
 408:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    initial_conditions &init_conds, quad_bcs_plus &quad_bcs_orig, in
 409:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    Solution &residual, int fmg)
 410:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
 5529              		.loc 9 410 0
 5530              		.cfi_startproc
 5531              		.cfi_personality 0x3,__gxx_personality_v0
 5532              		.cfi_lsda 0x3,.LLSDA7189
 5533 2f42 55       		pushq	%rbp
 5534              		.cfi_def_cfa_offset 16
 5535              		.cfi_offset 6, -16
 5536 2f43 4889E5   		movq	%rsp, %rbp
 5537              		.cfi_def_cfa_register 6
 5538 2f46 4155     		pushq	%r13
 5539 2f48 4154     		pushq	%r12
 5540 2f4a 53       		pushq	%rbx
 5541 2f4b 4881EC68 		subq	$3688, %rsp
 5541      0E0000
 5542              		.cfi_offset 13, -24
 5543              		.cfi_offset 12, -32
 5544              		.cfi_offset 3, -40
 5545 2f52 4889BDF8 		movq	%rdi, -3592(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 177


 5545      F1FFFF
 5546 2f59 4889B5F0 		movq	%rsi, -3600(%rbp)
 5546      F1FFFF
 5547 2f60 488995E8 		movq	%rdx, -3608(%rbp)
 5547      F1FFFF
 5548 2f67 48898DE0 		movq	%rcx, -3616(%rbp)
 5548      F1FFFF
 5549 2f6e 4C8985D8 		movq	%r8, -3624(%rbp)
 5549      F1FFFF
 5550 2f75 4C898DD0 		movq	%r9, -3632(%rbp)
 5550      F1FFFF
 5551 2f7c 488B4510 		movq	16(%rbp), %rax
 5552 2f80 488985C8 		movq	%rax, -3640(%rbp)
 5552      F1FFFF
 5553 2f87 488B4518 		movq	24(%rbp), %rax
 5554 2f8b 488985C0 		movq	%rax, -3648(%rbp)
 5554      F1FFFF
 5555 2f92 488B4520 		movq	32(%rbp), %rax
 5556 2f96 488985B8 		movq	%rax, -3656(%rbp)
 5556      F1FFFF
 5557 2f9d 488B4530 		movq	48(%rbp), %rax
 5558 2fa1 488985B0 		movq	%rax, -3664(%rbp)
 5558      F1FFFF
 5559              		.loc 9 410 0
 5560 2fa8 64488B04 		movq	%fs:40, %rax
 5560      25280000 
 5560      00
 5561 2fb1 488945D8 		movq	%rax, -40(%rbp)
 5562 2fb5 31C0     		xorl	%eax, %eax
 411:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 412:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     ///Declarations
 413:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     RungeKutta rk4;
 5563              		.loc 9 413 0
 5564 2fb7 488D8540 		leaq	-1728(%rbp), %rax
 5564      F9FFFF
 5565 2fbe 4889C7   		movq	%rax, %rdi
 5566              	.LEHB54:
 5567 2fc1 E8000000 		call	_ZN10RungeKuttaC1Ev
 5567      00
 5568              	.LEHE54:
 414:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 5569              		.loc 9 414 0
 5570 2fc6 488B85F0 		movq	-3600(%rbp), %rax
 5570      F1FFFF
 5571 2fcd 4889C7   		movq	%rax, %rdi
 5572 2fd0 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 5572      00
 5573 2fd5 89C2     		movl	%eax, %edx
 5574 2fd7 488D85A0 		leaq	-2656(%rbp), %rax
 5574      F5FFFF
 5575 2fde 89D6     		movl	%edx, %esi
 5576 2fe0 4889C7   		movq	%rax, %rdi
 5577              	.LEHB55:
 5578 2fe3 E8000000 		call	_ZN8SolutionC1Ei
 5578      00
 5579              	.LEHE55:
 415:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
GAS LISTING /tmp/cc2K2nX4.s 			page 178


 5580              		.loc 9 415 0
 5581 2fe8 488B85F0 		movq	-3600(%rbp), %rax
 5581      F1FFFF
 5582 2fef 4889C7   		movq	%rax, %rdi
 5583 2ff2 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 5583      00
 5584 2ff7 89C2     		movl	%eax, %edx
 5585 2ff9 488D85F0 		leaq	-2576(%rbp), %rax
 5585      F5FFFF
 5586 3000 89D6     		movl	%edx, %esi
 5587 3002 4889C7   		movq	%rax, %rdi
 5588              	.LEHB56:
 5589 3005 E8000000 		call	_ZN8SolutionC1Ei
 5589      00
 5590              	.LEHE56:
 416:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 5591              		.loc 9 416 0
 5592 300a 488B85F0 		movq	-3600(%rbp), %rax
 5592      F1FFFF
 5593 3011 4889C7   		movq	%rax, %rdi
 5594 3014 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 5594      00
 5595 3019 89C2     		movl	%eax, %edx
 5596 301b 488D8540 		leaq	-2496(%rbp), %rax
 5596      F6FFFF
 5597 3022 89D6     		movl	%edx, %esi
 5598 3024 4889C7   		movq	%rax, %rdi
 5599              	.LEHB57:
 5600 3027 E8000000 		call	_ZN8SolutionC1Ei
 5600      00
 5601              	.LEHE57:
 417:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 5602              		.loc 9 417 0
 5603 302c 488B85F0 		movq	-3600(%rbp), %rax
 5603      F1FFFF
 5604 3033 4889C7   		movq	%rax, %rdi
 5605 3036 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 5605      00
 5606 303b 89C2     		movl	%eax, %edx
 5607 303d 488D8590 		leaq	-2416(%rbp), %rax
 5607      F6FFFF
 5608 3044 89D6     		movl	%edx, %esi
 5609 3046 4889C7   		movq	%rax, %rdi
 5610              	.LEHB58:
 5611 3049 E8000000 		call	_ZN8SolutionC1Ei
 5611      00
 5612              	.LEHE58:
 418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 5613              		.loc 9 418 0
 5614 304e 488B85F0 		movq	-3600(%rbp), %rax
 5614      F1FFFF
 5615 3055 4889C7   		movq	%rax, %rdi
 5616 3058 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 5616      00
 5617 305d 89C2     		movl	%eax, %edx
 5618 305f 488D85E0 		leaq	-2336(%rbp), %rax
 5618      F6FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 179


 5619 3066 89D6     		movl	%edx, %esi
 5620 3068 4889C7   		movq	%rax, %rdi
 5621              	.LEHB59:
 5622 306b E8000000 		call	_ZN8SolutionC1Ei
 5622      00
 5623              	.LEHE59:
 419:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 5624              		.loc 9 419 0
 5625 3070 488D85B0 		leaq	-2896(%rbp), %rax
 5625      F4FFFF
 5626 3077 4889C7   		movq	%rax, %rdi
 5627              	.LEHB60:
 5628 307a E8000000 		call	_ZN8flux_varC1Ev
 5628      00
 5629              	.LEHE60:
 420:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 421:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double delta_t = globals.time_marching_step;
 5630              		.loc 9 421 0
 5631 307f 488B85D0 		movq	-3632(%rbp), %rax
 5631      F1FFFF
 5632 3086 F20F1040 		movsd	64(%rax), %xmm0
 5632      40
 5633 308b F20F1185 		movsd	%xmm0, -3512(%rbp)
 5633      48F2FFFF 
 422:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double duration;
 423:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double local_tolerance;
 424:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_interface,feq_interface,fneq_interface;
 425:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 426:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_lattice ;
 427:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double feq_lattice [9], feq_int_debug[9], fneq_int_debug[9];
 428:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_lattice_deb[9], v_lattice[9], rho_lattice_deb[9];
 429:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_avg, u_avg,v_avg,w_avg;
 430:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double lattice_weight [9];
 431:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double time;
 432:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_bc, rho_bc,  v_bc;
 433:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_magnitude;
 434:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double mom_flux_const;
 435:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double f1,f2,f3;
 436:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::clock_t start;
 437:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::ofstream error_output ;
 5634              		.loc 9 437 0
 5635 3093 488D85D0 		leaq	-560(%rbp), %rax
 5635      FDFFFF
 5636 309a 4889C7   		movq	%rax, %rdi
 5637              	.LEHB61:
 5638 309d E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev
 5638      00
 5639              	.LEHE61:
 438:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 5640              		.loc 9 438 0
 5641 30a2 488D85C0 		leaq	-2112(%rbp), %rax
 5641      F7FFFF
 5642 30a9 4889C7   		movq	%rax, %rdi
 5643 30ac E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev
 5643      00
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 5644              		.loc 9 439 0
GAS LISTING /tmp/cc2K2nX4.s 			page 180


 5645 30b1 488D85D0 		leaq	-3376(%rbp), %rax
 5645      F2FFFF
 5646 30b8 4889C7   		movq	%rax, %rdi
 5647              	.LEHB62:
 5648 30bb E8000000 		call	_ZN10vector_varC1Ev
 5648      00
 5649              	.LEHE62:
 5650              		.loc 9 439 0 is_stmt 0 discriminator 1
 5651 30c0 488D85F0 		leaq	-3344(%rbp), %rax
 5651      F2FFFF
 5652 30c7 4889C7   		movq	%rax, %rdi
 5653              	.LEHB63:
 5654 30ca E8000000 		call	_ZN10vector_varC1Ev
 5654      00
 5655              	.LEHE63:
 5656              		.loc 9 439 0 discriminator 3
 5657 30cf 488D8510 		leaq	-3312(%rbp), %rax
 5657      F3FFFF
 5658 30d6 4889C7   		movq	%rax, %rdi
 5659              	.LEHB64:
 5660 30d9 E8000000 		call	_ZN10vector_varC1Ev
 5660      00
 5661              	.LEHE64:
 5662              		.loc 9 439 0 discriminator 5
 5663 30de 488D8530 		leaq	-3280(%rbp), %rax
 5663      F3FFFF
 5664 30e5 4889C7   		movq	%rax, %rdi
 5665              	.LEHB65:
 5666 30e8 E8000000 		call	_ZN10vector_varC1Ev
 5666      00
 5667              	.LEHE65:
 5668              		.loc 9 439 0 discriminator 7
 5669 30ed 488D8550 		leaq	-3248(%rbp), %rax
 5669      F3FFFF
 5670 30f4 4889C7   		movq	%rax, %rdi
 5671              	.LEHB66:
 5672 30f7 E8000000 		call	_ZN10vector_varC1Ev
 5672      00
 5673              	.LEHE66:
 5674              		.loc 9 439 0 discriminator 9
 5675 30fc 488D8570 		leaq	-3216(%rbp), %rax
 5675      F3FFFF
 5676 3103 4889C7   		movq	%rax, %rdi
 5677              	.LEHB67:
 5678 3106 E8000000 		call	_ZN10vector_varC1Ev
 5678      00
 5679              	.LEHE67:
 5680              		.loc 9 439 0 discriminator 11
 5681 310b 488D8590 		leaq	-3184(%rbp), %rax
 5681      F3FFFF
 5682 3112 4889C7   		movq	%rax, %rdi
 5683              	.LEHB68:
 5684 3115 E8000000 		call	_ZN10vector_varC1Ev
 5684      00
 5685              	.LEHE68:
 5686              		.loc 9 439 0 discriminator 13
 5687 311a 488D85B0 		leaq	-3152(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 181


 5687      F3FFFF
 5688 3121 4889C7   		movq	%rax, %rdi
 5689              	.LEHB69:
 5690 3124 E8000000 		call	_ZN10vector_varC1Ev
 5690      00
 5691              	.LEHE69:
 440:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 5692              		.loc 9 440 0 is_stmt 1
 5693 3129 488D85D0 		leaq	-3120(%rbp), %rax
 5693      F3FFFF
 5694 3130 4889C7   		movq	%rax, %rdi
 5695              	.LEHB70:
 5696 3133 E8000000 		call	_ZN10vector_varC1Ev
 5696      00
 5697              	.LEHE70:
 441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 5698              		.loc 9 441 0
 5699 3138 488D85F0 		leaq	-3088(%rbp), %rax
 5699      F3FFFF
 5700 313f 4889C7   		movq	%rax, %rdi
 5701              	.LEHB71:
 5702 3142 E8000000 		call	_ZN10vector_varC1Ev
 5702      00
 5703              	.LEHE71:
 5704              		.loc 9 441 0 is_stmt 0 discriminator 1
 5705 3147 488D8510 		leaq	-3056(%rbp), %rax
 5705      F4FFFF
 5706 314e 4889C7   		movq	%rax, %rdi
 5707              	.LEHB72:
 5708 3151 E8000000 		call	_ZN10vector_varC1Ev
 5708      00
 5709              	.LEHE72:
 5710              		.loc 9 441 0 discriminator 3
 5711 3156 488D8530 		leaq	-3024(%rbp), %rax
 5711      F4FFFF
 5712 315d 4889C7   		movq	%rax, %rdi
 5713              	.LEHB73:
 5714 3160 E8000000 		call	_ZN10vector_varC1Ev
 5714      00
 5715              	.LEHE73:
 442:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 443:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_normal;
 5716              		.loc 9 443 0 is_stmt 1
 5717 3165 488D8550 		leaq	-2992(%rbp), %rax
 5717      F4FFFF
 5718 316c 4889C7   		movq	%rax, %rdi
 5719              	.LEHB74:
 5720 316f E8000000 		call	_ZN10vector_varC1Ev
 5720      00
 5721              	.LEHE74:
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
 5722              		.loc 9 444 0
 5723 3174 4C8DA5B0 		leaq	-848(%rbp), %r12
 5723      FCFFFF
 5724 317b BB080000 		movl	$8, %ebx
 5724      00
 5725 3180 4D89E5   		movq	%r12, %r13
GAS LISTING /tmp/cc2K2nX4.s 			page 182


 5726              	.L474:
 5727              		.loc 9 444 0 is_stmt 0 discriminator 5
 5728 3183 4883FBFF 		cmpq	$-1, %rbx
 5729 3187 7412     		je	.L473
 5730              		.loc 9 444 0 discriminator 3
 5731 3189 4C89EF   		movq	%r13, %rdi
 5732              	.LEHB75:
 5733 318c E8000000 		call	_ZN10vector_varC1Ev
 5733      00
 5734              	.LEHE75:
 5735              		.loc 9 444 0 discriminator 4
 5736 3191 4983C520 		addq	$32, %r13
 5737 3195 4883EB01 		subq	$1, %rbx
 5738 3199 EBE8     		jmp	.L474
 5739              	.L473:
 445:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 5740              		.loc 9 445 0 is_stmt 1 discriminator 2
 5741 319b 488D85B0 		leaq	-3408(%rbp), %rax
 5741      F2FFFF
 5742 31a2 4889C7   		movq	%rax, %rdi
 5743 31a5 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEC1Ev
 5743      00
 446:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 447:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // vector_var flux_e_alpha;
 448:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     residuals convergence_residual;
 5744              		.loc 9 448 0 discriminator 2
 5745 31aa 488D8530 		leaq	-2256(%rbp), %rax
 5745      F7FFFF
 5746 31b1 4889C7   		movq	%rax, %rdi
 5747              	.LEHB76:
 5748 31b4 E8000000 		call	_ZN9residualsC1Ev
 5748      00
 5749              	.LEHE76:
 449:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 5750              		.loc 9 449 0
 5751 31b9 488D85E0 		leaq	-2848(%rbp), %rax
 5751      F4FFFF
 5752 31c0 4889C7   		movq	%rax, %rdi
 5753              	.LEHB77:
 5754 31c3 E8000000 		call	_ZN8flux_varC1Ev
 5754      00
 5755              	.LEHE77:
 5756              		.loc 9 449 0 is_stmt 0 discriminator 1
 5757 31c8 488D8510 		leaq	-2800(%rbp), %rax
 5757      F5FFFF
 5758 31cf 4889C7   		movq	%rax, %rdi
 5759              	.LEHB78:
 5760 31d2 E8000000 		call	_ZN8flux_varC1Ev
 5760      00
 5761              	.LEHE78:
 450:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 5762              		.loc 9 450 0 is_stmt 1
 5763 31d7 488D8540 		leaq	-2752(%rbp), %rax
 5763      F5FFFF
 5764 31de 4889C7   		movq	%rax, %rdi
 5765              	.LEHB79:
 5766 31e1 E8000000 		call	_ZN8flux_varC1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 183


 5766      00
 5767              	.LEHE79:
 451:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var debug [4] ,debug_flux[4],arti_debug [4];
 5768              		.loc 9 452 0
 5769 31e6 4C8DA590 		leaq	-1648(%rbp), %r12
 5769      F9FFFF
 5770 31ed BB030000 		movl	$3, %ebx
 5770      00
 5771 31f2 4D89E5   		movq	%r12, %r13
 5772              	.L476:
 5773              		.loc 9 452 0 is_stmt 0 discriminator 5
 5774 31f5 4883FBFF 		cmpq	$-1, %rbx
 5775 31f9 7412     		je	.L475
 5776              		.loc 9 452 0 discriminator 3
 5777 31fb 4C89EF   		movq	%r13, %rdi
 5778              	.LEHB80:
 5779 31fe E8000000 		call	_ZN8flux_varC1Ev
 5779      00
 5780              	.LEHE80:
 5781              		.loc 9 452 0 discriminator 4
 5782 3203 4983C528 		addq	$40, %r13
 5783 3207 4883EB01 		subq	$1, %rbx
 5784 320b EBE8     		jmp	.L476
 5785              	.L475:
 5786              		.loc 9 452 0 discriminator 2
 5787 320d 4C8DA530 		leaq	-1488(%rbp), %r12
 5787      FAFFFF
 5788 3214 BB030000 		movl	$3, %ebx
 5788      00
 5789 3219 4D89E5   		movq	%r12, %r13
 5790              	.L478:
 5791              		.loc 9 452 0 discriminator 10
 5792 321c 4883FBFF 		cmpq	$-1, %rbx
 5793 3220 7412     		je	.L477
 5794              		.loc 9 452 0 discriminator 8
 5795 3222 4C89EF   		movq	%r13, %rdi
 5796              	.LEHB81:
 5797 3225 E8000000 		call	_ZN8flux_varC1Ev
 5797      00
 5798              	.LEHE81:
 5799              		.loc 9 452 0 discriminator 9
 5800 322a 4983C528 		addq	$40, %r13
 5801 322e 4883EB01 		subq	$1, %rbx
 5802 3232 EBE8     		jmp	.L478
 5803              	.L477:
 5804              		.loc 9 452 0 discriminator 7
 5805 3234 4C8DA5D0 		leaq	-1328(%rbp), %r12
 5805      FAFFFF
 5806 323b BB030000 		movl	$3, %ebx
 5806      00
 5807 3240 4D89E5   		movq	%r12, %r13
 5808              	.L480:
 5809              		.loc 9 452 0 discriminator 15
 5810 3243 4883FBFF 		cmpq	$-1, %rbx
 5811 3247 7412     		je	.L479
 5812              		.loc 9 452 0 discriminator 13
GAS LISTING /tmp/cc2K2nX4.s 			page 184


 5813 3249 4C89EF   		movq	%r13, %rdi
 5814              	.LEHB82:
 5815 324c E8000000 		call	_ZN8flux_varC1Ev
 5815      00
 5816              	.LEHE82:
 5817              		.loc 9 452 0 discriminator 14
 5818 3251 4983C528 		addq	$40, %r13
 5819 3255 4883EB01 		subq	$1, %rbx
 5820 3259 EBE8     		jmp	.L480
 5821              	.L479:
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 5822              		.loc 9 453 0 is_stmt 1 discriminator 12
 5823 325b 4C8DA570 		leaq	-1168(%rbp), %r12
 5823      FBFFFF
 5824 3262 BB030000 		movl	$3, %ebx
 5824      00
 5825 3267 4D89E5   		movq	%r12, %r13
 5826              	.L482:
 5827              		.loc 9 453 0 is_stmt 0 discriminator 5
 5828 326a 4883FBFF 		cmpq	$-1, %rbx
 5829 326e 7412     		je	.L481
 5830              		.loc 9 453 0 discriminator 3
 5831 3270 4C89EF   		movq	%r13, %rdi
 5832              	.LEHB83:
 5833 3273 E8000000 		call	_ZN8flux_varC1Ev
 5833      00
 5834              	.LEHE83:
 5835              		.loc 9 453 0 discriminator 4
 5836 3278 4983C528 		addq	$40, %r13
 5837 327c 4883EB01 		subq	$1, %rbx
 5838 3280 EBE8     		jmp	.L482
 5839              	.L481:
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 5840              		.loc 9 454 0 is_stmt 1 discriminator 2
 5841 3282 4C8DA510 		leaq	-1008(%rbp), %r12
 5841      FCFFFF
 5842 3289 BB030000 		movl	$3, %ebx
 5842      00
 5843 328e 4D89E5   		movq	%r12, %r13
 5844              	.L484:
 5845              		.loc 9 454 0 is_stmt 0 discriminator 5
 5846 3291 4883FBFF 		cmpq	$-1, %rbx
 5847 3295 7412     		je	.L483
 5848              		.loc 9 454 0 discriminator 3
 5849 3297 4C89EF   		movq	%r13, %rdi
 5850              	.LEHB84:
 5851 329a E8000000 		call	_ZN8flux_varC1Ev
 5851      00
 5852              	.LEHE84:
 5853              		.loc 9 454 0 discriminator 4
 5854 329f 4983C528 		addq	$40, %r13
 5855 32a3 4883EB01 		subq	$1, %rbx
 5856 32a7 EBE8     		jmp	.L484
 5857              	.L483:
 455:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 456:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc_var bc;
 457:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 185


 458:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int neighbour;
 459:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int bc_node;
 460:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int timesteps;
 461:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //calculate timesteps
 462:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 463:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 464:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 465:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 466:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     ///Initialisations
 467:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 468:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     dt = 1.0; // timestepping for streaming // non-dim equals 1
 5858              		.loc 9 468 0 is_stmt 1 discriminator 2
 5859 32a9 488B85F8 		movq	-3592(%rbp), %rax
 5859      F1FFFF
 5860 32b0 F20F1005 		movsd	.LC4(%rip), %xmm0
 5860      00000000 
 5861 32b8 F20F1140 		movsd	%xmm0, 8(%rax)
 5861      08
 469:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     c = 1; // assume lattice spacing is equal to streaming timestep
 5862              		.loc 9 469 0 discriminator 2
 5863 32bd 488B85F8 		movq	-3592(%rbp), %rax
 5863      F1FFFF
 5864 32c4 F20F1005 		movsd	.LC4(%rip), %xmm0
 5864      00000000 
 5865 32cc F20F1140 		movsd	%xmm0, 32(%rax)
 5865      20
 470:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     cs = c/sqrt(3);
 5866              		.loc 9 470 0 discriminator 2
 5867 32d1 488B85F8 		movq	-3592(%rbp), %rax
 5867      F1FFFF
 5868 32d8 F20F1068 		movsd	32(%rax), %xmm5
 5868      20
 5869 32dd F20F11AD 		movsd	%xmm5, -3672(%rbp)
 5869      A8F1FFFF 
 5870 32e5 BF030000 		movl	$3, %edi
 5870      00
 5871 32ea E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 5871      00
 5872 32ef F20F10AD 		movsd	-3672(%rbp), %xmm5
 5872      A8F1FFFF 
 5873 32f7 F20F5EE8 		divsd	%xmm0, %xmm5
 5874 32fb 660F28C5 		movapd	%xmm5, %xmm0
 5875 32ff 488B85F8 		movq	-3592(%rbp), %rax
 5875      F1FFFF
 5876 3306 F20F1140 		movsd	%xmm0, 40(%rax)
 5876      28
 471:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     tau = globals.tau;
 5877              		.loc 9 471 0 discriminator 2
 5878 330b 488B85D0 		movq	-3632(%rbp), %rax
 5878      F1FFFF
 5879 3312 F20F1040 		movsd	96(%rax), %xmm0
 5879      60
 5880 3317 488B85F8 		movq	-3592(%rbp), %rax
 5880      F1FFFF
 5881 331e F20F1140 		movsd	%xmm0, 16(%rax)
 5881      10
 472:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp_soln.clone(soln);
GAS LISTING /tmp/cc2K2nX4.s 			page 186


 5882              		.loc 9 472 0 discriminator 2
 5883 3323 488B95E8 		movq	-3608(%rbp), %rdx
 5883      F1FFFF
 5884 332a 488D85A0 		leaq	-2656(%rbp), %rax
 5884      F5FFFF
 5885 3331 4889D6   		movq	%rdx, %rsi
 5886 3334 4889C7   		movq	%rax, %rdi
 5887              	.LEHB85:
 5888 3337 E8000000 		call	_ZN8Solution5cloneERS_
 5888      00
 473:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln_t0.clone(soln);
 5889              		.loc 9 473 0
 5890 333c 488B95E8 		movq	-3608(%rbp), %rdx
 5890      F1FFFF
 5891 3343 488D85F0 		leaq	-2576(%rbp), %rax
 5891      F5FFFF
 5892 334a 4889D6   		movq	%rdx, %rsi
 5893 334d 4889C7   		movq	%rax, %rdi
 5894 3350 E8000000 		call	_ZN8Solution5cloneERS_
 5894      00
 474:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     local_tolerance = globals.tolerance;
 5895              		.loc 9 474 0
 5896 3355 488B85D0 		movq	-3632(%rbp), %rax
 5896      F1FFFF
 5897 335c F20F1040 		movsd	40(%rax), %xmm0
 5897      28
 5898 3361 F20F1185 		movsd	%xmm0, -3504(%rbp)
 5898      50F2FFFF 
 475:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     timesteps = ceil( globals.simulation_length/delta_t);
 5899              		.loc 9 475 0
 5900 3369 488B85D0 		movq	-3632(%rbp), %rax
 5900      F1FFFF
 5901 3370 F20F1040 		movsd	56(%rax), %xmm0
 5901      38
 5902 3375 F20F5E85 		divsd	-3512(%rbp), %xmm0
 5902      48F2FFFF 
 5903 337d E8000000 		call	ceil
 5903      00
 5904 3382 F20F2CC0 		cvttsd2si	%xmm0, %eax
 5905 3386 89852CF2 		movl	%eax, -3540(%rbp)
 5905      FFFF
 476:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     output_dir = globals.output_file +"/error.txt";
 5906              		.loc 9 476 0
 5907 338c 488B85D0 		movq	-3632(%rbp), %rax
 5907      F1FFFF
 5908 3393 488D88D8 		leaq	216(%rax), %rcx
 5908      000000
 5909 339a 488D85E0 		leaq	-2080(%rbp), %rax
 5909      F7FFFF
 5910 33a1 BA000000 		movl	$.LC5, %edx
 5910      00
 5911 33a6 4889CE   		movq	%rcx, %rsi
 5912 33a9 4889C7   		movq	%rax, %rdi
 5913 33ac E8000000 		call	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 5913      00
 5914              	.LEHE85:
 5915              		.loc 9 476 0 is_stmt 0 discriminator 1
GAS LISTING /tmp/cc2K2nX4.s 			page 187


 5916 33b1 488D95E0 		leaq	-2080(%rbp), %rdx
 5916      F7FFFF
 5917 33b8 488D85C0 		leaq	-2112(%rbp), %rax
 5917      F7FFFF
 5918 33bf 4889D6   		movq	%rdx, %rsi
 5919 33c2 4889C7   		movq	%rax, %rdi
 5920              	.LEHB86:
 5921 33c5 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
 5921      00
 5922              	.LEHE86:
 5923              		.loc 9 476 0 discriminator 3
 5924 33ca 488D85E0 		leaq	-2080(%rbp), %rax
 5924      F7FFFF
 5925 33d1 4889C7   		movq	%rax, %rdi
 5926 33d4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 5926      00
 477:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****    // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::out);
 478:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     error_output.open(output_dir.c_str(), ios::out);
 5927              		.loc 9 478 0 is_stmt 1 discriminator 3
 5928 33d9 488D85C0 		leaq	-2112(%rbp), %rax
 5928      F7FFFF
 5929 33e0 4889C7   		movq	%rax, %rdi
 5930 33e3 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
 5930      00
 5931 33e8 4889C1   		movq	%rax, %rcx
 5932 33eb 488D85D0 		leaq	-560(%rbp), %rax
 5932      FDFFFF
 5933 33f2 BA100000 		movl	$16, %edx
 5933      00
 5934 33f7 4889CE   		movq	%rcx, %rsi
 5935 33fa 4889C7   		movq	%rax, %rdi
 5936              	.LEHB87:
 5937 33fd E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode
 5937      00
 479:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     populate_e_alpha(e_alpha,lattice_weight,c,globals.PI,9);
 5938              		.loc 9 479 0
 5939 3402 488B85D0 		movq	-3632(%rbp), %rax
 5939      F1FFFF
 5940 3409 F20F1040 		movsd	32(%rax), %xmm0
 5940      20
 5941 340e 488B85F8 		movq	-3592(%rbp), %rax
 5941      F1FFFF
 5942 3415 488B7820 		movq	32(%rax), %rdi
 5943 3419 488D95F0 		leaq	-1808(%rbp), %rdx
 5943      F8FFFF
 5944 3420 488DB5B0 		leaq	-3408(%rbp), %rsi
 5944      F2FFFF
 5945 3427 488B85F8 		movq	-3592(%rbp), %rax
 5945      F1FFFF
 5946 342e B9090000 		movl	$9, %ecx
 5946      00
 5947 3433 660F28C8 		movapd	%xmm0, %xmm1
 5948 3437 4889BDA8 		movq	%rdi, -3672(%rbp)
 5948      F1FFFF
 5949 343e F20F1085 		movsd	-3672(%rbp), %xmm0
 5949      A8F1FFFF 
 5950 3446 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 188


 5951 3449 E8000000 		call	_ZN6Solver16populate_e_alphaERSt6vectorI10vector_varSaIS1_EEPdddi
 5951      00
 5952              	.LBB34:
 480:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 481:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // loop in time
 482:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     for (int t= 0; t < timesteps; t++){
 5953              		.loc 9 482 0
 5954 344e C7850CF2 		movl	$0, -3572(%rbp)
 5954      FFFF0000 
 5954      0000
 5955              	.L526:
 5956              		.loc 9 482 0 is_stmt 0 discriminator 1
 5957 3458 8B850CF2 		movl	-3572(%rbp), %eax
 5957      FFFF
 5958 345e 3B852CF2 		cmpl	-3540(%rbp), %eax
 5958      FFFF
 5959 3464 0F8D971F 		jge	.L485
 5959      0000
 5960              	.LBB35:
 483:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                        // soln is the solution at the start of every
 484:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // RK step.(rk = n) Temp_soln holds the values at end of
 485:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // step.(rk = n+1)
 486:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         soln_t0.clone(soln);    // soln_t0 holds solution at start of time step
 5961              		.loc 9 486 0 is_stmt 1
 5962 346a 488B95E8 		movq	-3608(%rbp), %rdx
 5962      F1FFFF
 5963 3471 488D85F0 		leaq	-2576(%rbp), %rax
 5963      F5FFFF
 5964 3478 4889D6   		movq	%rdx, %rsi
 5965 347b 4889C7   		movq	%rax, %rdi
 5966 347e E8000000 		call	_ZN8Solution5cloneERS_
 5966      00
 487:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         temp_soln.clone(soln);                        // t= 0, rk = 0
 5967              		.loc 9 487 0
 5968 3483 488B95E8 		movq	-3608(%rbp), %rdx
 5968      F1FFFF
 5969 348a 488D85A0 		leaq	-2656(%rbp), %rax
 5969      F5FFFF
 5970 3491 4889D6   		movq	%rdx, %rsi
 5971 3494 4889C7   		movq	%rax, %rdi
 5972 3497 E8000000 		call	_ZN8Solution5cloneERS_
 5972      00
 488:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 489:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         convergence_residual.reset();
 5973              		.loc 9 489 0
 5974 349c 488D8530 		leaq	-2256(%rbp), %rax
 5974      F7FFFF
 5975 34a3 4889C7   		movq	%rax, %rdi
 5976 34a6 E8000000 		call	_ZN9residuals5resetEv
 5976      00
 5977              	.LBB36:
 490:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 491:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for( int rk = 0; rk < rk4.timesteps; rk++){
 5978              		.loc 9 491 0
 5979 34ab C78510F2 		movl	$0, -3568(%rbp)
 5979      FFFF0000 
 5979      0000
GAS LISTING /tmp/cc2K2nX4.s 			page 189


 5980              	.L514:
 5981              		.loc 9 491 0 is_stmt 0 discriminator 1
 5982 34b5 8B8588F9 		movl	-1656(%rbp), %eax
 5982      FFFF
 5983 34bb 3B8510F2 		cmpl	-3568(%rbp), %eax
 5983      FFFF
 5984 34c1 0F8EFE1A 		jle	.L486
 5984      0000
 5985              	.LBB37:
 492:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 493:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 494:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 495:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 496:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //update temp_soln boundary conditions
 497:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              temp_soln.update_bcs(bcs,Mesh,domain);
 5986              		.loc 9 497 0 is_stmt 1
 5987 34c7 488B8DC8 		movq	-3640(%rbp), %rcx
 5987      F1FFFF
 5988 34ce 488B95F0 		movq	-3600(%rbp), %rdx
 5988      F1FFFF
 5989 34d5 488BB5E0 		movq	-3616(%rbp), %rsi
 5989      F1FFFF
 5990 34dc 488D85A0 		leaq	-2656(%rbp), %rax
 5990      F5FFFF
 5991 34e3 4889C7   		movq	%rax, %rdi
 5992 34e6 E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 5992      00
 498:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 499:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              residual_worker.Initialise(); //set to zeros
 5993              		.loc 9 499 0
 5994 34eb 488D8540 		leaq	-2496(%rbp), %rax
 5994      F6FFFF
 5995 34f2 4889C7   		movq	%rax, %rdi
 5996 34f5 E8000000 		call	_ZN8Solution10InitialiseEv
 5996      00
 5997              	.LEHE87:
 5998              	.LBB38:
 500:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              // loop through each node
 501:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****               for (int i=0 ; i < Mesh.get_total_cells() ; i ++) {
 5999              		.loc 9 501 0
 6000 34fa C78514F2 		movl	$0, -3564(%rbp)
 6000      FFFF0000 
 6000      0000
 6001              	.L510:
 6002              		.loc 9 501 0 is_stmt 0 discriminator 1
 6003 3504 488B85F0 		movq	-3600(%rbp), %rax
 6003      F1FFFF
 6004 350b 4889C7   		movq	%rax, %rdi
 6005 350e E8000000 		call	_ZN4Mesh15get_total_cellsEv
 6005      00
 6006 3513 3B8514F2 		cmpl	-3564(%rbp), %eax
 6006      FFFF
 6007 3519 0F9FC0   		setg	%al
 6008 351c 84C0     		testb	%al, %al
 6009 351e 0F840317 		je	.L487
 6009      0000
 6010              	.LBB39:
GAS LISTING /tmp/cc2K2nX4.s 			page 190


 6011              	.LBB40:
 502:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 503:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 504:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // skip if a boundary node
 505:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( bcs.get_bc_include(i)){
 6012              		.loc 9 505 0 is_stmt 1
 6013 3524 8B9514F2 		movl	-3564(%rbp), %edx
 6013      FFFF
 6014 352a 488B85E0 		movq	-3616(%rbp), %rax
 6014      F1FFFF
 6015 3531 89D6     		movl	%edx, %esi
 6016 3533 4889C7   		movq	%rax, %rdi
 6017 3536 E8000000 		call	_ZN19Boundary_Conditions14get_bc_includeEi
 6017      00
 6018 353b 84C0     		testb	%al, %al
 6019 353d 0F84D816 		je	.L488
 6019      0000
 6020              	.LBB41:
 506:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 507:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // volume initialisers
 508:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     interface_area = 0.0;
 6021              		.loc 9 508 0
 6022 3543 660FEFC0 		pxor	%xmm0, %xmm0
 6023 3547 F20F1185 		movsd	%xmm0, -3528(%rbp)
 6023      38F2FFFF 
 509:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 510:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 511:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.x = Mesh.get_centroid_x(i);
 6024              		.loc 9 511 0
 6025 354f 8B9514F2 		movl	-3564(%rbp), %edx
 6025      FFFF
 6026 3555 488B85F0 		movq	-3600(%rbp), %rax
 6026      F1FFFF
 6027 355c 89D6     		movl	%edx, %esi
 6028 355e 4889C7   		movq	%rax, %rdi
 6029 3561 E8000000 		call	_ZN4Mesh14get_centroid_xEi
 6029      00
 6030 3566 66480F7E 		movq	%xmm0, %rax
 6030      C0
 6031 356b 488985D8 		movq	%rax, -3368(%rbp)
 6031      F2FFFF
 512:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.y = Mesh.get_centroid_y(i);
 6032              		.loc 9 512 0
 6033 3572 8B9514F2 		movl	-3564(%rbp), %edx
 6033      FFFF
 6034 3578 488B85F0 		movq	-3600(%rbp), %rax
 6034      F1FFFF
 6035 357f 89D6     		movl	%edx, %esi
 6036 3581 4889C7   		movq	%rax, %rdi
 6037 3584 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 6037      00
 6038 3589 66480F7E 		movq	%xmm0, %rax
 6038      C0
 6039 358e 488985E0 		movq	%rax, -3360(%rbp)
 6039      F2FFFF
 513:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.z = Mesh.get_centroid_z(i);
 6040              		.loc 9 513 0
GAS LISTING /tmp/cc2K2nX4.s 			page 191


 6041 3595 8B9514F2 		movl	-3564(%rbp), %edx
 6041      FFFF
 6042 359b 488B85F0 		movq	-3600(%rbp), %rax
 6042      F1FFFF
 6043 35a2 89D6     		movl	%edx, %esi
 6044 35a4 4889C7   		movq	%rax, %rdi
 6045 35a7 E8000000 		call	_ZN4Mesh14get_centroid_zEi
 6045      00
 6046 35ac 66480F7E 		movq	%xmm0, %rax
 6046      C0
 6047 35b1 488985E8 		movq	%rax, -3352(%rbp)
 6047      F2FFFF
 514:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // add in reset function
 515:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.P =0.0;
 6048              		.loc 9 515 0
 6049 35b8 660FEFC0 		pxor	%xmm0, %xmm0
 6050 35bc F20F1185 		movsd	%xmm0, -2744(%rbp)
 6050      48F5FFFF 
 516:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_x =0.0;
 6051              		.loc 9 516 0
 6052 35c4 660FEFC0 		pxor	%xmm0, %xmm0
 6053 35c8 F20F1185 		movsd	%xmm0, -2736(%rbp)
 6053      50F5FFFF 
 517:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_y = 0.0;
 6054              		.loc 9 517 0
 6055 35d0 660FEFC0 		pxor	%xmm0, %xmm0
 6056 35d4 F20F1185 		movsd	%xmm0, -2728(%rbp)
 6056      58F5FFFF 
 518:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_z = 0.0;
 6057              		.loc 9 518 0
 6058 35dc 660FEFC0 		pxor	%xmm0, %xmm0
 6059 35e0 F20F1185 		movsd	%xmm0, -2720(%rbp)
 6059      60F5FFFF 
 6060              	.LBB42:
 519:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 520:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     for (int j= 2; j <4; j++ ){
 6061              		.loc 9 520 0
 6062 35e8 C78518F2 		movl	$2, -3560(%rbp)
 6062      FFFF0200 
 6062      0000
 6063              	.L509:
 6064              		.loc 9 520 0 is_stmt 0 discriminator 1
 6065 35f2 83BD18F2 		cmpl	$3, -3560(%rbp)
 6065      FFFF03
 6066 35f9 0F8F1C16 		jg	.L488
 6066      0000
 6067              	.LBB43:
 521:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 6068              		.loc 9 521 0 is_stmt 1
 6069 35ff C68570F5 		movb	$0, -2704(%rbp)
 6069      FFFF00
 522:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_interface_variables( j, i,interface_node, neighbour,
 523:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  interface_area,cell_normal, bcs, bc, Mesh,
 524:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  cell_2);
 6070              		.loc 9 524 0
 6071 3606 4C8D8D38 		leaq	-3528(%rbp), %r9
 6071      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 192


 6072 360d 4C8D8508 		leaq	-3576(%rbp), %r8
 6072      F2FFFF
 6073 3614 488D8D10 		leaq	-3312(%rbp), %rcx
 6073      F3FFFF
 6074 361b 8B9514F2 		movl	-3564(%rbp), %edx
 6074      FFFF
 6075 3621 8BB518F2 		movl	-3560(%rbp), %esi
 6075      FFFF
 6076 3627 488B85F8 		movq	-3592(%rbp), %rax
 6076      F1FFFF
 6077 362e 4883EC08 		subq	$8, %rsp
 6078 3632 488DBDF0 		leaq	-3344(%rbp), %rdi
 6078      F2FFFF
 6079 3639 57       		pushq	%rdi
 6080 363a FFB5F0F1 		pushq	-3600(%rbp)
 6080      FFFF
 6081 3640 488DBD70 		leaq	-2704(%rbp), %rdi
 6081      F5FFFF
 6082 3647 57       		pushq	%rdi
 6083 3648 FFB5E0F1 		pushq	-3616(%rbp)
 6083      FFFF
 6084 364e 488DBD50 		leaq	-2992(%rbp), %rdi
 6084      F4FFFF
 6085 3655 57       		pushq	%rdi
 6086 3656 4889C7   		movq	%rax, %rdi
 6087 3659 E8000000 		call	_ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_varE
 6087      00
 6088 365e 4883C430 		addq	$48, %rsp
 525:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 526:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_interface_initialiser( rho_interface, rho_u_interface, x_flux,y_flux);
 6089              		.loc 9 526 0
 6090 3662 488DBD10 		leaq	-2800(%rbp), %rdi
 6090      F5FFFF
 6091 3669 488D8DE0 		leaq	-2848(%rbp), %rcx
 6091      F4FFFF
 6092 3670 488D9510 		leaq	-3056(%rbp), %rdx
 6092      F4FFFF
 6093 3677 488DB530 		leaq	-3536(%rbp), %rsi
 6093      F2FFFF
 6094 367e 488B85F8 		movq	-3592(%rbp), %rax
 6094      F1FFFF
 6095 3685 4989F8   		movq	%rdi, %r8
 6096 3688 4889C7   		movq	%rax, %rdi
 6097 368b E8000000 		call	_ZN6Solver26cell_interface_initialiserERdR10vector_varR8flux_varS4_
 6097      00
 527:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // use soln for neighbour values as these refelct real boundary conditions
 528:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // temp_soln should update continuously through RK stepping
 529:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 530:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 531:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 532:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 533:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_rho.Get_Gradient(temp_soln.get_rho(i), temp_soln.get_rho(neighbour),c
 6098              		.loc 9 533 0
 6099 3690 488D95F0 		leaq	-3344(%rbp), %rdx
 6099      F2FFFF
 6100 3697 488D8590 		leaq	-2928(%rbp), %rax
 6100      F4FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 193


 6101 369e 4889D6   		movq	%rdx, %rsi
 6102 36a1 4889C7   		movq	%rax, %rdi
 6103 36a4 E8000000 		call	_ZN10vector_varC1ERKS_
 6103      00
 6104 36a9 488D95D0 		leaq	-3376(%rbp), %rdx
 6104      F2FFFF
 6105 36b0 488D8570 		leaq	-2960(%rbp), %rax
 6105      F4FFFF
 6106 36b7 4889D6   		movq	%rdx, %rsi
 6107 36ba 4889C7   		movq	%rax, %rdi
 6108 36bd E8000000 		call	_ZN10vector_varC1ERKS_
 6108      00
 6109 36c2 8B9508F2 		movl	-3576(%rbp), %edx
 6109      FFFF
 6110 36c8 488D85A0 		leaq	-2656(%rbp), %rax
 6110      F5FFFF
 6111 36cf 89D6     		movl	%edx, %esi
 6112 36d1 4889C7   		movq	%rax, %rdi
 6113 36d4 E8000000 		call	_ZN8Solution7get_rhoEi
 6113      00
 6114 36d9 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6114      A8F1FFFF 
 6115 36e1 8B9514F2 		movl	-3564(%rbp), %edx
 6115      FFFF
 6116 36e7 488D85A0 		leaq	-2656(%rbp), %rax
 6116      F5FFFF
 6117 36ee 89D6     		movl	%edx, %esi
 6118 36f0 4889C7   		movq	%rax, %rdi
 6119 36f3 E8000000 		call	_ZN8Solution7get_rhoEi
 6119      00
 6120 36f8 488D9590 		leaq	-2928(%rbp), %rdx
 6120      F4FFFF
 6121 36ff 488D8D70 		leaq	-2960(%rbp), %rcx
 6121      F4FFFF
 6122 3706 488D85B0 		leaq	-3152(%rbp), %rax
 6122      F3FFFF
 6123 370d 4889CE   		movq	%rcx, %rsi
 6124 3710 F20F108D 		movsd	-3672(%rbp), %xmm1
 6124      A8F1FFFF 
 6125 3718 4889C7   		movq	%rax, %rdi
 6126              	.LEHB88:
 6127 371b E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 6127      00
 6128              	.LEHE88:
 6129              		.loc 9 533 0 is_stmt 0 discriminator 2
 6130 3720 488D8570 		leaq	-2960(%rbp), %rax
 6130      F4FFFF
 6131 3727 4889C7   		movq	%rax, %rdi
 6132 372a E8000000 		call	_ZN10vector_varD1Ev
 6132      00
 6133 372f 488D8590 		leaq	-2928(%rbp), %rax
 6133      F4FFFF
 6134 3736 4889C7   		movq	%rax, %rdi
 6135 3739 E8000000 		call	_ZN10vector_varD1Ev
 6135      00
 534:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), temp_soln.get_u(neighbour),cell_1,
 6136              		.loc 9 534 0 is_stmt 1 discriminator 2
GAS LISTING /tmp/cc2K2nX4.s 			page 194


 6137 373e 488D95F0 		leaq	-3344(%rbp), %rdx
 6137      F2FFFF
 6138 3745 488D8590 		leaq	-2928(%rbp), %rax
 6138      F4FFFF
 6139 374c 4889D6   		movq	%rdx, %rsi
 6140 374f 4889C7   		movq	%rax, %rdi
 6141 3752 E8000000 		call	_ZN10vector_varC1ERKS_
 6141      00
 6142 3757 488D95D0 		leaq	-3376(%rbp), %rdx
 6142      F2FFFF
 6143 375e 488D8570 		leaq	-2960(%rbp), %rax
 6143      F4FFFF
 6144 3765 4889D6   		movq	%rdx, %rsi
 6145 3768 4889C7   		movq	%rax, %rdi
 6146 376b E8000000 		call	_ZN10vector_varC1ERKS_
 6146      00
 6147 3770 8B9508F2 		movl	-3576(%rbp), %edx
 6147      FFFF
 6148 3776 488D85A0 		leaq	-2656(%rbp), %rax
 6148      F5FFFF
 6149 377d 89D6     		movl	%edx, %esi
 6150 377f 4889C7   		movq	%rax, %rdi
 6151 3782 E8000000 		call	_ZN8Solution5get_uEi
 6151      00
 6152 3787 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6152      A8F1FFFF 
 6153 378f 8B9514F2 		movl	-3564(%rbp), %edx
 6153      FFFF
 6154 3795 488D85A0 		leaq	-2656(%rbp), %rax
 6154      F5FFFF
 6155 379c 89D6     		movl	%edx, %esi
 6156 379e 4889C7   		movq	%rax, %rdi
 6157 37a1 E8000000 		call	_ZN8Solution5get_uEi
 6157      00
 6158 37a6 488D9590 		leaq	-2928(%rbp), %rdx
 6158      F4FFFF
 6159 37ad 488D8D70 		leaq	-2960(%rbp), %rcx
 6159      F4FFFF
 6160 37b4 488D8550 		leaq	-3248(%rbp), %rax
 6160      F3FFFF
 6161 37bb 4889CE   		movq	%rcx, %rsi
 6162 37be F20F108D 		movsd	-3672(%rbp), %xmm1
 6162      A8F1FFFF 
 6163 37c6 4889C7   		movq	%rax, %rdi
 6164              	.LEHB89:
 6165 37c9 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 6165      00
 6166              	.LEHE89:
 6167 37ce 488D8570 		leaq	-2960(%rbp), %rax
 6167      F4FFFF
 6168 37d5 4889C7   		movq	%rax, %rdi
 6169 37d8 E8000000 		call	_ZN10vector_varD1Ev
 6169      00
 6170 37dd 488D8590 		leaq	-2928(%rbp), %rax
 6170      F4FFFF
 6171 37e4 4889C7   		movq	%rax, %rdi
 6172 37e7 E8000000 		call	_ZN10vector_varD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 195


 6172      00
 535:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), temp_soln.get_v(neighbour),cell_1,
 6173              		.loc 9 535 0 discriminator 2
 6174 37ec 488D95F0 		leaq	-3344(%rbp), %rdx
 6174      F2FFFF
 6175 37f3 488D8590 		leaq	-2928(%rbp), %rax
 6175      F4FFFF
 6176 37fa 4889D6   		movq	%rdx, %rsi
 6177 37fd 4889C7   		movq	%rax, %rdi
 6178 3800 E8000000 		call	_ZN10vector_varC1ERKS_
 6178      00
 6179 3805 488D95D0 		leaq	-3376(%rbp), %rdx
 6179      F2FFFF
 6180 380c 488D8570 		leaq	-2960(%rbp), %rax
 6180      F4FFFF
 6181 3813 4889D6   		movq	%rdx, %rsi
 6182 3816 4889C7   		movq	%rax, %rdi
 6183 3819 E8000000 		call	_ZN10vector_varC1ERKS_
 6183      00
 6184 381e 8B9508F2 		movl	-3576(%rbp), %edx
 6184      FFFF
 6185 3824 488D85A0 		leaq	-2656(%rbp), %rax
 6185      F5FFFF
 6186 382b 89D6     		movl	%edx, %esi
 6187 382d 4889C7   		movq	%rax, %rdi
 6188 3830 E8000000 		call	_ZN8Solution5get_vEi
 6188      00
 6189 3835 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6189      A8F1FFFF 
 6190 383d 8B9514F2 		movl	-3564(%rbp), %edx
 6190      FFFF
 6191 3843 488D85A0 		leaq	-2656(%rbp), %rax
 6191      F5FFFF
 6192 384a 89D6     		movl	%edx, %esi
 6193 384c 4889C7   		movq	%rax, %rdi
 6194 384f E8000000 		call	_ZN8Solution5get_vEi
 6194      00
 6195 3854 488D9590 		leaq	-2928(%rbp), %rdx
 6195      F4FFFF
 6196 385b 488D8D70 		leaq	-2960(%rbp), %rcx
 6196      F4FFFF
 6197 3862 488D8570 		leaq	-3216(%rbp), %rax
 6197      F3FFFF
 6198 3869 4889CE   		movq	%rcx, %rsi
 6199 386c F20F108D 		movsd	-3672(%rbp), %xmm1
 6199      A8F1FFFF 
 6200 3874 4889C7   		movq	%rax, %rdi
 6201              	.LEHB90:
 6202 3877 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 6202      00
 6203              	.LEHE90:
 6204 387c 488D8570 		leaq	-2960(%rbp), %rax
 6204      F4FFFF
 6205 3883 4889C7   		movq	%rax, %rdi
 6206 3886 E8000000 		call	_ZN10vector_varD1Ev
 6206      00
 6207 388b 488D8590 		leaq	-2928(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 196


 6207      F4FFFF
 6208 3892 4889C7   		movq	%rax, %rdi
 6209 3895 E8000000 		call	_ZN10vector_varD1Ev
 6209      00
 536:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 537:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         rho_avg = (temp_soln.get_rho(neighbour) + temp_soln.get_rho(i))/2;
 6210              		.loc 9 537 0 discriminator 2
 6211 389a 8B9508F2 		movl	-3576(%rbp), %edx
 6211      FFFF
 6212 38a0 488D85A0 		leaq	-2656(%rbp), %rax
 6212      F5FFFF
 6213 38a7 89D6     		movl	%edx, %esi
 6214 38a9 4889C7   		movq	%rax, %rdi
 6215 38ac E8000000 		call	_ZN8Solution7get_rhoEi
 6215      00
 6216 38b1 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6216      A8F1FFFF 
 6217 38b9 8B9514F2 		movl	-3564(%rbp), %edx
 6217      FFFF
 6218 38bf 488D85A0 		leaq	-2656(%rbp), %rax
 6218      F5FFFF
 6219 38c6 89D6     		movl	%edx, %esi
 6220 38c8 4889C7   		movq	%rax, %rdi
 6221 38cb E8000000 		call	_ZN8Solution7get_rhoEi
 6221      00
 6222 38d0 F20F5885 		addsd	-3672(%rbp), %xmm0
 6222      A8F1FFFF 
 6223 38d8 F20F100D 		movsd	.LC11(%rip), %xmm1
 6223      00000000 
 6224 38e0 F20F5EC1 		divsd	%xmm1, %xmm0
 6225 38e4 F20F1185 		movsd	%xmm0, -3496(%rbp)
 6225      58F2FFFF 
 538:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_avg = (temp_soln.get_u(neighbour) + temp_soln.get_u(i))/2;
 6226              		.loc 9 538 0 discriminator 2
 6227 38ec 8B9508F2 		movl	-3576(%rbp), %edx
 6227      FFFF
 6228 38f2 488D85A0 		leaq	-2656(%rbp), %rax
 6228      F5FFFF
 6229 38f9 89D6     		movl	%edx, %esi
 6230 38fb 4889C7   		movq	%rax, %rdi
 6231 38fe E8000000 		call	_ZN8Solution5get_uEi
 6231      00
 6232 3903 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6232      A8F1FFFF 
 6233 390b 8B9514F2 		movl	-3564(%rbp), %edx
 6233      FFFF
 6234 3911 488D85A0 		leaq	-2656(%rbp), %rax
 6234      F5FFFF
 6235 3918 89D6     		movl	%edx, %esi
 6236 391a 4889C7   		movq	%rax, %rdi
 6237 391d E8000000 		call	_ZN8Solution5get_uEi
 6237      00
 6238 3922 F20F5885 		addsd	-3672(%rbp), %xmm0
 6238      A8F1FFFF 
 6239 392a F20F100D 		movsd	.LC11(%rip), %xmm1
 6239      00000000 
 6240 3932 F20F5EC1 		divsd	%xmm1, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 197


 6241 3936 F20F1185 		movsd	%xmm0, -3488(%rbp)
 6241      60F2FFFF 
 539:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         v_avg = (temp_soln.get_v(neighbour) + temp_soln.get_v(i))/2;
 6242              		.loc 9 539 0 discriminator 2
 6243 393e 8B9508F2 		movl	-3576(%rbp), %edx
 6243      FFFF
 6244 3944 488D85A0 		leaq	-2656(%rbp), %rax
 6244      F5FFFF
 6245 394b 89D6     		movl	%edx, %esi
 6246 394d 4889C7   		movq	%rax, %rdi
 6247 3950 E8000000 		call	_ZN8Solution5get_vEi
 6247      00
 6248 3955 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6248      A8F1FFFF 
 6249 395d 8B9514F2 		movl	-3564(%rbp), %edx
 6249      FFFF
 6250 3963 488D85A0 		leaq	-2656(%rbp), %rax
 6250      F5FFFF
 6251 396a 89D6     		movl	%edx, %esi
 6252 396c 4889C7   		movq	%rax, %rdi
 6253 396f E8000000 		call	_ZN8Solution5get_vEi
 6253      00
 6254 3974 F20F5885 		addsd	-3672(%rbp), %xmm0
 6254      A8F1FFFF 
 6255 397c F20F100D 		movsd	.LC11(%rip), %xmm1
 6255      00000000 
 6256 3984 F20F5EC1 		divsd	%xmm1, %xmm0
 6257 3988 F20F1185 		movsd	%xmm0, -3480(%rbp)
 6257      68F2FFFF 
 540:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 541:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add in reset function
 542:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.x = 0;
 6258              		.loc 9 542 0 discriminator 2
 6259 3990 660FEFC0 		pxor	%xmm0, %xmm0
 6260 3994 F20F1185 		movsd	%xmm0, -3176(%rbp)
 6260      98F3FFFF 
 543:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.y = 0;
 6261              		.loc 9 543 0 discriminator 2
 6262 399c 660FEFC0 		pxor	%xmm0, %xmm0
 6263 39a0 F20F1185 		movsd	%xmm0, -3168(%rbp)
 6263      A0F3FFFF 
 544:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.z = 0; //update for 3d
 6264              		.loc 9 544 0 discriminator 2
 6265 39a8 660FEFC0 		pxor	%xmm0, %xmm0
 6266 39ac F20F1185 		movsd	%xmm0, -3160(%rbp)
 6266      A8F3FFFF 
 6267              	.LBB44:
 545:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 546:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // using D2Q9 , loop through each lattice node
 547:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 6268              		.loc 9 547 0 discriminator 2
 6269 39b4 C7851CF2 		movl	$0, -3556(%rbp)
 6269      FFFF0000 
 6269      0000
 6270              	.L504:
 6271              		.loc 9 547 0 is_stmt 0 discriminator 1
 6272 39be 83BD1CF2 		cmpl	$8, -3556(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 198


 6272      FFFF08
 6273 39c5 0F8FD909 		jg	.L490
 6273      0000
 548:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             /// GET change in magnitude across the lattice
 549:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                           //  e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 550:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 551:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //f( r- e*c*dt) relative to cell_centroid
 552:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //lattice_node.relative_vectors(interface_node,cell_1,e_alpha[k],dt);
 553:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 554:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // y = mx + c
 555:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //relative_interface.relative_vectors(interface_node,cell_1,e_alpha[k],
 556:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 557:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              // lattice densities are scalars but need to have gradients relative t
 558:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 559:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //rho_lattice = delta_rho.Dot_Product(lattice_node) +temp_soln.get_rho(
 560:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 561:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //u_lattice.x = (delta_u.Dot_Product(lattice_node) + temp_soln.get_u(i)
 562:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //u_lattice.y = (delta_v.Dot_Product(lattice_node) + temp_soln.get_v(i)
 563:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //u_lattice.z = 0;
 564:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 565:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              // = u_lattice.Magnitude();
 566:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 567:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              if( j ==2){
 6274              		.loc 9 567 0 is_stmt 1
 6275 39cb 83BD18F2 		cmpl	$2, -3560(%rbp)
 6275      FFFF02
 6276 39d2 0F850101 		jne	.L491
 6276      0000
 568:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 rho_lattice = rho_avg + delta_rho.x * -e_alpha[k].x;
 6277              		.loc 9 568 0
 6278 39d8 F20F10AD 		movsd	-3144(%rbp), %xmm5
 6278      B8F3FFFF 
 6279 39e0 F20F11AD 		movsd	%xmm5, -3672(%rbp)
 6279      A8F1FFFF 
 6280 39e8 8B851CF2 		movl	-3556(%rbp), %eax
 6280      FFFF
 6281 39ee 4863D0   		movslq	%eax, %rdx
 6282 39f1 488D85B0 		leaq	-3408(%rbp), %rax
 6282      F2FFFF
 6283 39f8 4889D6   		movq	%rdx, %rsi
 6284 39fb 4889C7   		movq	%rax, %rdi
 6285 39fe E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6285      00
 6286 3a03 F20F1048 		movsd	8(%rax), %xmm1
 6286      08
 6287 3a08 F20F1005 		movsd	.LC6(%rip), %xmm0
 6287      00000000 
 6288 3a10 660F57C1 		xorpd	%xmm1, %xmm0
 6289 3a14 F20F5985 		mulsd	-3672(%rbp), %xmm0
 6289      A8F1FFFF 
 6290 3a1c F20F5885 		addsd	-3496(%rbp), %xmm0
 6290      58F2FFFF 
 6291 3a24 F20F1185 		movsd	%xmm0, -3520(%rbp)
 6291      40F2FFFF 
 569:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 u_lattice.x  = u_avg + delta_u.x * -e_alpha[k].x;
 6292              		.loc 9 569 0
 6293 3a2c F20F10B5 		movsd	-3240(%rbp), %xmm6
GAS LISTING /tmp/cc2K2nX4.s 			page 199


 6293      58F3FFFF 
 6294 3a34 F20F11B5 		movsd	%xmm6, -3672(%rbp)
 6294      A8F1FFFF 
 6295 3a3c 8B851CF2 		movl	-3556(%rbp), %eax
 6295      FFFF
 6296 3a42 4863D0   		movslq	%eax, %rdx
 6297 3a45 488D85B0 		leaq	-3408(%rbp), %rax
 6297      F2FFFF
 6298 3a4c 4889D6   		movq	%rdx, %rsi
 6299 3a4f 4889C7   		movq	%rax, %rdi
 6300 3a52 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6300      00
 6301 3a57 F20F1048 		movsd	8(%rax), %xmm1
 6301      08
 6302 3a5c F20F1005 		movsd	.LC6(%rip), %xmm0
 6302      00000000 
 6303 3a64 660F57C1 		xorpd	%xmm1, %xmm0
 6304 3a68 F20F5985 		mulsd	-3672(%rbp), %xmm0
 6304      A8F1FFFF 
 6305 3a70 F20F5885 		addsd	-3488(%rbp), %xmm0
 6305      60F2FFFF 
 6306 3a78 F20F1185 		movsd	%xmm0, -3080(%rbp)
 6306      F8F3FFFF 
 570:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 u_lattice.y = v_avg + delta_u.x * -e_alpha[k].x;
 6307              		.loc 9 570 0
 6308 3a80 F20F10BD 		movsd	-3240(%rbp), %xmm7
 6308      58F3FFFF 
 6309 3a88 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6309      A8F1FFFF 
 6310 3a90 8B851CF2 		movl	-3556(%rbp), %eax
 6310      FFFF
 6311 3a96 4863D0   		movslq	%eax, %rdx
 6312 3a99 488D85B0 		leaq	-3408(%rbp), %rax
 6312      F2FFFF
 6313 3aa0 4889D6   		movq	%rdx, %rsi
 6314 3aa3 4889C7   		movq	%rax, %rdi
 6315 3aa6 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6315      00
 6316 3aab F20F1048 		movsd	8(%rax), %xmm1
 6316      08
 6317 3ab0 F20F1005 		movsd	.LC6(%rip), %xmm0
 6317      00000000 
 6318 3ab8 660F57C1 		xorpd	%xmm1, %xmm0
 6319 3abc F20F5985 		mulsd	-3672(%rbp), %xmm0
 6319      A8F1FFFF 
 6320 3ac4 F20F5885 		addsd	-3480(%rbp), %xmm0
 6320      68F2FFFF 
 6321 3acc F20F1185 		movsd	%xmm0, -3072(%rbp)
 6321      00F4FFFF 
 6322 3ad4 E9FC0000 		jmp	.L492
 6322      00
 6323              	.L491:
 571:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 572:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              }else{
 573:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 rho_lattice = rho_avg + delta_rho.y * -e_alpha[k].y;
 6324              		.loc 9 573 0
 6325 3ad9 F20F10AD 		movsd	-3136(%rbp), %xmm5
GAS LISTING /tmp/cc2K2nX4.s 			page 200


 6325      C0F3FFFF 
 6326 3ae1 F20F11AD 		movsd	%xmm5, -3672(%rbp)
 6326      A8F1FFFF 
 6327 3ae9 8B851CF2 		movl	-3556(%rbp), %eax
 6327      FFFF
 6328 3aef 4863D0   		movslq	%eax, %rdx
 6329 3af2 488D85B0 		leaq	-3408(%rbp), %rax
 6329      F2FFFF
 6330 3af9 4889D6   		movq	%rdx, %rsi
 6331 3afc 4889C7   		movq	%rax, %rdi
 6332 3aff E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6332      00
 6333 3b04 F20F1048 		movsd	16(%rax), %xmm1
 6333      10
 6334 3b09 F20F1005 		movsd	.LC6(%rip), %xmm0
 6334      00000000 
 6335 3b11 660F57C1 		xorpd	%xmm1, %xmm0
 6336 3b15 F20F5985 		mulsd	-3672(%rbp), %xmm0
 6336      A8F1FFFF 
 6337 3b1d F20F5885 		addsd	-3496(%rbp), %xmm0
 6337      58F2FFFF 
 6338 3b25 F20F1185 		movsd	%xmm0, -3520(%rbp)
 6338      40F2FFFF 
 574:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 u_lattice.x  = u_avg + delta_u.y * -e_alpha[k].y;
 6339              		.loc 9 574 0
 6340 3b2d F20F10B5 		movsd	-3232(%rbp), %xmm6
 6340      60F3FFFF 
 6341 3b35 F20F11B5 		movsd	%xmm6, -3672(%rbp)
 6341      A8F1FFFF 
 6342 3b3d 8B851CF2 		movl	-3556(%rbp), %eax
 6342      FFFF
 6343 3b43 4863D0   		movslq	%eax, %rdx
 6344 3b46 488D85B0 		leaq	-3408(%rbp), %rax
 6344      F2FFFF
 6345 3b4d 4889D6   		movq	%rdx, %rsi
 6346 3b50 4889C7   		movq	%rax, %rdi
 6347 3b53 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6347      00
 6348 3b58 F20F1048 		movsd	16(%rax), %xmm1
 6348      10
 6349 3b5d F20F1005 		movsd	.LC6(%rip), %xmm0
 6349      00000000 
 6350 3b65 660F57C1 		xorpd	%xmm1, %xmm0
 6351 3b69 F20F5985 		mulsd	-3672(%rbp), %xmm0
 6351      A8F1FFFF 
 6352 3b71 F20F5885 		addsd	-3488(%rbp), %xmm0
 6352      60F2FFFF 
 6353 3b79 F20F1185 		movsd	%xmm0, -3080(%rbp)
 6353      F8F3FFFF 
 575:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 u_lattice.y = v_avg + delta_u.y * -e_alpha[k].y;
 6354              		.loc 9 575 0
 6355 3b81 F20F10BD 		movsd	-3232(%rbp), %xmm7
 6355      60F3FFFF 
 6356 3b89 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6356      A8F1FFFF 
 6357 3b91 8B851CF2 		movl	-3556(%rbp), %eax
 6357      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 201


 6358 3b97 4863D0   		movslq	%eax, %rdx
 6359 3b9a 488D85B0 		leaq	-3408(%rbp), %rax
 6359      F2FFFF
 6360 3ba1 4889D6   		movq	%rdx, %rsi
 6361 3ba4 4889C7   		movq	%rax, %rdi
 6362 3ba7 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6362      00
 6363 3bac F20F1048 		movsd	16(%rax), %xmm1
 6363      10
 6364 3bb1 F20F1005 		movsd	.LC6(%rip), %xmm0
 6364      00000000 
 6365 3bb9 660F57C1 		xorpd	%xmm1, %xmm0
 6366 3bbd F20F5985 		mulsd	-3672(%rbp), %xmm0
 6366      A8F1FFFF 
 6367 3bc5 F20F5885 		addsd	-3480(%rbp), %xmm0
 6367      68F2FFFF 
 6368 3bcd F20F1185 		movsd	%xmm0, -3072(%rbp)
 6368      00F4FFFF 
 6369              	.L492:
 576:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 577:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              }
 578:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 579:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 580:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 581:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //feq_lattice[k] = feq_calc(lattice_weight,e_alpha,u_lattice,u_magnitud
 582:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //                          rho_lattice) ;
 583:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 584:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                // e_alpha
 585:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 586:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            // feq_lattice[k] = feq_calc_incomp(lattice_weight[k],e_alpha[k],u_latti
 587:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //                          rho_lattice,soln_t0.get_average_rho(), k) ;
 588:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 589:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 590:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //switch
 591:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 592:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             switch(k) {
 6370              		.loc 9 592 0
 6371 3bd5 83BD1CF2 		cmpl	$8, -3556(%rbp)
 6371      FFFF08
 6372 3bdc 0F87CF06 		ja	.L493
 6372      0000
 6373 3be2 8B851CF2 		movl	-3556(%rbp), %eax
 6373      FFFF
 6374 3be8 488B04C5 		movq	.L495(,%rax,8), %rax
 6374      00000000 
 6375 3bf0 FFE0     		jmp	*%rax
 6376              		.section	.rodata
 6377 0031 00000000 		.align 8
 6377      000000
 6378              		.align 4
 6379              	.L495:
 6380 0038 00000000 		.quad	.L494
 6380      00000000 
 6381 0040 00000000 		.quad	.L496
 6381      00000000 
 6382 0048 00000000 		.quad	.L497
 6382      00000000 
GAS LISTING /tmp/cc2K2nX4.s 			page 202


 6383 0050 00000000 		.quad	.L498
 6383      00000000 
 6384 0058 00000000 		.quad	.L499
 6384      00000000 
 6385 0060 00000000 		.quad	.L500
 6385      00000000 
 6386 0068 00000000 		.quad	.L501
 6386      00000000 
 6387 0070 00000000 		.quad	.L502
 6387      00000000 
 6388 0078 00000000 		.quad	.L503
 6388      00000000 
 6389              		.text
 6390              	.L494:
 593:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 594:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 0:
 595:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6391              		.loc 9 595 0
 6392 3bf2 8B851CF2 		movl	-3556(%rbp), %eax
 6392      FFFF
 6393 3bf8 4898     		cltq
 6394 3bfa F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6394      C5F0F8FF 
 6394      FF
 6395 3c03 660F28C8 		movapd	%xmm0, %xmm1
 6396 3c07 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6396      40F2FFFF 
 596:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 597:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6397              		.loc 9 597 0
 6398 3c0f F20F1095 		movsd	-3080(%rbp), %xmm2
 6398      F8F3FFFF 
 6399 3c17 F20F1085 		movsd	-3080(%rbp), %xmm0
 6399      F8F3FFFF 
 6400 3c1f F20F59D0 		mulsd	%xmm0, %xmm2
 6401 3c23 F20F109D 		movsd	-3072(%rbp), %xmm3
 6401      00F4FFFF 
 6402 3c2b F20F1085 		movsd	-3072(%rbp), %xmm0
 6402      00F4FFFF 
 6403 3c33 F20F59C3 		mulsd	%xmm3, %xmm0
 6404 3c37 F20F58C2 		addsd	%xmm2, %xmm0
 6405 3c3b F20F1015 		movsd	.LC12(%rip), %xmm2
 6405      00000000 
 6406 3c43 F20F59C2 		mulsd	%xmm2, %xmm0
 595:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 6407              		.loc 9 595 0
 6408 3c47 F20F1015 		movsd	.LC4(%rip), %xmm2
 6408      00000000 
 6409 3c4f F20F58C2 		addsd	%xmm2, %xmm0
 6410 3c53 F20F59C1 		mulsd	%xmm1, %xmm0
 6411              		.loc 9 597 0
 6412 3c57 8B851CF2 		movl	-3556(%rbp), %eax
 6412      FFFF
 6413 3c5d 4898     		cltq
 6414 3c5f F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6414      C500F8FF 
 6414      FF
GAS LISTING /tmp/cc2K2nX4.s 			page 203


 598:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6415              		.loc 9 598 0
 6416 3c68 E9440600 		jmp	.L493
 6416      00
 6417              	.L496:
 599:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 600:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 1:
 601:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6418              		.loc 9 601 0
 6419 3c6d 8B851CF2 		movl	-3556(%rbp), %eax
 6419      FFFF
 6420 3c73 4898     		cltq
 6421 3c75 F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6421      C5F0F8FF 
 6421      FF
 6422 3c7e 660F28C8 		movapd	%xmm0, %xmm1
 6423 3c82 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6423      40F2FFFF 
 602:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*u_lattice.x          + 4.5* u_lattice.x * u_lattice.x
 6424              		.loc 9 602 0
 6425 3c8a F20F1095 		movsd	-3080(%rbp), %xmm2
 6425      F8F3FFFF 
 6426 3c92 F20F1005 		movsd	.LC2(%rip), %xmm0
 6426      00000000 
 6427 3c9a F20F59C2 		mulsd	%xmm2, %xmm0
 601:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*u_lattice.x          + 4.5* u_lattice.x * u_lattice.x
 6428              		.loc 9 601 0
 6429 3c9e F20F1015 		movsd	.LC4(%rip), %xmm2
 6429      00000000 
 6430 3ca6 F20F58D0 		addsd	%xmm0, %xmm2
 6431              		.loc 9 602 0
 6432 3caa F20F109D 		movsd	-3080(%rbp), %xmm3
 6432      F8F3FFFF 
 6433 3cb2 F20F1005 		movsd	.LC3(%rip), %xmm0
 6433      00000000 
 6434 3cba F20F59C3 		mulsd	%xmm3, %xmm0
 6435 3cbe F20F109D 		movsd	-3080(%rbp), %xmm3
 6435      F8F3FFFF 
 6436 3cc6 F20F59C3 		mulsd	%xmm3, %xmm0
 6437 3cca F20F58C2 		addsd	%xmm2, %xmm0
 603:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6438              		.loc 9 603 0
 6439 3cce F20F109D 		movsd	-3080(%rbp), %xmm3
 6439      F8F3FFFF 
 6440 3cd6 F20F1095 		movsd	-3080(%rbp), %xmm2
 6440      F8F3FFFF 
 6441 3cde F20F59DA 		mulsd	%xmm2, %xmm3
 6442 3ce2 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6442      00F4FFFF 
 6443 3cea F20F1095 		movsd	-3072(%rbp), %xmm2
 6443      00F4FFFF 
 6444 3cf2 F20F59D4 		mulsd	%xmm4, %xmm2
 6445 3cf6 F20F58D3 		addsd	%xmm3, %xmm2
 6446 3cfa F20F101D 		movsd	.LC13(%rip), %xmm3
 6446      00000000 
 6447 3d02 F20F59D3 		mulsd	%xmm3, %xmm2
 6448 3d06 F20F5CC2 		subsd	%xmm2, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 204


 601:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*u_lattice.x          + 4.5* u_lattice.x * u_lattice.x
 6449              		.loc 9 601 0
 6450 3d0a F20F59C1 		mulsd	%xmm1, %xmm0
 6451              		.loc 9 603 0
 6452 3d0e 8B851CF2 		movl	-3556(%rbp), %eax
 6452      FFFF
 6453 3d14 4898     		cltq
 6454 3d16 F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6454      C500F8FF 
 6454      FF
 604:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6455              		.loc 9 604 0
 6456 3d1f E98D0500 		jmp	.L493
 6456      00
 6457              	.L497:
 605:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 2:
 606:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6458              		.loc 9 606 0
 6459 3d24 8B851CF2 		movl	-3556(%rbp), %eax
 6459      FFFF
 6460 3d2a 4898     		cltq
 6461 3d2c F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6461      C5F0F8FF 
 6461      FF
 6462 3d35 660F28C8 		movapd	%xmm0, %xmm1
 6463 3d39 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6463      40F2FFFF 
 607:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 3*u_lattice.y          + 4.5* u_lattice.y * u_lattice.y
 6464              		.loc 9 607 0
 6465 3d41 F20F1095 		movsd	-3072(%rbp), %xmm2
 6465      00F4FFFF 
 6466 3d49 F20F1005 		movsd	.LC2(%rip), %xmm0
 6466      00000000 
 6467 3d51 F20F59C2 		mulsd	%xmm2, %xmm0
 606:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 3*u_lattice.y          + 4.5* u_lattice.y * u_lattice.y
 6468              		.loc 9 606 0
 6469 3d55 F20F1015 		movsd	.LC4(%rip), %xmm2
 6469      00000000 
 6470 3d5d F20F58D0 		addsd	%xmm0, %xmm2
 6471              		.loc 9 607 0
 6472 3d61 F20F109D 		movsd	-3072(%rbp), %xmm3
 6472      00F4FFFF 
 6473 3d69 F20F1005 		movsd	.LC3(%rip), %xmm0
 6473      00000000 
 6474 3d71 F20F59C3 		mulsd	%xmm3, %xmm0
 6475 3d75 F20F109D 		movsd	-3072(%rbp), %xmm3
 6475      00F4FFFF 
 6476 3d7d F20F59C3 		mulsd	%xmm3, %xmm0
 6477 3d81 F20F58C2 		addsd	%xmm2, %xmm0
 608:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6478              		.loc 9 608 0
 6479 3d85 F20F109D 		movsd	-3080(%rbp), %xmm3
 6479      F8F3FFFF 
 6480 3d8d F20F1095 		movsd	-3080(%rbp), %xmm2
 6480      F8F3FFFF 
 6481 3d95 F20F59DA 		mulsd	%xmm2, %xmm3
 6482 3d99 F20F10A5 		movsd	-3072(%rbp), %xmm4
GAS LISTING /tmp/cc2K2nX4.s 			page 205


 6482      00F4FFFF 
 6483 3da1 F20F1095 		movsd	-3072(%rbp), %xmm2
 6483      00F4FFFF 
 6484 3da9 F20F59D4 		mulsd	%xmm4, %xmm2
 6485 3dad F20F58D3 		addsd	%xmm3, %xmm2
 6486 3db1 F20F101D 		movsd	.LC13(%rip), %xmm3
 6486      00000000 
 6487 3db9 F20F59D3 		mulsd	%xmm3, %xmm2
 6488 3dbd F20F5CC2 		subsd	%xmm2, %xmm0
 606:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 3*u_lattice.y          + 4.5* u_lattice.y * u_lattice.y
 6489              		.loc 9 606 0
 6490 3dc1 F20F59C1 		mulsd	%xmm1, %xmm0
 6491              		.loc 9 608 0
 6492 3dc5 8B851CF2 		movl	-3556(%rbp), %eax
 6492      FFFF
 6493 3dcb 4898     		cltq
 6494 3dcd F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6494      C500F8FF 
 6494      FF
 609:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6495              		.loc 9 609 0
 6496 3dd6 E9D60400 		jmp	.L493
 6496      00
 6497              	.L498:
 610:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 3:
 611:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1
 6498              		.loc 9 611 0
 6499 3ddb 8B851CF2 		movl	-3556(%rbp), %eax
 6499      FFFF
 6500 3de1 4898     		cltq
 6501 3de3 F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6501      C5F0F8FF 
 6501      FF
 6502 3dec 660F28C8 		movapd	%xmm0, %xmm1
 6503 3df0 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6503      40F2FFFF 
 612:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*u_lattice.x          + 4.5* u_lattice.x * u_lattice.x
 6504              		.loc 9 612 0
 6505 3df8 F20F1095 		movsd	-3080(%rbp), %xmm2
 6505      F8F3FFFF 
 6506 3e00 F20F1005 		movsd	.LC2(%rip), %xmm0
 6506      00000000 
 6507 3e08 F20F59C2 		mulsd	%xmm2, %xmm0
 6508 3e0c F20F1015 		movsd	.LC4(%rip), %xmm2
 6508      00000000 
 6509 3e14 F20F5CD0 		subsd	%xmm0, %xmm2
 6510 3e18 F20F109D 		movsd	-3080(%rbp), %xmm3
 6510      F8F3FFFF 
 6511 3e20 F20F1005 		movsd	.LC3(%rip), %xmm0
 6511      00000000 
 6512 3e28 F20F59C3 		mulsd	%xmm3, %xmm0
 6513 3e2c F20F109D 		movsd	-3080(%rbp), %xmm3
 6513      F8F3FFFF 
 6514 3e34 F20F59C3 		mulsd	%xmm3, %xmm0
 6515 3e38 F20F58C2 		addsd	%xmm2, %xmm0
 613:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6516              		.loc 9 613 0
GAS LISTING /tmp/cc2K2nX4.s 			page 206


 6517 3e3c F20F109D 		movsd	-3080(%rbp), %xmm3
 6517      F8F3FFFF 
 6518 3e44 F20F1095 		movsd	-3080(%rbp), %xmm2
 6518      F8F3FFFF 
 6519 3e4c F20F59DA 		mulsd	%xmm2, %xmm3
 6520 3e50 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6520      00F4FFFF 
 6521 3e58 F20F1095 		movsd	-3072(%rbp), %xmm2
 6521      00F4FFFF 
 6522 3e60 F20F59D4 		mulsd	%xmm4, %xmm2
 6523 3e64 F20F58D3 		addsd	%xmm3, %xmm2
 6524 3e68 F20F101D 		movsd	.LC13(%rip), %xmm3
 6524      00000000 
 6525 3e70 F20F59D3 		mulsd	%xmm3, %xmm2
 6526 3e74 F20F5CC2 		subsd	%xmm2, %xmm0
 611:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*u_lattice.x          + 4.5* u_lattice.x * u_lattice.x
 6527              		.loc 9 611 0
 6528 3e78 F20F59C1 		mulsd	%xmm1, %xmm0
 6529              		.loc 9 613 0
 6530 3e7c 8B851CF2 		movl	-3556(%rbp), %eax
 6530      FFFF
 6531 3e82 4898     		cltq
 6532 3e84 F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6532      C500F8FF 
 6532      FF
 614:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6533              		.loc 9 614 0
 6534 3e8d E91F0400 		jmp	.L493
 6534      00
 6535              	.L499:
 615:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 4:
 616:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1
 6536              		.loc 9 616 0
 6537 3e92 8B851CF2 		movl	-3556(%rbp), %eax
 6537      FFFF
 6538 3e98 4898     		cltq
 6539 3e9a F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6539      C5F0F8FF 
 6539      FF
 6540 3ea3 660F28C8 		movapd	%xmm0, %xmm1
 6541 3ea7 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6541      40F2FFFF 
 617:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 -3*u_lattice.y          + 4.5* u_lattice.y * u_lattice.y
 6542              		.loc 9 617 0
 6543 3eaf F20F1095 		movsd	-3072(%rbp), %xmm2
 6543      00F4FFFF 
 6544 3eb7 F20F1005 		movsd	.LC2(%rip), %xmm0
 6544      00000000 
 6545 3ebf F20F59C2 		mulsd	%xmm2, %xmm0
 6546 3ec3 F20F1015 		movsd	.LC4(%rip), %xmm2
 6546      00000000 
 6547 3ecb F20F5CD0 		subsd	%xmm0, %xmm2
 6548 3ecf F20F109D 		movsd	-3072(%rbp), %xmm3
 6548      00F4FFFF 
 6549 3ed7 F20F1005 		movsd	.LC3(%rip), %xmm0
 6549      00000000 
 6550 3edf F20F59C3 		mulsd	%xmm3, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 207


 6551 3ee3 F20F109D 		movsd	-3072(%rbp), %xmm3
 6551      00F4FFFF 
 6552 3eeb F20F59C3 		mulsd	%xmm3, %xmm0
 6553 3eef F20F58C2 		addsd	%xmm2, %xmm0
 618:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6554              		.loc 9 618 0
 6555 3ef3 F20F109D 		movsd	-3080(%rbp), %xmm3
 6555      F8F3FFFF 
 6556 3efb F20F1095 		movsd	-3080(%rbp), %xmm2
 6556      F8F3FFFF 
 6557 3f03 F20F59DA 		mulsd	%xmm2, %xmm3
 6558 3f07 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6558      00F4FFFF 
 6559 3f0f F20F1095 		movsd	-3072(%rbp), %xmm2
 6559      00F4FFFF 
 6560 3f17 F20F59D4 		mulsd	%xmm4, %xmm2
 6561 3f1b F20F58D3 		addsd	%xmm3, %xmm2
 6562 3f1f F20F101D 		movsd	.LC13(%rip), %xmm3
 6562      00000000 
 6563 3f27 F20F59D3 		mulsd	%xmm3, %xmm2
 6564 3f2b F20F5CC2 		subsd	%xmm2, %xmm0
 616:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 -3*u_lattice.y          + 4.5* u_lattice.y * u_lattice.y
 6565              		.loc 9 616 0
 6566 3f2f F20F59C1 		mulsd	%xmm1, %xmm0
 6567              		.loc 9 618 0
 6568 3f33 8B851CF2 		movl	-3556(%rbp), %eax
 6568      FFFF
 6569 3f39 4898     		cltq
 6570 3f3b F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6570      C500F8FF 
 6570      FF
 619:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6571              		.loc 9 619 0
 6572 3f44 E9680300 		jmp	.L493
 6572      00
 6573              	.L500:
 620:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 5:
 621:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6574              		.loc 9 621 0
 6575 3f49 8B851CF2 		movl	-3556(%rbp), %eax
 6575      FFFF
 6576 3f4f 4898     		cltq
 6577 3f51 F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6577      C5F0F8FF 
 6577      FF
 6578 3f5a 660F28C8 		movapd	%xmm0, %xmm1
 6579 3f5e F20F598D 		mulsd	-3520(%rbp), %xmm1
 6579      40F2FFFF 
 622:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6580              		.loc 9 622 0
 6581 3f66 F20F1095 		movsd	-3080(%rbp), %xmm2
 6581      F8F3FFFF 
 6582 3f6e F20F1085 		movsd	-3072(%rbp), %xmm0
 6582      00F4FFFF 
 6583 3f76 F20F58C2 		addsd	%xmm2, %xmm0
 6584 3f7a F20F1015 		movsd	.LC2(%rip), %xmm2
 6584      00000000 
GAS LISTING /tmp/cc2K2nX4.s 			page 208


 6585 3f82 F20F59C2 		mulsd	%xmm2, %xmm0
 621:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6586              		.loc 9 621 0
 6587 3f86 F20F1015 		movsd	.LC4(%rip), %xmm2
 6587      00000000 
 6588 3f8e F20F58D0 		addsd	%xmm0, %xmm2
 6589              		.loc 9 622 0
 6590 3f92 F20F109D 		movsd	-3080(%rbp), %xmm3
 6590      F8F3FFFF 
 6591 3f9a F20F1085 		movsd	-3072(%rbp), %xmm0
 6591      00F4FFFF 
 6592 3fa2 F20F58C3 		addsd	%xmm3, %xmm0
 6593 3fa6 F20F101D 		movsd	.LC3(%rip), %xmm3
 6593      00000000 
 6594 3fae F20F59D8 		mulsd	%xmm0, %xmm3
 623:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                     * ( u_lattice.x+ u_lattice.y)
 6595              		.loc 9 623 0
 6596 3fb2 F20F10A5 		movsd	-3080(%rbp), %xmm4
 6596      F8F3FFFF 
 6597 3fba F20F1085 		movsd	-3072(%rbp), %xmm0
 6597      00F4FFFF 
 6598 3fc2 F20F58C4 		addsd	%xmm4, %xmm0
 6599 3fc6 F20F59C3 		mulsd	%xmm3, %xmm0
 622:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6600              		.loc 9 622 0
 6601 3fca F20F58C2 		addsd	%xmm2, %xmm0
 624:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6602              		.loc 9 624 0
 6603 3fce F20F109D 		movsd	-3080(%rbp), %xmm3
 6603      F8F3FFFF 
 6604 3fd6 F20F1095 		movsd	-3080(%rbp), %xmm2
 6604      F8F3FFFF 
 6605 3fde F20F59DA 		mulsd	%xmm2, %xmm3
 6606 3fe2 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6606      00F4FFFF 
 6607 3fea F20F1095 		movsd	-3072(%rbp), %xmm2
 6607      00F4FFFF 
 6608 3ff2 F20F59D4 		mulsd	%xmm4, %xmm2
 6609 3ff6 F20F58D3 		addsd	%xmm3, %xmm2
 6610 3ffa F20F101D 		movsd	.LC13(%rip), %xmm3
 6610      00000000 
 6611 4002 F20F59D3 		mulsd	%xmm3, %xmm2
 6612 4006 F20F5CC2 		subsd	%xmm2, %xmm0
 621:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6613              		.loc 9 621 0
 6614 400a F20F59C1 		mulsd	%xmm1, %xmm0
 6615              		.loc 9 624 0
 6616 400e 8B851CF2 		movl	-3556(%rbp), %eax
 6616      FFFF
 6617 4014 4898     		cltq
 6618 4016 F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6618      C500F8FF 
 6618      FF
 625:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6619              		.loc 9 625 0
 6620 401f E98D0200 		jmp	.L493
 6620      00
GAS LISTING /tmp/cc2K2nX4.s 			page 209


 6621              	.L501:
 626:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            case 6:
 627:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6622              		.loc 9 627 0
 6623 4024 8B851CF2 		movl	-3556(%rbp), %eax
 6623      FFFF
 6624 402a 4898     		cltq
 6625 402c F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6625      C5F0F8FF 
 6625      FF
 6626 4035 660F28C8 		movapd	%xmm0, %xmm1
 6627 4039 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6627      40F2FFFF 
 628:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6628              		.loc 9 628 0
 6629 4041 F20F1085 		movsd	-3080(%rbp), %xmm0
 6629      F8F3FFFF 
 6630 4049 F20F1095 		movsd	-3072(%rbp), %xmm2
 6630      00F4FFFF 
 6631 4051 F20F5CC2 		subsd	%xmm2, %xmm0
 6632 4055 F20F1015 		movsd	.LC14(%rip), %xmm2
 6632      00000000 
 6633 405d F20F59C2 		mulsd	%xmm2, %xmm0
 627:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6634              		.loc 9 627 0
 6635 4061 F20F1015 		movsd	.LC4(%rip), %xmm2
 6635      00000000 
 6636 4069 F20F58D0 		addsd	%xmm0, %xmm2
 6637              		.loc 9 628 0
 6638 406d F20F1085 		movsd	-3080(%rbp), %xmm0
 6638      F8F3FFFF 
 6639 4075 F20F109D 		movsd	-3072(%rbp), %xmm3
 6639      00F4FFFF 
 6640 407d F20F5CC3 		subsd	%xmm3, %xmm0
 6641 4081 F20F101D 		movsd	.LC3(%rip), %xmm3
 6641      00000000 
 6642 4089 F20F59D8 		mulsd	%xmm0, %xmm3
 629:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                     * ( u_lattice.x- u_lattice.y)
 6643              		.loc 9 629 0
 6644 408d F20F1085 		movsd	-3080(%rbp), %xmm0
 6644      F8F3FFFF 
 6645 4095 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6645      00F4FFFF 
 6646 409d F20F5CC4 		subsd	%xmm4, %xmm0
 6647 40a1 F20F59C3 		mulsd	%xmm3, %xmm0
 628:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6648              		.loc 9 628 0
 6649 40a5 F20F58C2 		addsd	%xmm2, %xmm0
 630:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6650              		.loc 9 630 0
 6651 40a9 F20F109D 		movsd	-3080(%rbp), %xmm3
 6651      F8F3FFFF 
 6652 40b1 F20F1095 		movsd	-3080(%rbp), %xmm2
 6652      F8F3FFFF 
 6653 40b9 F20F59DA 		mulsd	%xmm2, %xmm3
 6654 40bd F20F10A5 		movsd	-3072(%rbp), %xmm4
 6654      00F4FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 210


 6655 40c5 F20F1095 		movsd	-3072(%rbp), %xmm2
 6655      00F4FFFF 
 6656 40cd F20F59D4 		mulsd	%xmm4, %xmm2
 6657 40d1 F20F58D3 		addsd	%xmm3, %xmm2
 6658 40d5 F20F101D 		movsd	.LC13(%rip), %xmm3
 6658      00000000 
 6659 40dd F20F59D3 		mulsd	%xmm3, %xmm2
 6660 40e1 F20F5CC2 		subsd	%xmm2, %xmm0
 627:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6661              		.loc 9 627 0
 6662 40e5 F20F59C1 		mulsd	%xmm1, %xmm0
 6663              		.loc 9 630 0
 6664 40e9 8B851CF2 		movl	-3556(%rbp), %eax
 6664      FFFF
 6665 40ef 4898     		cltq
 6666 40f1 F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6666      C500F8FF 
 6666      FF
 631:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6667              		.loc 9 631 0
 6668 40fa E9B20100 		jmp	.L493
 6668      00
 6669              	.L502:
 632:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 7:
 633:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6670              		.loc 9 633 0
 6671 40ff 8B851CF2 		movl	-3556(%rbp), %eax
 6671      FFFF
 6672 4105 4898     		cltq
 6673 4107 F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6673      C5F0F8FF 
 6673      FF
 6674 4110 660F28C8 		movapd	%xmm0, %xmm1
 6675 4114 F20F598D 		mulsd	-3520(%rbp), %xmm1
 6675      40F2FFFF 
 634:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6676              		.loc 9 634 0
 6677 411c F20F1095 		movsd	-3080(%rbp), %xmm2
 6677      F8F3FFFF 
 6678 4124 F20F1085 		movsd	-3072(%rbp), %xmm0
 6678      00F4FFFF 
 6679 412c F20F58C2 		addsd	%xmm2, %xmm0
 6680 4130 F20F1015 		movsd	.LC14(%rip), %xmm2
 6680      00000000 
 6681 4138 F20F59C2 		mulsd	%xmm2, %xmm0
 633:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6682              		.loc 9 633 0
 6683 413c F20F1015 		movsd	.LC4(%rip), %xmm2
 6683      00000000 
 6684 4144 F20F58D0 		addsd	%xmm0, %xmm2
 6685              		.loc 9 634 0
 6686 4148 F20F109D 		movsd	-3080(%rbp), %xmm3
 6686      F8F3FFFF 
 6687 4150 F20F1085 		movsd	-3072(%rbp), %xmm0
 6687      00F4FFFF 
 6688 4158 F20F58C3 		addsd	%xmm3, %xmm0
 6689 415c F20F101D 		movsd	.LC3(%rip), %xmm3
GAS LISTING /tmp/cc2K2nX4.s 			page 211


 6689      00000000 
 6690 4164 F20F59D8 		mulsd	%xmm0, %xmm3
 635:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                     * ( u_lattice.x+ u_lattice.y)
 6691              		.loc 9 635 0
 6692 4168 F20F10A5 		movsd	-3080(%rbp), %xmm4
 6692      F8F3FFFF 
 6693 4170 F20F1085 		movsd	-3072(%rbp), %xmm0
 6693      00F4FFFF 
 6694 4178 F20F58C4 		addsd	%xmm4, %xmm0
 6695 417c F20F59C3 		mulsd	%xmm3, %xmm0
 634:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6696              		.loc 9 634 0
 6697 4180 F20F58C2 		addsd	%xmm2, %xmm0
 636:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6698              		.loc 9 636 0
 6699 4184 F20F109D 		movsd	-3080(%rbp), %xmm3
 6699      F8F3FFFF 
 6700 418c F20F1095 		movsd	-3080(%rbp), %xmm2
 6700      F8F3FFFF 
 6701 4194 F20F59DA 		mulsd	%xmm2, %xmm3
 6702 4198 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6702      00F4FFFF 
 6703 41a0 F20F1095 		movsd	-3072(%rbp), %xmm2
 6703      00F4FFFF 
 6704 41a8 F20F59D4 		mulsd	%xmm4, %xmm2
 6705 41ac F20F58D3 		addsd	%xmm3, %xmm2
 6706 41b0 F20F101D 		movsd	.LC13(%rip), %xmm3
 6706      00000000 
 6707 41b8 F20F59D3 		mulsd	%xmm3, %xmm2
 6708 41bc F20F5CC2 		subsd	%xmm2, %xmm0
 633:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -3*(u_lattice.x +u_lattice.y)+ 4.5*( u_lattice.x+ u_lattice.y)
 6709              		.loc 9 633 0
 6710 41c0 F20F59C1 		mulsd	%xmm1, %xmm0
 6711              		.loc 9 636 0
 6712 41c4 8B851CF2 		movl	-3556(%rbp), %eax
 6712      FFFF
 6713 41ca 4898     		cltq
 6714 41cc F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6714      C500F8FF 
 6714      FF
 637:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6715              		.loc 9 637 0
 6716 41d5 E9D70000 		jmp	.L493
 6716      00
 6717              	.L503:
 638:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             case 8:
 639:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 feq_lattice[k] = lattice_weight[k] * rho_lattice*(1 +
 6718              		.loc 9 639 0
 6719 41da 8B851CF2 		movl	-3556(%rbp), %eax
 6719      FFFF
 6720 41e0 4898     		cltq
 6721 41e2 F20F1084 		movsd	-1808(%rbp,%rax,8), %xmm0
 6721      C5F0F8FF 
 6721      FF
 6722 41eb 660F28C8 		movapd	%xmm0, %xmm1
 6723 41ef F20F598D 		mulsd	-3520(%rbp), %xmm1
 6723      40F2FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 212


 640:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     +3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6724              		.loc 9 640 0
 6725 41f7 F20F1085 		movsd	-3080(%rbp), %xmm0
 6725      F8F3FFFF 
 6726 41ff F20F1095 		movsd	-3072(%rbp), %xmm2
 6726      00F4FFFF 
 6727 4207 F20F5CC2 		subsd	%xmm2, %xmm0
 6728 420b F20F1015 		movsd	.LC2(%rip), %xmm2
 6728      00000000 
 6729 4213 F20F59C2 		mulsd	%xmm2, %xmm0
 639:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     +3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6730              		.loc 9 639 0
 6731 4217 F20F1015 		movsd	.LC4(%rip), %xmm2
 6731      00000000 
 6732 421f F20F58D0 		addsd	%xmm0, %xmm2
 6733              		.loc 9 640 0
 6734 4223 F20F1085 		movsd	-3080(%rbp), %xmm0
 6734      F8F3FFFF 
 6735 422b F20F109D 		movsd	-3072(%rbp), %xmm3
 6735      00F4FFFF 
 6736 4233 F20F5CC3 		subsd	%xmm3, %xmm0
 6737 4237 F20F101D 		movsd	.LC3(%rip), %xmm3
 6737      00000000 
 6738 423f F20F59D8 		mulsd	%xmm0, %xmm3
 641:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                     * ( u_lattice.x- u_lattice.y)
 6739              		.loc 9 641 0
 6740 4243 F20F1085 		movsd	-3080(%rbp), %xmm0
 6740      F8F3FFFF 
 6741 424b F20F10A5 		movsd	-3072(%rbp), %xmm4
 6741      00F4FFFF 
 6742 4253 F20F5CC4 		subsd	%xmm4, %xmm0
 6743 4257 F20F59C3 		mulsd	%xmm3, %xmm0
 640:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     +3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6744              		.loc 9 640 0
 6745 425b F20F58C2 		addsd	%xmm2, %xmm0
 642:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     -1.5*(u_lattice.x * u_lattice.x + u_lattice.y*u_lattice.y)  );
 6746              		.loc 9 642 0
 6747 425f F20F109D 		movsd	-3080(%rbp), %xmm3
 6747      F8F3FFFF 
 6748 4267 F20F1095 		movsd	-3080(%rbp), %xmm2
 6748      F8F3FFFF 
 6749 426f F20F59DA 		mulsd	%xmm2, %xmm3
 6750 4273 F20F10A5 		movsd	-3072(%rbp), %xmm4
 6750      00F4FFFF 
 6751 427b F20F1095 		movsd	-3072(%rbp), %xmm2
 6751      00F4FFFF 
 6752 4283 F20F59D4 		mulsd	%xmm4, %xmm2
 6753 4287 F20F58D3 		addsd	%xmm3, %xmm2
 6754 428b F20F101D 		movsd	.LC13(%rip), %xmm3
 6754      00000000 
 6755 4293 F20F59D3 		mulsd	%xmm3, %xmm2
 6756 4297 F20F5CC2 		subsd	%xmm2, %xmm0
 639:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     +3*(u_lattice.x -u_lattice.y)+ 4.5*( u_lattice.x- u_lattice.y)
 6757              		.loc 9 639 0
 6758 429b F20F59C1 		mulsd	%xmm1, %xmm0
 6759              		.loc 9 642 0
 6760 429f 8B851CF2 		movl	-3556(%rbp), %eax
GAS LISTING /tmp/cc2K2nX4.s 			page 213


 6760      FFFF
 6761 42a5 4898     		cltq
 6762 42a7 F20F1184 		movsd	%xmm0, -2048(%rbp,%rax,8)
 6762      C500F8FF 
 6762      FF
 643:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 break;
 6763              		.loc 9 643 0
 6764 42b0 90       		nop
 6765              	.L493:
 644:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             }
 645:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 646:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_interface = rho_interface + feq_lattice[k];
 6766              		.loc 9 646 0 discriminator 2
 6767 42b1 8B851CF2 		movl	-3556(%rbp), %eax
 6767      FFFF
 6768 42b7 4898     		cltq
 6769 42b9 F20F108C 		movsd	-2048(%rbp,%rax,8), %xmm1
 6769      C500F8FF 
 6769      FF
 6770 42c2 F20F1085 		movsd	-3536(%rbp), %xmm0
 6770      30F2FFFF 
 6771 42ca F20F58C1 		addsd	%xmm1, %xmm0
 6772 42ce F20F1185 		movsd	%xmm0, -3536(%rbp)
 6772      30F2FFFF 
 647:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 648:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.x = rho_u_interface.x + feq_lattice[k] * e_alpha[k].x;
 6773              		.loc 9 648 0 discriminator 2
 6774 42d6 F20F10AD 		movsd	-3048(%rbp), %xmm5
 6774      18F4FFFF 
 6775 42de F20F11AD 		movsd	%xmm5, -3672(%rbp)
 6775      A8F1FFFF 
 6776 42e6 8B851CF2 		movl	-3556(%rbp), %eax
 6776      FFFF
 6777 42ec 4898     		cltq
 6778 42ee F20F10B4 		movsd	-2048(%rbp,%rax,8), %xmm6
 6778      C500F8FF 
 6778      FF
 6779 42f7 F20F11B5 		movsd	%xmm6, -3680(%rbp)
 6779      A0F1FFFF 
 6780 42ff 8B851CF2 		movl	-3556(%rbp), %eax
 6780      FFFF
 6781 4305 4863D0   		movslq	%eax, %rdx
 6782 4308 488D85B0 		leaq	-3408(%rbp), %rax
 6782      F2FFFF
 6783 430f 4889D6   		movq	%rdx, %rsi
 6784 4312 4889C7   		movq	%rax, %rdi
 6785 4315 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6785      00
 6786 431a F20F1040 		movsd	8(%rax), %xmm0
 6786      08
 6787 431f F20F5985 		mulsd	-3680(%rbp), %xmm0
 6787      A0F1FFFF 
 6788 4327 F20F5885 		addsd	-3672(%rbp), %xmm0
 6788      A8F1FFFF 
 6789 432f F20F1185 		movsd	%xmm0, -3048(%rbp)
 6789      18F4FFFF 
 649:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.y = rho_u_interface.y + feq_lattice[k] * e_alpha[k].y;
GAS LISTING /tmp/cc2K2nX4.s 			page 214


 6790              		.loc 9 649 0 discriminator 2
 6791 4337 F20F10BD 		movsd	-3040(%rbp), %xmm7
 6791      20F4FFFF 
 6792 433f F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6792      A8F1FFFF 
 6793 4347 8B851CF2 		movl	-3556(%rbp), %eax
 6793      FFFF
 6794 434d 4898     		cltq
 6795 434f F20F10A4 		movsd	-2048(%rbp,%rax,8), %xmm4
 6795      C500F8FF 
 6795      FF
 6796 4358 F20F11A5 		movsd	%xmm4, -3680(%rbp)
 6796      A0F1FFFF 
 6797 4360 8B851CF2 		movl	-3556(%rbp), %eax
 6797      FFFF
 6798 4366 4863D0   		movslq	%eax, %rdx
 6799 4369 488D85B0 		leaq	-3408(%rbp), %rax
 6799      F2FFFF
 6800 4370 4889D6   		movq	%rdx, %rsi
 6801 4373 4889C7   		movq	%rax, %rdi
 6802 4376 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6802      00
 6803 437b F20F1040 		movsd	16(%rax), %xmm0
 6803      10
 6804 4380 F20F5985 		mulsd	-3680(%rbp), %xmm0
 6804      A0F1FFFF 
 6805 4388 F20F5885 		addsd	-3672(%rbp), %xmm0
 6805      A8F1FFFF 
 6806 4390 F20F1185 		movsd	%xmm0, -3040(%rbp)
 6806      20F4FFFF 
 547:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             /// GET change in magnitude across the lattice
 6807              		.loc 9 547 0 discriminator 2
 6808 4398 83851CF2 		addl	$1, -3556(%rbp)
 6808      FFFF01
 6809 439f E91AF6FF 		jmp	.L504
 6809      FF
 6810              	.L490:
 6811              	.LBE44:
 650:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //rho_u_interface.z = rho_u_interface.z + feq_lattice[k] * e_alpha[k].z
 651:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 652:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 653:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                          // divide rho * u to get u but only after complete summation
 654:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 655:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_interface.x = rho_u_interface.x /soln_t0.get_average_rho();
 6812              		.loc 9 655 0
 6813 43a4 F20F10B5 		movsd	-3048(%rbp), %xmm6
 6813      18F4FFFF 
 6814 43ac F20F11B5 		movsd	%xmm6, -3672(%rbp)
 6814      A8F1FFFF 
 6815 43b4 488D85F0 		leaq	-2576(%rbp), %rax
 6815      F5FFFF
 6816 43bb 4889C7   		movq	%rax, %rdi
 6817 43be E8000000 		call	_ZN8Solution15get_average_rhoEv
 6817      00
 6818 43c3 F20F10B5 		movsd	-3672(%rbp), %xmm6
 6818      A8F1FFFF 
 6819 43cb F20F5EF0 		divsd	%xmm0, %xmm6
GAS LISTING /tmp/cc2K2nX4.s 			page 215


 6820 43cf 660F28C6 		movapd	%xmm6, %xmm0
 6821 43d3 F20F1185 		movsd	%xmm0, -3016(%rbp)
 6821      38F4FFFF 
 656:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_interface.y = rho_u_interface.y /soln_t0.get_average_rho();
 6822              		.loc 9 656 0
 6823 43db F20F10BD 		movsd	-3040(%rbp), %xmm7
 6823      20F4FFFF 
 6824 43e3 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6824      A8F1FFFF 
 6825 43eb 488D85F0 		leaq	-2576(%rbp), %rax
 6825      F5FFFF
 6826 43f2 4889C7   		movq	%rax, %rdi
 6827 43f5 E8000000 		call	_ZN8Solution15get_average_rhoEv
 6827      00
 6828 43fa F20F10BD 		movsd	-3672(%rbp), %xmm7
 6828      A8F1FFFF 
 6829 4402 F20F5EF8 		divsd	%xmm0, %xmm7
 6830 4406 660F28C7 		movapd	%xmm7, %xmm0
 6831 440a F20F1185 		movsd	%xmm0, -3008(%rbp)
 6831      40F4FFFF 
 657:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //u_interface.z = rho_u_interface.z /soln_t0.get_average_rho();
 658:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_magnitude = u_interface.Magnitude();
 6832              		.loc 9 658 0
 6833 4412 488D8530 		leaq	-3024(%rbp), %rax
 6833      F4FFFF
 6834 4419 4889C7   		movq	%rax, %rdi
 6835              	.LEHB91:
 6836 441c E8000000 		call	_ZN10vector_var9MagnitudeEv
 6836      00
 6837              	.LEHE91:
 6838 4421 66480F7E 		movq	%xmm0, %rax
 6838      C0
 6839 4426 48898570 		movq	%rax, -3472(%rbp)
 6839      F2FFFF
 6840              	.LBB45:
 659:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 660:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //interface nodes
 661:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 6841              		.loc 9 661 0
 6842 442d C78520F2 		movl	$0, -3552(%rbp)
 6842      FFFF0000 
 6842      0000
 6843              	.L506:
 6844              		.loc 9 661 0 is_stmt 0 discriminator 2
 6845 4437 83BD20F2 		cmpl	$8, -3552(%rbp)
 6845      FFFF08
 6846 443e 0F8F4B04 		jg	.L505
 6846      0000
 662:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 663:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 664:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 665:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // get feq at cell interface
 666:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface =feq_calc_incomp(lattice_weight[k],e_alpha[k], u_interfac
 6847              		.loc 9 666 0 is_stmt 1
 6848 4444 488D85F0 		leaq	-2576(%rbp), %rax
 6848      F5FFFF
 6849 444b 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 216


 6850 444e E8000000 		call	_ZN8Solution15get_average_rhoEv
 6850      00
 6851 4453 F20F1185 		movsd	%xmm0, -3672(%rbp)
 6851      A8F1FFFF 
 6852 445b F20F10AD 		movsd	-3536(%rbp), %xmm5
 6852      30F2FFFF 
 6853 4463 F20F11AD 		movsd	%xmm5, -3680(%rbp)
 6853      A0F1FFFF 
 6854 446b 488B85F8 		movq	-3592(%rbp), %rax
 6854      F1FFFF
 6855 4472 F20F1070 		movsd	40(%rax), %xmm6
 6855      28
 6856 4477 F20F11B5 		movsd	%xmm6, -3688(%rbp)
 6856      98F1FFFF 
 6857 447f 488D9530 		leaq	-3024(%rbp), %rdx
 6857      F4FFFF
 6858 4486 488D8590 		leaq	-2928(%rbp), %rax
 6858      F4FFFF
 6859 448d 4889D6   		movq	%rdx, %rsi
 6860 4490 4889C7   		movq	%rax, %rdi
 6861 4493 E8000000 		call	_ZN10vector_varC1ERKS_
 6861      00
 6862 4498 8B8520F2 		movl	-3552(%rbp), %eax
 6862      FFFF
 6863 449e 4863D0   		movslq	%eax, %rdx
 6864 44a1 488D85B0 		leaq	-3408(%rbp), %rax
 6864      F2FFFF
 6865 44a8 4889D6   		movq	%rdx, %rsi
 6866 44ab 4889C7   		movq	%rax, %rdi
 6867 44ae E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6867      00
 6868 44b3 4889C2   		movq	%rax, %rdx
 6869 44b6 488D8570 		leaq	-2960(%rbp), %rax
 6869      F4FFFF
 6870 44bd 4889D6   		movq	%rdx, %rsi
 6871 44c0 4889C7   		movq	%rax, %rdi
 6872 44c3 E8000000 		call	_ZN10vector_varC1ERKS_
 6872      00
 6873 44c8 8B8520F2 		movl	-3552(%rbp), %eax
 6873      FFFF
 6874 44ce 4898     		cltq
 6875 44d0 488BBCC5 		movq	-1808(%rbp,%rax,8), %rdi
 6875      F0F8FFFF 
 667:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 6876              		.loc 9 667 0
 6877 44d8 8B8D20F2 		movl	-3552(%rbp), %ecx
 6877      FFFF
 6878 44de F20F1085 		movsd	-3472(%rbp), %xmm0
 6878      70F2FFFF 
 6879 44e6 488D9590 		leaq	-2928(%rbp), %rdx
 6879      F4FFFF
 6880 44ed 488DB570 		leaq	-2960(%rbp), %rsi
 6880      F4FFFF
 6881 44f4 488B85F8 		movq	-3592(%rbp), %rax
 6881      F1FFFF
 6882 44fb F20F10A5 		movsd	-3672(%rbp), %xmm4
 6882      A8F1FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 217


 6883 4503 F20F109D 		movsd	-3680(%rbp), %xmm3
 6883      A0F1FFFF 
 6884 450b F20F1095 		movsd	-3688(%rbp), %xmm2
 6884      98F1FFFF 
 6885 4513 660F28C8 		movapd	%xmm0, %xmm1
 6886 4517 4889BDA8 		movq	%rdi, -3672(%rbp)
 6886      F1FFFF
 6887 451e F20F1085 		movsd	-3672(%rbp), %xmm0
 6887      A8F1FFFF 
 6888 4526 4889C7   		movq	%rax, %rdi
 6889              	.LEHB92:
 6890 4529 E8000000 		call	_ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi
 6890      00
 6891              	.LEHE92:
 6892 452e 66480F7E 		movq	%xmm0, %rax
 6892      C0
 6893 4533 48898578 		movq	%rax, -3464(%rbp)
 6893      F2FFFF
 666:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 6894              		.loc 9 666 0
 6895 453a 488D8570 		leaq	-2960(%rbp), %rax
 6895      F4FFFF
 6896 4541 4889C7   		movq	%rax, %rdi
 6897 4544 E8000000 		call	_ZN10vector_varD1Ev
 6897      00
 6898 4549 488D8590 		leaq	-2928(%rbp), %rax
 6898      F4FFFF
 6899 4550 4889C7   		movq	%rax, %rdi
 6900 4553 E8000000 		call	_ZN10vector_varD1Ev
 6900      00
 668:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             fneq_interface = -tau * ( feq_interface -feq_lattice[k]);
 6901              		.loc 9 668 0
 6902 4558 488B85F8 		movq	-3592(%rbp), %rax
 6902      F1FFFF
 6903 455f F20F1048 		movsd	16(%rax), %xmm1
 6903      10
 6904 4564 F20F1005 		movsd	.LC6(%rip), %xmm0
 6904      00000000 
 6905 456c 660F57C8 		xorpd	%xmm0, %xmm1
 6906 4570 8B8520F2 		movl	-3552(%rbp), %eax
 6906      FFFF
 6907 4576 4898     		cltq
 6908 4578 F20F1094 		movsd	-2048(%rbp,%rax,8), %xmm2
 6908      C500F8FF 
 6908      FF
 6909 4581 F20F1085 		movsd	-3464(%rbp), %xmm0
 6909      78F2FFFF 
 6910 4589 F20F5CC2 		subsd	%xmm2, %xmm0
 6911 458d F20F59C1 		mulsd	%xmm1, %xmm0
 6912 4591 F20F1185 		movsd	%xmm0, -3456(%rbp)
 6912      80F2FFFF 
 669:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 670:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     feq_int_debug[k] = feq_interface;
 6913              		.loc 9 670 0
 6914 4599 8B8520F2 		movl	-3552(%rbp), %eax
 6914      FFFF
 6915 459f 4898     		cltq
GAS LISTING /tmp/cc2K2nX4.s 			page 218


 6916 45a1 F20F1085 		movsd	-3464(%rbp), %xmm0
 6916      78F2FFFF 
 6917 45a9 F20F1184 		movsd	%xmm0, -1968(%rbp,%rax,8)
 6917      C550F8FF 
 6917      FF
 671:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     fneq_int_debug[k] = fneq_interface;
 6918              		.loc 9 671 0
 6919 45b2 8B8520F2 		movl	-3552(%rbp), %eax
 6919      FFFF
 6920 45b8 4898     		cltq
 6921 45ba F20F1085 		movsd	-3456(%rbp), %xmm0
 6921      80F2FFFF 
 6922 45c2 F20F1184 		movsd	%xmm0, -1888(%rbp,%rax,8)
 6922      C5A0F8FF 
 6922      FF
 672:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              //calculate fluxes from feq and fneq
 673:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             mom_flux_const = ( feq_interface + (1-1/(2*tau))*fneq_interface);
 6923              		.loc 9 673 0
 6924 45cb 488B85F8 		movq	-3592(%rbp), %rax
 6924      F1FFFF
 6925 45d2 F20F1040 		movsd	16(%rax), %xmm0
 6925      10
 6926 45d7 F20F58C0 		addsd	%xmm0, %xmm0
 6927 45db F20F100D 		movsd	.LC4(%rip), %xmm1
 6927      00000000 
 6928 45e3 F20F5EC8 		divsd	%xmm0, %xmm1
 6929 45e7 660F28C1 		movapd	%xmm1, %xmm0
 6930 45eb F20F100D 		movsd	.LC4(%rip), %xmm1
 6930      00000000 
 6931 45f3 F20F5CC8 		subsd	%xmm0, %xmm1
 6932 45f7 660F28C1 		movapd	%xmm1, %xmm0
 6933 45fb F20F5985 		mulsd	-3456(%rbp), %xmm0
 6933      80F2FFFF 
 6934 4603 F20F5885 		addsd	-3464(%rbp), %xmm0
 6934      78F2FFFF 
 6935 460b F20F1185 		movsd	%xmm0, -3448(%rbp)
 6935      88F2FFFF 
 674:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 675:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.P = x_flux.P + e_alpha[k].x* feq_interface;
 6936              		.loc 9 675 0
 6937 4613 F20F10BD 		movsd	-2840(%rbp), %xmm7
 6937      E8F4FFFF 
 6938 461b F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6938      A8F1FFFF 
 6939 4623 8B8520F2 		movl	-3552(%rbp), %eax
 6939      FFFF
 6940 4629 4863D0   		movslq	%eax, %rdx
 6941 462c 488D85B0 		leaq	-3408(%rbp), %rax
 6941      F2FFFF
 6942 4633 4889D6   		movq	%rdx, %rsi
 6943 4636 4889C7   		movq	%rax, %rdi
 6944 4639 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6944      00
 6945 463e F20F1040 		movsd	8(%rax), %xmm0
 6945      08
 6946 4643 F20F5985 		mulsd	-3464(%rbp), %xmm0
 6946      78F2FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 219


 6947 464b F20F5885 		addsd	-3672(%rbp), %xmm0
 6947      A8F1FFFF 
 6948 4653 F20F1185 		movsd	%xmm0, -2840(%rbp)
 6948      E8F4FFFF 
 676:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.P = y_flux.P +  e_alpha[k].y * feq_interface;
 6949              		.loc 9 676 0
 6950 465b F20F10AD 		movsd	-2792(%rbp), %xmm5
 6950      18F5FFFF 
 6951 4663 F20F11AD 		movsd	%xmm5, -3672(%rbp)
 6951      A8F1FFFF 
 6952 466b 8B8520F2 		movl	-3552(%rbp), %eax
 6952      FFFF
 6953 4671 4863D0   		movslq	%eax, %rdx
 6954 4674 488D85B0 		leaq	-3408(%rbp), %rax
 6954      F2FFFF
 6955 467b 4889D6   		movq	%rdx, %rsi
 6956 467e 4889C7   		movq	%rax, %rdi
 6957 4681 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6957      00
 6958 4686 F20F1040 		movsd	16(%rax), %xmm0
 6958      10
 6959 468b F20F5985 		mulsd	-3464(%rbp), %xmm0
 6959      78F2FFFF 
 6960 4693 F20F5885 		addsd	-3672(%rbp), %xmm0
 6960      A8F1FFFF 
 6961 469b F20F1185 		movsd	%xmm0, -2792(%rbp)
 6961      18F5FFFF 
 677:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_x = x_flux.momentum_x + e_alpha[k].x * (e_alpha[k].x) *
 6962              		.loc 9 677 0
 6963 46a3 F20F10B5 		movsd	-2832(%rbp), %xmm6
 6963      F0F4FFFF 
 6964 46ab F20F11B5 		movsd	%xmm6, -3672(%rbp)
 6964      A8F1FFFF 
 6965 46b3 8B8520F2 		movl	-3552(%rbp), %eax
 6965      FFFF
 6966 46b9 4863D0   		movslq	%eax, %rdx
 6967 46bc 488D85B0 		leaq	-3408(%rbp), %rax
 6967      F2FFFF
 6968 46c3 4889D6   		movq	%rdx, %rsi
 6969 46c6 4889C7   		movq	%rax, %rdi
 6970 46c9 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6970      00
 6971 46ce F20F1060 		movsd	8(%rax), %xmm4
 6971      08
 6972 46d3 F20F11A5 		movsd	%xmm4, -3680(%rbp)
 6972      A0F1FFFF 
 6973 46db 8B8520F2 		movl	-3552(%rbp), %eax
 6973      FFFF
 6974 46e1 4863D0   		movslq	%eax, %rdx
 6975 46e4 488D85B0 		leaq	-3408(%rbp), %rax
 6975      F2FFFF
 6976 46eb 4889D6   		movq	%rdx, %rsi
 6977 46ee 4889C7   		movq	%rax, %rdi
 6978 46f1 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6978      00
 6979 46f6 F20F1040 		movsd	8(%rax), %xmm0
 6979      08
GAS LISTING /tmp/cc2K2nX4.s 			page 220


 6980 46fb F20F5985 		mulsd	-3680(%rbp), %xmm0
 6980      A0F1FFFF 
 6981 4703 F20F5985 		mulsd	-3448(%rbp), %xmm0
 6981      88F2FFFF 
 6982 470b F20F5885 		addsd	-3672(%rbp), %xmm0
 6982      A8F1FFFF 
 6983 4713 F20F1185 		movsd	%xmm0, -2832(%rbp)
 6983      F0F4FFFF 
 678:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_y = x_flux.momentum_y + e_alpha[k].x*(e_alpha[k].y) *mo
 6984              		.loc 9 678 0
 6985 471b F20F10BD 		movsd	-2824(%rbp), %xmm7
 6985      F8F4FFFF 
 6986 4723 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 6986      A8F1FFFF 
 6987 472b 8B8520F2 		movl	-3552(%rbp), %eax
 6987      FFFF
 6988 4731 4863D0   		movslq	%eax, %rdx
 6989 4734 488D85B0 		leaq	-3408(%rbp), %rax
 6989      F2FFFF
 6990 473b 4889D6   		movq	%rdx, %rsi
 6991 473e 4889C7   		movq	%rax, %rdi
 6992 4741 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 6992      00
 6993 4746 F20F1068 		movsd	8(%rax), %xmm5
 6993      08
 6994 474b F20F11AD 		movsd	%xmm5, -3680(%rbp)
 6994      A0F1FFFF 
 6995 4753 8B8520F2 		movl	-3552(%rbp), %eax
 6995      FFFF
 6996 4759 4863D0   		movslq	%eax, %rdx
 6997 475c 488D85B0 		leaq	-3408(%rbp), %rax
 6997      F2FFFF
 6998 4763 4889D6   		movq	%rdx, %rsi
 6999 4766 4889C7   		movq	%rax, %rdi
 7000 4769 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 7000      00
 7001 476e F20F1040 		movsd	16(%rax), %xmm0
 7001      10
 7002 4773 F20F5985 		mulsd	-3680(%rbp), %xmm0
 7002      A0F1FFFF 
 7003 477b F20F5985 		mulsd	-3448(%rbp), %xmm0
 7003      88F2FFFF 
 7004 4783 F20F5885 		addsd	-3672(%rbp), %xmm0
 7004      A8F1FFFF 
 7005 478b F20F1185 		movsd	%xmm0, -2824(%rbp)
 7005      F8F4FFFF 
 679:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_x = y_flux.momentum_x + e_alpha[k].y*(e_alpha[k].x) * m
 7006              		.loc 9 679 0
 7007 4793 F20F10B5 		movsd	-2784(%rbp), %xmm6
 7007      20F5FFFF 
 7008 479b F20F11B5 		movsd	%xmm6, -3672(%rbp)
 7008      A8F1FFFF 
 7009 47a3 8B8520F2 		movl	-3552(%rbp), %eax
 7009      FFFF
 7010 47a9 4863D0   		movslq	%eax, %rdx
 7011 47ac 488D85B0 		leaq	-3408(%rbp), %rax
 7011      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 221


 7012 47b3 4889D6   		movq	%rdx, %rsi
 7013 47b6 4889C7   		movq	%rax, %rdi
 7014 47b9 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 7014      00
 7015 47be F20F1060 		movsd	16(%rax), %xmm4
 7015      10
 7016 47c3 F20F11A5 		movsd	%xmm4, -3680(%rbp)
 7016      A0F1FFFF 
 7017 47cb 8B8520F2 		movl	-3552(%rbp), %eax
 7017      FFFF
 7018 47d1 4863D0   		movslq	%eax, %rdx
 7019 47d4 488D85B0 		leaq	-3408(%rbp), %rax
 7019      F2FFFF
 7020 47db 4889D6   		movq	%rdx, %rsi
 7021 47de 4889C7   		movq	%rax, %rdi
 7022 47e1 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 7022      00
 7023 47e6 F20F1040 		movsd	8(%rax), %xmm0
 7023      08
 7024 47eb F20F5985 		mulsd	-3680(%rbp), %xmm0
 7024      A0F1FFFF 
 7025 47f3 F20F5985 		mulsd	-3448(%rbp), %xmm0
 7025      88F2FFFF 
 7026 47fb F20F5885 		addsd	-3672(%rbp), %xmm0
 7026      A8F1FFFF 
 7027 4803 F20F1185 		movsd	%xmm0, -2784(%rbp)
 7027      20F5FFFF 
 680:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_y = y_flux.momentum_y + e_alpha[k].y * (e_alpha[k].y) *
 7028              		.loc 9 680 0
 7029 480b F20F10BD 		movsd	-2776(%rbp), %xmm7
 7029      28F5FFFF 
 7030 4813 F20F11BD 		movsd	%xmm7, -3672(%rbp)
 7030      A8F1FFFF 
 7031 481b 8B8520F2 		movl	-3552(%rbp), %eax
 7031      FFFF
 7032 4821 4863D0   		movslq	%eax, %rdx
 7033 4824 488D85B0 		leaq	-3408(%rbp), %rax
 7033      F2FFFF
 7034 482b 4889D6   		movq	%rdx, %rsi
 7035 482e 4889C7   		movq	%rax, %rdi
 7036 4831 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 7036      00
 7037 4836 F20F1068 		movsd	16(%rax), %xmm5
 7037      10
 7038 483b F20F11AD 		movsd	%xmm5, -3680(%rbp)
 7038      A0F1FFFF 
 7039 4843 8B8520F2 		movl	-3552(%rbp), %eax
 7039      FFFF
 7040 4849 4863D0   		movslq	%eax, %rdx
 7041 484c 488D85B0 		leaq	-3408(%rbp), %rax
 7041      F2FFFF
 7042 4853 4889D6   		movq	%rdx, %rsi
 7043 4856 4889C7   		movq	%rax, %rdi
 7044 4859 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 7044      00
 7045 485e F20F1040 		movsd	16(%rax), %xmm0
 7045      10
GAS LISTING /tmp/cc2K2nX4.s 			page 222


 7046 4863 F20F5985 		mulsd	-3680(%rbp), %xmm0
 7046      A0F1FFFF 
 7047 486b F20F5985 		mulsd	-3448(%rbp), %xmm0
 7047      88F2FFFF 
 7048 4873 F20F5885 		addsd	-3672(%rbp), %xmm0
 7048      A8F1FFFF 
 7049 487b F20F1185 		movsd	%xmm0, -2776(%rbp)
 7049      28F5FFFF 
 661:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7050              		.loc 9 661 0
 7051 4883 838520F2 		addl	$1, -3552(%rbp)
 7051      FFFF01
 7052 488a E9A8FBFF 		jmp	.L506
 7052      FF
 7053              	.L505:
 7054              	.LBE45:
 681:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 682:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 683:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 684:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //calculate cell_flux across boundary
 685:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.P =  -1*interface_area *
 7055              		.loc 9 685 0
 7056 488f F20F108D 		movsd	-3528(%rbp), %xmm1
 7056      38F2FFFF 
 7057 4897 F20F1005 		movsd	.LC6(%rip), %xmm0
 7057      00000000 
 7058 489f 660F57C8 		xorpd	%xmm0, %xmm1
 686:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.P *cell_normal.x + y_flux.P * cell_normal.y);
 7059              		.loc 9 686 0
 7060 48a3 F20F1095 		movsd	-2840(%rbp), %xmm2
 7060      E8F4FFFF 
 7061 48ab F20F1085 		movsd	-2984(%rbp), %xmm0
 7061      58F4FFFF 
 7062 48b3 F20F59D0 		mulsd	%xmm0, %xmm2
 7063 48b7 F20F109D 		movsd	-2792(%rbp), %xmm3
 7063      18F5FFFF 
 7064 48bf F20F1085 		movsd	-2976(%rbp), %xmm0
 7064      60F4FFFF 
 7065 48c7 F20F59C3 		mulsd	%xmm3, %xmm0
 7066 48cb F20F58C2 		addsd	%xmm2, %xmm0
 685:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.P *cell_normal.x + y_flux.P * cell_normal.y);
 7067              		.loc 9 685 0
 7068 48cf F20F59C1 		mulsd	%xmm1, %xmm0
 7069              		.loc 9 686 0
 7070 48d3 F20F1185 		movsd	%xmm0, -2744(%rbp)
 7070      48F5FFFF 
 687:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_x = -1*interface_area *
 7071              		.loc 9 687 0
 7072 48db F20F108D 		movsd	-3528(%rbp), %xmm1
 7072      38F2FFFF 
 7073 48e3 F20F1005 		movsd	.LC6(%rip), %xmm0
 7073      00000000 
 7074 48eb 660F57C8 		xorpd	%xmm0, %xmm1
 688:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.momentum_x *cell_normal.x + y_flux.momentum_x * cell_normal.y);
 7075              		.loc 9 688 0
 7076 48ef F20F1095 		movsd	-2832(%rbp), %xmm2
 7076      F0F4FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 223


 7077 48f7 F20F1085 		movsd	-2984(%rbp), %xmm0
 7077      58F4FFFF 
 7078 48ff F20F59D0 		mulsd	%xmm0, %xmm2
 7079 4903 F20F109D 		movsd	-2784(%rbp), %xmm3
 7079      20F5FFFF 
 7080 490b F20F1085 		movsd	-2976(%rbp), %xmm0
 7080      60F4FFFF 
 7081 4913 F20F59C3 		mulsd	%xmm3, %xmm0
 7082 4917 F20F58C2 		addsd	%xmm2, %xmm0
 687:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_x = -1*interface_area *
 7083              		.loc 9 687 0
 7084 491b F20F59C1 		mulsd	%xmm1, %xmm0
 7085              		.loc 9 688 0
 7086 491f F20F1185 		movsd	%xmm0, -2736(%rbp)
 7086      50F5FFFF 
 689:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_y = -1*interface_area *
 7087              		.loc 9 689 0
 7088 4927 F20F108D 		movsd	-3528(%rbp), %xmm1
 7088      38F2FFFF 
 7089 492f F20F1005 		movsd	.LC6(%rip), %xmm0
 7089      00000000 
 7090 4937 660F57C8 		xorpd	%xmm0, %xmm1
 690:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                            (x_flux.momentum_y *cell_normal.x + y_flux.momentum_y * cell_normal.y);
 7091              		.loc 9 690 0
 7092 493b F20F1095 		movsd	-2824(%rbp), %xmm2
 7092      F8F4FFFF 
 7093 4943 F20F1085 		movsd	-2984(%rbp), %xmm0
 7093      58F4FFFF 
 7094 494b F20F59D0 		mulsd	%xmm0, %xmm2
 7095 494f F20F109D 		movsd	-2776(%rbp), %xmm3
 7095      28F5FFFF 
 7096 4957 F20F1085 		movsd	-2976(%rbp), %xmm0
 7096      60F4FFFF 
 7097 495f F20F59C3 		mulsd	%xmm3, %xmm0
 7098 4963 F20F58C2 		addsd	%xmm2, %xmm0
 689:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_flux.momentum_y = -1*interface_area *
 7099              		.loc 9 689 0
 7100 4967 F20F59C1 		mulsd	%xmm1, %xmm0
 7101              		.loc 9 690 0
 7102 496b F20F1185 		movsd	%xmm0, -2728(%rbp)
 7102      58F5FFFF 
 691:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 692:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 693:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 694:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 695:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add density flux to current cell and neighbouring cell
 696:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_rho(i,cell_flux.P/Mesh.get_cell_volume(i));
 7103              		.loc 9 696 0
 7104 4973 F20F10AD 		movsd	-2744(%rbp), %xmm5
 7104      48F5FFFF 
 7105 497b F20F11AD 		movsd	%xmm5, -3672(%rbp)
 7105      A8F1FFFF 
 7106 4983 8B9514F2 		movl	-3564(%rbp), %edx
 7106      FFFF
 7107 4989 488B85F0 		movq	-3600(%rbp), %rax
 7107      F1FFFF
 7108 4990 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 224


 7109 4992 4889C7   		movq	%rax, %rdi
 7110 4995 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7110      00
 7111 499a F20F10AD 		movsd	-3672(%rbp), %xmm5
 7111      A8F1FFFF 
 7112 49a2 F20F5EE8 		divsd	%xmm0, %xmm5
 7113 49a6 660F28C5 		movapd	%xmm5, %xmm0
 7114 49aa 8B9514F2 		movl	-3564(%rbp), %edx
 7114      FFFF
 7115 49b0 488D8540 		leaq	-2496(%rbp), %rax
 7115      F6FFFF
 7116 49b7 89D6     		movl	%edx, %esi
 7117 49b9 4889C7   		movq	%rax, %rdi
 7118 49bc E8000000 		call	_ZN8Solution7add_rhoEid
 7118      00
 697:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_rho(neighbour, -cell_flux.P/Mesh.get_cell_volume(neighb
 7119              		.loc 9 697 0
 7120 49c1 F20F108D 		movsd	-2744(%rbp), %xmm1
 7120      48F5FFFF 
 7121 49c9 F20F1005 		movsd	.LC6(%rip), %xmm0
 7121      00000000 
 7122 49d1 660F57C8 		xorpd	%xmm0, %xmm1
 7123 49d5 F20F118D 		movsd	%xmm1, -3672(%rbp)
 7123      A8F1FFFF 
 7124 49dd 8B9508F2 		movl	-3576(%rbp), %edx
 7124      FFFF
 7125 49e3 488B85F0 		movq	-3600(%rbp), %rax
 7125      F1FFFF
 7126 49ea 89D6     		movl	%edx, %esi
 7127 49ec 4889C7   		movq	%rax, %rdi
 7128 49ef E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7128      00
 7129 49f4 F20F108D 		movsd	-3672(%rbp), %xmm1
 7129      A8F1FFFF 
 7130 49fc F20F5EC8 		divsd	%xmm0, %xmm1
 7131 4a00 660F28C1 		movapd	%xmm1, %xmm0
 7132 4a04 8B9508F2 		movl	-3576(%rbp), %edx
 7132      FFFF
 7133 4a0a 488D8540 		leaq	-2496(%rbp), %rax
 7133      F6FFFF
 7134 4a11 89D6     		movl	%edx, %esi
 7135 4a13 4889C7   		movq	%rax, %rdi
 7136 4a16 E8000000 		call	_ZN8Solution7add_rhoEid
 7136      00
 698:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 699:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add x momentum
 700:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_u(i,cell_flux.momentum_x/Mesh.get_cell_volume(i));
 7137              		.loc 9 700 0
 7138 4a1b F20F10B5 		movsd	-2736(%rbp), %xmm6
 7138      50F5FFFF 
 7139 4a23 F20F11B5 		movsd	%xmm6, -3672(%rbp)
 7139      A8F1FFFF 
 7140 4a2b 8B9514F2 		movl	-3564(%rbp), %edx
 7140      FFFF
 7141 4a31 488B85F0 		movq	-3600(%rbp), %rax
 7141      F1FFFF
 7142 4a38 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 225


 7143 4a3a 4889C7   		movq	%rax, %rdi
 7144 4a3d E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7144      00
 7145 4a42 F20F10B5 		movsd	-3672(%rbp), %xmm6
 7145      A8F1FFFF 
 7146 4a4a F20F5EF0 		divsd	%xmm0, %xmm6
 7147 4a4e 660F28C6 		movapd	%xmm6, %xmm0
 7148 4a52 8B9514F2 		movl	-3564(%rbp), %edx
 7148      FFFF
 7149 4a58 488D8540 		leaq	-2496(%rbp), %rax
 7149      F6FFFF
 7150 4a5f 89D6     		movl	%edx, %esi
 7151 4a61 4889C7   		movq	%rax, %rdi
 7152 4a64 E8000000 		call	_ZN8Solution5add_uEid
 7152      00
 701:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_u(neighbour, -cell_flux.momentum_x/Mesh.get_cell_volume
 7153              		.loc 9 701 0
 7154 4a69 F20F108D 		movsd	-2736(%rbp), %xmm1
 7154      50F5FFFF 
 7155 4a71 F20F1005 		movsd	.LC6(%rip), %xmm0
 7155      00000000 
 7156 4a79 660F57C8 		xorpd	%xmm0, %xmm1
 7157 4a7d F20F118D 		movsd	%xmm1, -3672(%rbp)
 7157      A8F1FFFF 
 7158 4a85 8B9508F2 		movl	-3576(%rbp), %edx
 7158      FFFF
 7159 4a8b 488B85F0 		movq	-3600(%rbp), %rax
 7159      F1FFFF
 7160 4a92 89D6     		movl	%edx, %esi
 7161 4a94 4889C7   		movq	%rax, %rdi
 7162 4a97 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7162      00
 7163 4a9c F20F108D 		movsd	-3672(%rbp), %xmm1
 7163      A8F1FFFF 
 7164 4aa4 F20F5EC8 		divsd	%xmm0, %xmm1
 7165 4aa8 660F28C1 		movapd	%xmm1, %xmm0
 7166 4aac 8B9508F2 		movl	-3576(%rbp), %edx
 7166      FFFF
 7167 4ab2 488D8540 		leaq	-2496(%rbp), %rax
 7167      F6FFFF
 7168 4ab9 89D6     		movl	%edx, %esi
 7169 4abb 4889C7   		movq	%rax, %rdi
 7170 4abe E8000000 		call	_ZN8Solution5add_uEid
 7170      00
 702:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 703:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // add y momentum
 704:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_v(i,cell_flux.momentum_y/Mesh.get_cell_volume(i));
 7171              		.loc 9 704 0
 7172 4ac3 F20F10BD 		movsd	-2728(%rbp), %xmm7
 7172      58F5FFFF 
 7173 4acb F20F11BD 		movsd	%xmm7, -3672(%rbp)
 7173      A8F1FFFF 
 7174 4ad3 8B9514F2 		movl	-3564(%rbp), %edx
 7174      FFFF
 7175 4ad9 488B85F0 		movq	-3600(%rbp), %rax
 7175      F1FFFF
 7176 4ae0 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 226


 7177 4ae2 4889C7   		movq	%rax, %rdi
 7178 4ae5 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7178      00
 7179 4aea F20F10BD 		movsd	-3672(%rbp), %xmm7
 7179      A8F1FFFF 
 7180 4af2 F20F5EF8 		divsd	%xmm0, %xmm7
 7181 4af6 660F28C7 		movapd	%xmm7, %xmm0
 7182 4afa 8B9514F2 		movl	-3564(%rbp), %edx
 7182      FFFF
 7183 4b00 488D8540 		leaq	-2496(%rbp), %rax
 7183      F6FFFF
 7184 4b07 89D6     		movl	%edx, %esi
 7185 4b09 4889C7   		movq	%rax, %rdi
 7186 4b0c E8000000 		call	_ZN8Solution5add_vEid
 7186      00
 705:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         residual_worker.add_v(neighbour, -cell_flux.momentum_y/Mesh.get_cell_volume
 7187              		.loc 9 705 0
 7188 4b11 F20F108D 		movsd	-2728(%rbp), %xmm1
 7188      58F5FFFF 
 7189 4b19 F20F1005 		movsd	.LC6(%rip), %xmm0
 7189      00000000 
 7190 4b21 660F57C8 		xorpd	%xmm0, %xmm1
 7191 4b25 F20F118D 		movsd	%xmm1, -3672(%rbp)
 7191      A8F1FFFF 
 7192 4b2d 8B9508F2 		movl	-3576(%rbp), %edx
 7192      FFFF
 7193 4b33 488B85F0 		movq	-3600(%rbp), %rax
 7193      F1FFFF
 7194 4b3a 89D6     		movl	%edx, %esi
 7195 4b3c 4889C7   		movq	%rax, %rdi
 7196 4b3f E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 7196      00
 7197 4b44 F20F108D 		movsd	-3672(%rbp), %xmm1
 7197      A8F1FFFF 
 7198 4b4c F20F5EC8 		divsd	%xmm0, %xmm1
 7199 4b50 660F28C1 		movapd	%xmm1, %xmm0
 7200 4b54 8B9508F2 		movl	-3576(%rbp), %edx
 7200      FFFF
 7201 4b5a 488D8540 		leaq	-2496(%rbp), %rax
 7201      F6FFFF
 7202 4b61 89D6     		movl	%edx, %esi
 7203 4b63 4889C7   		movq	%rax, %rdi
 7204 4b66 E8000000 		call	_ZN8Solution5add_vEid
 7204      00
 706:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 707:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if ( j == 2){
 7205              		.loc 9 707 0
 7206 4b6b 83BD18F2 		cmpl	$2, -3560(%rbp)
 7206      FFFF02
 7207 4b72 7549     		jne	.L507
 708:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 rj2.update(cell_flux.P, cell_flux.momentum_x,cell_flux.momentum_y,0
 7208              		.loc 9 708 0
 7209 4b74 F20F108D 		movsd	-2728(%rbp), %xmm1
 7209      58F5FFFF 
 7210 4b7c F20F1085 		movsd	-2736(%rbp), %xmm0
 7210      50F5FFFF 
 7211 4b84 488B9548 		movq	-2744(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 227


 7211      F5FFFF
 7212 4b8b 8B8D14F2 		movl	-3564(%rbp), %ecx
 7212      FFFF
 7213 4b91 488D8590 		leaq	-2416(%rbp), %rax
 7213      F6FFFF
 7214 4b98 89CE     		movl	%ecx, %esi
 7215 4b9a 660FEFDB 		pxor	%xmm3, %xmm3
 7216 4b9e 660F28D1 		movapd	%xmm1, %xmm2
 7217 4ba2 660F28C8 		movapd	%xmm0, %xmm1
 7218 4ba6 488995A8 		movq	%rdx, -3672(%rbp)
 7218      F1FFFF
 7219 4bad F20F1085 		movsd	-3672(%rbp), %xmm0
 7219      A8F1FFFF 
 7220 4bb5 4889C7   		movq	%rax, %rdi
 7221              	.LEHB93:
 7222 4bb8 E8000000 		call	_ZN8Solution6updateEddddi
 7222      00
 7223              	.L507:
 709:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 710:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if (j==3){
 7224              		.loc 9 710 0
 7225 4bbd 83BD18F2 		cmpl	$3, -3560(%rbp)
 7225      FFFF03
 7226 4bc4 7549     		jne	.L508
 711:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 712:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rj3.update(cell_flux.P, cell_flux.momentum_x,cell_flux.momentum_y,0.0,i
 7227              		.loc 9 712 0
 7228 4bc6 F20F108D 		movsd	-2728(%rbp), %xmm1
 7228      58F5FFFF 
 7229 4bce F20F1085 		movsd	-2736(%rbp), %xmm0
 7229      50F5FFFF 
 7230 4bd6 488B9548 		movq	-2744(%rbp), %rdx
 7230      F5FFFF
 7231 4bdd 8B8D14F2 		movl	-3564(%rbp), %ecx
 7231      FFFF
 7232 4be3 488D85E0 		leaq	-2336(%rbp), %rax
 7232      F6FFFF
 7233 4bea 89CE     		movl	%ecx, %esi
 7234 4bec 660FEFDB 		pxor	%xmm3, %xmm3
 7235 4bf0 660F28D1 		movapd	%xmm1, %xmm2
 7236 4bf4 660F28C8 		movapd	%xmm0, %xmm1
 7237 4bf8 488995A8 		movq	%rdx, -3672(%rbp)
 7237      F1FFFF
 7238 4bff F20F1085 		movsd	-3672(%rbp), %xmm0
 7238      A8F1FFFF 
 7239 4c07 4889C7   		movq	%rax, %rdi
 7240 4c0a E8000000 		call	_ZN8Solution6updateEddddi
 7240      00
 7241              	.L508:
 7242              	.LBE43:
 520:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 7243              		.loc 9 520 0 discriminator 2
 7244 4c0f 838518F2 		addl	$1, -3560(%rbp)
 7244      FFFF01
 7245 4c16 E9D7E9FF 		jmp	.L509
 7245      FF
 7246              	.L488:
GAS LISTING /tmp/cc2K2nX4.s 			page 228


 7247              	.LBE42:
 7248              	.LBE41:
 7249              	.LBE40:
 7250              	.LBE39:
 501:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7251              		.loc 9 501 0 discriminator 2
 7252 4c1b 838514F2 		addl	$1, -3564(%rbp)
 7252      FFFF01
 7253 4c22 E9DDE8FF 		jmp	.L510
 7253      FF
 7254              	.L487:
 7255              	.LBE38:
 7256              	.LBB52:
 713:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 714:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 715:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 716:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 717:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
 718:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 719:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 720:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****           //  residual_worker.remove_double_errors();
 721:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 722:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //update RK values
 723:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             for( int i=0; i < Mesh.get_total_cells(); i++){
 7257              		.loc 9 723 0
 7258 4c27 C78524F2 		movl	$0, -3548(%rbp)
 7258      FFFF0000 
 7258      0000
 7259              	.L513:
 7260              		.loc 9 723 0 is_stmt 0 discriminator 1
 7261 4c31 488B85F0 		movq	-3600(%rbp), %rax
 7261      F1FFFF
 7262 4c38 4889C7   		movq	%rax, %rdi
 7263 4c3b E8000000 		call	_ZN4Mesh15get_total_cellsEv
 7263      00
 7264 4c40 3B8524F2 		cmpl	-3548(%rbp), %eax
 7264      FFFF
 7265 4c46 0F9FC0   		setg	%al
 7266 4c49 84C0     		testb	%al, %al
 7267 4c4b 0F846803 		je	.L511
 7267      0000
 724:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 725:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 7268              		.loc 9 725 0 is_stmt 1
 7269 4c51 8B9524F2 		movl	-3548(%rbp), %edx
 7269      FFFF
 7270 4c57 488B85E0 		movq	-3616(%rbp), %rax
 7270      F1FFFF
 7271 4c5e 89D6     		movl	%edx, %esi
 7272 4c60 4889C7   		movq	%rax, %rdi
 7273 4c63 E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 7273      00
 7274 4c68 83F001   		xorl	$1, %eax
 7275 4c6b 84C0     		testb	%al, %al
 7276 4c6d 0F843A03 		je	.L512
 7276      0000
 726:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 229


 727:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // update intermediate macroscopic variables
 728:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f1 = soln_t0.get_rho(i) + residual_worker.get_rho(i)*delta_t *rk4.alpha[rk+1] ;
 7277              		.loc 9 728 0
 7278 4c73 8B9524F2 		movl	-3548(%rbp), %edx
 7278      FFFF
 7279 4c79 488D85F0 		leaq	-2576(%rbp), %rax
 7279      F5FFFF
 7280 4c80 89D6     		movl	%edx, %esi
 7281 4c82 4889C7   		movq	%rax, %rdi
 7282 4c85 E8000000 		call	_ZN8Solution7get_rhoEi
 7282      00
 7283 4c8a F20F1185 		movsd	%xmm0, -3672(%rbp)
 7283      A8F1FFFF 
 7284 4c92 8B9524F2 		movl	-3548(%rbp), %edx
 7284      FFFF
 7285 4c98 488D8540 		leaq	-2496(%rbp), %rax
 7285      F6FFFF
 7286 4c9f 89D6     		movl	%edx, %esi
 7287 4ca1 4889C7   		movq	%rax, %rdi
 7288 4ca4 E8000000 		call	_ZN8Solution7get_rhoEi
 7288      00
 7289 4ca9 F20F5985 		mulsd	-3512(%rbp), %xmm0
 7289      48F2FFFF 
 7290 4cb1 8B8510F2 		movl	-3568(%rbp), %eax
 7290      FFFF
 7291 4cb7 83C001   		addl	$1, %eax
 7292 4cba 4898     		cltq
 7293 4cbc F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
 7293      C548F9FF 
 7293      FF
 7294 4cc5 F20F59C1 		mulsd	%xmm1, %xmm0
 7295 4cc9 F20F5885 		addsd	-3672(%rbp), %xmm0
 7295      A8F1FFFF 
 7296 4cd1 F20F1185 		movsd	%xmm0, -3440(%rbp)
 7296      90F2FFFF 
 729:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f2 = soln_t0.get_u(i) + residual_worker.get_u(i) *delta_t*rk4.alpha[rk +1];
 7297              		.loc 9 729 0
 7298 4cd9 8B9524F2 		movl	-3548(%rbp), %edx
 7298      FFFF
 7299 4cdf 488D85F0 		leaq	-2576(%rbp), %rax
 7299      F5FFFF
 7300 4ce6 89D6     		movl	%edx, %esi
 7301 4ce8 4889C7   		movq	%rax, %rdi
 7302 4ceb E8000000 		call	_ZN8Solution5get_uEi
 7302      00
 7303 4cf0 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7303      A8F1FFFF 
 7304 4cf8 8B9524F2 		movl	-3548(%rbp), %edx
 7304      FFFF
 7305 4cfe 488D8540 		leaq	-2496(%rbp), %rax
 7305      F6FFFF
 7306 4d05 89D6     		movl	%edx, %esi
 7307 4d07 4889C7   		movq	%rax, %rdi
 7308 4d0a E8000000 		call	_ZN8Solution5get_uEi
 7308      00
 7309 4d0f F20F5985 		mulsd	-3512(%rbp), %xmm0
 7309      48F2FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 230


 7310 4d17 8B8510F2 		movl	-3568(%rbp), %eax
 7310      FFFF
 7311 4d1d 83C001   		addl	$1, %eax
 7312 4d20 4898     		cltq
 7313 4d22 F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
 7313      C548F9FF 
 7313      FF
 7314 4d2b F20F59C1 		mulsd	%xmm1, %xmm0
 7315 4d2f F20F5885 		addsd	-3672(%rbp), %xmm0
 7315      A8F1FFFF 
 7316 4d37 F20F1185 		movsd	%xmm0, -3432(%rbp)
 7316      98F2FFFF 
 730:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 = soln_t0.get_v(i) + residual_worker.get_v(i) *delta_t*rk4.alpha[rk+1];
 7317              		.loc 9 730 0
 7318 4d3f 8B9524F2 		movl	-3548(%rbp), %edx
 7318      FFFF
 7319 4d45 488D85F0 		leaq	-2576(%rbp), %rax
 7319      F5FFFF
 7320 4d4c 89D6     		movl	%edx, %esi
 7321 4d4e 4889C7   		movq	%rax, %rdi
 7322 4d51 E8000000 		call	_ZN8Solution5get_vEi
 7322      00
 7323 4d56 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7323      A8F1FFFF 
 7324 4d5e 8B9524F2 		movl	-3548(%rbp), %edx
 7324      FFFF
 7325 4d64 488D8540 		leaq	-2496(%rbp), %rax
 7325      F6FFFF
 7326 4d6b 89D6     		movl	%edx, %esi
 7327 4d6d 4889C7   		movq	%rax, %rdi
 7328 4d70 E8000000 		call	_ZN8Solution5get_vEi
 7328      00
 7329 4d75 F20F5985 		mulsd	-3512(%rbp), %xmm0
 7329      48F2FFFF 
 7330 4d7d 8B8510F2 		movl	-3568(%rbp), %eax
 7330      FFFF
 7331 4d83 83C001   		addl	$1, %eax
 7332 4d86 4898     		cltq
 7333 4d88 F20F108C 		movsd	-1720(%rbp,%rax,8), %xmm1
 7333      C548F9FF 
 7333      FF
 7334 4d91 F20F59C1 		mulsd	%xmm1, %xmm0
 7335 4d95 F20F5885 		addsd	-3672(%rbp), %xmm0
 7335      A8F1FFFF 
 7336 4d9d F20F1185 		movsd	%xmm0, -3424(%rbp)
 7336      A0F2FFFF 
 731:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 732:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                       // change momentum to velocity
 733:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f2 = f2/soln_t0.get_average_rho();
 7337              		.loc 9 733 0
 7338 4da5 488D85F0 		leaq	-2576(%rbp), %rax
 7338      F5FFFF
 7339 4dac 4889C7   		movq	%rax, %rdi
 7340 4daf E8000000 		call	_ZN8Solution15get_average_rhoEv
 7340      00
 7341 4db4 660F28C8 		movapd	%xmm0, %xmm1
 7342 4db8 F20F1085 		movsd	-3432(%rbp), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 231


 7342      98F2FFFF 
 7343 4dc0 F20F5EC1 		divsd	%xmm1, %xmm0
 7344 4dc4 F20F1185 		movsd	%xmm0, -3432(%rbp)
 7344      98F2FFFF 
 734:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 =f3/soln_t0.get_average_rho();
 7345              		.loc 9 734 0
 7346 4dcc 488D85F0 		leaq	-2576(%rbp), %rax
 7346      F5FFFF
 7347 4dd3 4889C7   		movq	%rax, %rdi
 7348 4dd6 E8000000 		call	_ZN8Solution15get_average_rhoEv
 7348      00
 7349 4ddb 660F28C8 		movapd	%xmm0, %xmm1
 7350 4ddf F20F1085 		movsd	-3424(%rbp), %xmm0
 7350      A0F2FFFF 
 7351 4de7 F20F5EC1 		divsd	%xmm1, %xmm0
 7352 4deb F20F1185 		movsd	%xmm0, -3424(%rbp)
 7352      A0F2FFFF 
 735:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 736:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     temp_soln.update(f1,f2,f3,0.0, i);
 7353              		.loc 9 736 0
 7354 4df3 8B8D24F2 		movl	-3548(%rbp), %ecx
 7354      FFFF
 7355 4df9 F20F108D 		movsd	-3424(%rbp), %xmm1
 7355      A0F2FFFF 
 7356 4e01 F20F1085 		movsd	-3432(%rbp), %xmm0
 7356      98F2FFFF 
 7357 4e09 488B9590 		movq	-3440(%rbp), %rdx
 7357      F2FFFF
 7358 4e10 488D85A0 		leaq	-2656(%rbp), %rax
 7358      F5FFFF
 7359 4e17 89CE     		movl	%ecx, %esi
 7360 4e19 660FEFDB 		pxor	%xmm3, %xmm3
 7361 4e1d 660F28D1 		movapd	%xmm1, %xmm2
 7362 4e21 660F28C8 		movapd	%xmm0, %xmm1
 7363 4e25 488995A8 		movq	%rdx, -3672(%rbp)
 7363      F1FFFF
 7364 4e2c F20F1085 		movsd	-3672(%rbp), %xmm0
 7364      A8F1FFFF 
 7365 4e34 4889C7   		movq	%rax, %rdi
 7366 4e37 E8000000 		call	_ZN8Solution6updateEddddi
 7366      00
 737:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 738:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //add contribution
 739:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_rho(i, delta_t* rk4.beta[rk] * residual_worker.get_rho(i));
 7367              		.loc 9 739 0
 7368 4e3c 8B8510F2 		movl	-3568(%rbp), %eax
 7368      FFFF
 7369 4e42 4898     		cltq
 7370 4e44 4883C004 		addq	$4, %rax
 7371 4e48 F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 7371      C548F9FF 
 7371      FF
 7372 4e51 F20F5985 		mulsd	-3512(%rbp), %xmm0
 7372      48F2FFFF 
 7373 4e59 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7373      A8F1FFFF 
 7374 4e61 8B9524F2 		movl	-3548(%rbp), %edx
GAS LISTING /tmp/cc2K2nX4.s 			page 232


 7374      FFFF
 7375 4e67 488D8540 		leaq	-2496(%rbp), %rax
 7375      F6FFFF
 7376 4e6e 89D6     		movl	%edx, %esi
 7377 4e70 4889C7   		movq	%rax, %rdi
 7378 4e73 E8000000 		call	_ZN8Solution7get_rhoEi
 7378      00
 7379 4e78 F20F5985 		mulsd	-3672(%rbp), %xmm0
 7379      A8F1FFFF 
 7380 4e80 8B9524F2 		movl	-3548(%rbp), %edx
 7380      FFFF
 7381 4e86 488B85E8 		movq	-3608(%rbp), %rax
 7381      F1FFFF
 7382 4e8d 89D6     		movl	%edx, %esi
 7383 4e8f 4889C7   		movq	%rax, %rdi
 7384 4e92 E8000000 		call	_ZN8Solution7add_rhoEid
 7384      00
 740:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_u(i, delta_t* rk4.beta[rk] * residual_worker.get_u(i));
 7385              		.loc 9 740 0
 7386 4e97 8B8510F2 		movl	-3568(%rbp), %eax
 7386      FFFF
 7387 4e9d 4898     		cltq
 7388 4e9f 4883C004 		addq	$4, %rax
 7389 4ea3 F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 7389      C548F9FF 
 7389      FF
 7390 4eac F20F5985 		mulsd	-3512(%rbp), %xmm0
 7390      48F2FFFF 
 7391 4eb4 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7391      A8F1FFFF 
 7392 4ebc 8B9524F2 		movl	-3548(%rbp), %edx
 7392      FFFF
 7393 4ec2 488D8540 		leaq	-2496(%rbp), %rax
 7393      F6FFFF
 7394 4ec9 89D6     		movl	%edx, %esi
 7395 4ecb 4889C7   		movq	%rax, %rdi
 7396 4ece E8000000 		call	_ZN8Solution5get_uEi
 7396      00
 7397 4ed3 F20F5985 		mulsd	-3672(%rbp), %xmm0
 7397      A8F1FFFF 
 7398 4edb 8B9524F2 		movl	-3548(%rbp), %edx
 7398      FFFF
 7399 4ee1 488B85E8 		movq	-3608(%rbp), %rax
 7399      F1FFFF
 7400 4ee8 89D6     		movl	%edx, %esi
 7401 4eea 4889C7   		movq	%rax, %rdi
 7402 4eed E8000000 		call	_ZN8Solution5add_uEid
 7402      00
 741:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     soln.add_v(i, delta_t* rk4.beta[rk] * residual_worker.get_v(i));
 7403              		.loc 9 741 0
 7404 4ef2 8B8510F2 		movl	-3568(%rbp), %eax
 7404      FFFF
 7405 4ef8 4898     		cltq
 7406 4efa 4883C004 		addq	$4, %rax
 7407 4efe F20F1084 		movsd	-1720(%rbp,%rax,8), %xmm0
 7407      C548F9FF 
 7407      FF
GAS LISTING /tmp/cc2K2nX4.s 			page 233


 7408 4f07 F20F5985 		mulsd	-3512(%rbp), %xmm0
 7408      48F2FFFF 
 7409 4f0f F20F1185 		movsd	%xmm0, -3672(%rbp)
 7409      A8F1FFFF 
 7410 4f17 8B9524F2 		movl	-3548(%rbp), %edx
 7410      FFFF
 7411 4f1d 488D8540 		leaq	-2496(%rbp), %rax
 7411      F6FFFF
 7412 4f24 89D6     		movl	%edx, %esi
 7413 4f26 4889C7   		movq	%rax, %rdi
 7414 4f29 E8000000 		call	_ZN8Solution5get_vEi
 7414      00
 7415 4f2e F20F5985 		mulsd	-3672(%rbp), %xmm0
 7415      A8F1FFFF 
 7416 4f36 8B9524F2 		movl	-3548(%rbp), %edx
 7416      FFFF
 7417 4f3c 488B85E8 		movq	-3608(%rbp), %rax
 7417      F1FFFF
 7418 4f43 89D6     		movl	%edx, %esi
 7419 4f45 4889C7   		movq	%rax, %rdi
 7420 4f48 E8000000 		call	_ZN8Solution5add_vEid
 7420      00
 742:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 743:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( residual_worker.get_u(i) < 0  ){
 7421              		.loc 9 743 0
 7422 4f4d 8B9524F2 		movl	-3548(%rbp), %edx
 7422      FFFF
 7423 4f53 488D8540 		leaq	-2496(%rbp), %rax
 7423      F6FFFF
 7424 4f5a 89D6     		movl	%edx, %esi
 7425 4f5c 4889C7   		movq	%rax, %rdi
 7426 4f5f E8000000 		call	_ZN8Solution5get_uEi
 7426      00
 7427 4f64 660F28C8 		movapd	%xmm0, %xmm1
 7428 4f68 660FEFC0 		pxor	%xmm0, %xmm0
 7429 4f6c 660F2EC1 		ucomisd	%xmm1, %xmm0
 7430 4f70 0F97C0   		seta	%al
 7431 4f73 84C0     		testb	%al, %al
 7432 4f75 7436     		je	.L512
 744:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if( ! bcs.get_bc(i)){
 7433              		.loc 9 744 0
 7434 4f77 8B9524F2 		movl	-3548(%rbp), %edx
 7434      FFFF
 7435 4f7d 488B85E0 		movq	-3616(%rbp), %rax
 7435      F1FFFF
 7436 4f84 89D6     		movl	%edx, %esi
 7437 4f86 4889C7   		movq	%rax, %rdi
 7438 4f89 E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 7438      00
 7439 4f8e 83F001   		xorl	$1, %eax
 7440 4f91 84C0     		testb	%al, %al
 7441 4f93 7418     		je	.L512
 745:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 f2 = f2 + f3;
 7442              		.loc 9 745 0
 7443 4f95 F20F1085 		movsd	-3432(%rbp), %xmm0
 7443      98F2FFFF 
 7444 4f9d F20F5885 		addsd	-3424(%rbp), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 234


 7444      A0F2FFFF 
 7445 4fa5 F20F1185 		movsd	%xmm0, -3432(%rbp)
 7445      98F2FFFF 
 7446              	.L512:
 723:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7447              		.loc 9 723 0 discriminator 2
 7448 4fad 838524F2 		addl	$1, -3548(%rbp)
 7448      FFFF01
 7449 4fb4 E978FCFF 		jmp	.L513
 7449      FF
 7450              	.L511:
 7451              	.LBE52:
 7452              	.LBE37:
 491:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7453              		.loc 9 491 0 discriminator 2
 7454 4fb9 838510F2 		addl	$1, -3568(%rbp)
 7454      FFFF01
 7455 4fc0 E9F0E4FF 		jmp	.L514
 7455      FF
 7456              	.L486:
 7457              	.LBE36:
 7458              	.LBB55:
 746:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 747:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
 748:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
 749:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 }
 750:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 751:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
 752:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 753:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 754:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 755:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 756:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for( int i = 0; i < Mesh.get_total_cells(); i++){
 7459              		.loc 9 756 0
 7460 4fc5 C78528F2 		movl	$0, -3544(%rbp)
 7460      FFFF0000 
 7460      0000
 7461              	.L522:
 7462              		.loc 9 756 0 is_stmt 0 discriminator 1
 7463 4fcf 488B85F0 		movq	-3600(%rbp), %rax
 7463      F1FFFF
 7464 4fd6 4889C7   		movq	%rax, %rdi
 7465 4fd9 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 7465      00
 7466 4fde 3B8528F2 		cmpl	-3544(%rbp), %eax
 7466      FFFF
 7467 4fe4 0F9FC0   		setg	%al
 7468 4fe7 84C0     		testb	%al, %al
 7469 4fe9 0F849B01 		je	.L515
 7469      0000
 757:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 7470              		.loc 9 757 0 is_stmt 1
 7471 4fef 8B9528F2 		movl	-3544(%rbp), %edx
 7471      FFFF
 7472 4ff5 488B85E0 		movq	-3616(%rbp), %rax
 7472      F1FFFF
 7473 4ffc 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 235


 7474 4ffe 4889C7   		movq	%rax, %rdi
 7475 5001 E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 7475      00
 7476 5006 83F001   		xorl	$1, %eax
 7477 5009 84C0     		testb	%al, %al
 7478 500b 0F846D01 		je	.L516
 7478      0000
 758:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     convergence_residual.add_ansys_l2_norm_residuals(soln.get_rho(i),soln_t0.get_rh
 7479              		.loc 9 758 0
 7480 5011 8B9528F2 		movl	-3544(%rbp), %edx
 7480      FFFF
 7481 5017 488D85F0 		leaq	-2576(%rbp), %rax
 7481      F5FFFF
 7482 501e 89D6     		movl	%edx, %esi
 7483 5020 4889C7   		movq	%rax, %rdi
 7484 5023 E8000000 		call	_ZN8Solution5get_vEi
 7484      00
 7485 5028 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7485      A8F1FFFF 
 7486 5030 8B9528F2 		movl	-3544(%rbp), %edx
 7486      FFFF
 7487 5036 488B85E8 		movq	-3608(%rbp), %rax
 7487      F1FFFF
 7488 503d 89D6     		movl	%edx, %esi
 7489 503f 4889C7   		movq	%rax, %rdi
 7490 5042 E8000000 		call	_ZN8Solution5get_vEi
 7490      00
 7491 5047 F20F1185 		movsd	%xmm0, -3680(%rbp)
 7491      A0F1FFFF 
 7492 504f 8B9528F2 		movl	-3544(%rbp), %edx
 7492      FFFF
 7493 5055 488D85F0 		leaq	-2576(%rbp), %rax
 7493      F5FFFF
 7494 505c 89D6     		movl	%edx, %esi
 7495 505e 4889C7   		movq	%rax, %rdi
 7496 5061 E8000000 		call	_ZN8Solution5get_uEi
 7496      00
 7497 5066 F20F1185 		movsd	%xmm0, -3688(%rbp)
 7497      98F1FFFF 
 7498 506e 8B9528F2 		movl	-3544(%rbp), %edx
 7498      FFFF
 7499 5074 488B85E8 		movq	-3608(%rbp), %rax
 7499      F1FFFF
 7500 507b 89D6     		movl	%edx, %esi
 7501 507d 4889C7   		movq	%rax, %rdi
 7502 5080 E8000000 		call	_ZN8Solution5get_uEi
 7502      00
 7503 5085 F20F1185 		movsd	%xmm0, -3696(%rbp)
 7503      90F1FFFF 
 7504 508d 8B9528F2 		movl	-3544(%rbp), %edx
 7504      FFFF
 7505 5093 488D85F0 		leaq	-2576(%rbp), %rax
 7505      F5FFFF
 7506 509a 89D6     		movl	%edx, %esi
 7507 509c 4889C7   		movq	%rax, %rdi
 7508 509f E8000000 		call	_ZN8Solution7get_rhoEi
 7508      00
GAS LISTING /tmp/cc2K2nX4.s 			page 236


 7509 50a4 F20F1185 		movsd	%xmm0, -3704(%rbp)
 7509      88F1FFFF 
 7510 50ac 8B9528F2 		movl	-3544(%rbp), %edx
 7510      FFFF
 7511 50b2 488B85E8 		movq	-3608(%rbp), %rax
 7511      F1FFFF
 7512 50b9 89D6     		movl	%edx, %esi
 7513 50bb 4889C7   		movq	%rax, %rdi
 7514 50be E8000000 		call	_ZN8Solution7get_rhoEi
 7514      00
 7515 50c3 660F28F8 		movapd	%xmm0, %xmm7
 759:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     ,soln.get_u(i),soln_t0.get_u(i),
 760:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     soln.get_v(i),soln_t0.get_v(i),delta_t);
 7516              		.loc 9 760 0
 7517 50c7 F20F1085 		movsd	-3512(%rbp), %xmm0
 7517      48F2FFFF 
 7518 50cf 488D8530 		leaq	-2256(%rbp), %rax
 7518      F7FFFF
 7519 50d6 660F28F0 		movapd	%xmm0, %xmm6
 7520 50da F20F10AD 		movsd	-3672(%rbp), %xmm5
 7520      A8F1FFFF 
 7521 50e2 F20F10A5 		movsd	-3680(%rbp), %xmm4
 7521      A0F1FFFF 
 7522 50ea F20F109D 		movsd	-3688(%rbp), %xmm3
 7522      98F1FFFF 
 7523 50f2 F20F1095 		movsd	-3696(%rbp), %xmm2
 7523      90F1FFFF 
 7524 50fa F20F108D 		movsd	-3704(%rbp), %xmm1
 7524      88F1FFFF 
 7525 5102 660F28C7 		movapd	%xmm7, %xmm0
 7526 5106 4889C7   		movq	%rax, %rdi
 7527 5109 E8000000 		call	_ZN9residuals27add_ansys_l2_norm_residualsEddddddd
 7527      00
 761:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                        //error checking
 762:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if (std::isnan(temp_soln.get_rho(i)) || std::isnan(temp_soln.get_u(i))) {
 7528              		.loc 9 762 0
 7529 510e 8B9528F2 		movl	-3544(%rbp), %edx
 7529      FFFF
 7530 5114 488D85A0 		leaq	-2656(%rbp), %rax
 7530      F5FFFF
 7531 511b 89D6     		movl	%edx, %esi
 7532 511d 4889C7   		movq	%rax, %rdi
 7533 5120 E8000000 		call	_ZN8Solution7get_rhoEi
 7533      00
 7534 5125 E8000000 		call	_ZSt5isnand
 7534      00
 7535 512a 84C0     		testb	%al, %al
 7536 512c 7520     		jne	.L517
 7537              		.loc 9 762 0 is_stmt 0 discriminator 2
 7538 512e 8B9528F2 		movl	-3544(%rbp), %edx
 7538      FFFF
 7539 5134 488D85A0 		leaq	-2656(%rbp), %rax
 7539      F5FFFF
 7540 513b 89D6     		movl	%edx, %esi
 7541 513d 4889C7   		movq	%rax, %rdi
 7542 5140 E8000000 		call	_ZN8Solution5get_uEi
 7542      00
GAS LISTING /tmp/cc2K2nX4.s 			page 237


 7543 5145 E8000000 		call	_ZSt5isnand
 7543      00
 7544 514a 84C0     		testb	%al, %al
 7545 514c 7407     		je	.L518
 7546              	.L517:
 7547              		.loc 9 762 0 discriminator 3
 7548 514e B8010000 		movl	$1, %eax
 7548      00
 7549 5153 EB05     		jmp	.L519
 7550              	.L518:
 7551              		.loc 9 762 0 discriminator 4
 7552 5155 B8000000 		movl	$0, %eax
 7552      00
 7553              	.L519:
 7554              		.loc 9 762 0 discriminator 6
 7555 515a 84C0     		testb	%al, %al
 7556 515c 7420     		je	.L516
 763:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     if( mg == 0){
 7557              		.loc 9 763 0 is_stmt 1
 7558 515e 837D2800 		cmpl	$0, 40(%rbp)
 7559 5162 750F     		jne	.L520
 764:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                         error_output.close();
 7560              		.loc 9 764 0
 7561 5164 488D85D0 		leaq	-560(%rbp), %rax
 7561      FDFFFF
 7562 516b 4889C7   		movq	%rax, %rdi
 7563 516e E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 7563      00
 7564              	.L520:
 7565 5173 41BC0000 		movl	$0, %r12d
 7565      0000
 765:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     }
 766:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     return;
 7566              		.loc 9 766 0
 7567 5179 E9980200 		jmp	.L521
 7567      00
 7568              	.L516:
 756:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if( ! bcs.get_bc(i)){
 7569              		.loc 9 756 0 discriminator 2
 7570 517e 838528F2 		addl	$1, -3544(%rbp)
 7570      FFFF01
 7571 5185 E945FEFF 		jmp	.L522
 7571      FF
 7572              	.L515:
 7573              	.LBE55:
 767:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             }
 768:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 769:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 }
 770:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 771:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 772:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         convergence_residual.ansys_5_iter_rms(t);
 7574              		.loc 9 772 0
 7575 518a 8B950CF2 		movl	-3572(%rbp), %edx
 7575      FFFF
 7576 5190 488D8530 		leaq	-2256(%rbp), %rax
 7576      F7FFFF
 7577 5197 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 238


 7578 5199 4889C7   		movq	%rax, %rdi
 7579 519c E8000000 		call	_ZN9residuals16ansys_5_iter_rmsEi
 7579      00
 7580              	.LBB56:
 773:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 774:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if( mg == 0 && t%1000 == 1){
 7581              		.loc 9 774 0
 7582 51a1 837D2800 		cmpl	$0, 40(%rbp)
 7583 51a5 0F850702 		jne	.L523
 7583      0000
 7584              		.loc 9 774 0 is_stmt 0 discriminator 1
 7585 51ab 8B8D0CF2 		movl	-3572(%rbp), %ecx
 7585      FFFF
 7586 51b1 BAD34D62 		movl	$274877907, %edx
 7586      10
 7587 51b6 89C8     		movl	%ecx, %eax
 7588 51b8 F7EA     		imull	%edx
 7589 51ba C1FA06   		sarl	$6, %edx
 7590 51bd 89C8     		movl	%ecx, %eax
 7591 51bf C1F81F   		sarl	$31, %eax
 7592 51c2 29C2     		subl	%eax, %edx
 7593 51c4 89D0     		movl	%edx, %eax
 7594 51c6 69C0E803 		imull	$1000, %eax, %eax
 7594      0000
 7595 51cc 29C1     		subl	%eax, %ecx
 7596 51ce 89C8     		movl	%ecx, %eax
 7597 51d0 83F801   		cmpl	$1, %eax
 7598 51d3 0F85D901 		jne	.L523
 7598      0000
 7599              	.LBB57:
 775:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             time = t*delta_t;
 7600              		.loc 9 775 0 is_stmt 1
 7601 51d9 660FEFC0 		pxor	%xmm0, %xmm0
 7602 51dd F20F2A85 		cvtsi2sd	-3572(%rbp), %xmm0
 7602      0CF2FFFF 
 7603 51e5 F20F5985 		mulsd	-3512(%rbp), %xmm0
 7603      48F2FFFF 
 7604 51ed F20F1185 		movsd	%xmm0, -3416(%rbp)
 7604      A8F2FFFF 
 776:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.rho_rms << ", " << convergence_residual.u_rms << ", " <<
 778:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7605              		.loc 9 778 0
 7606 51f5 488B9D48 		movq	-2232(%rbp), %rbx
 7606      F7FFFF
 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7607              		.loc 9 777 0
 7608 51fc 4C8BA540 		movq	-2240(%rbp), %r12
 7608      F7FFFF
 7609 5203 4C8BAD38 		movq	-2248(%rbp), %r13
 7609      F7FFFF
 776:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 7610              		.loc 9 776 0
 7611 520a 488D8530 		leaq	-2256(%rbp), %rax
 7611      F7FFFF
 7612 5211 4889C7   		movq	%rax, %rdi
 7613 5214 E8000000 		call	_ZN9residuals9max_errorEv
GAS LISTING /tmp/cc2K2nX4.s 			page 239


 7613      00
 7614 5219 F20F1185 		movsd	%xmm0, -3672(%rbp)
 7614      A8F1FFFF 
 7615 5221 8B950CF2 		movl	-3572(%rbp), %edx
 7615      FFFF
 7616 5227 488D85D0 		leaq	-560(%rbp), %rax
 7616      FDFFFF
 7617 522e 89D6     		movl	%edx, %esi
 7618 5230 4889C7   		movq	%rax, %rdi
 7619 5233 E8000000 		call	_ZNSolsEi
 7619      00
 776:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 7620              		.loc 9 776 0 is_stmt 0 discriminator 1
 7621 5238 BE000000 		movl	$.LC7, %esi
 7621      00
 7622 523d 4889C7   		movq	%rax, %rdi
 7623 5240 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7623      00
 776:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 7624              		.loc 9 776 0 discriminator 2
 7625 5245 F20F1085 		movsd	-3672(%rbp), %xmm0
 7625      A8F1FFFF 
 7626 524d 4889C7   		movq	%rax, %rdi
 7627 5250 E8000000 		call	_ZNSolsEd
 7627      00
 776:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 7628              		.loc 9 776 0 discriminator 3
 7629 5255 BE000000 		movl	$.LC7, %esi
 7629      00
 7630 525a 4889C7   		movq	%rax, %rdi
 7631 525d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7631      00
 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7632              		.loc 9 777 0 is_stmt 1 discriminator 4
 7633 5262 4C89ADA8 		movq	%r13, -3672(%rbp)
 7633      F1FFFF
 7634 5269 F20F1085 		movsd	-3672(%rbp), %xmm0
 7634      A8F1FFFF 
 7635 5271 4889C7   		movq	%rax, %rdi
 7636 5274 E8000000 		call	_ZNSolsEd
 7636      00
 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7637              		.loc 9 777 0 is_stmt 0 discriminator 5
 7638 5279 BE000000 		movl	$.LC7, %esi
 7638      00
 7639 527e 4889C7   		movq	%rax, %rdi
 7640 5281 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7640      00
 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7641              		.loc 9 777 0 discriminator 1
 7642 5286 4C89A5A8 		movq	%r12, -3672(%rbp)
 7642      F1FFFF
 7643 528d F20F1085 		movsd	-3672(%rbp), %xmm0
 7643      A8F1FFFF 
 7644 5295 4889C7   		movq	%rax, %rdi
 7645 5298 E8000000 		call	_ZNSolsEd
 7645      00
GAS LISTING /tmp/cc2K2nX4.s 			page 240


 777:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 7646              		.loc 9 777 0 discriminator 2
 7647 529d BE000000 		movl	$.LC7, %esi
 7647      00
 7648 52a2 4889C7   		movq	%rax, %rdi
 7649 52a5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7649      00
 7650              		.loc 9 778 0 is_stmt 1 discriminator 3
 7651 52aa 48899DA8 		movq	%rbx, -3672(%rbp)
 7651      F1FFFF
 7652 52b1 F20F1085 		movsd	-3672(%rbp), %xmm0
 7652      A8F1FFFF 
 7653 52b9 4889C7   		movq	%rax, %rdi
 7654 52bc E8000000 		call	_ZNSolsEd
 7654      00
 7655              		.loc 9 778 0 is_stmt 0 discriminator 4
 7656 52c1 BE000000 		movl	$.LC8, %esi
 7656      00
 7657 52c6 4889C7   		movq	%rax, %rdi
 7658 52c9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7658      00
 7659              		.loc 9 778 0 discriminator 1
 7660 52ce 4889C2   		movq	%rax, %rdx
 7661 52d1 8B4538   		movl	56(%rbp), %eax
 7662 52d4 89C6     		movl	%eax, %esi
 7663 52d6 4889D7   		movq	%rdx, %rdi
 7664 52d9 E8000000 		call	_ZNSolsEi
 7664      00
 7665              		.loc 9 778 0 discriminator 2
 7666 52de BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 7666      00
 7667 52e3 4889C7   		movq	%rax, %rdi
 7668 52e6 E8000000 		call	_ZNSolsEPFRSoS_E
 7668      00
 779:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             cout << "time t=" << time  << " error e =" << convergence_residual.max_error() << std::
 7669              		.loc 9 779 0 is_stmt 1
 7670 52eb 488D8530 		leaq	-2256(%rbp), %rax
 7670      F7FFFF
 7671 52f2 4889C7   		movq	%rax, %rdi
 7672 52f5 E8000000 		call	_ZN9residuals9max_errorEv
 7672      00
 7673 52fa F20F1185 		movsd	%xmm0, -3672(%rbp)
 7673      A8F1FFFF 
 7674 5302 BE000000 		movl	$.LC9, %esi
 7674      00
 7675 5307 BF000000 		movl	$_ZSt4cout, %edi
 7675      00
 7676 530c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7676      00
 7677              		.loc 9 779 0 is_stmt 0 discriminator 1
 7678 5311 4889C2   		movq	%rax, %rdx
 7679 5314 488B85A8 		movq	-3416(%rbp), %rax
 7679      F2FFFF
 7680 531b 488985A0 		movq	%rax, -3680(%rbp)
 7680      F1FFFF
 7681 5322 F20F1085 		movsd	-3680(%rbp), %xmm0
 7681      A0F1FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 241


 7682 532a 4889D7   		movq	%rdx, %rdi
 7683 532d E8000000 		call	_ZNSolsEd
 7683      00
 7684              		.loc 9 779 0 discriminator 2
 7685 5332 BE000000 		movl	$.LC10, %esi
 7685      00
 7686 5337 4889C7   		movq	%rax, %rdi
 7687 533a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 7687      00
 7688              		.loc 9 779 0 discriminator 3
 7689 533f F20F1085 		movsd	-3672(%rbp), %xmm0
 7689      A8F1FFFF 
 7690 5347 4889C7   		movq	%rax, %rdi
 7691 534a E8000000 		call	_ZNSolsEd
 7691      00
 7692              		.loc 9 779 0 discriminator 4
 7693 534f BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 7693      00
 7694 5354 4889C7   		movq	%rax, %rdi
 7695 5357 E8000000 		call	_ZNSolsEPFRSoS_E
 7695      00
 780:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 781:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             tecplot_output solution(globals,Mesh,soln,bcs,2,time);
 7696              		.loc 9 781 0 is_stmt 1
 7697 535c 488BBDA8 		movq	-3416(%rbp), %rdi
 7697      F2FFFF
 7698 5363 4C8B85E0 		movq	-3616(%rbp), %r8
 7698      F1FFFF
 7699 536a 488B8DE8 		movq	-3608(%rbp), %rcx
 7699      F1FFFF
 7700 5371 488B95F0 		movq	-3600(%rbp), %rdx
 7700      F1FFFF
 7701 5378 488BB5D0 		movq	-3632(%rbp), %rsi
 7701      F1FFFF
 7702 537f 488D8590 		leaq	-2928(%rbp), %rax
 7702      F4FFFF
 7703 5386 4889BDA8 		movq	%rdi, -3672(%rbp)
 7703      F1FFFF
 7704 538d F20F1085 		movsd	-3672(%rbp), %xmm0
 7704      A8F1FFFF 
 7705 5395 41B90200 		movl	$2, %r9d
 7705      0000
 7706 539b 4889C7   		movq	%rax, %rdi
 7707 539e E8000000 		call	_ZN14tecplot_outputC1ER16global_variablesR4MeshR8SolutionR19Boundary_Conditionsid
 7707      00
 7708              		.loc 9 781 0 is_stmt 0 discriminator 1
 7709 53a3 488D8590 		leaq	-2928(%rbp), %rax
 7709      F4FFFF
 7710 53aa 4889C7   		movq	%rax, %rdi
 7711 53ad E8000000 		call	_ZN14tecplot_outputD1Ev
 7711      00
 7712              	.L523:
 7713              	.LBE57:
 7714              	.LBE56:
 782:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 783:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 784:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 242


 785:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 786:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 787:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 788:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 789:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 790:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 791:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 792:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if ( convergence_residual.max_error() < local_tolerance){
 7715              		.loc 9 792 0 is_stmt 1
 7716 53b2 488D8530 		leaq	-2256(%rbp), %rax
 7716      F7FFFF
 7717 53b9 4889C7   		movq	%rax, %rdi
 7718 53bc E8000000 		call	_ZN9residuals9max_errorEv
 7718      00
 7719 53c1 660F28C8 		movapd	%xmm0, %xmm1
 7720 53c5 F20F1085 		movsd	-3504(%rbp), %xmm0
 7720      50F2FFFF 
 7721 53cd 660F2EC1 		ucomisd	%xmm1, %xmm0
 7722 53d1 0F97C0   		seta	%al
 7723 53d4 84C0     		testb	%al, %al
 7724 53d6 741D     		je	.L524
 793:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             if( mg == 0){
 7725              		.loc 9 793 0
 7726 53d8 837D2800 		cmpl	$0, 40(%rbp)
 7727 53dc 750F     		jne	.L525
 794:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 error_output.close();
 7728              		.loc 9 794 0
 7729 53de 488D85D0 		leaq	-560(%rbp), %rax
 7729      FDFFFF
 7730 53e5 4889C7   		movq	%rax, %rdi
 7731 53e8 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 7731      00
 7732              	.L525:
 7733 53ed 41BC0000 		movl	$0, %r12d
 7733      0000
 795:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
 796:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             return ;
 7734              		.loc 9 796 0
 7735 53f3 EB21     		jmp	.L521
 7736              	.L524:
 7737              	.LBE35:
 482:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                        // soln is the solution at the start of every
 7738              		.loc 9 482 0 discriminator 2
 7739 53f5 83850CF2 		addl	$1, -3572(%rbp)
 7739      FFFF01
 7740 53fc E957E0FF 		jmp	.L526
 7740      FF
 7741              	.L485:
 7742              	.LBE34:
 797:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 798:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 799:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 800:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 801:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 802:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 803:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 804:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     error_output.close();
GAS LISTING /tmp/cc2K2nX4.s 			page 243


 7743              		.loc 9 804 0
 7744 5401 488D85D0 		leaq	-560(%rbp), %rax
 7744      FDFFFF
 7745 5408 4889C7   		movq	%rax, %rdi
 7746 540b E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 7746      00
 7747              	.LEHE93:
 7748 5410 41BC0100 		movl	$1, %r12d
 7748      0000
 7749              	.L521:
 7750 5416 488D9D10 		leaq	-1008(%rbp), %rbx
 7750      FCFFFF
 7751 541d 4881C3A0 		addq	$160, %rbx
 7751      000000
 7752              	.L528:
 7753 5424 488D8510 		leaq	-1008(%rbp), %rax
 7753      FCFFFF
 7754 542b 4839C3   		cmpq	%rax, %rbx
 7755 542e 7411     		je	.L527
 7756 5430 4883EB28 		subq	$40, %rbx
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7757              		.loc 9 454 0 discriminator 4
 7758 5434 488B03   		movq	(%rbx), %rax
 7759 5437 488B00   		movq	(%rax), %rax
 7760 543a 4889DF   		movq	%rbx, %rdi
 7761 543d FFD0     		call	*%rax
 7762 543f EBE3     		jmp	.L528
 7763              	.L527:
 7764 5441 4183FC01 		cmpl	$1, %r12d
 7765 5445 7408     		je	.L774
 7766 5447 41BC0000 		movl	$0, %r12d
 7766      0000
 7767 544d EB07     		jmp	.L532
 7768              	.L774:
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7769              		.loc 9 454 0 is_stmt 0
 7770 544f 90       		nop
 7771 5450 41BC0100 		movl	$1, %r12d
 7771      0000
 7772              	.L532:
 7773 5456 488D9D70 		leaq	-1168(%rbp), %rbx
 7773      FBFFFF
 7774 545d 4881C3A0 		addq	$160, %rbx
 7774      000000
 7775              	.L534:
 7776 5464 488D8570 		leaq	-1168(%rbp), %rax
 7776      FBFFFF
 7777 546b 4839C3   		cmpq	%rax, %rbx
 7778 546e 7411     		je	.L533
 7779 5470 4883EB28 		subq	$40, %rbx
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 7780              		.loc 9 453 0 is_stmt 1 discriminator 9
 7781 5474 488B03   		movq	(%rbx), %rax
 7782 5477 488B00   		movq	(%rax), %rax
 7783 547a 4889DF   		movq	%rbx, %rdi
 7784 547d FFD0     		call	*%rax
 7785 547f EBE3     		jmp	.L534
GAS LISTING /tmp/cc2K2nX4.s 			page 244


 7786              	.L533:
 7787 5481 4183FC01 		cmpl	$1, %r12d
 7788 5485 7408     		je	.L775
 7789 5487 41BC0000 		movl	$0, %r12d
 7789      0000
 7790 548d EB07     		jmp	.L538
 7791              	.L775:
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 7792              		.loc 9 453 0 is_stmt 0
 7793 548f 90       		nop
 7794 5490 41BC0100 		movl	$1, %r12d
 7794      0000
 7795              	.L538:
 7796 5496 488D9DD0 		leaq	-1328(%rbp), %rbx
 7796      FAFFFF
 7797 549d 4881C3A0 		addq	$160, %rbx
 7797      000000
 7798              	.L540:
 7799 54a4 488D85D0 		leaq	-1328(%rbp), %rax
 7799      FAFFFF
 7800 54ab 4839C3   		cmpq	%rax, %rbx
 7801 54ae 7411     		je	.L539
 7802 54b0 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7803              		.loc 9 452 0 is_stmt 1 discriminator 14
 7804 54b4 488B03   		movq	(%rbx), %rax
 7805 54b7 488B00   		movq	(%rax), %rax
 7806 54ba 4889DF   		movq	%rbx, %rdi
 7807 54bd FFD0     		call	*%rax
 7808 54bf EBE3     		jmp	.L540
 7809              	.L539:
 7810 54c1 4183FC01 		cmpl	$1, %r12d
 7811 54c5 7408     		je	.L776
 7812 54c7 41BC0000 		movl	$0, %r12d
 7812      0000
 7813 54cd EB07     		jmp	.L544
 7814              	.L776:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7815              		.loc 9 452 0 is_stmt 0
 7816 54cf 90       		nop
 7817 54d0 41BC0100 		movl	$1, %r12d
 7817      0000
 7818              	.L544:
 7819 54d6 488D9D30 		leaq	-1488(%rbp), %rbx
 7819      FAFFFF
 7820 54dd 4881C3A0 		addq	$160, %rbx
 7820      000000
 7821              	.L546:
 7822 54e4 488D8530 		leaq	-1488(%rbp), %rax
 7822      FAFFFF
 7823 54eb 4839C3   		cmpq	%rax, %rbx
 7824 54ee 7411     		je	.L545
 7825 54f0 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7826              		.loc 9 452 0 discriminator 19
 7827 54f4 488B03   		movq	(%rbx), %rax
 7828 54f7 488B00   		movq	(%rax), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 245


 7829 54fa 4889DF   		movq	%rbx, %rdi
 7830 54fd FFD0     		call	*%rax
 7831 54ff EBE3     		jmp	.L546
 7832              	.L545:
 7833 5501 4183FC01 		cmpl	$1, %r12d
 7834 5505 7408     		je	.L777
 7835 5507 41BC0000 		movl	$0, %r12d
 7835      0000
 7836 550d EB07     		jmp	.L550
 7837              	.L777:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7838              		.loc 9 452 0
 7839 550f 90       		nop
 7840 5510 41BC0100 		movl	$1, %r12d
 7840      0000
 7841              	.L550:
 7842 5516 488D9D90 		leaq	-1648(%rbp), %rbx
 7842      F9FFFF
 7843 551d 4881C3A0 		addq	$160, %rbx
 7843      000000
 7844              	.L552:
 7845 5524 488D8590 		leaq	-1648(%rbp), %rax
 7845      F9FFFF
 7846 552b 4839C3   		cmpq	%rax, %rbx
 7847 552e 7411     		je	.L551
 7848 5530 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7849              		.loc 9 452 0 discriminator 24
 7850 5534 488B03   		movq	(%rbx), %rax
 7851 5537 488B00   		movq	(%rax), %rax
 7852 553a 4889DF   		movq	%rbx, %rdi
 7853 553d FFD0     		call	*%rax
 7854 553f EBE3     		jmp	.L552
 7855              	.L551:
 7856 5541 4183FC01 		cmpl	$1, %r12d
 7857 5545 7407     		je	.L778
 7858 5547 BB000000 		movl	$0, %ebx
 7858      00
 7859 554c EB06     		jmp	.L556
 7860              	.L778:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 7861              		.loc 9 452 0
 7862 554e 90       		nop
 7863 554f BB010000 		movl	$1, %ebx
 7863      00
 7864              	.L556:
 7865 5554 488D8540 		leaq	-2752(%rbp), %rax
 7865      F5FFFF
 7866 555b 4889C7   		movq	%rax, %rdi
 7867 555e E8000000 		call	_ZN8flux_varD1Ev
 7867      00
 7868 5563 83FB01   		cmpl	$1, %ebx
 7869 5566 7407     		je	.L779
 7870 5568 BB000000 		movl	$0, %ebx
 7870      00
 7871 556d EB06     		jmp	.L560
 7872              	.L779:
GAS LISTING /tmp/cc2K2nX4.s 			page 246


 450:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 7873              		.loc 9 450 0 is_stmt 1
 7874 556f 90       		nop
 7875 5570 BB010000 		movl	$1, %ebx
 7875      00
 7876              	.L560:
 7877 5575 488D8510 		leaq	-2800(%rbp), %rax
 7877      F5FFFF
 7878 557c 4889C7   		movq	%rax, %rdi
 7879 557f E8000000 		call	_ZN8flux_varD1Ev
 7879      00
 7880 5584 83FB01   		cmpl	$1, %ebx
 7881 5587 7407     		je	.L780
 7882 5589 BB000000 		movl	$0, %ebx
 7882      00
 7883 558e EB06     		jmp	.L564
 7884              	.L780:
 449:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 7885              		.loc 9 449 0
 7886 5590 90       		nop
 7887 5591 BB010000 		movl	$1, %ebx
 7887      00
 7888              	.L564:
 7889 5596 488D85E0 		leaq	-2848(%rbp), %rax
 7889      F4FFFF
 7890 559d 4889C7   		movq	%rax, %rdi
 7891 55a0 E8000000 		call	_ZN8flux_varD1Ev
 7891      00
 7892 55a5 83FB01   		cmpl	$1, %ebx
 7893 55a8 7407     		je	.L781
 7894 55aa BB000000 		movl	$0, %ebx
 7894      00
 7895 55af EB06     		jmp	.L568
 7896              	.L781:
 7897 55b1 90       		nop
 7898 55b2 BB010000 		movl	$1, %ebx
 7898      00
 7899              	.L568:
 7900 55b7 488D8530 		leaq	-2256(%rbp), %rax
 7900      F7FFFF
 7901 55be 4889C7   		movq	%rax, %rdi
 7902 55c1 E8000000 		call	_ZN9residualsD1Ev
 7902      00
 7903 55c6 83FB01   		cmpl	$1, %ebx
 7904 55c9 7407     		je	.L782
 7905 55cb BB000000 		movl	$0, %ebx
 7905      00
 7906 55d0 EB06     		jmp	.L572
 7907              	.L782:
 448:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 7908              		.loc 9 448 0
 7909 55d2 90       		nop
 7910 55d3 BB010000 		movl	$1, %ebx
 7910      00
 7911              	.L572:
 7912 55d8 488D85B0 		leaq	-3408(%rbp), %rax
 7912      F2FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 247


 7913 55df 4889C7   		movq	%rax, %rdi
 7914 55e2 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EED1Ev
 7914      00
 7915 55e7 83FB01   		cmpl	$1, %ebx
 7916 55ea 7408     		je	.L783
 7917 55ec 41BC0000 		movl	$0, %r12d
 7917      0000
 7918 55f2 EB07     		jmp	.L576
 7919              	.L783:
 445:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7920              		.loc 9 445 0
 7921 55f4 90       		nop
 7922 55f5 41BC0100 		movl	$1, %r12d
 7922      0000
 7923              	.L576:
 7924 55fb 488D9DB0 		leaq	-848(%rbp), %rbx
 7924      FCFFFF
 7925 5602 4881C320 		addq	$288, %rbx
 7925      010000
 7926              	.L578:
 7927 5609 488D85B0 		leaq	-848(%rbp), %rax
 7927      FCFFFF
 7928 5610 4839C3   		cmpq	%rax, %rbx
 7929 5613 7411     		je	.L577
 7930 5615 4883EB20 		subq	$32, %rbx
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 7931              		.loc 9 444 0 discriminator 39
 7932 5619 488B03   		movq	(%rbx), %rax
 7933 561c 488B00   		movq	(%rax), %rax
 7934 561f 4889DF   		movq	%rbx, %rdi
 7935 5622 FFD0     		call	*%rax
 7936 5624 EBE3     		jmp	.L578
 7937              	.L577:
 7938 5626 4183FC01 		cmpl	$1, %r12d
 7939 562a 7407     		je	.L784
 7940 562c BB000000 		movl	$0, %ebx
 7940      00
 7941 5631 EB06     		jmp	.L582
 7942              	.L784:
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 7943              		.loc 9 444 0 is_stmt 0
 7944 5633 90       		nop
 7945 5634 BB010000 		movl	$1, %ebx
 7945      00
 7946              	.L582:
 7947 5639 488D8550 		leaq	-2992(%rbp), %rax
 7947      F4FFFF
 7948 5640 4889C7   		movq	%rax, %rdi
 7949 5643 E8000000 		call	_ZN10vector_varD1Ev
 7949      00
 7950 5648 83FB01   		cmpl	$1, %ebx
 7951 564b 7407     		je	.L785
 7952 564d BB000000 		movl	$0, %ebx
 7952      00
 7953 5652 EB06     		jmp	.L586
 7954              	.L785:
 443:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
GAS LISTING /tmp/cc2K2nX4.s 			page 248


 7955              		.loc 9 443 0 is_stmt 1
 7956 5654 90       		nop
 7957 5655 BB010000 		movl	$1, %ebx
 7957      00
 7958              	.L586:
 7959 565a 488D8530 		leaq	-3024(%rbp), %rax
 7959      F4FFFF
 7960 5661 4889C7   		movq	%rax, %rdi
 7961 5664 E8000000 		call	_ZN10vector_varD1Ev
 7961      00
 7962 5669 83FB01   		cmpl	$1, %ebx
 7963 566c 7407     		je	.L786
 7964 566e BB000000 		movl	$0, %ebx
 7964      00
 7965 5673 EB06     		jmp	.L590
 7966              	.L786:
 441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 7967              		.loc 9 441 0
 7968 5675 90       		nop
 7969 5676 BB010000 		movl	$1, %ebx
 7969      00
 7970              	.L590:
 7971 567b 488D8510 		leaq	-3056(%rbp), %rax
 7971      F4FFFF
 7972 5682 4889C7   		movq	%rax, %rdi
 7973 5685 E8000000 		call	_ZN10vector_varD1Ev
 7973      00
 7974 568a 83FB01   		cmpl	$1, %ebx
 7975 568d 7407     		je	.L787
 7976 568f BB000000 		movl	$0, %ebx
 7976      00
 7977 5694 EB06     		jmp	.L594
 7978              	.L787:
 7979 5696 90       		nop
 7980 5697 BB010000 		movl	$1, %ebx
 7980      00
 7981              	.L594:
 7982 569c 488D85F0 		leaq	-3088(%rbp), %rax
 7982      F3FFFF
 7983 56a3 4889C7   		movq	%rax, %rdi
 7984 56a6 E8000000 		call	_ZN10vector_varD1Ev
 7984      00
 7985 56ab 83FB01   		cmpl	$1, %ebx
 7986 56ae 7407     		je	.L788
 7987 56b0 BB000000 		movl	$0, %ebx
 7987      00
 7988 56b5 EB06     		jmp	.L598
 7989              	.L788:
 7990 56b7 90       		nop
 7991 56b8 BB010000 		movl	$1, %ebx
 7991      00
 7992              	.L598:
 7993 56bd 488D85D0 		leaq	-3120(%rbp), %rax
 7993      F3FFFF
 7994 56c4 4889C7   		movq	%rax, %rdi
 7995 56c7 E8000000 		call	_ZN10vector_varD1Ev
 7995      00
GAS LISTING /tmp/cc2K2nX4.s 			page 249


 7996 56cc 83FB01   		cmpl	$1, %ebx
 7997 56cf 7407     		je	.L789
 7998 56d1 BB000000 		movl	$0, %ebx
 7998      00
 7999 56d6 EB06     		jmp	.L602
 8000              	.L789:
 440:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 8001              		.loc 9 440 0
 8002 56d8 90       		nop
 8003 56d9 BB010000 		movl	$1, %ebx
 8003      00
 8004              	.L602:
 8005 56de 488D85B0 		leaq	-3152(%rbp), %rax
 8005      F3FFFF
 8006 56e5 4889C7   		movq	%rax, %rdi
 8007 56e8 E8000000 		call	_ZN10vector_varD1Ev
 8007      00
 8008 56ed 83FB01   		cmpl	$1, %ebx
 8009 56f0 7407     		je	.L790
 8010 56f2 BB000000 		movl	$0, %ebx
 8010      00
 8011 56f7 EB06     		jmp	.L606
 8012              	.L790:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8013              		.loc 9 439 0
 8014 56f9 90       		nop
 8015 56fa BB010000 		movl	$1, %ebx
 8015      00
 8016              	.L606:
 8017 56ff 488D8590 		leaq	-3184(%rbp), %rax
 8017      F3FFFF
 8018 5706 4889C7   		movq	%rax, %rdi
 8019 5709 E8000000 		call	_ZN10vector_varD1Ev
 8019      00
 8020 570e 83FB01   		cmpl	$1, %ebx
 8021 5711 7407     		je	.L791
 8022 5713 BB000000 		movl	$0, %ebx
 8022      00
 8023 5718 EB06     		jmp	.L610
 8024              	.L791:
 8025 571a 90       		nop
 8026 571b BB010000 		movl	$1, %ebx
 8026      00
 8027              	.L610:
 8028 5720 488D8570 		leaq	-3216(%rbp), %rax
 8028      F3FFFF
 8029 5727 4889C7   		movq	%rax, %rdi
 8030 572a E8000000 		call	_ZN10vector_varD1Ev
 8030      00
 8031 572f 83FB01   		cmpl	$1, %ebx
 8032 5732 7407     		je	.L792
 8033 5734 BB000000 		movl	$0, %ebx
 8033      00
 8034 5739 EB06     		jmp	.L614
 8035              	.L792:
 8036 573b 90       		nop
 8037 573c BB010000 		movl	$1, %ebx
GAS LISTING /tmp/cc2K2nX4.s 			page 250


 8037      00
 8038              	.L614:
 8039 5741 488D8550 		leaq	-3248(%rbp), %rax
 8039      F3FFFF
 8040 5748 4889C7   		movq	%rax, %rdi
 8041 574b E8000000 		call	_ZN10vector_varD1Ev
 8041      00
 8042 5750 83FB01   		cmpl	$1, %ebx
 8043 5753 7407     		je	.L793
 8044 5755 BB000000 		movl	$0, %ebx
 8044      00
 8045 575a EB06     		jmp	.L618
 8046              	.L793:
 8047 575c 90       		nop
 8048 575d BB010000 		movl	$1, %ebx
 8048      00
 8049              	.L618:
 8050 5762 488D8530 		leaq	-3280(%rbp), %rax
 8050      F3FFFF
 8051 5769 4889C7   		movq	%rax, %rdi
 8052 576c E8000000 		call	_ZN10vector_varD1Ev
 8052      00
 8053 5771 83FB01   		cmpl	$1, %ebx
 8054 5774 7407     		je	.L794
 8055 5776 BB000000 		movl	$0, %ebx
 8055      00
 8056 577b EB06     		jmp	.L622
 8057              	.L794:
 8058 577d 90       		nop
 8059 577e BB010000 		movl	$1, %ebx
 8059      00
 8060              	.L622:
 8061 5783 488D8510 		leaq	-3312(%rbp), %rax
 8061      F3FFFF
 8062 578a 4889C7   		movq	%rax, %rdi
 8063 578d E8000000 		call	_ZN10vector_varD1Ev
 8063      00
 8064 5792 83FB01   		cmpl	$1, %ebx
 8065 5795 7407     		je	.L795
 8066 5797 BB000000 		movl	$0, %ebx
 8066      00
 8067 579c EB06     		jmp	.L626
 8068              	.L795:
 8069 579e 90       		nop
 8070 579f BB010000 		movl	$1, %ebx
 8070      00
 8071              	.L626:
 8072 57a4 488D85F0 		leaq	-3344(%rbp), %rax
 8072      F2FFFF
 8073 57ab 4889C7   		movq	%rax, %rdi
 8074 57ae E8000000 		call	_ZN10vector_varD1Ev
 8074      00
 8075 57b3 83FB01   		cmpl	$1, %ebx
 8076 57b6 7407     		je	.L796
 8077 57b8 BB000000 		movl	$0, %ebx
 8077      00
 8078 57bd EB06     		jmp	.L630
GAS LISTING /tmp/cc2K2nX4.s 			page 251


 8079              	.L796:
 8080 57bf 90       		nop
 8081 57c0 BB010000 		movl	$1, %ebx
 8081      00
 8082              	.L630:
 8083 57c5 488D85D0 		leaq	-3376(%rbp), %rax
 8083      F2FFFF
 8084 57cc 4889C7   		movq	%rax, %rdi
 8085 57cf E8000000 		call	_ZN10vector_varD1Ev
 8085      00
 8086 57d4 83FB01   		cmpl	$1, %ebx
 8087 57d7 7407     		je	.L797
 8088 57d9 BB000000 		movl	$0, %ebx
 8088      00
 8089 57de EB06     		jmp	.L634
 8090              	.L797:
 8091 57e0 90       		nop
 8092 57e1 BB010000 		movl	$1, %ebx
 8092      00
 8093              	.L634:
 8094 57e6 488D85C0 		leaq	-2112(%rbp), %rax
 8094      F7FFFF
 8095 57ed 4889C7   		movq	%rax, %rdi
 8096 57f0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 8096      00
 8097 57f5 83FB01   		cmpl	$1, %ebx
 8098 57f8 7407     		je	.L798
 8099 57fa BB000000 		movl	$0, %ebx
 8099      00
 8100 57ff EB06     		jmp	.L638
 8101              	.L798:
 438:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 8102              		.loc 9 438 0
 8103 5801 90       		nop
 8104 5802 BB010000 		movl	$1, %ebx
 8104      00
 8105              	.L638:
 8106 5807 488D85D0 		leaq	-560(%rbp), %rax
 8106      FDFFFF
 8107 580e 4889C7   		movq	%rax, %rdi
 8108 5811 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 8108      00
 8109 5816 83FB01   		cmpl	$1, %ebx
 8110 5819 7407     		je	.L799
 8111 581b BB000000 		movl	$0, %ebx
 8111      00
 8112 5820 EB06     		jmp	.L642
 8113              	.L799:
 437:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 8114              		.loc 9 437 0
 8115 5822 90       		nop
 8116 5823 BB010000 		movl	$1, %ebx
 8116      00
 8117              	.L642:
 8118 5828 488D85B0 		leaq	-2896(%rbp), %rax
 8118      F4FFFF
 8119 582f 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 252


 8120 5832 E8000000 		call	_ZN8flux_varD1Ev
 8120      00
 8121 5837 83FB01   		cmpl	$1, %ebx
 8122 583a 7407     		je	.L800
 8123 583c BB000000 		movl	$0, %ebx
 8123      00
 8124 5841 EB06     		jmp	.L646
 8125              	.L800:
 419:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 8126              		.loc 9 419 0
 8127 5843 90       		nop
 8128 5844 BB010000 		movl	$1, %ebx
 8128      00
 8129              	.L646:
 8130 5849 488D85E0 		leaq	-2336(%rbp), %rax
 8130      F6FFFF
 8131 5850 4889C7   		movq	%rax, %rdi
 8132 5853 E8000000 		call	_ZN8SolutionD1Ev
 8132      00
 8133 5858 83FB01   		cmpl	$1, %ebx
 8134 585b 7407     		je	.L801
 8135 585d BB000000 		movl	$0, %ebx
 8135      00
 8136 5862 EB06     		jmp	.L650
 8137              	.L801:
 418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 8138              		.loc 9 418 0
 8139 5864 90       		nop
 8140 5865 BB010000 		movl	$1, %ebx
 8140      00
 8141              	.L650:
 8142 586a 488D8590 		leaq	-2416(%rbp), %rax
 8142      F6FFFF
 8143 5871 4889C7   		movq	%rax, %rdi
 8144 5874 E8000000 		call	_ZN8SolutionD1Ev
 8144      00
 8145 5879 83FB01   		cmpl	$1, %ebx
 8146 587c 7407     		je	.L802
 8147 587e BB000000 		movl	$0, %ebx
 8147      00
 8148 5883 EB06     		jmp	.L654
 8149              	.L802:
 417:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 8150              		.loc 9 417 0
 8151 5885 90       		nop
 8152 5886 BB010000 		movl	$1, %ebx
 8152      00
 8153              	.L654:
 8154 588b 488D8540 		leaq	-2496(%rbp), %rax
 8154      F6FFFF
 8155 5892 4889C7   		movq	%rax, %rdi
 8156 5895 E8000000 		call	_ZN8SolutionD1Ev
 8156      00
 8157 589a 83FB01   		cmpl	$1, %ebx
 8158 589d 7407     		je	.L803
 8159 589f BB000000 		movl	$0, %ebx
 8159      00
GAS LISTING /tmp/cc2K2nX4.s 			page 253


 8160 58a4 EB06     		jmp	.L658
 8161              	.L803:
 416:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 8162              		.loc 9 416 0
 8163 58a6 90       		nop
 8164 58a7 BB010000 		movl	$1, %ebx
 8164      00
 8165              	.L658:
 8166 58ac 488D85F0 		leaq	-2576(%rbp), %rax
 8166      F5FFFF
 8167 58b3 4889C7   		movq	%rax, %rdi
 8168 58b6 E8000000 		call	_ZN8SolutionD1Ev
 8168      00
 8169 58bb 83FB01   		cmpl	$1, %ebx
 8170 58be 7407     		je	.L804
 8171 58c0 BB000000 		movl	$0, %ebx
 8171      00
 8172 58c5 EB06     		jmp	.L662
 8173              	.L804:
 415:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 8174              		.loc 9 415 0
 8175 58c7 90       		nop
 8176 58c8 BB010000 		movl	$1, %ebx
 8176      00
 8177              	.L662:
 8178 58cd 488D85A0 		leaq	-2656(%rbp), %rax
 8178      F5FFFF
 8179 58d4 4889C7   		movq	%rax, %rdi
 8180 58d7 E8000000 		call	_ZN8SolutionD1Ev
 8180      00
 8181 58dc 83FB01   		cmpl	$1, %ebx
 8182 58df 7407     		je	.L805
 8183 58e1 BB000000 		movl	$0, %ebx
 8183      00
 8184 58e6 EB06     		jmp	.L666
 8185              	.L805:
 414:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
 8186              		.loc 9 414 0
 8187 58e8 90       		nop
 8188 58e9 BB010000 		movl	$1, %ebx
 8188      00
 8189              	.L666:
 8190 58ee 488D8540 		leaq	-1728(%rbp), %rax
 8190      F9FFFF
 8191 58f5 4889C7   		movq	%rax, %rdi
 8192 58f8 E8000000 		call	_ZN10RungeKuttaD1Ev
 8192      00
 8193 58fd 83FB01   		cmpl	$1, %ebx
 413:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 8194              		.loc 9 413 0
 8195 5900 90       		nop
 805:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 806:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 807:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 8196              		.loc 9 807 0
 8197 5901 488B45D8 		movq	-40(%rbp), %rax
 8198 5905 64483304 		xorq	%fs:40, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 254


 8198      25280000 
 8198      00
 8199 590e 0F846705 		je	.L736
 8199      0000
 8200 5914 E95D0500 		jmp	.L773
 8200      00
 8201              	.L757:
 8202 5919 4989C5   		movq	%rax, %r13
 8203 591c 4D85E4   		testq	%r12, %r12
 8204 591f 7426     		je	.L671
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 8205              		.loc 9 444 0 discriminator 88
 8206 5921 B8080000 		movl	$8, %eax
 8206      00
 8207 5926 4829D8   		subq	%rbx, %rax
 8208 5929 48C1E005 		salq	$5, %rax
 8209 592d 498D1C04 		leaq	(%r12,%rax), %rbx
 8210              	.L672:
 8211 5931 4C39E3   		cmpq	%r12, %rbx
 8212 5934 7411     		je	.L671
 8213 5936 4883EB20 		subq	$32, %rbx
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 8214              		.loc 9 444 0 is_stmt 0 discriminator 92
 8215 593a 488B03   		movq	(%rbx), %rax
 8216 593d 488B00   		movq	(%rax), %rax
 8217 5940 4889DF   		movq	%rbx, %rdi
 8218 5943 FFD0     		call	*%rax
 8219 5945 EBEA     		jmp	.L672
 8220              	.L671:
 8221 5947 4C89EB   		movq	%r13, %rbx
 8222 594a E96E0300 		jmp	.L673
 8222      00
 8223              	.L762:
 8224 594f 4989C5   		movq	%rax, %r13
 8225 5952 4D85E4   		testq	%r12, %r12
 8226 5955 7433     		je	.L675
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8227              		.loc 9 452 0 is_stmt 1 discriminator 94
 8228 5957 B8030000 		movl	$3, %eax
 8228      00
 8229 595c 4829D8   		subq	%rbx, %rax
 8230 595f 4889C2   		movq	%rax, %rdx
 8231 5962 4889D0   		movq	%rdx, %rax
 8232 5965 48C1E002 		salq	$2, %rax
 8233 5969 4801D0   		addq	%rdx, %rax
 8234 596c 48C1E003 		salq	$3, %rax
 8235 5970 498D1C04 		leaq	(%r12,%rax), %rbx
 8236              	.L676:
 8237 5974 4C39E3   		cmpq	%r12, %rbx
 8238 5977 7411     		je	.L675
 8239 5979 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8240              		.loc 9 452 0 is_stmt 0 discriminator 98
 8241 597d 488B03   		movq	(%rbx), %rax
 8242 5980 488B00   		movq	(%rax), %rax
 8243 5983 4889DF   		movq	%rbx, %rdi
 8244 5986 FFD0     		call	*%rax
GAS LISTING /tmp/cc2K2nX4.s 			page 255


 8245 5988 EBEA     		jmp	.L676
 8246              	.L675:
 8247 598a 4C89EB   		movq	%r13, %rbx
 8248 598d E99B0200 		jmp	.L677
 8248      00
 8249              	.L763:
 8250 5992 4989C5   		movq	%rax, %r13
 8251 5995 4D85E4   		testq	%r12, %r12
 8252 5998 7433     		je	.L679
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8253              		.loc 9 452 0 discriminator 100
 8254 599a B8030000 		movl	$3, %eax
 8254      00
 8255 599f 4829D8   		subq	%rbx, %rax
 8256 59a2 4889C2   		movq	%rax, %rdx
 8257 59a5 4889D0   		movq	%rdx, %rax
 8258 59a8 48C1E002 		salq	$2, %rax
 8259 59ac 4801D0   		addq	%rdx, %rax
 8260 59af 48C1E003 		salq	$3, %rax
 8261 59b3 498D1C04 		leaq	(%r12,%rax), %rbx
 8262              	.L680:
 8263 59b7 4C39E3   		cmpq	%r12, %rbx
 8264 59ba 7411     		je	.L679
 8265 59bc 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8266              		.loc 9 452 0 discriminator 104
 8267 59c0 488B03   		movq	(%rbx), %rax
 8268 59c3 488B00   		movq	(%rax), %rax
 8269 59c6 4889DF   		movq	%rbx, %rdi
 8270 59c9 FFD0     		call	*%rax
 8271 59cb EBEA     		jmp	.L680
 8272              	.L679:
 8273 59cd 4D89EC   		movq	%r13, %r12
 8274 59d0 E92A0200 		jmp	.L681
 8274      00
 8275              	.L764:
 8276 59d5 4989C5   		movq	%rax, %r13
 8277 59d8 4D85E4   		testq	%r12, %r12
 8278 59db 7433     		je	.L683
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8279              		.loc 9 452 0 discriminator 106
 8280 59dd B8030000 		movl	$3, %eax
 8280      00
 8281 59e2 4829D8   		subq	%rbx, %rax
 8282 59e5 4889C2   		movq	%rax, %rdx
 8283 59e8 4889D0   		movq	%rdx, %rax
 8284 59eb 48C1E002 		salq	$2, %rax
 8285 59ef 4801D0   		addq	%rdx, %rax
 8286 59f2 48C1E003 		salq	$3, %rax
 8287 59f6 498D1C04 		leaq	(%r12,%rax), %rbx
 8288              	.L684:
 8289 59fa 4C39E3   		cmpq	%r12, %rbx
 8290 59fd 7411     		je	.L683
 8291 59ff 4883EB28 		subq	$40, %rbx
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8292              		.loc 9 452 0 discriminator 110
 8293 5a03 488B03   		movq	(%rbx), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 256


 8294 5a06 488B00   		movq	(%rax), %rax
 8295 5a09 4889DF   		movq	%rbx, %rdi
 8296 5a0c FFD0     		call	*%rax
 8297 5a0e EBEA     		jmp	.L684
 8298              	.L683:
 8299 5a10 4D89EC   		movq	%r13, %r12
 8300 5a13 E9BC0100 		jmp	.L685
 8300      00
 8301              	.L765:
 8302 5a18 4989C5   		movq	%rax, %r13
 8303 5a1b 4D85E4   		testq	%r12, %r12
 8304 5a1e 7433     		je	.L687
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 8305              		.loc 9 453 0 is_stmt 1 discriminator 112
 8306 5a20 B8030000 		movl	$3, %eax
 8306      00
 8307 5a25 4829D8   		subq	%rbx, %rax
 8308 5a28 4889C2   		movq	%rax, %rdx
 8309 5a2b 4889D0   		movq	%rdx, %rax
 8310 5a2e 48C1E002 		salq	$2, %rax
 8311 5a32 4801D0   		addq	%rdx, %rax
 8312 5a35 48C1E003 		salq	$3, %rax
 8313 5a39 498D1C04 		leaq	(%r12,%rax), %rbx
 8314              	.L688:
 8315 5a3d 4C39E3   		cmpq	%r12, %rbx
 8316 5a40 7411     		je	.L687
 8317 5a42 4883EB28 		subq	$40, %rbx
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 8318              		.loc 9 453 0 is_stmt 0 discriminator 116
 8319 5a46 488B03   		movq	(%rbx), %rax
 8320 5a49 488B00   		movq	(%rax), %rax
 8321 5a4c 4889DF   		movq	%rbx, %rdi
 8322 5a4f FFD0     		call	*%rax
 8323 5a51 EBEA     		jmp	.L688
 8324              	.L687:
 8325 5a53 4D89EC   		movq	%r13, %r12
 8326 5a56 E94E0100 		jmp	.L689
 8326      00
 8327              	.L766:
 8328 5a5b 4989C5   		movq	%rax, %r13
 8329 5a5e 4D85E4   		testq	%r12, %r12
 8330 5a61 7433     		je	.L691
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8331              		.loc 9 454 0 is_stmt 1 discriminator 118
 8332 5a63 B8030000 		movl	$3, %eax
 8332      00
 8333 5a68 4829D8   		subq	%rbx, %rax
 8334 5a6b 4889C2   		movq	%rax, %rdx
 8335 5a6e 4889D0   		movq	%rdx, %rax
 8336 5a71 48C1E002 		salq	$2, %rax
 8337 5a75 4801D0   		addq	%rdx, %rax
 8338 5a78 48C1E003 		salq	$3, %rax
 8339 5a7c 498D1C04 		leaq	(%r12,%rax), %rbx
 8340              	.L692:
 8341 5a80 4C39E3   		cmpq	%r12, %rbx
 8342 5a83 7411     		je	.L691
 8343 5a85 4883EB28 		subq	$40, %rbx
GAS LISTING /tmp/cc2K2nX4.s 			page 257


 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8344              		.loc 9 454 0 is_stmt 0 discriminator 122
 8345 5a89 488B03   		movq	(%rbx), %rax
 8346 5a8c 488B00   		movq	(%rax), %rax
 8347 5a8f 4889DF   		movq	%rbx, %rdi
 8348 5a92 FFD0     		call	*%rax
 8349 5a94 EBEA     		jmp	.L692
 8350              	.L691:
 8351 5a96 4D89EC   		movq	%r13, %r12
 8352 5a99 E9E00000 		jmp	.L693
 8352      00
 8353              	.L768:
 8354 5a9e 4889C3   		movq	%rax, %rbx
 476:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****    // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::out);
 8355              		.loc 9 476 0 is_stmt 1
 8356 5aa1 488D85E0 		leaq	-2080(%rbp), %rax
 8356      F7FFFF
 8357 5aa8 4889C7   		movq	%rax, %rdi
 8358 5aab E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 8358      00
 8359 5ab0 4989DC   		movq	%rbx, %r12
 8360 5ab3 E99B0000 		jmp	.L695
 8360      00
 8361              	.L769:
 8362 5ab8 4889C3   		movq	%rax, %rbx
 8363              	.LBB60:
 8364              	.LBB59:
 8365              	.LBB58:
 8366              	.LBB54:
 8367              	.LBB53:
 8368              	.LBB51:
 8369              	.LBB50:
 8370              	.LBB49:
 8371              	.LBB48:
 8372              	.LBB47:
 533:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), temp_soln.get_u(neighbour),cell_1,
 8373              		.loc 9 533 0
 8374 5abb 488D8570 		leaq	-2960(%rbp), %rax
 8374      F4FFFF
 8375 5ac2 4889C7   		movq	%rax, %rdi
 8376 5ac5 E8000000 		call	_ZN10vector_varD1Ev
 8376      00
 8377 5aca 488D8590 		leaq	-2928(%rbp), %rax
 8377      F4FFFF
 8378 5ad1 4889C7   		movq	%rax, %rdi
 8379 5ad4 E8000000 		call	_ZN10vector_varD1Ev
 8379      00
 8380 5ad9 4989DC   		movq	%rbx, %r12
 8381 5adc EB75     		jmp	.L695
 8382              	.L770:
 8383 5ade 4889C3   		movq	%rax, %rbx
 534:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), temp_soln.get_v(neighbour),cell_1,
 8384              		.loc 9 534 0
 8385 5ae1 488D8570 		leaq	-2960(%rbp), %rax
 8385      F4FFFF
 8386 5ae8 4889C7   		movq	%rax, %rdi
 8387 5aeb E8000000 		call	_ZN10vector_varD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 258


 8387      00
 8388 5af0 488D8590 		leaq	-2928(%rbp), %rax
 8388      F4FFFF
 8389 5af7 4889C7   		movq	%rax, %rdi
 8390 5afa E8000000 		call	_ZN10vector_varD1Ev
 8390      00
 8391 5aff 4989DC   		movq	%rbx, %r12
 8392 5b02 EB4F     		jmp	.L695
 8393              	.L771:
 8394 5b04 4889C3   		movq	%rax, %rbx
 535:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8395              		.loc 9 535 0
 8396 5b07 488D8570 		leaq	-2960(%rbp), %rax
 8396      F4FFFF
 8397 5b0e 4889C7   		movq	%rax, %rdi
 8398 5b11 E8000000 		call	_ZN10vector_varD1Ev
 8398      00
 8399 5b16 488D8590 		leaq	-2928(%rbp), %rax
 8399      F4FFFF
 8400 5b1d 4889C7   		movq	%rax, %rdi
 8401 5b20 E8000000 		call	_ZN10vector_varD1Ev
 8401      00
 8402 5b25 4989DC   		movq	%rbx, %r12
 8403 5b28 EB29     		jmp	.L695
 8404              	.L772:
 8405 5b2a 4889C3   		movq	%rax, %rbx
 8406              	.LBB46:
 666:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     cs,rho_interface,soln_t0.get_average_rho(),k);
 8407              		.loc 9 666 0
 8408 5b2d 488D8570 		leaq	-2960(%rbp), %rax
 8408      F4FFFF
 8409 5b34 4889C7   		movq	%rax, %rdi
 8410 5b37 E8000000 		call	_ZN10vector_varD1Ev
 8410      00
 8411 5b3c 488D8590 		leaq	-2928(%rbp), %rax
 8411      F4FFFF
 8412 5b43 4889C7   		movq	%rax, %rdi
 8413 5b46 E8000000 		call	_ZN10vector_varD1Ev
 8413      00
 8414 5b4b 4989DC   		movq	%rbx, %r12
 8415 5b4e EB03     		jmp	.L695
 8416              	.L767:
 8417 5b50 4989C4   		movq	%rax, %r12
 8418              	.L695:
 8419              	.LBE46:
 8420              	.LBE47:
 8421              	.LBE48:
 8422              	.LBE49:
 8423              	.LBE50:
 8424              	.LBE51:
 8425              	.LBE53:
 8426              	.LBE54:
 8427              	.LBE58:
 8428              	.LBE59:
 8429              	.LBE60:
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8430              		.loc 9 454 0
GAS LISTING /tmp/cc2K2nX4.s 			page 259


 8431 5b53 488D9D10 		leaq	-1008(%rbp), %rbx
 8431      FCFFFF
 8432 5b5a 4881C3A0 		addq	$160, %rbx
 8432      000000
 8433              	.L701:
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8434              		.loc 9 454 0 is_stmt 0 discriminator 8
 8435 5b61 488D8510 		leaq	-1008(%rbp), %rax
 8435      FCFFFF
 8436 5b68 4839C3   		cmpq	%rax, %rbx
 8437 5b6b 7411     		je	.L693
 454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8438              		.loc 9 454 0 discriminator 7
 8439 5b6d 4883EB28 		subq	$40, %rbx
 8440 5b71 488B03   		movq	(%rbx), %rax
 8441 5b74 488B00   		movq	(%rax), %rax
 8442 5b77 4889DF   		movq	%rbx, %rdi
 8443 5b7a FFD0     		call	*%rax
 8444 5b7c EBE3     		jmp	.L701
 8445              	.L693:
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 8446              		.loc 9 453 0 is_stmt 1
 8447 5b7e 488D9D70 		leaq	-1168(%rbp), %rbx
 8447      FBFFFF
 8448 5b85 4881C3A0 		addq	$160, %rbx
 8448      000000
 8449              	.L703:
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 8450              		.loc 9 453 0 is_stmt 0 discriminator 8
 8451 5b8c 488D8570 		leaq	-1168(%rbp), %rax
 8451      FBFFFF
 8452 5b93 4839C3   		cmpq	%rax, %rbx
 8453 5b96 7411     		je	.L689
 453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 8454              		.loc 9 453 0 discriminator 7
 8455 5b98 4883EB28 		subq	$40, %rbx
 8456 5b9c 488B03   		movq	(%rbx), %rax
 8457 5b9f 488B00   		movq	(%rax), %rax
 8458 5ba2 4889DF   		movq	%rbx, %rdi
 8459 5ba5 FFD0     		call	*%rax
 8460 5ba7 EBE3     		jmp	.L703
 8461              	.L689:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8462              		.loc 9 452 0 is_stmt 1
 8463 5ba9 488D9DD0 		leaq	-1328(%rbp), %rbx
 8463      FAFFFF
 8464 5bb0 4881C3A0 		addq	$160, %rbx
 8464      000000
 8465              	.L705:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8466              		.loc 9 452 0 is_stmt 0 discriminator 18
 8467 5bb7 488D85D0 		leaq	-1328(%rbp), %rax
 8467      FAFFFF
 8468 5bbe 4839C3   		cmpq	%rax, %rbx
 8469 5bc1 7411     		je	.L685
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8470              		.loc 9 452 0 discriminator 17
GAS LISTING /tmp/cc2K2nX4.s 			page 260


 8471 5bc3 4883EB28 		subq	$40, %rbx
 8472 5bc7 488B03   		movq	(%rbx), %rax
 8473 5bca 488B00   		movq	(%rax), %rax
 8474 5bcd 4889DF   		movq	%rbx, %rdi
 8475 5bd0 FFD0     		call	*%rax
 8476 5bd2 EBE3     		jmp	.L705
 8477              	.L685:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8478              		.loc 9 452 0
 8479 5bd4 488D9D30 		leaq	-1488(%rbp), %rbx
 8479      FAFFFF
 8480 5bdb 4881C3A0 		addq	$160, %rbx
 8480      000000
 8481              	.L707:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8482              		.loc 9 452 0 discriminator 21
 8483 5be2 488D8530 		leaq	-1488(%rbp), %rax
 8483      FAFFFF
 8484 5be9 4839C3   		cmpq	%rax, %rbx
 8485 5bec 7411     		je	.L681
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8486              		.loc 9 452 0 discriminator 20
 8487 5bee 4883EB28 		subq	$40, %rbx
 8488 5bf2 488B03   		movq	(%rbx), %rax
 8489 5bf5 488B00   		movq	(%rax), %rax
 8490 5bf8 4889DF   		movq	%rbx, %rdi
 8491 5bfb FFD0     		call	*%rax
 8492 5bfd EBE3     		jmp	.L707
 8493              	.L681:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8494              		.loc 9 452 0
 8495 5bff 488D9D90 		leaq	-1648(%rbp), %rbx
 8495      F9FFFF
 8496 5c06 4881C3A0 		addq	$160, %rbx
 8496      000000
 8497              	.L709:
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8498              		.loc 9 452 0 discriminator 24
 8499 5c0d 488D8590 		leaq	-1648(%rbp), %rax
 8499      F9FFFF
 8500 5c14 4839C3   		cmpq	%rax, %rbx
 8501 5c17 7411     		je	.L708
 452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 8502              		.loc 9 452 0 discriminator 23
 8503 5c19 4883EB28 		subq	$40, %rbx
 8504 5c1d 488B03   		movq	(%rbx), %rax
 8505 5c20 488B00   		movq	(%rax), %rax
 8506 5c23 4889DF   		movq	%rbx, %rdi
 8507 5c26 FFD0     		call	*%rax
 8508 5c28 EBE3     		jmp	.L709
 8509              	.L708:
 8510 5c2a 4C89E3   		movq	%r12, %rbx
 8511              	.L677:
 450:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 8512              		.loc 9 450 0 is_stmt 1
 8513 5c2d 488D8540 		leaq	-2752(%rbp), %rax
 8513      F5FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 261


 8514 5c34 4889C7   		movq	%rax, %rdi
 8515 5c37 E8000000 		call	_ZN8flux_varD1Ev
 8515      00
 8516 5c3c EB03     		jmp	.L710
 8517              	.L761:
 8518 5c3e 4889C3   		movq	%rax, %rbx
 8519              	.L710:
 449:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 8520              		.loc 9 449 0
 8521 5c41 488D8510 		leaq	-2800(%rbp), %rax
 8521      F5FFFF
 8522 5c48 4889C7   		movq	%rax, %rdi
 8523 5c4b E8000000 		call	_ZN8flux_varD1Ev
 8523      00
 8524 5c50 EB03     		jmp	.L711
 8525              	.L760:
 8526 5c52 4889C3   		movq	%rax, %rbx
 8527              	.L711:
 449:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 8528              		.loc 9 449 0 is_stmt 0 discriminator 2
 8529 5c55 488D85E0 		leaq	-2848(%rbp), %rax
 8529      F4FFFF
 8530 5c5c 4889C7   		movq	%rax, %rdi
 8531 5c5f E8000000 		call	_ZN8flux_varD1Ev
 8531      00
 8532 5c64 EB03     		jmp	.L712
 8533              	.L759:
 8534 5c66 4889C3   		movq	%rax, %rbx
 8535              	.L712:
 448:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 8536              		.loc 9 448 0 is_stmt 1
 8537 5c69 488D8530 		leaq	-2256(%rbp), %rax
 8537      F7FFFF
 8538 5c70 4889C7   		movq	%rax, %rdi
 8539 5c73 E8000000 		call	_ZN9residualsD1Ev
 8539      00
 8540 5c78 EB03     		jmp	.L713
 8541              	.L758:
 8542 5c7a 4889C3   		movq	%rax, %rbx
 8543              	.L713:
 445:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8544              		.loc 9 445 0
 8545 5c7d 488D85B0 		leaq	-3408(%rbp), %rax
 8545      F2FFFF
 8546 5c84 4889C7   		movq	%rax, %rdi
 8547 5c87 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EED1Ev
 8547      00
 8548 5c8c 4989DC   		movq	%rbx, %r12
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 8549              		.loc 9 444 0
 8550 5c8f 488D9DB0 		leaq	-848(%rbp), %rbx
 8550      FCFFFF
 8551 5c96 4881C320 		addq	$288, %rbx
 8551      010000
 8552              	.L715:
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 8553              		.loc 9 444 0 is_stmt 0 discriminator 8
GAS LISTING /tmp/cc2K2nX4.s 			page 262


 8554 5c9d 488D85B0 		leaq	-848(%rbp), %rax
 8554      FCFFFF
 8555 5ca4 4839C3   		cmpq	%rax, %rbx
 8556 5ca7 7411     		je	.L714
 444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::vector<vector_var> e_alpha;
 8557              		.loc 9 444 0 discriminator 7
 8558 5ca9 4883EB20 		subq	$32, %rbx
 8559 5cad 488B03   		movq	(%rbx), %rax
 8560 5cb0 488B00   		movq	(%rax), %rax
 8561 5cb3 4889DF   		movq	%rbx, %rdi
 8562 5cb6 FFD0     		call	*%rax
 8563 5cb8 EBE3     		jmp	.L715
 8564              	.L714:
 8565 5cba 4C89E3   		movq	%r12, %rbx
 8566              	.L673:
 443:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha [9];
 8567              		.loc 9 443 0 is_stmt 1
 8568 5cbd 488D8550 		leaq	-2992(%rbp), %rax
 8568      F4FFFF
 8569 5cc4 4889C7   		movq	%rax, %rdi
 8570 5cc7 E8000000 		call	_ZN10vector_varD1Ev
 8570      00
 8571 5ccc EB03     		jmp	.L716
 8572              	.L756:
 8573 5cce 4889C3   		movq	%rax, %rbx
 8574              	.L716:
 441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8575              		.loc 9 441 0
 8576 5cd1 488D8530 		leaq	-3024(%rbp), %rax
 8576      F4FFFF
 8577 5cd8 4889C7   		movq	%rax, %rdi
 8578 5cdb E8000000 		call	_ZN10vector_varD1Ev
 8578      00
 8579 5ce0 EB03     		jmp	.L717
 8580              	.L755:
 8581 5ce2 4889C3   		movq	%rax, %rbx
 8582              	.L717:
 441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8583              		.loc 9 441 0 is_stmt 0 discriminator 4
 8584 5ce5 488D8510 		leaq	-3056(%rbp), %rax
 8584      F4FFFF
 8585 5cec 4889C7   		movq	%rax, %rdi
 8586 5cef E8000000 		call	_ZN10vector_varD1Ev
 8586      00
 8587 5cf4 EB03     		jmp	.L718
 8588              	.L754:
 8589 5cf6 4889C3   		movq	%rax, %rbx
 8590              	.L718:
 441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 8591              		.loc 9 441 0 discriminator 2
 8592 5cf9 488D85F0 		leaq	-3088(%rbp), %rax
 8592      F3FFFF
 8593 5d00 4889C7   		movq	%rax, %rdi
 8594 5d03 E8000000 		call	_ZN10vector_varD1Ev
 8594      00
 8595 5d08 EB03     		jmp	.L719
 8596              	.L753:
GAS LISTING /tmp/cc2K2nX4.s 			page 263


 8597 5d0a 4889C3   		movq	%rax, %rbx
 8598              	.L719:
 440:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var  u_lattice,  rho_u_interface , u_interface;
 8599              		.loc 9 440 0 is_stmt 1
 8600 5d0d 488D85D0 		leaq	-3120(%rbp), %rax
 8600      F3FFFF
 8601 5d14 4889C7   		movq	%rax, %rdi
 8602 5d17 E8000000 		call	_ZN10vector_varD1Ev
 8602      00
 8603 5d1c EB03     		jmp	.L720
 8604              	.L752:
 8605 5d1e 4889C3   		movq	%rax, %rbx
 8606              	.L720:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8607              		.loc 9 439 0
 8608 5d21 488D85B0 		leaq	-3152(%rbp), %rax
 8608      F3FFFF
 8609 5d28 4889C7   		movq	%rax, %rdi
 8610 5d2b E8000000 		call	_ZN10vector_varD1Ev
 8610      00
 8611 5d30 EB03     		jmp	.L721
 8612              	.L751:
 8613 5d32 4889C3   		movq	%rax, %rbx
 8614              	.L721:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8615              		.loc 9 439 0 is_stmt 0 discriminator 14
 8616 5d35 488D8590 		leaq	-3184(%rbp), %rax
 8616      F3FFFF
 8617 5d3c 4889C7   		movq	%rax, %rdi
 8618 5d3f E8000000 		call	_ZN10vector_varD1Ev
 8618      00
 8619 5d44 EB03     		jmp	.L722
 8620              	.L750:
 8621 5d46 4889C3   		movq	%rax, %rbx
 8622              	.L722:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8623              		.loc 9 439 0 discriminator 12
 8624 5d49 488D8570 		leaq	-3216(%rbp), %rax
 8624      F3FFFF
 8625 5d50 4889C7   		movq	%rax, %rdi
 8626 5d53 E8000000 		call	_ZN10vector_varD1Ev
 8626      00
 8627 5d58 EB03     		jmp	.L723
 8628              	.L749:
 8629 5d5a 4889C3   		movq	%rax, %rbx
 8630              	.L723:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8631              		.loc 9 439 0 discriminator 10
 8632 5d5d 488D8550 		leaq	-3248(%rbp), %rax
 8632      F3FFFF
 8633 5d64 4889C7   		movq	%rax, %rdi
 8634 5d67 E8000000 		call	_ZN10vector_varD1Ev
 8634      00
 8635 5d6c EB03     		jmp	.L724
 8636              	.L748:
 8637 5d6e 4889C3   		movq	%rax, %rbx
 8638              	.L724:
GAS LISTING /tmp/cc2K2nX4.s 			page 264


 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8639              		.loc 9 439 0 discriminator 8
 8640 5d71 488D8530 		leaq	-3280(%rbp), %rax
 8640      F3FFFF
 8641 5d78 4889C7   		movq	%rax, %rdi
 8642 5d7b E8000000 		call	_ZN10vector_varD1Ev
 8642      00
 8643 5d80 EB03     		jmp	.L725
 8644              	.L747:
 8645 5d82 4889C3   		movq	%rax, %rbx
 8646              	.L725:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8647              		.loc 9 439 0 discriminator 6
 8648 5d85 488D8510 		leaq	-3312(%rbp), %rax
 8648      F3FFFF
 8649 5d8c 4889C7   		movq	%rax, %rdi
 8650 5d8f E8000000 		call	_ZN10vector_varD1Ev
 8650      00
 8651 5d94 EB03     		jmp	.L726
 8652              	.L746:
 8653 5d96 4889C3   		movq	%rax, %rbx
 8654              	.L726:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8655              		.loc 9 439 0 discriminator 4
 8656 5d99 488D85F0 		leaq	-3344(%rbp), %rax
 8656      F2FFFF
 8657 5da0 4889C7   		movq	%rax, %rdi
 8658 5da3 E8000000 		call	_ZN10vector_varD1Ev
 8658      00
 8659 5da8 EB03     		jmp	.L727
 8660              	.L745:
 8661 5daa 4889C3   		movq	%rax, %rbx
 8662              	.L727:
 439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 8663              		.loc 9 439 0 discriminator 2
 8664 5dad 488D85D0 		leaq	-3376(%rbp), %rax
 8664      F2FFFF
 8665 5db4 4889C7   		movq	%rax, %rdi
 8666 5db7 E8000000 		call	_ZN10vector_varD1Ev
 8666      00
 8667 5dbc EB03     		jmp	.L728
 8668              	.L744:
 8669 5dbe 4889C3   		movq	%rax, %rbx
 8670              	.L728:
 438:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 8671              		.loc 9 438 0 is_stmt 1
 8672 5dc1 488D85C0 		leaq	-2112(%rbp), %rax
 8672      F7FFFF
 8673 5dc8 4889C7   		movq	%rax, %rdi
 8674 5dcb E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 8674      00
 437:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 8675              		.loc 9 437 0
 8676 5dd0 488D85D0 		leaq	-560(%rbp), %rax
 8676      FDFFFF
 8677 5dd7 4889C7   		movq	%rax, %rdi
 8678 5dda E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 265


 8678      00
 8679 5ddf EB03     		jmp	.L729
 8680              	.L743:
 8681 5de1 4889C3   		movq	%rax, %rbx
 8682              	.L729:
 419:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 8683              		.loc 9 419 0
 8684 5de4 488D85B0 		leaq	-2896(%rbp), %rax
 8684      F4FFFF
 8685 5deb 4889C7   		movq	%rax, %rdi
 8686 5dee E8000000 		call	_ZN8flux_varD1Ev
 8686      00
 8687 5df3 EB03     		jmp	.L730
 8688              	.L742:
 8689 5df5 4889C3   		movq	%rax, %rbx
 8690              	.L730:
 418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 8691              		.loc 9 418 0
 8692 5df8 488D85E0 		leaq	-2336(%rbp), %rax
 8692      F6FFFF
 8693 5dff 4889C7   		movq	%rax, %rdi
 8694 5e02 E8000000 		call	_ZN8SolutionD1Ev
 8694      00
 8695 5e07 EB03     		jmp	.L731
 8696              	.L741:
 8697 5e09 4889C3   		movq	%rax, %rbx
 8698              	.L731:
 417:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj3(Mesh.get_total_cells()); // stores residuals
 8699              		.loc 9 417 0
 8700 5e0c 488D8590 		leaq	-2416(%rbp), %rax
 8700      F6FFFF
 8701 5e13 4889C7   		movq	%rax, %rdi
 8702 5e16 E8000000 		call	_ZN8SolutionD1Ev
 8702      00
 8703 5e1b EB03     		jmp	.L732
 8704              	.L740:
 8705 5e1d 4889C3   		movq	%rax, %rbx
 8706              	.L732:
 416:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution rj2(Mesh.get_total_cells()); // stores residuals
 8707              		.loc 9 416 0
 8708 5e20 488D8540 		leaq	-2496(%rbp), %rax
 8708      F6FFFF
 8709 5e27 4889C7   		movq	%rax, %rdi
 8710 5e2a E8000000 		call	_ZN8SolutionD1Ev
 8710      00
 8711 5e2f EB03     		jmp	.L733
 8712              	.L739:
 8713 5e31 4889C3   		movq	%rax, %rbx
 8714              	.L733:
 415:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution residual_worker(Mesh.get_total_cells()); // stores residuals
 8715              		.loc 9 415 0
 8716 5e34 488D85F0 		leaq	-2576(%rbp), %rax
 8716      F5FFFF
 8717 5e3b 4889C7   		movq	%rax, %rdi
 8718 5e3e E8000000 		call	_ZN8SolutionD1Ev
 8718      00
 8719 5e43 EB03     		jmp	.L734
GAS LISTING /tmp/cc2K2nX4.s 			page 266


 8720              	.L738:
 8721 5e45 4889C3   		movq	%rax, %rbx
 8722              	.L734:
 414:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells()); // solution at t0 in RK cycle
 8723              		.loc 9 414 0
 8724 5e48 488D85A0 		leaq	-2656(%rbp), %rax
 8724      F5FFFF
 8725 5e4f 4889C7   		movq	%rax, %rdi
 8726 5e52 E8000000 		call	_ZN8SolutionD1Ev
 8726      00
 8727 5e57 EB03     		jmp	.L735
 8728              	.L737:
 8729 5e59 4889C3   		movq	%rax, %rbx
 8730              	.L735:
 413:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells()); // intermediate solution for RK
 8731              		.loc 9 413 0
 8732 5e5c 488D8540 		leaq	-1728(%rbp), %rax
 8732      F9FFFF
 8733 5e63 4889C7   		movq	%rax, %rdi
 8734 5e66 E8000000 		call	_ZN10RungeKuttaD1Ev
 8734      00
 8735 5e6b 4889D8   		movq	%rbx, %rax
 8736 5e6e 4889C7   		movq	%rax, %rdi
 8737              	.LEHB94:
 8738 5e71 E8000000 		call	_Unwind_Resume
 8738      00
 8739              	.LEHE94:
 8740              	.L773:
 8741              		.loc 9 807 0
 8742 5e76 E8000000 		call	__stack_chk_fail
 8742      00
 8743              	.L736:
 8744 5e7b 488D65E8 		leaq	-24(%rbp), %rsp
 8745 5e7f 5B       		popq	%rbx
 8746 5e80 415C     		popq	%r12
 8747 5e82 415D     		popq	%r13
 8748 5e84 5D       		popq	%rbp
 8749              		.cfi_def_cfa 7, 8
 8750 5e85 C3       		ret
 8751              		.cfi_endproc
 8752              	.LFE7189:
 8753              		.section	.gcc_except_table
 8754              	.LLSDA7189:
 8755 014c FF       		.byte	0xff
 8756 014d FF       		.byte	0xff
 8757 014e 01       		.byte	0x1
 8758 014f F501     		.uleb128 .LLSDACSE7189-.LLSDACSB7189
 8759              	.LLSDACSB7189:
 8760 0151 7F       		.uleb128 .LEHB54-.LFB7189
 8761 0152 05       		.uleb128 .LEHE54-.LEHB54
 8762 0153 00       		.uleb128 0
 8763 0154 00       		.uleb128 0
 8764 0155 A101     		.uleb128 .LEHB55-.LFB7189
 8765 0157 05       		.uleb128 .LEHE55-.LEHB55
 8766 0158 975E     		.uleb128 .L737-.LFB7189
 8767 015a 00       		.uleb128 0
 8768 015b C301     		.uleb128 .LEHB56-.LFB7189
GAS LISTING /tmp/cc2K2nX4.s 			page 267


 8769 015d 05       		.uleb128 .LEHE56-.LEHB56
 8770 015e 835E     		.uleb128 .L738-.LFB7189
 8771 0160 00       		.uleb128 0
 8772 0161 E501     		.uleb128 .LEHB57-.LFB7189
 8773 0163 05       		.uleb128 .LEHE57-.LEHB57
 8774 0164 EF5D     		.uleb128 .L739-.LFB7189
 8775 0166 00       		.uleb128 0
 8776 0167 8702     		.uleb128 .LEHB58-.LFB7189
 8777 0169 05       		.uleb128 .LEHE58-.LEHB58
 8778 016a DB5D     		.uleb128 .L740-.LFB7189
 8779 016c 00       		.uleb128 0
 8780 016d A902     		.uleb128 .LEHB59-.LFB7189
 8781 016f 05       		.uleb128 .LEHE59-.LEHB59
 8782 0170 C75D     		.uleb128 .L741-.LFB7189
 8783 0172 00       		.uleb128 0
 8784 0173 B802     		.uleb128 .LEHB60-.LFB7189
 8785 0175 05       		.uleb128 .LEHE60-.LEHB60
 8786 0176 B35D     		.uleb128 .L742-.LFB7189
 8787 0178 00       		.uleb128 0
 8788 0179 DB02     		.uleb128 .LEHB61-.LFB7189
 8789 017b 05       		.uleb128 .LEHE61-.LEHB61
 8790 017c 9F5D     		.uleb128 .L743-.LFB7189
 8791 017e 00       		.uleb128 0
 8792 017f F902     		.uleb128 .LEHB62-.LFB7189
 8793 0181 05       		.uleb128 .LEHE62-.LEHB62
 8794 0182 FC5C     		.uleb128 .L744-.LFB7189
 8795 0184 00       		.uleb128 0
 8796 0185 8803     		.uleb128 .LEHB63-.LFB7189
 8797 0187 05       		.uleb128 .LEHE63-.LEHB63
 8798 0188 E85C     		.uleb128 .L745-.LFB7189
 8799 018a 00       		.uleb128 0
 8800 018b 9703     		.uleb128 .LEHB64-.LFB7189
 8801 018d 05       		.uleb128 .LEHE64-.LEHB64
 8802 018e D45C     		.uleb128 .L746-.LFB7189
 8803 0190 00       		.uleb128 0
 8804 0191 A603     		.uleb128 .LEHB65-.LFB7189
 8805 0193 05       		.uleb128 .LEHE65-.LEHB65
 8806 0194 C05C     		.uleb128 .L747-.LFB7189
 8807 0196 00       		.uleb128 0
 8808 0197 B503     		.uleb128 .LEHB66-.LFB7189
 8809 0199 05       		.uleb128 .LEHE66-.LEHB66
 8810 019a AC5C     		.uleb128 .L748-.LFB7189
 8811 019c 00       		.uleb128 0
 8812 019d C403     		.uleb128 .LEHB67-.LFB7189
 8813 019f 05       		.uleb128 .LEHE67-.LEHB67
 8814 01a0 985C     		.uleb128 .L749-.LFB7189
 8815 01a2 00       		.uleb128 0
 8816 01a3 D303     		.uleb128 .LEHB68-.LFB7189
 8817 01a5 05       		.uleb128 .LEHE68-.LEHB68
 8818 01a6 845C     		.uleb128 .L750-.LFB7189
 8819 01a8 00       		.uleb128 0
 8820 01a9 E203     		.uleb128 .LEHB69-.LFB7189
 8821 01ab 05       		.uleb128 .LEHE69-.LEHB69
 8822 01ac F05B     		.uleb128 .L751-.LFB7189
 8823 01ae 00       		.uleb128 0
 8824 01af F103     		.uleb128 .LEHB70-.LFB7189
 8825 01b1 05       		.uleb128 .LEHE70-.LEHB70
GAS LISTING /tmp/cc2K2nX4.s 			page 268


 8826 01b2 DC5B     		.uleb128 .L752-.LFB7189
 8827 01b4 00       		.uleb128 0
 8828 01b5 8004     		.uleb128 .LEHB71-.LFB7189
 8829 01b7 05       		.uleb128 .LEHE71-.LEHB71
 8830 01b8 C85B     		.uleb128 .L753-.LFB7189
 8831 01ba 00       		.uleb128 0
 8832 01bb 8F04     		.uleb128 .LEHB72-.LFB7189
 8833 01bd 05       		.uleb128 .LEHE72-.LEHB72
 8834 01be B45B     		.uleb128 .L754-.LFB7189
 8835 01c0 00       		.uleb128 0
 8836 01c1 9E04     		.uleb128 .LEHB73-.LFB7189
 8837 01c3 05       		.uleb128 .LEHE73-.LEHB73
 8838 01c4 A05B     		.uleb128 .L755-.LFB7189
 8839 01c6 00       		.uleb128 0
 8840 01c7 AD04     		.uleb128 .LEHB74-.LFB7189
 8841 01c9 05       		.uleb128 .LEHE74-.LEHB74
 8842 01ca 8C5B     		.uleb128 .L756-.LFB7189
 8843 01cc 00       		.uleb128 0
 8844 01cd CA04     		.uleb128 .LEHB75-.LFB7189
 8845 01cf 05       		.uleb128 .LEHE75-.LEHB75
 8846 01d0 D753     		.uleb128 .L757-.LFB7189
 8847 01d2 00       		.uleb128 0
 8848 01d3 F204     		.uleb128 .LEHB76-.LFB7189
 8849 01d5 05       		.uleb128 .LEHE76-.LEHB76
 8850 01d6 B85A     		.uleb128 .L758-.LFB7189
 8851 01d8 00       		.uleb128 0
 8852 01d9 8105     		.uleb128 .LEHB77-.LFB7189
 8853 01db 05       		.uleb128 .LEHE77-.LEHB77
 8854 01dc A45A     		.uleb128 .L759-.LFB7189
 8855 01de 00       		.uleb128 0
 8856 01df 9005     		.uleb128 .LEHB78-.LFB7189
 8857 01e1 05       		.uleb128 .LEHE78-.LEHB78
 8858 01e2 905A     		.uleb128 .L760-.LFB7189
 8859 01e4 00       		.uleb128 0
 8860 01e5 9F05     		.uleb128 .LEHB79-.LFB7189
 8861 01e7 05       		.uleb128 .LEHE79-.LEHB79
 8862 01e8 FC59     		.uleb128 .L761-.LFB7189
 8863 01ea 00       		.uleb128 0
 8864 01eb BC05     		.uleb128 .LEHB80-.LFB7189
 8865 01ed 05       		.uleb128 .LEHE80-.LEHB80
 8866 01ee 8D54     		.uleb128 .L762-.LFB7189
 8867 01f0 00       		.uleb128 0
 8868 01f1 E305     		.uleb128 .LEHB81-.LFB7189
 8869 01f3 05       		.uleb128 .LEHE81-.LEHB81
 8870 01f4 D054     		.uleb128 .L763-.LFB7189
 8871 01f6 00       		.uleb128 0
 8872 01f7 8A06     		.uleb128 .LEHB82-.LFB7189
 8873 01f9 05       		.uleb128 .LEHE82-.LEHB82
 8874 01fa 9355     		.uleb128 .L764-.LFB7189
 8875 01fc 00       		.uleb128 0
 8876 01fd B106     		.uleb128 .LEHB83-.LFB7189
 8877 01ff 05       		.uleb128 .LEHE83-.LEHB83
 8878 0200 D655     		.uleb128 .L765-.LFB7189
 8879 0202 00       		.uleb128 0
 8880 0203 D806     		.uleb128 .LEHB84-.LFB7189
 8881 0205 05       		.uleb128 .LEHE84-.LEHB84
 8882 0206 9956     		.uleb128 .L766-.LFB7189
GAS LISTING /tmp/cc2K2nX4.s 			page 269


 8883 0208 00       		.uleb128 0
 8884 0209 F507     		.uleb128 .LEHB85-.LFB7189
 8885 020b 7A       		.uleb128 .LEHE85-.LEHB85
 8886 020c 8E58     		.uleb128 .L767-.LFB7189
 8887 020e 00       		.uleb128 0
 8888 020f 8309     		.uleb128 .LEHB86-.LFB7189
 8889 0211 05       		.uleb128 .LEHE86-.LEHB86
 8890 0212 DC56     		.uleb128 .L768-.LFB7189
 8891 0214 00       		.uleb128 0
 8892 0215 BB09     		.uleb128 .LEHB87-.LFB7189
 8893 0217 FD01     		.uleb128 .LEHE87-.LEHB87
 8894 0219 8E58     		.uleb128 .L767-.LFB7189
 8895 021b 00       		.uleb128 0
 8896 021c D90F     		.uleb128 .LEHB88-.LFB7189
 8897 021e 05       		.uleb128 .LEHE88-.LEHB88
 8898 021f F656     		.uleb128 .L769-.LFB7189
 8899 0221 00       		.uleb128 0
 8900 0222 8711     		.uleb128 .LEHB89-.LFB7189
 8901 0224 05       		.uleb128 .LEHE89-.LEHB89
 8902 0225 9C57     		.uleb128 .L770-.LFB7189
 8903 0227 00       		.uleb128 0
 8904 0228 B512     		.uleb128 .LEHB90-.LFB7189
 8905 022a 05       		.uleb128 .LEHE90-.LEHB90
 8906 022b C257     		.uleb128 .L771-.LFB7189
 8907 022d 00       		.uleb128 0
 8908 022e DA29     		.uleb128 .LEHB91-.LFB7189
 8909 0230 05       		.uleb128 .LEHE91-.LEHB91
 8910 0231 8E58     		.uleb128 .L767-.LFB7189
 8911 0233 00       		.uleb128 0
 8912 0234 E72B     		.uleb128 .LEHB92-.LFB7189
 8913 0236 05       		.uleb128 .LEHE92-.LEHB92
 8914 0237 E857     		.uleb128 .L772-.LFB7189
 8915 0239 00       		.uleb128 0
 8916 023a F638     		.uleb128 .LEHB93-.LFB7189
 8917 023c D810     		.uleb128 .LEHE93-.LEHB93
 8918 023e 8E58     		.uleb128 .L767-.LFB7189
 8919 0240 00       		.uleb128 0
 8920 0241 AF5E     		.uleb128 .LEHB94-.LFB7189
 8921 0243 05       		.uleb128 .LEHE94-.LEHB94
 8922 0244 00       		.uleb128 0
 8923 0245 00       		.uleb128 0
 8924              	.LLSDACSE7189:
 8925              		.text
 8927              		.section	.text._ZN10vector_varaSERKS_,"axG",@progbits,_ZN10vector_varaSERKS_,comdat
 8928              		.align 2
 8929              		.weak	_ZN10vector_varaSERKS_
 8931              	_ZN10vector_varaSERKS_:
 8932              	.LFB7191:
   5:include/vector_var.h **** {
 8933              		.loc 5 5 0
 8934              		.cfi_startproc
 8935 0000 55       		pushq	%rbp
 8936              		.cfi_def_cfa_offset 16
 8937              		.cfi_offset 6, -16
 8938 0001 4889E5   		movq	%rsp, %rbp
 8939              		.cfi_def_cfa_register 6
 8940 0004 48897DF8 		movq	%rdi, -8(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 270


 8941 0008 488975F0 		movq	%rsi, -16(%rbp)
   5:include/vector_var.h **** {
 8942              		.loc 5 5 0
 8943 000c 488B45F0 		movq	-16(%rbp), %rax
 8944 0010 F20F1040 		movsd	8(%rax), %xmm0
 8944      08
 8945 0015 488B45F8 		movq	-8(%rbp), %rax
 8946 0019 F20F1140 		movsd	%xmm0, 8(%rax)
 8946      08
 8947 001e 488B45F0 		movq	-16(%rbp), %rax
 8948 0022 F20F1040 		movsd	16(%rax), %xmm0
 8948      10
 8949 0027 488B45F8 		movq	-8(%rbp), %rax
 8950 002b F20F1140 		movsd	%xmm0, 16(%rax)
 8950      10
 8951 0030 488B45F0 		movq	-16(%rbp), %rax
 8952 0034 F20F1040 		movsd	24(%rax), %xmm0
 8952      18
 8953 0039 488B45F8 		movq	-8(%rbp), %rax
 8954 003d F20F1140 		movsd	%xmm0, 24(%rax)
 8954      18
 8955 0042 488B45F8 		movq	-8(%rbp), %rax
 8956 0046 5D       		popq	%rbp
 8957              		.cfi_def_cfa 7, 8
 8958 0047 C3       		ret
 8959              		.cfi_endproc
 8960              	.LFE7191:
 8962              		.section	.text._ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_
 8963              		.weak	_ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__value
 8965              	_ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__ty
 8966              	.LFB7192:
 434:/usr/include/c++/5/cmath ****     {
 8967              		.loc 1 434 0
 8968              		.cfi_startproc
 8969 0000 55       		pushq	%rbp
 8970              		.cfi_def_cfa_offset 16
 8971              		.cfi_offset 6, -16
 8972 0001 4889E5   		movq	%rsp, %rbp
 8973              		.cfi_def_cfa_register 6
 8974 0004 4883EC20 		subq	$32, %rsp
 8975 0008 F20F1145 		movsd	%xmm0, -8(%rbp)
 8975      F8
 8976 000d 89F8     		movl	%edi, %eax
 8977 000f 8845F4   		movb	%al, -12(%rbp)
 437:/usr/include/c++/5/cmath ****     }
 8978              		.loc 1 437 0
 8979 0012 0FB645F4 		movzbl	-12(%rbp), %eax
 8980 0016 660FEFC0 		pxor	%xmm0, %xmm0
 8981 001a F20F2AC0 		cvtsi2sd	%eax, %xmm0
 8982 001e 488B45F8 		movq	-8(%rbp), %rax
 8983 0022 660F28C8 		movapd	%xmm0, %xmm1
 8984 0026 488945E8 		movq	%rax, -24(%rbp)
 8985 002a F20F1045 		movsd	-24(%rbp), %xmm0
 8985      E8
 8986 002f E8000000 		call	pow
 8986      00
 8987 0034 66480F7E 		movq	%xmm0, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 271


 8987      C0
 8988 0039 488945E8 		movq	%rax, -24(%rbp)
 8989 003d F20F1045 		movsd	-24(%rbp), %xmm0
 8989      E8
 438:/usr/include/c++/5/cmath **** 
 8990              		.loc 1 438 0
 8991 0042 C9       		leave
 8992              		.cfi_def_cfa 7, 8
 8993 0043 C3       		ret
 8994              		.cfi_endproc
 8995              	.LFE7192:
 8997              		.section	.text._ZN8flux_varaSERKS_,"axG",@progbits,_ZN8flux_varaSERKS_,comdat
 8998              		.align 2
 8999              		.weak	_ZN8flux_varaSERKS_
 9001              	_ZN8flux_varaSERKS_:
 9002              	.LFB7193:
 9003              		.file 10 "include/flux_var.h"
   1:include/flux_var.h **** #ifndef FLUX_VAR_H
   2:include/flux_var.h **** #define FLUX_VAR_H
   3:include/flux_var.h **** 
   4:include/flux_var.h **** 
   5:include/flux_var.h **** class flux_var
 9004              		.loc 10 5 0
 9005              		.cfi_startproc
 9006 0000 55       		pushq	%rbp
 9007              		.cfi_def_cfa_offset 16
 9008              		.cfi_offset 6, -16
 9009 0001 4889E5   		movq	%rsp, %rbp
 9010              		.cfi_def_cfa_register 6
 9011 0004 48897DF8 		movq	%rdi, -8(%rbp)
 9012 0008 488975F0 		movq	%rsi, -16(%rbp)
 9013              		.loc 10 5 0
 9014 000c 488B45F0 		movq	-16(%rbp), %rax
 9015 0010 F20F1040 		movsd	8(%rax), %xmm0
 9015      08
 9016 0015 488B45F8 		movq	-8(%rbp), %rax
 9017 0019 F20F1140 		movsd	%xmm0, 8(%rax)
 9017      08
 9018 001e 488B45F0 		movq	-16(%rbp), %rax
 9019 0022 F20F1040 		movsd	16(%rax), %xmm0
 9019      10
 9020 0027 488B45F8 		movq	-8(%rbp), %rax
 9021 002b F20F1140 		movsd	%xmm0, 16(%rax)
 9021      10
 9022 0030 488B45F0 		movq	-16(%rbp), %rax
 9023 0034 F20F1040 		movsd	24(%rax), %xmm0
 9023      18
 9024 0039 488B45F8 		movq	-8(%rbp), %rax
 9025 003d F20F1140 		movsd	%xmm0, 24(%rax)
 9025      18
 9026 0042 488B45F0 		movq	-16(%rbp), %rax
 9027 0046 F20F1040 		movsd	32(%rax), %xmm0
 9027      20
 9028 004b 488B45F8 		movq	-8(%rbp), %rax
 9029 004f F20F1140 		movsd	%xmm0, 32(%rax)
 9029      20
 9030 0054 488B45F8 		movq	-8(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 272


 9031 0058 5D       		popq	%rbp
 9032              		.cfi_def_cfa 7, 8
 9033 0059 C3       		ret
 9034              		.cfi_endproc
 9035              	.LFE7193:
 9037              		.section	.text._ZN16global_variablesC2ERKS_,"axG",@progbits,_ZN16global_variablesC5ERKS_,comdat
 9038              		.align 2
 9039              		.weak	_ZN16global_variablesC2ERKS_
 9041              	_ZN16global_variablesC2ERKS_:
 9042              	.LFB7195:
 9043              		.file 11 "include/global_variables.h"
   1:include/global_variables.h **** #ifndef GLOBAL_VARIABLES_H
   2:include/global_variables.h **** #define GLOBAL_VARIABLES_H
   3:include/global_variables.h **** #include <string>
   4:include/global_variables.h **** #include "domain_geometry.h"
   5:include/global_variables.h **** #include <math.h>
   6:include/global_variables.h **** 
   7:include/global_variables.h **** class global_variables
 9044              		.loc 11 7 0
 9045              		.cfi_startproc
 9046              		.cfi_personality 0x3,__gxx_personality_v0
 9047              		.cfi_lsda 0x3,.LLSDA7195
 9048 0000 55       		pushq	%rbp
 9049              		.cfi_def_cfa_offset 16
 9050              		.cfi_offset 6, -16
 9051 0001 4889E5   		movq	%rsp, %rbp
 9052              		.cfi_def_cfa_register 6
 9053 0004 53       		pushq	%rbx
 9054 0005 4883EC18 		subq	$24, %rsp
 9055              		.cfi_offset 3, -24
 9056 0009 48897DE8 		movq	%rdi, -24(%rbp)
 9057 000d 488975E0 		movq	%rsi, -32(%rbp)
 9058              	.LBB61:
 9059              		.loc 11 7 0
 9060 0011 BA000000 		movl	$_ZTV16global_variables+16, %edx
 9060      00
 9061 0016 488B45E8 		movq	-24(%rbp), %rax
 9062 001a 488910   		movq	%rdx, (%rax)
 9063 001d 488B45E0 		movq	-32(%rbp), %rax
 9064 0021 8B5008   		movl	8(%rax), %edx
 9065 0024 488B45E8 		movq	-24(%rbp), %rax
 9066 0028 895008   		movl	%edx, 8(%rax)
 9067 002b 488B45E0 		movq	-32(%rbp), %rax
 9068 002f 8B500C   		movl	12(%rax), %edx
 9069 0032 488B45E8 		movq	-24(%rbp), %rax
 9070 0036 89500C   		movl	%edx, 12(%rax)
 9071 0039 488B45E0 		movq	-32(%rbp), %rax
 9072 003d 8B5010   		movl	16(%rax), %edx
 9073 0040 488B45E8 		movq	-24(%rbp), %rax
 9074 0044 895010   		movl	%edx, 16(%rax)
 9075 0047 488B45E0 		movq	-32(%rbp), %rax
 9076 004b F20F1040 		movsd	24(%rax), %xmm0
 9076      18
 9077 0050 488B45E8 		movq	-24(%rbp), %rax
 9078 0054 F20F1140 		movsd	%xmm0, 24(%rax)
 9078      18
 9079 0059 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 273


 9080 005d F20F1040 		movsd	32(%rax), %xmm0
 9080      20
 9081 0062 488B45E8 		movq	-24(%rbp), %rax
 9082 0066 F20F1140 		movsd	%xmm0, 32(%rax)
 9082      20
 9083 006b 488B45E0 		movq	-32(%rbp), %rax
 9084 006f F20F1040 		movsd	40(%rax), %xmm0
 9084      28
 9085 0074 488B45E8 		movq	-24(%rbp), %rax
 9086 0078 F20F1140 		movsd	%xmm0, 40(%rax)
 9086      28
 9087 007d 488B45E0 		movq	-32(%rbp), %rax
 9088 0081 F20F1040 		movsd	48(%rax), %xmm0
 9088      30
 9089 0086 488B45E8 		movq	-24(%rbp), %rax
 9090 008a F20F1140 		movsd	%xmm0, 48(%rax)
 9090      30
 9091 008f 488B45E0 		movq	-32(%rbp), %rax
 9092 0093 F20F1040 		movsd	56(%rax), %xmm0
 9092      38
 9093 0098 488B45E8 		movq	-24(%rbp), %rax
 9094 009c F20F1140 		movsd	%xmm0, 56(%rax)
 9094      38
 9095 00a1 488B45E0 		movq	-32(%rbp), %rax
 9096 00a5 F20F1040 		movsd	64(%rax), %xmm0
 9096      40
 9097 00aa 488B45E8 		movq	-24(%rbp), %rax
 9098 00ae F20F1140 		movsd	%xmm0, 64(%rax)
 9098      40
 9099 00b3 488B45E0 		movq	-32(%rbp), %rax
 9100 00b7 F20F1040 		movsd	72(%rax), %xmm0
 9100      48
 9101 00bc 488B45E8 		movq	-24(%rbp), %rax
 9102 00c0 F20F1140 		movsd	%xmm0, 72(%rax)
 9102      48
 9103 00c5 488B45E0 		movq	-32(%rbp), %rax
 9104 00c9 F20F1040 		movsd	80(%rax), %xmm0
 9104      50
 9105 00ce 488B45E8 		movq	-24(%rbp), %rax
 9106 00d2 F20F1140 		movsd	%xmm0, 80(%rax)
 9106      50
 9107 00d7 488B45E0 		movq	-32(%rbp), %rax
 9108 00db F20F1040 		movsd	88(%rax), %xmm0
 9108      58
 9109 00e0 488B45E8 		movq	-24(%rbp), %rax
 9110 00e4 F20F1140 		movsd	%xmm0, 88(%rax)
 9110      58
 9111 00e9 488B45E0 		movq	-32(%rbp), %rax
 9112 00ed F20F1040 		movsd	96(%rax), %xmm0
 9112      60
 9113 00f2 488B45E8 		movq	-24(%rbp), %rax
 9114 00f6 F20F1140 		movsd	%xmm0, 96(%rax)
 9114      60
 9115 00fb 488B45E0 		movq	-32(%rbp), %rax
 9116 00ff F20F1040 		movsd	104(%rax), %xmm0
 9116      68
 9117 0104 488B45E8 		movq	-24(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 274


 9118 0108 F20F1140 		movsd	%xmm0, 104(%rax)
 9118      68
 9119 010d 488B45E0 		movq	-32(%rbp), %rax
 9120 0111 F20F1040 		movsd	112(%rax), %xmm0
 9120      70
 9121 0116 488B45E8 		movq	-24(%rbp), %rax
 9122 011a F20F1140 		movsd	%xmm0, 112(%rax)
 9122      70
 9123 011f 488B45E0 		movq	-32(%rbp), %rax
 9124 0123 F20F1040 		movsd	120(%rax), %xmm0
 9124      78
 9125 0128 488B45E8 		movq	-24(%rbp), %rax
 9126 012c F20F1140 		movsd	%xmm0, 120(%rax)
 9126      78
 9127 0131 488B45E0 		movq	-32(%rbp), %rax
 9128 0135 8B908000 		movl	128(%rax), %edx
 9128      0000
 9129 013b 488B45E8 		movq	-24(%rbp), %rax
 9130 013f 89908000 		movl	%edx, 128(%rax)
 9130      0000
 9131 0145 488B45E0 		movq	-32(%rbp), %rax
 9132 0149 8B908400 		movl	132(%rax), %edx
 9132      0000
 9133 014f 488B45E8 		movq	-24(%rbp), %rax
 9134 0153 89908400 		movl	%edx, 132(%rax)
 9134      0000
 9135 0159 488B45E0 		movq	-32(%rbp), %rax
 9136 015d 8B908800 		movl	136(%rax), %edx
 9136      0000
 9137 0163 488B45E8 		movq	-24(%rbp), %rax
 9138 0167 89908800 		movl	%edx, 136(%rax)
 9138      0000
 9139 016d 488B45E0 		movq	-32(%rbp), %rax
 9140 0171 8B908C00 		movl	140(%rax), %edx
 9140      0000
 9141 0177 488B45E8 		movq	-24(%rbp), %rax
 9142 017b 89908C00 		movl	%edx, 140(%rax)
 9142      0000
 9143 0181 488B45E0 		movq	-32(%rbp), %rax
 9144 0185 F20F1080 		movsd	144(%rax), %xmm0
 9144      90000000 
 9145 018d 488B45E8 		movq	-24(%rbp), %rax
 9146 0191 F20F1180 		movsd	%xmm0, 144(%rax)
 9146      90000000 
 9147 0199 488B45E0 		movq	-32(%rbp), %rax
 9148 019d 488D9098 		leaq	152(%rax), %rdx
 9148      000000
 9149 01a4 488B45E8 		movq	-24(%rbp), %rax
 9150 01a8 48059800 		addq	$152, %rax
 9150      0000
 9151 01ae 4889D6   		movq	%rdx, %rsi
 9152 01b1 4889C7   		movq	%rax, %rdi
 9153              	.LEHB95:
 9154 01b4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 9154      00
 9155              	.LEHE95:
 9156 01b9 488B45E0 		movq	-32(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 275


 9157 01bd 488D90B8 		leaq	184(%rax), %rdx
 9157      000000
 9158 01c4 488B45E8 		movq	-24(%rbp), %rax
 9159 01c8 4805B800 		addq	$184, %rax
 9159      0000
 9160 01ce 4889D6   		movq	%rdx, %rsi
 9161 01d1 4889C7   		movq	%rax, %rdi
 9162              	.LEHB96:
 9163 01d4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 9163      00
 9164              	.LEHE96:
 9165              		.loc 11 7 0 is_stmt 0 discriminator 2
 9166 01d9 488B45E0 		movq	-32(%rbp), %rax
 9167 01dd 488D90D8 		leaq	216(%rax), %rdx
 9167      000000
 9168 01e4 488B45E8 		movq	-24(%rbp), %rax
 9169 01e8 4805D800 		addq	$216, %rax
 9169      0000
 9170 01ee 4889D6   		movq	%rdx, %rsi
 9171 01f1 4889C7   		movq	%rax, %rdi
 9172              	.LEHB97:
 9173 01f4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 9173      00
 9174              	.LEHE97:
 9175              		.loc 11 7 0 discriminator 4
 9176 01f9 488B45E0 		movq	-32(%rbp), %rax
 9177 01fd 488D90F8 		leaq	248(%rax), %rdx
 9177      000000
 9178 0204 488B45E8 		movq	-24(%rbp), %rax
 9179 0208 4805F800 		addq	$248, %rax
 9179      0000
 9180 020e 4889D6   		movq	%rdx, %rsi
 9181 0211 4889C7   		movq	%rax, %rdi
 9182              	.LEHB98:
 9183 0214 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 9183      00
 9184              	.LEHE98:
 9185              	.LBE61:
 9186              		.loc 11 7 0
 9187 0219 EB4E     		jmp	.L819
 9188              	.L818:
 9189 021b 4889C3   		movq	%rax, %rbx
 9190              	.LBB62:
 9191 021e 488B45E8 		movq	-24(%rbp), %rax
 9192 0222 4805D800 		addq	$216, %rax
 9192      0000
 9193 0228 4889C7   		movq	%rax, %rdi
 9194 022b E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9194      00
 9195 0230 EB03     		jmp	.L814
 9196              	.L817:
 9197 0232 4889C3   		movq	%rax, %rbx
 9198              	.L814:
 9199              		.loc 11 7 0 discriminator 3
 9200 0235 488B45E8 		movq	-24(%rbp), %rax
 9201 0239 4805B800 		addq	$184, %rax
 9201      0000
GAS LISTING /tmp/cc2K2nX4.s 			page 276


 9202 023f 4889C7   		movq	%rax, %rdi
 9203 0242 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9203      00
 9204 0247 EB03     		jmp	.L815
 9205              	.L816:
 9206 0249 4889C3   		movq	%rax, %rbx
 9207              	.L815:
 9208              		.loc 11 7 0 discriminator 1
 9209 024c 488B45E8 		movq	-24(%rbp), %rax
 9210 0250 48059800 		addq	$152, %rax
 9210      0000
 9211 0256 4889C7   		movq	%rax, %rdi
 9212 0259 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9212      00
 9213 025e 4889D8   		movq	%rbx, %rax
 9214 0261 4889C7   		movq	%rax, %rdi
 9215              	.LEHB99:
 9216 0264 E8000000 		call	_Unwind_Resume
 9216      00
 9217              	.LEHE99:
 9218              	.L819:
 9219              	.LBE62:
 9220              		.loc 11 7 0
 9221 0269 4883C418 		addq	$24, %rsp
 9222 026d 5B       		popq	%rbx
 9223 026e 5D       		popq	%rbp
 9224              		.cfi_def_cfa 7, 8
 9225 026f C3       		ret
 9226              		.cfi_endproc
 9227              	.LFE7195:
 9228              		.section	.gcc_except_table
 9229              	.LLSDA7195:
 9230 0246 FF       		.byte	0xff
 9231 0247 FF       		.byte	0xff
 9232 0248 01       		.byte	0x1
 9233 0249 1C       		.uleb128 .LLSDACSE7195-.LLSDACSB7195
 9234              	.LLSDACSB7195:
 9235 024a B403     		.uleb128 .LEHB95-.LFB7195
 9236 024c 05       		.uleb128 .LEHE95-.LEHB95
 9237 024d 00       		.uleb128 0
 9238 024e 00       		.uleb128 0
 9239 024f D403     		.uleb128 .LEHB96-.LFB7195
 9240 0251 05       		.uleb128 .LEHE96-.LEHB96
 9241 0252 C904     		.uleb128 .L816-.LFB7195
 9242 0254 00       		.uleb128 0
 9243 0255 F403     		.uleb128 .LEHB97-.LFB7195
 9244 0257 05       		.uleb128 .LEHE97-.LEHB97
 9245 0258 B204     		.uleb128 .L817-.LFB7195
 9246 025a 00       		.uleb128 0
 9247 025b 9404     		.uleb128 .LEHB98-.LFB7195
 9248 025d 05       		.uleb128 .LEHE98-.LEHB98
 9249 025e 9B04     		.uleb128 .L818-.LFB7195
 9250 0260 00       		.uleb128 0
 9251 0261 E404     		.uleb128 .LEHB99-.LFB7195
 9252 0263 05       		.uleb128 .LEHE99-.LEHB99
 9253 0264 00       		.uleb128 0
 9254 0265 00       		.uleb128 0
GAS LISTING /tmp/cc2K2nX4.s 			page 277


 9255              	.LLSDACSE7195:
 9256              		.section	.text._ZN16global_variablesC2ERKS_,"axG",@progbits,_ZN16global_variablesC5ERKS_,comdat
 9258              		.weak	_ZN16global_variablesC1ERKS_
 9259              		.set	_ZN16global_variablesC1ERKS_,_ZN16global_variablesC2ERKS_
 9260              		.section	.rodata
 9261              	.LC15:
 9262 0080 2F666D67 		.string	"/fmg_error.txt"
 9262      5F657272 
 9262      6F722E74 
 9262      787400
 9263              	.LC16:
 9264 008f 2F6D6573 		.string	"/mesh.txt"
 9264      682E7478 
 9264      7400
 9265              	.LC17:
 9266 0099 2C00     		.string	","
 9267              		.text
 9268              		.align 2
 9269              		.globl	_ZN6Solver11Mesh_SolverER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_v
 9271              	_ZN6Solver11Mesh_SolverER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_variables
 9272              	.LFB7190:
 808:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 809:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 810:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::Mesh_Solver( Mesh &Mesh , Solution &soln, Boundary_Conditions &bcs,
 811:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    external_forces &source,global_variables &globals, domain_geomet
 812:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    initial_conditions &init_conds, quad_bcs_plus &quad_bcs_orig, in
 813:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    Solution &residual, int fmg)
 814:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** {
 9273              		.loc 9 814 0 is_stmt 1
 9274              		.cfi_startproc
 9275              		.cfi_personality 0x3,__gxx_personality_v0
 9276              		.cfi_lsda 0x3,.LLSDA7190
 9277 5e86 55       		pushq	%rbp
 9278              		.cfi_def_cfa_offset 16
 9279              		.cfi_offset 6, -16
 9280 5e87 4889E5   		movq	%rsp, %rbp
 9281              		.cfi_def_cfa_register 6
 9282 5e8a 4157     		pushq	%r15
 9283 5e8c 4156     		pushq	%r14
 9284 5e8e 4155     		pushq	%r13
 9285 5e90 4154     		pushq	%r12
 9286 5e92 53       		pushq	%rbx
 9287 5e93 4881ECC8 		subq	$4296, %rsp
 9287      100000
 9288              		.cfi_offset 15, -24
 9289              		.cfi_offset 14, -32
 9290              		.cfi_offset 13, -40
 9291              		.cfi_offset 12, -48
 9292              		.cfi_offset 3, -56
 9293 5e9a 4889BD78 		movq	%rdi, -4232(%rbp)
 9293      EFFFFF
 9294 5ea1 4889B570 		movq	%rsi, -4240(%rbp)
 9294      EFFFFF
 9295 5ea8 48899568 		movq	%rdx, -4248(%rbp)
 9295      EFFFFF
 9296 5eaf 48898D60 		movq	%rcx, -4256(%rbp)
 9296      EFFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 278


 9297 5eb6 4C898558 		movq	%r8, -4264(%rbp)
 9297      EFFFFF
 9298 5ebd 4C898D50 		movq	%r9, -4272(%rbp)
 9298      EFFFFF
 9299 5ec4 488B4510 		movq	16(%rbp), %rax
 9300 5ec8 48898548 		movq	%rax, -4280(%rbp)
 9300      EFFFFF
 9301 5ecf 488B4518 		movq	24(%rbp), %rax
 9302 5ed3 48898540 		movq	%rax, -4288(%rbp)
 9302      EFFFFF
 9303 5eda 488B4520 		movq	32(%rbp), %rax
 9304 5ede 48898538 		movq	%rax, -4296(%rbp)
 9304      EFFFFF
 9305 5ee5 488B4530 		movq	48(%rbp), %rax
 9306 5ee9 48898530 		movq	%rax, -4304(%rbp)
 9306      EFFFFF
 9307              		.loc 9 814 0
 9308 5ef0 64488B04 		movq	%fs:40, %rax
 9308      25280000 
 9308      00
 9309 5ef9 488945C8 		movq	%rax, -56(%rbp)
 9310 5efd 31C0     		xorl	%eax, %eax
 815:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //dtor
 816:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     dt = 1.0; // timestepping for streaming // non-dim equals 1
 9311              		.loc 9 816 0
 9312 5eff 488B8578 		movq	-4232(%rbp), %rax
 9312      EFFFFF
 9313 5f06 F20F1005 		movsd	.LC4(%rip), %xmm0
 9313      00000000 
 9314 5f0e F20F1140 		movsd	%xmm0, 8(%rax)
 9314      08
 817:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 818:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     c = 1; // assume lattice spacing is equal to streaming timestep
 9315              		.loc 9 818 0
 9316 5f13 488B8578 		movq	-4232(%rbp), %rax
 9316      EFFFFF
 9317 5f1a F20F1005 		movsd	.LC4(%rip), %xmm0
 9317      00000000 
 9318 5f22 F20F1140 		movsd	%xmm0, 32(%rax)
 9318      20
 819:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     cs = domain.cs;
 9319              		.loc 9 819 0
 9320 5f27 488B8548 		movq	-4280(%rbp), %rax
 9320      EFFFFF
 9321 5f2e F20F1040 		movsd	48(%rax), %xmm0
 9321      30
 9322 5f33 488B8578 		movq	-4232(%rbp), %rax
 9322      EFFFFF
 9323 5f3a F20F1140 		movsd	%xmm0, 40(%rax)
 9323      28
 820:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 821:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     tau = globals.tau;
 9324              		.loc 9 821 0
 9325 5f3f 488B8550 		movq	-4272(%rbp), %rax
 9325      EFFFFF
 9326 5f46 F20F1040 		movsd	96(%rax), %xmm0
 9326      60
GAS LISTING /tmp/cc2K2nX4.s 			page 279


 9327 5f4b 488B8578 		movq	-4232(%rbp), %rax
 9327      EFFFFF
 9328 5f52 F20F1140 		movsd	%xmm0, 16(%rax)
 9328      10
 822:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(Mesh.get_total_cells());
 9329              		.loc 9 822 0
 9330 5f57 488B8570 		movq	-4240(%rbp), %rax
 9330      EFFFFF
 9331 5f5e 4889C7   		movq	%rax, %rdi
 9332 5f61 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9332      00
 9333 5f66 89C2     		movl	%eax, %edx
 9334 5f68 488D8540 		leaq	-3264(%rbp), %rax
 9334      F3FFFF
 9335 5f6f 89D6     		movl	%edx, %esi
 9336 5f71 4889C7   		movq	%rax, %rdi
 9337              	.LEHB100:
 9338 5f74 E8000000 		call	_ZN8SolutionC1Ei
 9338      00
 9339              	.LEHE100:
 823:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells());
 9340              		.loc 9 823 0
 9341 5f79 488B8570 		movq	-4240(%rbp), %rax
 9341      EFFFFF
 9342 5f80 4889C7   		movq	%rax, %rdi
 9343 5f83 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9343      00
 9344 5f88 89C2     		movl	%eax, %edx
 9345 5f8a 488D8590 		leaq	-3184(%rbp), %rax
 9345      F3FFFF
 9346 5f91 89D6     		movl	%edx, %esi
 9347 5f93 4889C7   		movq	%rax, %rdi
 9348              	.LEHB101:
 9349 5f96 E8000000 		call	_ZN8SolutionC1Ei
 9349      00
 9350              	.LEHE101:
 824:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 825:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 826:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     artificial_dissipation arti_dis(Mesh.get_total_cells(),globals);
 9351              		.loc 9 826 0
 9352 5f9b 488B8570 		movq	-4240(%rbp), %rax
 9352      EFFFFF
 9353 5fa2 4889C7   		movq	%rax, %rdi
 9354 5fa5 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9354      00
 9355 5faa 89C1     		movl	%eax, %ecx
 9356 5fac 488B9550 		movq	-4272(%rbp), %rdx
 9356      EFFFFF
 9357 5fb3 488D85F0 		leaq	-1552(%rbp), %rax
 9357      F9FFFF
 9358 5fba 89CE     		movl	%ecx, %esi
 9359 5fbc 4889C7   		movq	%rax, %rdi
 9360              	.LEHB102:
 9361 5fbf E8000000 		call	_ZN22artificial_dissipationC1EiR16global_variables
 9361      00
 9362              	.LEHE102:
 827:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 280


 828:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp_soln.clone(soln);
 9363              		.loc 9 828 0
 9364 5fc4 488B9568 		movq	-4248(%rbp), %rdx
 9364      EFFFFF
 9365 5fcb 488D8540 		leaq	-3264(%rbp), %rax
 9365      F3FFFF
 9366 5fd2 4889D6   		movq	%rdx, %rsi
 9367 5fd5 4889C7   		movq	%rax, %rdi
 9368              	.LEHB103:
 9369 5fd8 E8000000 		call	_ZN8Solution5cloneERS_
 9369      00
 829:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln_t0.clone(soln);
 9370              		.loc 9 829 0
 9371 5fdd 488B9568 		movq	-4248(%rbp), %rdx
 9371      EFFFFF
 9372 5fe4 488D8590 		leaq	-3184(%rbp), %rax
 9372      F3FFFF
 9373 5feb 4889D6   		movq	%rdx, %rsi
 9374 5fee 4889C7   		movq	%rax, %rdi
 9375 5ff1 E8000000 		call	_ZN8Solution5cloneERS_
 9375      00
 830:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 831:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //    Solution RK1(Mesh.get_total_nodes()), RK2(Mesh.get_total_nodes()), RK3(Mesh.get_total_nodes()
 832:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //        RK4(Mesh.get_total_nodes());
 833:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 834:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 835:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var RK;
 9376              		.loc 9 835 0
 9377 5ff6 488D8550 		leaq	-3504(%rbp), %rax
 9377      F2FFFF
 9378 5ffd 4889C7   		movq	%rax, %rdi
 9379 6000 E8000000 		call	_ZN8flux_varC1Ev
 9379      00
 9380              	.LEHE103:
 836:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 837:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double delta_t = globals.time_marching_step;
 9381              		.loc 9 837 0
 9382 6005 488B8550 		movq	-4272(%rbp), %rax
 9382      EFFFFF
 9383 600c F20F1040 		movsd	64(%rax), %xmm0
 9383      40
 9384 6011 F20F1185 		movsd	%xmm0, -4112(%rbp)
 9384      F0EFFFFF 
 838:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::clock_t start;
 839:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double duration;
 840:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 841:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // separate toelrances for convergence for FMG and normal solver
 842:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double local_tolerance;
 843:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if(fmg > 0){
 9385              		.loc 9 843 0
 9386 6019 837D3800 		cmpl	$0, 56(%rbp)
 9387 601d 7E19     		jle	.L821
 844:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         local_tolerance = globals.fmg_tolerance;
 9388              		.loc 9 844 0
 9389 601f 488B8550 		movq	-4272(%rbp), %rax
 9389      EFFFFF
 9390 6026 F20F1080 		movsd	144(%rax), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 281


 9390      90000000 
 9391 602e F20F1185 		movsd	%xmm0, -4152(%rbp)
 9391      C8EFFFFF 
 9392 6036 EB14     		jmp	.L822
 9393              	.L821:
 845:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 846:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 847:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
 848:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         local_tolerance = globals.tolerance;
 9394              		.loc 9 848 0
 9395 6038 488B8550 		movq	-4272(%rbp), %rax
 9395      EFFFFF
 9396 603f F20F1040 		movsd	40(%rax), %xmm0
 9396      28
 9397 6044 F20F1185 		movsd	%xmm0, -4152(%rbp)
 9397      C8EFFFFF 
 9398              	.L822:
 849:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 850:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 851:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 852:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 853:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //time increment on runge kutta must satisfy CFL condition
 854:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //U delta_t/delta_x  < 1  ->> delta_t < 1/ U
 855:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // U is equal to max theoretical velocity in solution
 856:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 857:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::ofstream error_output ;
 9399              		.loc 9 857 0
 9400 604c 488D85C0 		leaq	-1088(%rbp), %rax
 9400      FBFFFF
 9401 6053 4889C7   		movq	%rax, %rdi
 9402              	.LEHB104:
 9403 6056 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev
 9403      00
 9404              	.LEHE104:
 858:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 9405              		.loc 9 858 0
 9406 605b 488D8570 		leaq	-2960(%rbp), %rax
 9406      F4FFFF
 9407 6062 4889C7   		movq	%rax, %rdi
 9408 6065 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev
 9408      00
 859:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg == 0){
 9409              		.loc 9 859 0
 9410 606a 8B4528   		movl	40(%rbp), %eax
 9411 606d 85C0     		testl	%eax, %eax
 9412 606f 0F85CB00 		jne	.L823
 9412      0000
 860:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 861:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if (fmg < 0){
 9413              		.loc 9 861 0
 9414 6075 837D3800 		cmpl	$0, 56(%rbp)
 9415 6079 794F     		jns	.L824
 862:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 output_dir = globals.output_file +"/fmg_error.txt";
 9416              		.loc 9 862 0
 9417 607b 488B8550 		movq	-4272(%rbp), %rax
 9417      EFFFFF
 9418 6082 488D88D8 		leaq	216(%rax), %rcx
GAS LISTING /tmp/cc2K2nX4.s 			page 282


 9418      000000
 9419 6089 488D8590 		leaq	-2928(%rbp), %rax
 9419      F4FFFF
 9420 6090 BA000000 		movl	$.LC15, %edx
 9420      00
 9421 6095 4889CE   		movq	%rcx, %rsi
 9422 6098 4889C7   		movq	%rax, %rdi
 9423              	.LEHB105:
 9424 609b E8000000 		call	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 9424      00
 9425              	.LEHE105:
 9426              		.loc 9 862 0 is_stmt 0 discriminator 1
 9427 60a0 488D9590 		leaq	-2928(%rbp), %rdx
 9427      F4FFFF
 9428 60a7 488D8570 		leaq	-2960(%rbp), %rax
 9428      F4FFFF
 9429 60ae 4889D6   		movq	%rdx, %rsi
 9430 60b1 4889C7   		movq	%rax, %rdi
 9431              	.LEHB106:
 9432 60b4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
 9432      00
 9433              	.LEHE106:
 9434              		.loc 9 862 0 discriminator 3
 9435 60b9 488D8590 		leaq	-2928(%rbp), %rax
 9435      F4FFFF
 9436 60c0 4889C7   		movq	%rax, %rdi
 9437 60c3 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9437      00
 9438 60c8 EB4D     		jmp	.L825
 9439              	.L824:
 863:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }else{
 864:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             output_dir = globals.output_file +"/error.txt";
 9440              		.loc 9 864 0 is_stmt 1
 9441 60ca 488B8550 		movq	-4272(%rbp), %rax
 9441      EFFFFF
 9442 60d1 488D88D8 		leaq	216(%rax), %rcx
 9442      000000
 9443 60d8 488D85B0 		leaq	-2896(%rbp), %rax
 9443      F4FFFF
 9444 60df BA000000 		movl	$.LC5, %edx
 9444      00
 9445 60e4 4889CE   		movq	%rcx, %rsi
 9446 60e7 4889C7   		movq	%rax, %rdi
 9447              	.LEHB107:
 9448 60ea E8000000 		call	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 9448      00
 9449              	.LEHE107:
 9450              		.loc 9 864 0 is_stmt 0 discriminator 1
 9451 60ef 488D95B0 		leaq	-2896(%rbp), %rdx
 9451      F4FFFF
 9452 60f6 488D8570 		leaq	-2960(%rbp), %rax
 9452      F4FFFF
 9453 60fd 4889D6   		movq	%rdx, %rsi
 9454 6100 4889C7   		movq	%rax, %rdi
 9455              	.LEHB108:
 9456 6103 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
 9456      00
GAS LISTING /tmp/cc2K2nX4.s 			page 283


 9457              	.LEHE108:
 9458              		.loc 9 864 0 discriminator 3
 9459 6108 488D85B0 		leaq	-2896(%rbp), %rax
 9459      F4FFFF
 9460 610f 4889C7   		movq	%rax, %rdi
 9461 6112 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9461      00
 9462              	.L825:
 865:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 866:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 867:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::ou
 868:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         error_output.open(output_dir.c_str(), ios::out);
 9463              		.loc 9 868 0 is_stmt 1
 9464 6117 488D8570 		leaq	-2960(%rbp), %rax
 9464      F4FFFF
 9465 611e 4889C7   		movq	%rax, %rdi
 9466 6121 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
 9466      00
 9467 6126 4889C1   		movq	%rax, %rcx
 9468 6129 488D85C0 		leaq	-1088(%rbp), %rax
 9468      FBFFFF
 9469 6130 BA100000 		movl	$16, %edx
 9469      00
 9470 6135 4889CE   		movq	%rcx, %rsi
 9471 6138 4889C7   		movq	%rax, %rdi
 9472              	.LEHB109:
 9473 613b E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode
 9473      00
 9474              	.L823:
 869:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 870:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 871:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 872:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****      std::ofstream mesh_output ;
 9475              		.loc 9 872 0
 9476 6140 488D85C0 		leaq	-576(%rbp), %rax
 9476      FDFFFF
 9477 6147 4889C7   		movq	%rax, %rdi
 9478 614a E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev
 9478      00
 9479              	.LEHE109:
 873:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 874:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 875:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     output_dir = globals.output_file +"/mesh.txt";
 9480              		.loc 9 875 0
 9481 614f 488B8550 		movq	-4272(%rbp), %rax
 9481      EFFFFF
 9482 6156 488D88D8 		leaq	216(%rax), %rcx
 9482      000000
 9483 615d 488D85D0 		leaq	-2864(%rbp), %rax
 9483      F4FFFF
 9484 6164 BA000000 		movl	$.LC16, %edx
 9484      00
 9485 6169 4889CE   		movq	%rcx, %rsi
 9486 616c 4889C7   		movq	%rax, %rdi
 9487              	.LEHB110:
 9488 616f E8000000 		call	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 9488      00
GAS LISTING /tmp/cc2K2nX4.s 			page 284


 9489              	.LEHE110:
 9490              		.loc 9 875 0 is_stmt 0 discriminator 1
 9491 6174 488D95D0 		leaq	-2864(%rbp), %rdx
 9491      F4FFFF
 9492 617b 488D8570 		leaq	-2960(%rbp), %rax
 9492      F4FFFF
 9493 6182 4889D6   		movq	%rdx, %rsi
 9494 6185 4889C7   		movq	%rax, %rdi
 9495              	.LEHB111:
 9496 6188 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
 9496      00
 9497              	.LEHE111:
 9498              		.loc 9 875 0 discriminator 3
 9499 618d 488D85D0 		leaq	-2864(%rbp), %rax
 9499      F4FFFF
 9500 6194 4889C7   		movq	%rax, %rdi
 9501 6197 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 9501      00
 876:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 877:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 878:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         // error_output.open("/home/brendan/Dropbox/PhD/Test Cases/Couette Flow/error.txt", ios::ou
 879:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         mesh_output.open(output_dir.c_str(), ios::out);
 9502              		.loc 9 879 0 is_stmt 1 discriminator 3
 9503 619c 488D8570 		leaq	-2960(%rbp), %rax
 9503      F4FFFF
 9504 61a3 4889C7   		movq	%rax, %rdi
 9505 61a6 E8000000 		call	_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
 9505      00
 9506 61ab 4889C1   		movq	%rax, %rcx
 9507 61ae 488D85C0 		leaq	-576(%rbp), %rax
 9507      FDFFFF
 9508 61b5 BA100000 		movl	$16, %edx
 9508      00
 9509 61ba 4889CE   		movq	%rcx, %rsi
 9510 61bd 4889C7   		movq	%rax, %rdi
 9511              	.LEHB112:
 9512 61c0 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode
 9512      00
 9513              	.LBB63:
 880:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for (int mesh_t= 0; mesh_t < Mesh.get_total_cells(); mesh_t++){
 9514              		.loc 9 880 0
 9515 61c5 C78584EF 		movl	$0, -4220(%rbp)
 9515      FFFF0000 
 9515      0000
 9516              	.L827:
 9517              		.loc 9 880 0 is_stmt 0 discriminator 1
 9518 61cf 488B8570 		movq	-4240(%rbp), %rax
 9518      EFFFFF
 9519 61d6 4889C7   		movq	%rax, %rdi
 9520 61d9 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9520      00
 9521 61de 3B8584EF 		cmpl	-4220(%rbp), %eax
 9521      FFFF
 9522 61e4 0F9FC0   		setg	%al
 9523 61e7 84C0     		testb	%al, %al
 9524 61e9 0F84E400 		je	.L826
 9524      0000
GAS LISTING /tmp/cc2K2nX4.s 			page 285


 881:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              mesh_output << mesh_t << "," << Mesh.get_centroid_x(mesh_t) << "," <<
 882:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     Mesh.get_centroid_y(mesh_t)
 883:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                      << "," << Mesh.get_centroid_z(mesh_t) << endl;
 9525              		.loc 9 883 0 is_stmt 1
 9526 61ef 8B9584EF 		movl	-4220(%rbp), %edx
 9526      FFFF
 9527 61f5 488B8570 		movq	-4240(%rbp), %rax
 9527      EFFFFF
 9528 61fc 89D6     		movl	%edx, %esi
 9529 61fe 4889C7   		movq	%rax, %rdi
 9530 6201 E8000000 		call	_ZN4Mesh14get_centroid_zEi
 9530      00
 9531 6206 F20F1185 		movsd	%xmm0, -4312(%rbp)
 9531      28EFFFFF 
 882:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                      << "," << Mesh.get_centroid_z(mesh_t) << endl;
 9532              		.loc 9 882 0
 9533 620e 8B9584EF 		movl	-4220(%rbp), %edx
 9533      FFFF
 9534 6214 488B8570 		movq	-4240(%rbp), %rax
 9534      EFFFFF
 9535 621b 89D6     		movl	%edx, %esi
 9536 621d 4889C7   		movq	%rax, %rdi
 9537 6220 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 9537      00
 9538 6225 F20F1185 		movsd	%xmm0, -4320(%rbp)
 9538      20EFFFFF 
 881:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              mesh_output << mesh_t << "," << Mesh.get_centroid_x(mesh_t) << "," <<
 9539              		.loc 9 881 0
 9540 622d 8B9584EF 		movl	-4220(%rbp), %edx
 9540      FFFF
 9541 6233 488B8570 		movq	-4240(%rbp), %rax
 9541      EFFFFF
 9542 623a 89D6     		movl	%edx, %esi
 9543 623c 4889C7   		movq	%rax, %rdi
 9544 623f E8000000 		call	_ZN4Mesh14get_centroid_xEi
 9544      00
 9545 6244 F20F1185 		movsd	%xmm0, -4328(%rbp)
 9545      18EFFFFF 
 9546 624c 8B9584EF 		movl	-4220(%rbp), %edx
 9546      FFFF
 9547 6252 488D85C0 		leaq	-576(%rbp), %rax
 9547      FDFFFF
 9548 6259 89D6     		movl	%edx, %esi
 9549 625b 4889C7   		movq	%rax, %rdi
 9550 625e E8000000 		call	_ZNSolsEi
 9550      00
 9551 6263 BE000000 		movl	$.LC17, %esi
 9551      00
 9552 6268 4889C7   		movq	%rax, %rdi
 9553 626b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 9553      00
 881:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              mesh_output << mesh_t << "," << Mesh.get_centroid_x(mesh_t) << "," <<
 9554              		.loc 9 881 0 is_stmt 0 discriminator 1
 9555 6270 F20F1085 		movsd	-4328(%rbp), %xmm0
 9555      18EFFFFF 
 9556 6278 4889C7   		movq	%rax, %rdi
 9557 627b E8000000 		call	_ZNSolsEd
GAS LISTING /tmp/cc2K2nX4.s 			page 286


 9557      00
 881:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              mesh_output << mesh_t << "," << Mesh.get_centroid_x(mesh_t) << "," <<
 9558              		.loc 9 881 0 discriminator 2
 9559 6280 BE000000 		movl	$.LC17, %esi
 9559      00
 9560 6285 4889C7   		movq	%rax, %rdi
 9561 6288 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 9561      00
 882:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                      << "," << Mesh.get_centroid_z(mesh_t) << endl;
 9562              		.loc 9 882 0 is_stmt 1 discriminator 3
 9563 628d F20F1085 		movsd	-4320(%rbp), %xmm0
 9563      20EFFFFF 
 9564 6295 4889C7   		movq	%rax, %rdi
 9565 6298 E8000000 		call	_ZNSolsEd
 9565      00
 9566              		.loc 9 883 0 discriminator 4
 9567 629d BE000000 		movl	$.LC17, %esi
 9567      00
 9568 62a2 4889C7   		movq	%rax, %rdi
 9569 62a5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 9569      00
 9570              		.loc 9 883 0 is_stmt 0 discriminator 1
 9571 62aa F20F1085 		movsd	-4312(%rbp), %xmm0
 9571      28EFFFFF 
 9572 62b2 4889C7   		movq	%rax, %rdi
 9573 62b5 E8000000 		call	_ZNSolsEd
 9573      00
 9574 62ba BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 9574      00
 9575 62bf 4889C7   		movq	%rax, %rdi
 9576 62c2 E8000000 		call	_ZNSolsEPFRSoS_E
 9576      00
 880:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for (int mesh_t= 0; mesh_t < Mesh.get_total_cells(); mesh_t++){
 9577              		.loc 9 880 0 is_stmt 1 discriminator 2
 9578 62c7 838584EF 		addl	$1, -4220(%rbp)
 9578      FFFF01
 9579 62ce E9FCFEFF 		jmp	.L827
 9579      FF
 9580              	.L826:
 9581              	.LBE63:
 884:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 885:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 886:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 887:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     mesh_output.close();
 9582              		.loc 9 887 0
 9583 62d3 488D85C0 		leaq	-576(%rbp), %rax
 9583      FDFFFF
 9584 62da 4889C7   		movq	%rax, %rdi
 9585 62dd E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 9585      00
 888:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_1, cell_2, interface_node, lattice_node, delta_u, delta_v ,delta_w,delta_rho;
 9586              		.loc 9 889 0
 9587 62e2 488D8530 		leaq	-4048(%rbp), %rax
 9587      F0FFFF
 9588 62e9 4889C7   		movq	%rax, %rdi
 9589 62ec E8000000 		call	_ZN10vector_varC1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 287


 9589      00
 9590              	.LEHE112:
 9591              		.loc 9 889 0 is_stmt 0 discriminator 1
 9592 62f1 488D8550 		leaq	-4016(%rbp), %rax
 9592      F0FFFF
 9593 62f8 4889C7   		movq	%rax, %rdi
 9594              	.LEHB113:
 9595 62fb E8000000 		call	_ZN10vector_varC1Ev
 9595      00
 9596              	.LEHE113:
 9597              		.loc 9 889 0 discriminator 3
 9598 6300 488D8570 		leaq	-3984(%rbp), %rax
 9598      F0FFFF
 9599 6307 4889C7   		movq	%rax, %rdi
 9600              	.LEHB114:
 9601 630a E8000000 		call	_ZN10vector_varC1Ev
 9601      00
 9602              	.LEHE114:
 9603              		.loc 9 889 0 discriminator 5
 9604 630f 488D8590 		leaq	-3952(%rbp), %rax
 9604      F0FFFF
 9605 6316 4889C7   		movq	%rax, %rdi
 9606              	.LEHB115:
 9607 6319 E8000000 		call	_ZN10vector_varC1Ev
 9607      00
 9608              	.LEHE115:
 9609              		.loc 9 889 0 discriminator 7
 9610 631e 488D85B0 		leaq	-3920(%rbp), %rax
 9610      F0FFFF
 9611 6325 4889C7   		movq	%rax, %rdi
 9612              	.LEHB116:
 9613 6328 E8000000 		call	_ZN10vector_varC1Ev
 9613      00
 9614              	.LEHE116:
 9615              		.loc 9 889 0 discriminator 9
 9616 632d 488D85D0 		leaq	-3888(%rbp), %rax
 9616      F0FFFF
 9617 6334 4889C7   		movq	%rax, %rdi
 9618              	.LEHB117:
 9619 6337 E8000000 		call	_ZN10vector_varC1Ev
 9619      00
 9620              	.LEHE117:
 9621              		.loc 9 889 0 discriminator 11
 9622 633c 488D85F0 		leaq	-3856(%rbp), %rax
 9622      F0FFFF
 9623 6343 4889C7   		movq	%rax, %rdi
 9624              	.LEHB118:
 9625 6346 E8000000 		call	_ZN10vector_varC1Ev
 9625      00
 9626              	.LEHE118:
 9627              		.loc 9 889 0 discriminator 13
 9628 634b 488D8510 		leaq	-3824(%rbp), %rax
 9628      F1FFFF
 9629 6352 4889C7   		movq	%rax, %rdi
 9630              	.LEHB119:
 9631 6355 E8000000 		call	_ZN10vector_varC1Ev
 9631      00
GAS LISTING /tmp/cc2K2nX4.s 			page 288


 9632              	.LEHE119:
 890:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 9633              		.loc 9 890 0 is_stmt 1
 9634 635a 488D8530 		leaq	-3792(%rbp), %rax
 9634      F1FFFF
 9635 6361 4889C7   		movq	%rax, %rdi
 9636              	.LEHB120:
 9637 6364 E8000000 		call	_ZN10vector_varC1Ev
 9637      00
 9638              	.LEHE120:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var e_alpha, u_lattice,  rho_u_interface , u_interface;
 9639              		.loc 9 891 0
 9640 6369 488D8550 		leaq	-3760(%rbp), %rax
 9640      F1FFFF
 9641 6370 4889C7   		movq	%rax, %rdi
 9642              	.LEHB121:
 9643 6373 E8000000 		call	_ZN10vector_varC1Ev
 9643      00
 9644              	.LEHE121:
 9645              		.loc 9 891 0 is_stmt 0 discriminator 1
 9646 6378 488D8570 		leaq	-3728(%rbp), %rax
 9646      F1FFFF
 9647 637f 4889C7   		movq	%rax, %rdi
 9648              	.LEHB122:
 9649 6382 E8000000 		call	_ZN10vector_varC1Ev
 9649      00
 9650              	.LEHE122:
 9651              		.loc 9 891 0 discriminator 3
 9652 6387 488D8590 		leaq	-3696(%rbp), %rax
 9652      F1FFFF
 9653 638e 4889C7   		movq	%rax, %rdi
 9654              	.LEHB123:
 9655 6391 E8000000 		call	_ZN10vector_varC1Ev
 9655      00
 9656              	.LEHE123:
 9657              		.loc 9 891 0 discriminator 5
 9658 6396 488D85B0 		leaq	-3664(%rbp), %rax
 9658      F1FFFF
 9659 639d 4889C7   		movq	%rax, %rdi
 9660              	.LEHB124:
 9661 63a0 E8000000 		call	_ZN10vector_varC1Ev
 9661      00
 9662              	.LEHE124:
 892:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 9663              		.loc 9 892 0 is_stmt 1
 9664 63a5 488D85D0 		leaq	-3632(%rbp), %rax
 9664      F1FFFF
 9665 63ac 4889C7   		movq	%rax, %rdi
 9666              	.LEHB125:
 9667 63af E8000000 		call	_ZN10vector_varC1Ev
 9667      00
 9668              	.LEHE125:
 893:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_normal;
 9669              		.loc 9 893 0
 9670 63b4 488D85F0 		leaq	-3600(%rbp), %rax
 9670      F1FFFF
 9671 63bb 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 289


 9672              	.LEHB126:
 9673 63be E8000000 		call	_ZN10vector_varC1Ev
 9673      00
 9674              	.LEHE126:
 894:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_interface,feq_interface,fneq_interface;
 895:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     residuals convergence_residual;
 9675              		.loc 9 895 0
 9676 63c3 488D85E0 		leaq	-3104(%rbp), %rax
 9676      F3FFFF
 9677 63ca 4889C7   		movq	%rax, %rdi
 9678              	.LEHB127:
 9679 63cd E8000000 		call	_ZN9residualsC1Ev
 9679      00
 9680              	.LEHE127:
 896:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 9681              		.loc 9 896 0
 9682 63d2 488D8580 		leaq	-3456(%rbp), %rax
 9682      F2FFFF
 9683 63d9 4889C7   		movq	%rax, %rdi
 9684              	.LEHB128:
 9685 63dc E8000000 		call	_ZN8flux_varC1Ev
 9685      00
 9686              	.LEHE128:
 9687              		.loc 9 896 0 is_stmt 0 discriminator 1
 9688 63e1 488D85B0 		leaq	-3408(%rbp), %rax
 9688      F2FFFF
 9689 63e8 4889C7   		movq	%rax, %rdi
 9690              	.LEHB129:
 9691 63eb E8000000 		call	_ZN8flux_varC1Ev
 9691      00
 9692              	.LEHE129:
 897:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 9693              		.loc 9 897 0 is_stmt 1
 9694 63f0 488D85E0 		leaq	-3360(%rbp), %rax
 9694      F2FFFF
 9695 63f7 4889C7   		movq	%rax, %rdi
 9696              	.LEHB130:
 9697 63fa E8000000 		call	_ZN8flux_varC1Ev
 9697      00
 9698              	.LEHE130:
 898:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 899:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 900:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     mg_forcing_term= new flux_var [Mesh.get_total_cells() +1 ];
 9699              		.loc 9 900 0
 9700 63ff 488B8570 		movq	-4240(%rbp), %rax
 9700      EFFFFF
 9701 6406 4889C7   		movq	%rax, %rdi
 9702 6409 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9702      00
 9703 640e 83C001   		addl	$1, %eax
 9704 6411 4863D8   		movslq	%eax, %rbx
 9705 6414 48B80000 		movabsq	$229683580995895296, %rax
 9705      00000000 
 9705      3003
 9706 641e 4839C3   		cmpq	%rax, %rbx
 9707 6421 7714     		ja	.L828
 9708              		.loc 9 900 0 is_stmt 0 discriminator 1
GAS LISTING /tmp/cc2K2nX4.s 			page 290


 9709 6423 4889D8   		movq	%rbx, %rax
 9710 6426 48C1E002 		salq	$2, %rax
 9711 642a 4801D8   		addq	%rbx, %rax
 9712 642d 48C1E003 		salq	$3, %rax
 9713 6431 4883C008 		addq	$8, %rax
 9714 6435 EB07     		jmp	.L829
 9715              	.L828:
 9716              		.loc 9 900 0 discriminator 2
 9717 6437 48C7C0FF 		movq	$-1, %rax
 9717      FFFFFF
 9718              	.L829:
 9719              		.loc 9 900 0 discriminator 4
 9720 643e 4889C7   		movq	%rax, %rdi
 9721              	.LEHB131:
 9722 6441 E8000000 		call	_Znam
 9722      00
 9723              	.LEHE131:
 9724 6446 4989C5   		movq	%rax, %r13
 9725 6449 49895D00 		movq	%rbx, 0(%r13)
 9726 644d 4D8D6508 		leaq	8(%r13), %r12
 9727 6451 488D43FF 		leaq	-1(%rbx), %rax
 9728 6455 4989C6   		movq	%rax, %r14
 9729 6458 4D89E7   		movq	%r12, %r15
 9730              	.L831:
 9731              		.loc 9 900 0 discriminator 9
 9732 645b 4983FEFF 		cmpq	$-1, %r14
 9733 645f 7412     		je	.L830
 9734              		.loc 9 900 0 discriminator 7
 9735 6461 4C89FF   		movq	%r15, %rdi
 9736              	.LEHB132:
 9737 6464 E8000000 		call	_ZN8flux_varC1Ev
 9737      00
 9738              	.LEHE132:
 9739              		.loc 9 900 0 discriminator 8
 9740 6469 4983C728 		addq	$40, %r15
 9741 646d 4983EE01 		subq	$1, %r14
 9742 6471 EBE8     		jmp	.L831
 9743              	.L830:
 9744              		.loc 9 900 0
 9745 6473 498D4508 		leaq	8(%r13), %rax
 9746 6477 488985F8 		movq	%rax, -4104(%rbp)
 9746      EFFFFF
 901:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg_forcing_term==NULL) exit (1);
 9747              		.loc 9 901 0 is_stmt 1
 9748 647e 4883BDF8 		cmpq	$0, -4104(%rbp)
 9748      EFFFFF00 
 9749 6486 750A     		jne	.L832
 9750              		.loc 9 901 0 is_stmt 0 discriminator 1
 9751 6488 BF010000 		movl	$1, %edi
 9751      00
 9752 648d E8000000 		call	exit
 9752      00
 9753              	.L832:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var debug [4] ,debug_flux[4],arti_debug [4];
 9754              		.loc 9 902 0 is_stmt 1
 9755 6492 4C8DA5D0 		leaq	-2352(%rbp), %r12
 9755      F6FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 291


 9756 6499 BB030000 		movl	$3, %ebx
 9756      00
 9757 649e 4D89E5   		movq	%r12, %r13
 9758              	.L834:
 9759              		.loc 9 902 0 is_stmt 0 discriminator 5
 9760 64a1 4883FBFF 		cmpq	$-1, %rbx
 9761 64a5 7412     		je	.L833
 9762              		.loc 9 902 0 discriminator 3
 9763 64a7 4C89EF   		movq	%r13, %rdi
 9764              	.LEHB133:
 9765 64aa E8000000 		call	_ZN8flux_varC1Ev
 9765      00
 9766              	.LEHE133:
 9767              		.loc 9 902 0 discriminator 4
 9768 64af 4983C528 		addq	$40, %r13
 9769 64b3 4883EB01 		subq	$1, %rbx
 9770 64b7 EBE8     		jmp	.L834
 9771              	.L833:
 9772              		.loc 9 902 0 discriminator 2
 9773 64b9 4C8DA570 		leaq	-2192(%rbp), %r12
 9773      F7FFFF
 9774 64c0 BB030000 		movl	$3, %ebx
 9774      00
 9775 64c5 4D89E5   		movq	%r12, %r13
 9776              	.L836:
 9777              		.loc 9 902 0 discriminator 10
 9778 64c8 4883FBFF 		cmpq	$-1, %rbx
 9779 64cc 7412     		je	.L835
 9780              		.loc 9 902 0 discriminator 8
 9781 64ce 4C89EF   		movq	%r13, %rdi
 9782              	.LEHB134:
 9783 64d1 E8000000 		call	_ZN8flux_varC1Ev
 9783      00
 9784              	.LEHE134:
 9785              		.loc 9 902 0 discriminator 9
 9786 64d6 4983C528 		addq	$40, %r13
 9787 64da 4883EB01 		subq	$1, %rbx
 9788 64de EBE8     		jmp	.L836
 9789              	.L835:
 9790              		.loc 9 902 0 discriminator 7
 9791 64e0 4C8DA510 		leaq	-2032(%rbp), %r12
 9791      F8FFFF
 9792 64e7 BB030000 		movl	$3, %ebx
 9792      00
 9793 64ec 4D89E5   		movq	%r12, %r13
 9794              	.L838:
 9795              		.loc 9 902 0 discriminator 15
 9796 64ef 4883FBFF 		cmpq	$-1, %rbx
 9797 64f3 7412     		je	.L837
 9798              		.loc 9 902 0 discriminator 13
 9799 64f5 4C89EF   		movq	%r13, %rdi
 9800              	.LEHB135:
 9801 64f8 E8000000 		call	_ZN8flux_varC1Ev
 9801      00
 9802              	.LEHE135:
 9803              		.loc 9 902 0 discriminator 14
 9804 64fd 4983C528 		addq	$40, %r13
GAS LISTING /tmp/cc2K2nX4.s 			page 292


 9805 6501 4883EB01 		subq	$1, %rbx
 9806 6505 EBE8     		jmp	.L838
 9807              	.L837:
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 9808              		.loc 9 903 0 is_stmt 1 discriminator 12
 9809 6507 4C8DA5B0 		leaq	-1872(%rbp), %r12
 9809      F8FFFF
 9810 650e BB030000 		movl	$3, %ebx
 9810      00
 9811 6513 4D89E5   		movq	%r12, %r13
 9812              	.L840:
 9813              		.loc 9 903 0 is_stmt 0 discriminator 5
 9814 6516 4883FBFF 		cmpq	$-1, %rbx
 9815 651a 7412     		je	.L839
 9816              		.loc 9 903 0 discriminator 3
 9817 651c 4C89EF   		movq	%r13, %rdi
 9818              	.LEHB136:
 9819 651f E8000000 		call	_ZN8flux_varC1Ev
 9819      00
 9820              	.LEHE136:
 9821              		.loc 9 903 0 discriminator 4
 9822 6524 4983C528 		addq	$40, %r13
 9823 6528 4883EB01 		subq	$1, %rbx
 9824 652c EBE8     		jmp	.L840
 9825              	.L839:
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 9826              		.loc 9 904 0 is_stmt 1 discriminator 2
 9827 652e 4C8DA550 		leaq	-1712(%rbp), %r12
 9827      F9FFFF
 9828 6535 BB030000 		movl	$3, %ebx
 9828      00
 9829 653a 4D89E5   		movq	%r12, %r13
 9830              	.L842:
 9831              		.loc 9 904 0 is_stmt 0 discriminator 5
 9832 653d 4883FBFF 		cmpq	$-1, %rbx
 9833 6541 7412     		je	.L841
 9834              		.loc 9 904 0 discriminator 3
 9835 6543 4C89EF   		movq	%r13, %rdi
 9836              	.LEHB137:
 9837 6546 E8000000 		call	_ZN8flux_varC1Ev
 9837      00
 9838              	.LEHE137:
 9839              		.loc 9 904 0 discriminator 4
 9840 654b 4983C528 		addq	$40, %r13
 9841 654f 4883EB01 		subq	$1, %rbx
 9842 6553 EBE8     		jmp	.L842
 9843              	.L841:
 905:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 906:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 907:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc_var bc;
 908:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 909:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int neighbour;
 910:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 911:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_lattice ;
 912:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double feq_lattice [9], feq_int_debug[9], fneq_int_debug[9];
 913:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_lattice_deb[9], v_lattice[9], rho_lattice_deb[9];
 914:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double lattice_weight;
GAS LISTING /tmp/cc2K2nX4.s 			page 293


 915:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_magnitude;
 916:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double u_bc, rho_bc,  v_bc;
 917:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 918:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int bc_node;
 919:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //calculate timesteps
 920:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 921:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int timesteps;
 922:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double time;
 923:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if( mg ==0){
 9844              		.loc 9 923 0 is_stmt 1 discriminator 2
 9845 6555 8B4528   		movl	40(%rbp), %eax
 9846 6558 85C0     		testl	%eax, %eax
 9847 655a 7525     		jne	.L843
 924:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         timesteps = ceil( globals.simulation_length/delta_t);
 9848              		.loc 9 924 0
 9849 655c 488B8550 		movq	-4272(%rbp), %rax
 9849      EFFFFF
 9850 6563 F20F1040 		movsd	56(%rax), %xmm0
 9850      38
 9851 6568 F20F5E85 		divsd	-4112(%rbp), %xmm0
 9851      F0EFFFFF 
 9852 6570 E8000000 		call	ceil
 9852      00
 9853 6575 F20F2CC0 		cvttsd2si	%xmm0, %eax
 9854 6579 898588EF 		movl	%eax, -4216(%rbp)
 9854      FFFF
 9855 657f EB0A     		jmp	.L844
 9856              	.L843:
 925:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
 926:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         timesteps = 1;
 9857              		.loc 9 926 0
 9858 6581 C78588EF 		movl	$1, -4216(%rbp)
 9858      FFFF0100 
 9858      0000
 9859              	.L844:
 9860              	.LBB64:
 927:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 928:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 929:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 930:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // loop through each cell
 931:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     for (int t= 0; t < timesteps; t++){
 9861              		.loc 9 931 0
 9862 658b C7858CEF 		movl	$0, -4212(%rbp)
 9862      FFFF0000 
 9862      0000
 9863              	.L878:
 9864              		.loc 9 931 0 is_stmt 0 discriminator 1
 9865 6595 8B858CEF 		movl	-4212(%rbp), %eax
 9865      FFFF
 9866 659b 3B8588EF 		cmpl	-4216(%rbp), %eax
 9866      FFFF
 9867 65a1 0F8D0425 		jge	.L845
 9867      0000
 9868              	.LBB65:
 932:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 933:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                    // soln is the solution at the start of every
 934:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // RK step.(rk = n) Temp_soln holds the values at end of
GAS LISTING /tmp/cc2K2nX4.s 			page 294


 935:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // step.(rk = n+1)
 936:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         soln_t0.clone(soln);    // soln_t0 holds solution at start of time step
 9869              		.loc 9 936 0 is_stmt 1
 9870 65a7 488B9568 		movq	-4248(%rbp), %rdx
 9870      EFFFFF
 9871 65ae 488D8590 		leaq	-3184(%rbp), %rax
 9871      F3FFFF
 9872 65b5 4889D6   		movq	%rdx, %rsi
 9873 65b8 4889C7   		movq	%rax, %rdi
 9874              	.LEHB138:
 9875 65bb E8000000 		call	_ZN8Solution5cloneERS_
 9875      00
 9876              	.LBB66:
 937:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 // t= 0, rk = 0
 938:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 939:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for( int rk=0; rk< 4; rk++){
 9877              		.loc 9 939 0
 9878 65c0 C78590EF 		movl	$0, -4208(%rbp)
 9878      FFFF0000 
 9878      0000
 9879              	.L872:
 9880              		.loc 9 939 0 is_stmt 0 discriminator 1
 9881 65ca 83BD90EF 		cmpl	$3, -4208(%rbp)
 9881      FFFF03
 9882 65d1 0F8F4822 		jg	.L846
 9882      0000
 9883              	.LBB67:
 940:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 941:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //update temp_soln boundary conditions
 942:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              temp_soln.update_bcs(bcs,Mesh,domain);
 9884              		.loc 9 942 0 is_stmt 1
 9885 65d7 488B8D48 		movq	-4280(%rbp), %rcx
 9885      EFFFFF
 9886 65de 488B9570 		movq	-4240(%rbp), %rdx
 9886      EFFFFF
 9887 65e5 488BB560 		movq	-4256(%rbp), %rsi
 9887      EFFFFF
 9888 65ec 488D8540 		leaq	-3264(%rbp), %rax
 9888      F3FFFF
 9889 65f3 4889C7   		movq	%rax, %rdi
 9890 65f6 E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 9890      00
 943:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****              soln.clone(temp_soln);
 9891              		.loc 9 943 0
 9892 65fb 488D9540 		leaq	-3264(%rbp), %rdx
 9892      F3FFFF
 9893 6602 488B8568 		movq	-4248(%rbp), %rax
 9893      EFFFFF
 9894 6609 4889D6   		movq	%rdx, %rsi
 9895 660c 4889C7   		movq	%rax, %rdi
 9896 660f E8000000 		call	_ZN8Solution5cloneERS_
 9896      00
 944:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 945:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //temp_soln.update_bcs(bcs,Mesh,domain);
 946:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 947:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.reset();
 9897              		.loc 9 947 0
GAS LISTING /tmp/cc2K2nX4.s 			page 295


 9898 6614 488D85E0 		leaq	-3104(%rbp), %rax
 9898      F3FFFF
 9899 661b 4889C7   		movq	%rax, %rdi
 9900 661e E8000000 		call	_ZN9residuals5resetEv
 9900      00
 9901              	.LEHE138:
 9902              	.LBB68:
 948:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 949:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //arti_dis.get_global_jst(soln,bcs, Mesh,domain);
 950:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             for (int i=0 ; i < Mesh.get_total_cells() ; i ++) {
 9903              		.loc 9 950 0
 9904 6623 C78594EF 		movl	$0, -4204(%rbp)
 9904      FFFF0000 
 9904      0000
 9905              	.L871:
 9906              		.loc 9 950 0 is_stmt 0 discriminator 1
 9907 662d 488B8570 		movq	-4240(%rbp), %rax
 9907      EFFFFF
 9908 6634 4889C7   		movq	%rax, %rdi
 9909 6637 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 9909      00
 9910 663c 3B8594EF 		cmpl	-4204(%rbp), %eax
 9910      FFFF
 9911 6642 0F9FC0   		setg	%al
 9912 6645 84C0     		testb	%al, %al
 9913 6647 0F84C621 		je	.L847
 9913      0000
 9914              	.LBB69:
 9915              	.LBB70:
 951:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 952:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 953:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 // skip if a boundary node
 954:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 if(! bcs.get_bc(i)){
 9916              		.loc 9 954 0 is_stmt 1
 9917 664d 8B9594EF 		movl	-4204(%rbp), %edx
 9917      FFFF
 9918 6653 488B8560 		movq	-4256(%rbp), %rax
 9918      EFFFFF
 9919 665a 89D6     		movl	%edx, %esi
 9920 665c 4889C7   		movq	%rax, %rdi
 9921 665f E8000000 		call	_ZN19Boundary_Conditions6get_bcEi
 9921      00
 9922 6664 83F001   		xorl	$1, %eax
 9923 6667 84C0     		testb	%al, %al
 9924 6669 0F849821 		je	.L848
 9924      0000
 9925              	.LBB71:
 955:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 956:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 957:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //arti_dis.reset_local_jst_switch();
 958:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 959:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     interface_area = 0.0;
 9926              		.loc 9 959 0
 9927 666f 660FEFC0 		pxor	%xmm0, %xmm0
 9928 6673 F20F1185 		movsd	%xmm0, -4184(%rbp)
 9928      A8EFFFFF 
 960:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 296


 961:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 962:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.x = Mesh.get_centroid_x(i);
 9929              		.loc 9 962 0
 9930 667b 8B9594EF 		movl	-4204(%rbp), %edx
 9930      FFFF
 9931 6681 488B8570 		movq	-4240(%rbp), %rax
 9931      EFFFFF
 9932 6688 89D6     		movl	%edx, %esi
 9933 668a 4889C7   		movq	%rax, %rdi
 9934 668d E8000000 		call	_ZN4Mesh14get_centroid_xEi
 9934      00
 9935 6692 66480F7E 		movq	%xmm0, %rax
 9935      C0
 9936 6697 48898538 		movq	%rax, -4040(%rbp)
 9936      F0FFFF
 963:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.y = Mesh.get_centroid_y(i);
 9937              		.loc 9 963 0
 9938 669e 8B9594EF 		movl	-4204(%rbp), %edx
 9938      FFFF
 9939 66a4 488B8570 		movq	-4240(%rbp), %rax
 9939      EFFFFF
 9940 66ab 89D6     		movl	%edx, %esi
 9941 66ad 4889C7   		movq	%rax, %rdi
 9942 66b0 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 9942      00
 9943 66b5 66480F7E 		movq	%xmm0, %rax
 9943      C0
 9944 66ba 48898540 		movq	%rax, -4032(%rbp)
 9944      F0FFFF
 964:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_1.z = Mesh.get_centroid_z(i);
 9945              		.loc 9 964 0
 9946 66c1 8B9594EF 		movl	-4204(%rbp), %edx
 9946      FFFF
 9947 66c7 488B8570 		movq	-4240(%rbp), %rax
 9947      EFFFFF
 9948 66ce 89D6     		movl	%edx, %esi
 9949 66d0 4889C7   		movq	%rax, %rdi
 9950 66d3 E8000000 		call	_ZN4Mesh14get_centroid_zEi
 9950      00
 9951 66d8 66480F7E 		movq	%xmm0, %rax
 9951      C0
 9952 66dd 48898548 		movq	%rax, -4024(%rbp)
 9952      F0FFFF
 965:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // add in reset function
 966:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.P =0.0;
 9953              		.loc 9 966 0
 9954 66e4 660FEFC0 		pxor	%xmm0, %xmm0
 9955 66e8 F20F1185 		movsd	%xmm0, -3352(%rbp)
 9955      E8F2FFFF 
 967:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_x =0.0;
 9956              		.loc 9 967 0
 9957 66f0 660FEFC0 		pxor	%xmm0, %xmm0
 9958 66f4 F20F1185 		movsd	%xmm0, -3344(%rbp)
 9958      F0F2FFFF 
 968:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_y = 0.0;
 9959              		.loc 9 968 0
 9960 66fc 660FEFC0 		pxor	%xmm0, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 297


 9961 6700 F20F1185 		movsd	%xmm0, -3336(%rbp)
 9961      F8F2FFFF 
 969:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     cell_flux.momentum_z = 0.0;
 9962              		.loc 9 969 0
 9963 6708 660FEFC0 		pxor	%xmm0, %xmm0
 9964 670c F20F1185 		movsd	%xmm0, -3328(%rbp)
 9964      00F3FFFF 
 9965              	.LBB72:
 970:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // loop through cell interfaces
 971:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     for (int j= 0; j <4; j++ ){
 9966              		.loc 9 971 0
 9967 6714 C78598EF 		movl	$0, -4200(%rbp)
 9967      FFFF0000 
 9967      0000
 9968              	.L854:
 9969              		.loc 9 971 0 is_stmt 0 discriminator 1
 9970 671e 83BD98EF 		cmpl	$3, -4200(%rbp)
 9970      FFFF03
 9971 6725 0F8F3915 		jg	.L849
 9971      0000
 9972              	.LBB73:
 972:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 9973              		.loc 9 972 0 is_stmt 1
 9974 672b C68510F3 		movb	$0, -3312(%rbp)
 9974      FFFF00
 973:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_interface_variables( j, i,interface_node, neighbour,
 974:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  interface_area,cell_normal, bcs, bc, Mesh,
 975:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                  cell_2);
 9975              		.loc 9 975 0
 9976 6732 4C8D8DA8 		leaq	-4184(%rbp), %r9
 9976      EFFFFF
 9977 6739 4C8D8580 		leaq	-4224(%rbp), %r8
 9977      EFFFFF
 9978 6740 488D8D70 		leaq	-3984(%rbp), %rcx
 9978      F0FFFF
 9979 6747 8B9594EF 		movl	-4204(%rbp), %edx
 9979      FFFF
 9980 674d 8BB598EF 		movl	-4200(%rbp), %esi
 9980      FFFF
 9981 6753 488B8578 		movq	-4232(%rbp), %rax
 9981      EFFFFF
 9982 675a 4883EC08 		subq	$8, %rsp
 9983 675e 488DBD50 		leaq	-4016(%rbp), %rdi
 9983      F0FFFF
 9984 6765 57       		pushq	%rdi
 9985 6766 FFB570EF 		pushq	-4240(%rbp)
 9985      FFFF
 9986 676c 488DBD10 		leaq	-3312(%rbp), %rdi
 9986      F3FFFF
 9987 6773 57       		pushq	%rdi
 9988 6774 FFB560EF 		pushq	-4256(%rbp)
 9988      FFFF
 9989 677a 488DBDF0 		leaq	-3600(%rbp), %rdi
 9989      F1FFFF
 9990 6781 57       		pushq	%rdi
 9991 6782 4889C7   		movq	%rax, %rdi
 9992 6785 E8000000 		call	_ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_varE
GAS LISTING /tmp/cc2K2nX4.s 			page 298


 9992      00
 9993 678a 4883C430 		addq	$48, %rsp
 976:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 977:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // initialise variables
 978:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                          // add in reset function
 979:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         rho_interface = 0;
 9994              		.loc 9 979 0
 9995 678e 660FEFC0 		pxor	%xmm0, %xmm0
 9996 6792 F20F1185 		movsd	%xmm0, -4144(%rbp)
 9996      D0EFFFFF 
 980:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 981:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         rho_u_interface.x =0;
 9997              		.loc 9 981 0
 9998 679a 660FEFC0 		pxor	%xmm0, %xmm0
 9999 679e F20F1185 		movsd	%xmm0, -3688(%rbp)
 9999      98F1FFFF 
 982:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         rho_u_interface.y = 0;
 10000              		.loc 9 982 0
 10001 67a6 660FEFC0 		pxor	%xmm0, %xmm0
 10002 67aa F20F1185 		movsd	%xmm0, -3680(%rbp)
 10002      A0F1FFFF 
 983:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         rho_u_interface.z = 0;
 10003              		.loc 9 983 0
 10004 67b2 660FEFC0 		pxor	%xmm0, %xmm0
 10005 67b6 F20F1185 		movsd	%xmm0, -3672(%rbp)
 10005      A8F1FFFF 
 984:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 985:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         x_flux.P = 0;
 10006              		.loc 9 985 0
 10007 67be 660FEFC0 		pxor	%xmm0, %xmm0
 10008 67c2 F20F1185 		movsd	%xmm0, -3448(%rbp)
 10008      88F2FFFF 
 986:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         x_flux.momentum_x =0;
 10009              		.loc 9 986 0
 10010 67ca 660FEFC0 		pxor	%xmm0, %xmm0
 10011 67ce F20F1185 		movsd	%xmm0, -3440(%rbp)
 10011      90F2FFFF 
 987:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         x_flux.momentum_y =0;
 10012              		.loc 9 987 0
 10013 67d6 660FEFC0 		pxor	%xmm0, %xmm0
 10014 67da F20F1185 		movsd	%xmm0, -3432(%rbp)
 10014      98F2FFFF 
 988:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         x_flux.momentum_z =0;
 10015              		.loc 9 988 0
 10016 67e2 660FEFC0 		pxor	%xmm0, %xmm0
 10017 67e6 F20F1185 		movsd	%xmm0, -3424(%rbp)
 10017      A0F2FFFF 
 989:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 990:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         y_flux.P = 0;
 10018              		.loc 9 990 0
 10019 67ee 660FEFC0 		pxor	%xmm0, %xmm0
 10020 67f2 F20F1185 		movsd	%xmm0, -3400(%rbp)
 10020      B8F2FFFF 
 991:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         y_flux.momentum_x =0;
 10021              		.loc 9 991 0
 10022 67fa 660FEFC0 		pxor	%xmm0, %xmm0
 10023 67fe F20F1185 		movsd	%xmm0, -3392(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 299


 10023      C0F2FFFF 
 992:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         y_flux.momentum_y =0;
 10024              		.loc 9 992 0
 10025 6806 660FEFC0 		pxor	%xmm0, %xmm0
 10026 680a F20F1185 		movsd	%xmm0, -3384(%rbp)
 10026      C8F2FFFF 
 993:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         y_flux.momentum_z =0;
 10027              		.loc 9 993 0
 10028 6812 660FEFC0 		pxor	%xmm0, %xmm0
 10029 6816 F20F1185 		movsd	%xmm0, -3376(%rbp)
 10029      D0F2FFFF 
 994:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 995:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // include w in 3d
 996:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 997:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                          // add in reset function
 998:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.x = 0;
 10030              		.loc 9 998 0
 10031 681e 660FEFC0 		pxor	%xmm0, %xmm0
 10032 6822 F20F1185 		movsd	%xmm0, -3848(%rbp)
 10032      F8F0FFFF 
 999:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.y = 0;
 10033              		.loc 9 999 0
 10034 682a 660FEFC0 		pxor	%xmm0, %xmm0
 10035 682e F20F1185 		movsd	%xmm0, -3840(%rbp)
 10035      00F1FFFF 
1000:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_w.z = 0; //update for 3d
 10036              		.loc 9 1000 0
 10037 6836 660FEFC0 		pxor	%xmm0, %xmm0
 10038 683a F20F1185 		movsd	%xmm0, -3832(%rbp)
 10038      08F1FFFF 
1001:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1002:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //calculate slope of macro variables
1003:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_2.x = Mesh.get_centroid_x(neighbour);
 10039              		.loc 9 1003 0
 10040 6842 8B9580EF 		movl	-4224(%rbp), %edx
 10040      FFFF
 10041 6848 488B8570 		movq	-4240(%rbp), %rax
 10041      EFFFFF
 10042 684f 89D6     		movl	%edx, %esi
 10043 6851 4889C7   		movq	%rax, %rdi
 10044 6854 E8000000 		call	_ZN4Mesh14get_centroid_xEi
 10044      00
 10045 6859 66480F7E 		movq	%xmm0, %rax
 10045      C0
 10046 685e 48898558 		movq	%rax, -4008(%rbp)
 10046      F0FFFF
1004:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_2.y = Mesh.get_centroid_y((neighbour));
 10047              		.loc 9 1004 0
 10048 6865 8B9580EF 		movl	-4224(%rbp), %edx
 10048      FFFF
 10049 686b 488B8570 		movq	-4240(%rbp), %rax
 10049      EFFFFF
 10050 6872 89D6     		movl	%edx, %esi
 10051 6874 4889C7   		movq	%rax, %rdi
 10052 6877 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 10052      00
 10053 687c 66480F7E 		movq	%xmm0, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 300


 10053      C0
 10054 6881 48898560 		movq	%rax, -4000(%rbp)
 10054      F0FFFF
1005:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         cell_2.z = Mesh.get_centroid_z(neighbour);
 10055              		.loc 9 1005 0
 10056 6888 8B9580EF 		movl	-4224(%rbp), %edx
 10056      FFFF
 10057 688e 488B8570 		movq	-4240(%rbp), %rax
 10057      EFFFFF
 10058 6895 89D6     		movl	%edx, %esi
 10059 6897 4889C7   		movq	%rax, %rdi
 10060 689a E8000000 		call	_ZN4Mesh14get_centroid_zEi
 10060      00
 10061 689f 66480F7E 		movq	%xmm0, %rax
 10061      C0
 10062 68a4 48898568 		movq	%rax, -3992(%rbp)
 10062      F0FFFF
1006:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1007:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // use temp soln for neighbour values as these refelct real boundary condit
1008:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // temp_soln should update continuously through RK stepping
1009:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_rho.Get_Gradient(temp_soln.get_rho(i), soln.get_rho(neighbour),cell_1
 10063              		.loc 9 1009 0
 10064 68ab 488D9550 		leaq	-4016(%rbp), %rdx
 10064      F0FFFF
 10065 68b2 488D8530 		leaq	-3536(%rbp), %rax
 10065      F2FFFF
 10066 68b9 4889D6   		movq	%rdx, %rsi
 10067 68bc 4889C7   		movq	%rax, %rdi
 10068 68bf E8000000 		call	_ZN10vector_varC1ERKS_
 10068      00
 10069 68c4 488D9530 		leaq	-4048(%rbp), %rdx
 10069      F0FFFF
 10070 68cb 488D8510 		leaq	-3568(%rbp), %rax
 10070      F2FFFF
 10071 68d2 4889D6   		movq	%rdx, %rsi
 10072 68d5 4889C7   		movq	%rax, %rdi
 10073 68d8 E8000000 		call	_ZN10vector_varC1ERKS_
 10073      00
 10074 68dd 8B9580EF 		movl	-4224(%rbp), %edx
 10074      FFFF
 10075 68e3 488B8568 		movq	-4248(%rbp), %rax
 10075      EFFFFF
 10076 68ea 89D6     		movl	%edx, %esi
 10077 68ec 4889C7   		movq	%rax, %rdi
 10078 68ef E8000000 		call	_ZN8Solution7get_rhoEi
 10078      00
 10079 68f4 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10079      28EFFFFF 
 10080 68fc 8B9594EF 		movl	-4204(%rbp), %edx
 10080      FFFF
 10081 6902 488D8540 		leaq	-3264(%rbp), %rax
 10081      F3FFFF
 10082 6909 89D6     		movl	%edx, %esi
 10083 690b 4889C7   		movq	%rax, %rdi
 10084 690e E8000000 		call	_ZN8Solution7get_rhoEi
 10084      00
 10085 6913 488D9530 		leaq	-3536(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 301


 10085      F2FFFF
 10086 691a 488D8D10 		leaq	-3568(%rbp), %rcx
 10086      F2FFFF
 10087 6921 488D8510 		leaq	-3824(%rbp), %rax
 10087      F1FFFF
 10088 6928 4889CE   		movq	%rcx, %rsi
 10089 692b F20F108D 		movsd	-4312(%rbp), %xmm1
 10089      28EFFFFF 
 10090 6933 4889C7   		movq	%rax, %rdi
 10091              	.LEHB139:
 10092 6936 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 10092      00
 10093              	.LEHE139:
 10094              		.loc 9 1009 0 is_stmt 0 discriminator 2
 10095 693b 488D8510 		leaq	-3568(%rbp), %rax
 10095      F2FFFF
 10096 6942 4889C7   		movq	%rax, %rdi
 10097 6945 E8000000 		call	_ZN10vector_varD1Ev
 10097      00
 10098 694a 488D8530 		leaq	-3536(%rbp), %rax
 10098      F2FFFF
 10099 6951 4889C7   		movq	%rax, %rdi
 10100 6954 E8000000 		call	_ZN10vector_varD1Ev
 10100      00
1010:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), soln.get_u(neighbour),cell_1,cell_
 10101              		.loc 9 1010 0 is_stmt 1 discriminator 2
 10102 6959 488D9550 		leaq	-4016(%rbp), %rdx
 10102      F0FFFF
 10103 6960 488D8530 		leaq	-3536(%rbp), %rax
 10103      F2FFFF
 10104 6967 4889D6   		movq	%rdx, %rsi
 10105 696a 4889C7   		movq	%rax, %rdi
 10106 696d E8000000 		call	_ZN10vector_varC1ERKS_
 10106      00
 10107 6972 488D9530 		leaq	-4048(%rbp), %rdx
 10107      F0FFFF
 10108 6979 488D8510 		leaq	-3568(%rbp), %rax
 10108      F2FFFF
 10109 6980 4889D6   		movq	%rdx, %rsi
 10110 6983 4889C7   		movq	%rax, %rdi
 10111 6986 E8000000 		call	_ZN10vector_varC1ERKS_
 10111      00
 10112 698b 8B9580EF 		movl	-4224(%rbp), %edx
 10112      FFFF
 10113 6991 488B8568 		movq	-4248(%rbp), %rax
 10113      EFFFFF
 10114 6998 89D6     		movl	%edx, %esi
 10115 699a 4889C7   		movq	%rax, %rdi
 10116 699d E8000000 		call	_ZN8Solution5get_uEi
 10116      00
 10117 69a2 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10117      28EFFFFF 
 10118 69aa 8B9594EF 		movl	-4204(%rbp), %edx
 10118      FFFF
 10119 69b0 488D8540 		leaq	-3264(%rbp), %rax
 10119      F3FFFF
 10120 69b7 89D6     		movl	%edx, %esi
GAS LISTING /tmp/cc2K2nX4.s 			page 302


 10121 69b9 4889C7   		movq	%rax, %rdi
 10122 69bc E8000000 		call	_ZN8Solution5get_uEi
 10122      00
 10123 69c1 488D9530 		leaq	-3536(%rbp), %rdx
 10123      F2FFFF
 10124 69c8 488D8D10 		leaq	-3568(%rbp), %rcx
 10124      F2FFFF
 10125 69cf 488D85B0 		leaq	-3920(%rbp), %rax
 10125      F0FFFF
 10126 69d6 4889CE   		movq	%rcx, %rsi
 10127 69d9 F20F108D 		movsd	-4312(%rbp), %xmm1
 10127      28EFFFFF 
 10128 69e1 4889C7   		movq	%rax, %rdi
 10129              	.LEHB140:
 10130 69e4 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 10130      00
 10131              	.LEHE140:
 10132 69e9 488D8510 		leaq	-3568(%rbp), %rax
 10132      F2FFFF
 10133 69f0 4889C7   		movq	%rax, %rdi
 10134 69f3 E8000000 		call	_ZN10vector_varD1Ev
 10134      00
 10135 69f8 488D8530 		leaq	-3536(%rbp), %rax
 10135      F2FFFF
 10136 69ff 4889C7   		movq	%rax, %rdi
 10137 6a02 E8000000 		call	_ZN10vector_varD1Ev
 10137      00
1011:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), soln.get_v(neighbour),cell_1,cell_
 10138              		.loc 9 1011 0 discriminator 2
 10139 6a07 488D9550 		leaq	-4016(%rbp), %rdx
 10139      F0FFFF
 10140 6a0e 488D8530 		leaq	-3536(%rbp), %rax
 10140      F2FFFF
 10141 6a15 4889D6   		movq	%rdx, %rsi
 10142 6a18 4889C7   		movq	%rax, %rdi
 10143 6a1b E8000000 		call	_ZN10vector_varC1ERKS_
 10143      00
 10144 6a20 488D9530 		leaq	-4048(%rbp), %rdx
 10144      F0FFFF
 10145 6a27 488D8510 		leaq	-3568(%rbp), %rax
 10145      F2FFFF
 10146 6a2e 4889D6   		movq	%rdx, %rsi
 10147 6a31 4889C7   		movq	%rax, %rdi
 10148 6a34 E8000000 		call	_ZN10vector_varC1ERKS_
 10148      00
 10149 6a39 8B9580EF 		movl	-4224(%rbp), %edx
 10149      FFFF
 10150 6a3f 488B8568 		movq	-4248(%rbp), %rax
 10150      EFFFFF
 10151 6a46 89D6     		movl	%edx, %esi
 10152 6a48 4889C7   		movq	%rax, %rdi
 10153 6a4b E8000000 		call	_ZN8Solution5get_vEi
 10153      00
 10154 6a50 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10154      28EFFFFF 
 10155 6a58 8B9594EF 		movl	-4204(%rbp), %edx
 10155      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 303


 10156 6a5e 488D8540 		leaq	-3264(%rbp), %rax
 10156      F3FFFF
 10157 6a65 89D6     		movl	%edx, %esi
 10158 6a67 4889C7   		movq	%rax, %rdi
 10159 6a6a E8000000 		call	_ZN8Solution5get_vEi
 10159      00
 10160 6a6f 488D9530 		leaq	-3536(%rbp), %rdx
 10160      F2FFFF
 10161 6a76 488D8D10 		leaq	-3568(%rbp), %rcx
 10161      F2FFFF
 10162 6a7d 488D85D0 		leaq	-3888(%rbp), %rax
 10162      F0FFFF
 10163 6a84 4889CE   		movq	%rcx, %rsi
 10164 6a87 F20F108D 		movsd	-4312(%rbp), %xmm1
 10164      28EFFFFF 
 10165 6a8f 4889C7   		movq	%rax, %rdi
 10166              	.LEHB141:
 10167 6a92 E8000000 		call	_ZN10vector_var12Get_GradientEddS_S_
 10167      00
 10168              	.LEHE141:
 10169 6a97 488D8510 		leaq	-3568(%rbp), %rax
 10169      F2FFFF
 10170 6a9e 4889C7   		movq	%rax, %rdi
 10171 6aa1 E8000000 		call	_ZN10vector_varD1Ev
 10171      00
 10172 6aa6 488D8530 		leaq	-3536(%rbp), %rax
 10172      F2FFFF
 10173 6aad 4889C7   		movq	%rax, %rdi
 10174 6ab0 E8000000 		call	_ZN10vector_varD1Ev
 10174      00
1012:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1013:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1014:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         dbug[j].P = delta_rho.x;
 10175              		.loc 9 1014 0 discriminator 2
 10176 6ab5 F20F1085 		movsd	-3816(%rbp), %xmm0
 10176      18F1FFFF 
 10177 6abd 8B8598EF 		movl	-4200(%rbp), %eax
 10177      FFFF
 10178 6ac3 4863D0   		movslq	%eax, %rdx
 10179 6ac6 4889D0   		movq	%rdx, %rax
 10180 6ac9 48C1E002 		salq	$2, %rax
 10181 6acd 4801D0   		addq	%rdx, %rax
 10182 6ad0 48C1E003 		salq	$3, %rax
 10183 6ad4 488D4DD0 		leaq	-48(%rbp), %rcx
 10184 6ad8 4801C8   		addq	%rcx, %rax
 10185 6adb 482D1807 		subq	$1816, %rax
 10185      0000
 10186 6ae1 F20F1100 		movsd	%xmm0, (%rax)
1015:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         dbug[j].momentum_x = delta_u.x;
 10187              		.loc 9 1015 0 discriminator 2
 10188 6ae5 F20F1085 		movsd	-3912(%rbp), %xmm0
 10188      B8F0FFFF 
 10189 6aed 8B8598EF 		movl	-4200(%rbp), %eax
 10189      FFFF
 10190 6af3 4863D0   		movslq	%eax, %rdx
 10191 6af6 4889D0   		movq	%rdx, %rax
 10192 6af9 48C1E002 		salq	$2, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 304


 10193 6afd 4801D0   		addq	%rdx, %rax
 10194 6b00 48C1E003 		salq	$3, %rax
 10195 6b04 488D4DD0 		leaq	-48(%rbp), %rcx
 10196 6b08 4801C8   		addq	%rcx, %rax
 10197 6b0b 482D1007 		subq	$1808, %rax
 10197      0000
 10198 6b11 F20F1100 		movsd	%xmm0, (%rax)
1016:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         dbug[j].momentum_y = delta_u.y;
 10199              		.loc 9 1016 0 discriminator 2
 10200 6b15 F20F1085 		movsd	-3904(%rbp), %xmm0
 10200      C0F0FFFF 
 10201 6b1d 8B8598EF 		movl	-4200(%rbp), %eax
 10201      FFFF
 10202 6b23 4863D0   		movslq	%eax, %rdx
 10203 6b26 4889D0   		movq	%rdx, %rax
 10204 6b29 48C1E002 		salq	$2, %rax
 10205 6b2d 4801D0   		addq	%rdx, %rax
 10206 6b30 48C1E003 		salq	$3, %rax
 10207 6b34 488D4DD0 		leaq	-48(%rbp), %rcx
 10208 6b38 4801C8   		addq	%rcx, %rax
 10209 6b3b 482D0807 		subq	$1800, %rax
 10209      0000
 10210 6b41 F20F1100 		movsd	%xmm0, (%rax)
 10211              	.LBB74:
1017:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1018:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1019:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1020:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // using D2Q9 , loop through each lattice node
1021:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 10212              		.loc 9 1021 0 discriminator 2
 10213 6b45 C7859CEF 		movl	$0, -4196(%rbp)
 10213      FFFF0000 
 10213      0000
 10214              	.L851:
 10215 6b4f 83BD9CEF 		cmpl	$8, -4196(%rbp)
 10215      FFFF08
 10216 6b56 0F8FD406 		jg	.L850
 10216      0000
1022:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1023:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1024:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1025:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              /// GET change in magnitude across the lattice
1026:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 10217              		.loc 9 1026 0
 10218 6b5c 488B8550 		movq	-4272(%rbp), %rax
 10218      EFFFFF
 10219 6b63 F20F1040 		movsd	32(%rax), %xmm0
 10219      20
 10220 6b68 488B8578 		movq	-4232(%rbp), %rax
 10220      EFFFFF
 10221 6b6f 488B7820 		movq	32(%rax), %rdi
 10222 6b73 488D8510 		leaq	-3568(%rbp), %rax
 10222      F2FFFF
 10223 6b7a 488D8DB0 		leaq	-4176(%rbp), %rcx
 10223      EFFFFF
 10224 6b81 8B959CEF 		movl	-4196(%rbp), %edx
 10224      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 305


 10225 6b87 488BB578 		movq	-4232(%rbp), %rsi
 10225      EFFFFF
 10226 6b8e 660F28C8 		movapd	%xmm0, %xmm1
 10227 6b92 4889BD28 		movq	%rdi, -4312(%rbp)
 10227      EFFFFF
 10228 6b99 F20F1085 		movsd	-4312(%rbp), %xmm0
 10228      28EFFFFF 
 10229 6ba1 4889C7   		movq	%rax, %rdi
 10230              	.LEHB142:
 10231 6ba4 E8000000 		call	_ZN6Solver11get_e_alphaEiRddd
 10231      00
 10232              	.LEHE142:
 10233              		.loc 9 1026 0 is_stmt 0 discriminator 1
 10234 6ba9 488D9510 		leaq	-3568(%rbp), %rdx
 10234      F2FFFF
 10235 6bb0 488D8550 		leaq	-3760(%rbp), %rax
 10235      F1FFFF
 10236 6bb7 4889D6   		movq	%rdx, %rsi
 10237 6bba 4889C7   		movq	%rax, %rdi
 10238 6bbd E8000000 		call	_ZN10vector_varaSERKS_
 10238      00
 10239 6bc2 488D8510 		leaq	-3568(%rbp), %rax
 10239      F2FFFF
 10240 6bc9 4889C7   		movq	%rax, %rdi
 10241 6bcc E8000000 		call	_ZN10vector_varD1Ev
 10241      00
1027:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1028:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1029:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                              //f( r- e*c*dt) relative to cell_centroid
1030:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             lattice_node.x = interface_node.x -cell_1.x - e_alpha.x * dt;
 10242              		.loc 9 1030 0 is_stmt 1 discriminator 1
 10243 6bd1 F20F1085 		movsd	-3976(%rbp), %xmm0
 10243      78F0FFFF 
 10244 6bd9 F20F108D 		movsd	-4040(%rbp), %xmm1
 10244      38F0FFFF 
 10245 6be1 F20F5CC1 		subsd	%xmm1, %xmm0
 10246 6be5 F20F1095 		movsd	-3752(%rbp), %xmm2
 10246      58F1FFFF 
 10247 6bed 488B8578 		movq	-4232(%rbp), %rax
 10247      EFFFFF
 10248 6bf4 F20F1048 		movsd	8(%rax), %xmm1
 10248      08
 10249 6bf9 F20F59CA 		mulsd	%xmm2, %xmm1
 10250 6bfd F20F5CC1 		subsd	%xmm1, %xmm0
 10251 6c01 F20F1185 		movsd	%xmm0, -3944(%rbp)
 10251      98F0FFFF 
1031:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             lattice_node.y = interface_node.y -cell_1.y - e_alpha.y * dt;
 10252              		.loc 9 1031 0 discriminator 1
 10253 6c09 F20F1085 		movsd	-3968(%rbp), %xmm0
 10253      80F0FFFF 
 10254 6c11 F20F108D 		movsd	-4032(%rbp), %xmm1
 10254      40F0FFFF 
 10255 6c19 F20F5CC1 		subsd	%xmm1, %xmm0
 10256 6c1d F20F1095 		movsd	-3744(%rbp), %xmm2
 10256      60F1FFFF 
 10257 6c25 488B8578 		movq	-4232(%rbp), %rax
 10257      EFFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 306


 10258 6c2c F20F1048 		movsd	8(%rax), %xmm1
 10258      08
 10259 6c31 F20F59CA 		mulsd	%xmm2, %xmm1
 10260 6c35 F20F5CC1 		subsd	%xmm1, %xmm0
 10261 6c39 F20F1185 		movsd	%xmm0, -3936(%rbp)
 10261      A0F0FFFF 
1032:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             lattice_node.z = 0; // update in 3d
 10262              		.loc 9 1032 0 discriminator 1
 10263 6c41 660FEFC0 		pxor	%xmm0, %xmm0
 10264 6c45 F20F1185 		movsd	%xmm0, -3928(%rbp)
 10264      A8F0FFFF 
1033:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // y = mx + c
1034:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             relative_interface.x = interface_node.x -cell_1.x;
 10265              		.loc 9 1034 0 discriminator 1
 10266 6c4d F20F1085 		movsd	-3976(%rbp), %xmm0
 10266      78F0FFFF 
 10267 6c55 F20F108D 		movsd	-4040(%rbp), %xmm1
 10267      38F0FFFF 
 10268 6c5d F20F5CC1 		subsd	%xmm1, %xmm0
 10269 6c61 F20F1185 		movsd	%xmm0, -3784(%rbp)
 10269      38F1FFFF 
1035:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             relative_interface.y = interface_node.y -cell_1.y;
 10270              		.loc 9 1035 0 discriminator 1
 10271 6c69 F20F1085 		movsd	-3968(%rbp), %xmm0
 10271      80F0FFFF 
 10272 6c71 F20F108D 		movsd	-4032(%rbp), %xmm1
 10272      40F0FFFF 
 10273 6c79 F20F5CC1 		subsd	%xmm1, %xmm0
 10274 6c7d F20F1185 		movsd	%xmm0, -3776(%rbp)
 10274      40F1FFFF 
1036:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1037:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // lattice densities are scalars but need to have gradients relative to
1038:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1039:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_lattice = temp_soln.get_rho(i) + delta_rho.Dot_Product(relative_int
 10275              		.loc 9 1039 0 discriminator 1
 10276 6c85 8B9594EF 		movl	-4204(%rbp), %edx
 10276      FFFF
 10277 6c8b 488D8540 		leaq	-3264(%rbp), %rax
 10277      F3FFFF
 10278 6c92 89D6     		movl	%edx, %esi
 10279 6c94 4889C7   		movq	%rax, %rdi
 10280 6c97 E8000000 		call	_ZN8Solution7get_rhoEi
 10280      00
 10281 6c9c F20F1185 		movsd	%xmm0, -4312(%rbp)
 10281      28EFFFFF 
 10282 6ca4 488D9530 		leaq	-3792(%rbp), %rdx
 10282      F1FFFF
 10283 6cab 488D8510 		leaq	-3568(%rbp), %rax
 10283      F2FFFF
 10284 6cb2 4889D6   		movq	%rdx, %rsi
 10285 6cb5 4889C7   		movq	%rax, %rdi
 10286 6cb8 E8000000 		call	_ZN10vector_varC1ERKS_
 10286      00
 10287 6cbd 488D9510 		leaq	-3568(%rbp), %rdx
 10287      F2FFFF
 10288 6cc4 488D8510 		leaq	-3824(%rbp), %rax
 10288      F1FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 307


 10289 6ccb 4889D6   		movq	%rdx, %rsi
 10290 6cce 4889C7   		movq	%rax, %rdi
 10291              	.LEHB143:
 10292 6cd1 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10292      00
 10293              	.LEHE143:
 10294 6cd6 F20F5885 		addsd	-4312(%rbp), %xmm0
 10294      28EFFFFF 
 10295 6cde F20F1185 		movsd	%xmm0, -4312(%rbp)
 10295      28EFFFFF 
1040:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 +   pow(-1.0,signbit(cell_normal.x))*-1 *delta_rho.Dot_Product(e_al
 10296              		.loc 9 1040 0 discriminator 1
 10297 6ce6 488B85F8 		movq	-3592(%rbp), %rax
 10297      F1FFFF
 10298 6ced 48898520 		movq	%rax, -4320(%rbp)
 10298      EFFFFF
 10299 6cf4 F20F1085 		movsd	-4320(%rbp), %xmm0
 10299      20EFFFFF 
 10300 6cfc E8000000 		call	_ZSt7signbitd
 10300      00
 10301 6d01 0FB6C0   		movzbl	%al, %eax
 10302 6d04 89C7     		movl	%eax, %edi
 10303 6d06 F20F1005 		movsd	.LC18(%rip), %xmm0
 10303      00000000 
 10304 6d0e E8000000 		call	_ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10304      00
 10305 6d13 660F28C8 		movapd	%xmm0, %xmm1
 10306 6d17 F20F1005 		movsd	.LC6(%rip), %xmm0
 10306      00000000 
 10307 6d1f 660F57C8 		xorpd	%xmm0, %xmm1
 10308 6d23 F20F118D 		movsd	%xmm1, -4320(%rbp)
 10308      20EFFFFF 
 10309 6d2b 488D9550 		leaq	-3760(%rbp), %rdx
 10309      F1FFFF
 10310 6d32 488D8530 		leaq	-3536(%rbp), %rax
 10310      F2FFFF
 10311 6d39 4889D6   		movq	%rdx, %rsi
 10312 6d3c 4889C7   		movq	%rax, %rdi
 10313 6d3f E8000000 		call	_ZN10vector_varC1ERKS_
 10313      00
 10314 6d44 488D9530 		leaq	-3536(%rbp), %rdx
 10314      F2FFFF
 10315 6d4b 488D8510 		leaq	-3824(%rbp), %rax
 10315      F1FFFF
 10316 6d52 4889D6   		movq	%rdx, %rsi
 10317 6d55 4889C7   		movq	%rax, %rdi
 10318              	.LEHB144:
 10319 6d58 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10319      00
 10320              	.LEHE144:
 10321              		.loc 9 1040 0 is_stmt 0 discriminator 2
 10322 6d5d F20F5985 		mulsd	-4320(%rbp), %xmm0
 10322      20EFFFFF 
 10323 6d65 488B8578 		movq	-4232(%rbp), %rax
 10323      EFFFFF
 10324 6d6c F20F1048 		movsd	8(%rax), %xmm1
 10324      08
GAS LISTING /tmp/cc2K2nX4.s 			page 308


 10325 6d71 F20F59C1 		mulsd	%xmm1, %xmm0
 10326 6d75 F20F5885 		addsd	-4312(%rbp), %xmm0
 10326      28EFFFFF 
 10327 6d7d F20F1185 		movsd	%xmm0, -4088(%rbp)
 10327      08F0FFFF 
 10328 6d85 488D8530 		leaq	-3536(%rbp), %rax
 10328      F2FFFF
 10329 6d8c 4889C7   		movq	%rax, %rdi
 10330 6d8f E8000000 		call	_ZN10vector_varD1Ev
 10330      00
1039:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 +   pow(-1.0,signbit(cell_normal.x))*-1 *delta_rho.Dot_Product(e_al
 10331              		.loc 9 1039 0 is_stmt 1 discriminator 2
 10332 6d94 488D8510 		leaq	-3568(%rbp), %rax
 10332      F2FFFF
 10333 6d9b 4889C7   		movq	%rax, %rdi
 10334 6d9e E8000000 		call	_ZN10vector_varD1Ev
 10334      00
1041:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1042:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1043:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // lattice velocities are relative to the cell_normal
1044:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // fluxes are then calculated in the global reference from density dist
1045:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //functions
1046:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1047:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.x = pow(-1.0,signbit(cell_normal.x)) *(delta_u.Dot_Product(la
 10335              		.loc 9 1047 0 discriminator 2
 10336 6da3 488B85F8 		movq	-3592(%rbp), %rax
 10336      F1FFFF
 10337 6daa 48898528 		movq	%rax, -4312(%rbp)
 10337      EFFFFF
 10338 6db1 F20F1085 		movsd	-4312(%rbp), %xmm0
 10338      28EFFFFF 
 10339 6db9 E8000000 		call	_ZSt7signbitd
 10339      00
 10340 6dbe 0FB6C0   		movzbl	%al, %eax
 10341 6dc1 89C7     		movl	%eax, %edi
 10342 6dc3 F20F1005 		movsd	.LC18(%rip), %xmm0
 10342      00000000 
 10343 6dcb E8000000 		call	_ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10343      00
 10344 6dd0 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10344      28EFFFFF 
 10345 6dd8 488D9590 		leaq	-3952(%rbp), %rdx
 10345      F0FFFF
 10346 6ddf 488D8530 		leaq	-3536(%rbp), %rax
 10346      F2FFFF
 10347 6de6 4889D6   		movq	%rdx, %rsi
 10348 6de9 4889C7   		movq	%rax, %rdi
 10349 6dec E8000000 		call	_ZN10vector_varC1ERKS_
 10349      00
 10350 6df1 488D9530 		leaq	-3536(%rbp), %rdx
 10350      F2FFFF
 10351 6df8 488D85B0 		leaq	-3920(%rbp), %rax
 10351      F0FFFF
 10352 6dff 4889D6   		movq	%rdx, %rsi
 10353 6e02 4889C7   		movq	%rax, %rdi
 10354              	.LEHB145:
 10355 6e05 E8000000 		call	_ZN10vector_var11Dot_ProductES_
GAS LISTING /tmp/cc2K2nX4.s 			page 309


 10355      00
 10356              	.LEHE145:
 10357 6e0a F20F1185 		movsd	%xmm0, -4320(%rbp)
 10357      20EFFFFF 
1048:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_u(i) );
 10358              		.loc 9 1048 0 discriminator 2
 10359 6e12 8B9594EF 		movl	-4204(%rbp), %edx
 10359      FFFF
 10360 6e18 488D8540 		leaq	-3264(%rbp), %rax
 10360      F3FFFF
 10361 6e1f 89D6     		movl	%edx, %esi
 10362 6e21 4889C7   		movq	%rax, %rdi
 10363 6e24 E8000000 		call	_ZN8Solution5get_uEi
 10363      00
 10364 6e29 F20F5885 		addsd	-4320(%rbp), %xmm0
 10364      20EFFFFF 
1047:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_u(i) );
 10365              		.loc 9 1047 0 discriminator 2
 10366 6e31 F20F5985 		mulsd	-4312(%rbp), %xmm0
 10366      28EFFFFF 
 10367              		.loc 9 1048 0 discriminator 2
 10368 6e39 F20F1185 		movsd	%xmm0, -3720(%rbp)
 10368      78F1FFFF 
1047:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_u(i) );
 10369              		.loc 9 1047 0 discriminator 2
 10370 6e41 488D8530 		leaq	-3536(%rbp), %rax
 10370      F2FFFF
 10371 6e48 4889C7   		movq	%rax, %rdi
 10372 6e4b E8000000 		call	_ZN10vector_varD1Ev
 10372      00
1049:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.y = pow(-1.0,signbit(cell_normal.y)) *(delta_v.Dot_Product(la
 10373              		.loc 9 1049 0 discriminator 2
 10374 6e50 488B8500 		movq	-3584(%rbp), %rax
 10374      F2FFFF
 10375 6e57 48898528 		movq	%rax, -4312(%rbp)
 10375      EFFFFF
 10376 6e5e F20F1085 		movsd	-4312(%rbp), %xmm0
 10376      28EFFFFF 
 10377 6e66 E8000000 		call	_ZSt7signbitd
 10377      00
 10378 6e6b 0FB6C0   		movzbl	%al, %eax
 10379 6e6e 89C7     		movl	%eax, %edi
 10380 6e70 F20F1005 		movsd	.LC18(%rip), %xmm0
 10380      00000000 
 10381 6e78 E8000000 		call	_ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10381      00
 10382 6e7d F20F1185 		movsd	%xmm0, -4312(%rbp)
 10382      28EFFFFF 
 10383 6e85 488D9590 		leaq	-3952(%rbp), %rdx
 10383      F0FFFF
 10384 6e8c 488D8530 		leaq	-3536(%rbp), %rax
 10384      F2FFFF
 10385 6e93 4889D6   		movq	%rdx, %rsi
 10386 6e96 4889C7   		movq	%rax, %rdi
 10387 6e99 E8000000 		call	_ZN10vector_varC1ERKS_
 10387      00
 10388 6e9e 488D9530 		leaq	-3536(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 310


 10388      F2FFFF
 10389 6ea5 488D85D0 		leaq	-3888(%rbp), %rax
 10389      F0FFFF
 10390 6eac 4889D6   		movq	%rdx, %rsi
 10391 6eaf 4889C7   		movq	%rax, %rdi
 10392              	.LEHB146:
 10393 6eb2 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10393      00
 10394              	.LEHE146:
 10395 6eb7 F20F1185 		movsd	%xmm0, -4320(%rbp)
 10395      20EFFFFF 
1050:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_v(i)) ;
 10396              		.loc 9 1050 0 discriminator 2
 10397 6ebf 8B9594EF 		movl	-4204(%rbp), %edx
 10397      FFFF
 10398 6ec5 488D8540 		leaq	-3264(%rbp), %rax
 10398      F3FFFF
 10399 6ecc 89D6     		movl	%edx, %esi
 10400 6ece 4889C7   		movq	%rax, %rdi
 10401 6ed1 E8000000 		call	_ZN8Solution5get_vEi
 10401      00
 10402 6ed6 F20F5885 		addsd	-4320(%rbp), %xmm0
 10402      20EFFFFF 
1049:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.y = pow(-1.0,signbit(cell_normal.y)) *(delta_v.Dot_Product(la
 10403              		.loc 9 1049 0 discriminator 2
 10404 6ede F20F5985 		mulsd	-4312(%rbp), %xmm0
 10404      28EFFFFF 
 10405              		.loc 9 1050 0 discriminator 2
 10406 6ee6 F20F1185 		movsd	%xmm0, -3712(%rbp)
 10406      80F1FFFF 
1049:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.y = pow(-1.0,signbit(cell_normal.y)) *(delta_v.Dot_Product(la
 10407              		.loc 9 1049 0 discriminator 2
 10408 6eee 488D8530 		leaq	-3536(%rbp), %rax
 10408      F2FFFF
 10409 6ef5 4889C7   		movq	%rax, %rdi
 10410 6ef8 E8000000 		call	_ZN10vector_varD1Ev
 10410      00
1051:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice.z = 0;
 10411              		.loc 9 1051 0 discriminator 2
 10412 6efd 660FEFC0 		pxor	%xmm0, %xmm0
 10413 6f01 F20F1185 		movsd	%xmm0, -3704(%rbp)
 10413      88F1FFFF 
1052:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1053:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_lattice_deb[k] =rho_lattice;
 10414              		.loc 9 1053 0 discriminator 2
 10415 6f09 8B859CEF 		movl	-4196(%rbp), %eax
 10415      FFFF
 10416 6f0f 4898     		cltq
 10417 6f11 F20F1085 		movsd	-4088(%rbp), %xmm0
 10417      08F0FFFF 
 10418 6f19 F20F1184 		movsd	%xmm0, -2432(%rbp,%rax,8)
 10418      C580F6FF 
 10418      FF
1054:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_lattice_deb[k] = u_lattice.x;
 10419              		.loc 9 1054 0 discriminator 2
 10420 6f22 F20F1085 		movsd	-3720(%rbp), %xmm0
 10420      78F1FFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 311


 10421 6f2a 8B859CEF 		movl	-4196(%rbp), %eax
 10421      FFFF
 10422 6f30 4898     		cltq
 10423 6f32 F20F1184 		movsd	%xmm0, -2592(%rbp,%rax,8)
 10423      C5E0F5FF 
 10423      FF
1055:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             v_lattice[k] = u_lattice.y;
 10424              		.loc 9 1055 0 discriminator 2
 10425 6f3b F20F1085 		movsd	-3712(%rbp), %xmm0
 10425      80F1FFFF 
 10426 6f43 8B859CEF 		movl	-4196(%rbp), %eax
 10426      FFFF
 10427 6f49 4898     		cltq
 10428 6f4b F20F1184 		movsd	%xmm0, -2512(%rbp,%rax,8)
 10428      C530F6FF 
 10428      FF
1056:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1057:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            u_magnitude = u_lattice.Magnitude();
1058:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_lattice[k] = 1.0 * rho_lattice ;
1059:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_lattice[k] = feq_lattice[k]
1060:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                + e_alpha.Dot_Product(u_lattice) / pow(cs,2) * temp_soln.get_aver
1061:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_lattice[k] = feq_lattice[k]
1062:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs
1063:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            / (2.0 * pow(cs,4)* globals.pre_conditioned_gamma) * temp_soln.get_av
1064:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_lattice[k] = feq_lattice[k] *lattice_weight ;
1065:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1066:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_magnitude = u_lattice.Magnitude();
 10429              		.loc 9 1066 0 discriminator 2
 10430 6f54 488D8570 		leaq	-3728(%rbp), %rax
 10430      F1FFFF
 10431 6f5b 4889C7   		movq	%rax, %rdi
 10432              	.LEHB147:
 10433 6f5e E8000000 		call	_ZN10vector_var9MagnitudeEv
 10433      00
 10434              	.LEHE147:
 10435 6f63 66480F7E 		movq	%xmm0, %rax
 10435      C0
 10436 6f68 48898510 		movq	%rax, -4080(%rbp)
 10436      F0FFFF
1067:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = 1.0  ;
 10437              		.loc 9 1067 0 discriminator 2
 10438 6f6f 8B859CEF 		movl	-4196(%rbp), %eax
 10438      FFFF
 10439 6f75 4898     		cltq
 10440 6f77 F20F1005 		movsd	.LC4(%rip), %xmm0
 10440      00000000 
 10441 6f7f F20F1184 		movsd	%xmm0, -2832(%rbp,%rax,8)
 10441      C5F0F4FF 
 10441      FF
1068:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = feq_lattice[k]
 10442              		.loc 9 1068 0 discriminator 2
 10443 6f88 8B859CEF 		movl	-4196(%rbp), %eax
 10443      FFFF
 10444 6f8e 4898     		cltq
 10445 6f90 F20F10A4 		movsd	-2832(%rbp,%rax,8), %xmm4
 10445      C5F0F4FF 
 10445      FF
GAS LISTING /tmp/cc2K2nX4.s 			page 312


 10446 6f99 F20F11A5 		movsd	%xmm4, -4312(%rbp)
 10446      28EFFFFF 
1069:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + e_alpha.Dot_Product(u_lattice) / pow(cs,2) ;
 10447              		.loc 9 1069 0 discriminator 2
 10448 6fa1 488D9570 		leaq	-3728(%rbp), %rdx
 10448      F1FFFF
 10449 6fa8 488D8530 		leaq	-3536(%rbp), %rax
 10449      F2FFFF
 10450 6faf 4889D6   		movq	%rdx, %rsi
 10451 6fb2 4889C7   		movq	%rax, %rdi
 10452 6fb5 E8000000 		call	_ZN10vector_varC1ERKS_
 10452      00
 10453 6fba 488D9530 		leaq	-3536(%rbp), %rdx
 10453      F2FFFF
 10454 6fc1 488D8550 		leaq	-3760(%rbp), %rax
 10454      F1FFFF
 10455 6fc8 4889D6   		movq	%rdx, %rsi
 10456 6fcb 4889C7   		movq	%rax, %rdi
 10457              	.LEHB148:
 10458 6fce E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10458      00
 10459              	.LEHE148:
 10460              		.loc 9 1069 0 is_stmt 0 discriminator 1
 10461 6fd3 F20F1185 		movsd	%xmm0, -4320(%rbp)
 10461      20EFFFFF 
 10462 6fdb 488B8578 		movq	-4232(%rbp), %rax
 10462      EFFFFF
 10463 6fe2 488B4028 		movq	40(%rax), %rax
 10464 6fe6 BF020000 		movl	$2, %edi
 10464      00
 10465 6feb 48898518 		movq	%rax, -4328(%rbp)
 10465      EFFFFF
 10466 6ff2 F20F1085 		movsd	-4328(%rbp), %xmm0
 10466      18EFFFFF 
 10467 6ffa E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10467      00
 10468 6fff F20F10BD 		movsd	-4320(%rbp), %xmm7
 10468      20EFFFFF 
 10469 7007 F20F5EF8 		divsd	%xmm0, %xmm7
 10470 700b 660F28C7 		movapd	%xmm7, %xmm0
 10471 700f F20F5885 		addsd	-4312(%rbp), %xmm0
 10471      28EFFFFF 
 10472 7017 8B859CEF 		movl	-4196(%rbp), %eax
 10472      FFFF
 10473 701d 4898     		cltq
 10474 701f F20F1184 		movsd	%xmm0, -2832(%rbp,%rax,8)
 10474      C5F0F4FF 
 10474      FF
 10475 7028 488D8530 		leaq	-3536(%rbp), %rax
 10475      F2FFFF
 10476 702f 4889C7   		movq	%rax, %rdi
 10477 7032 E8000000 		call	_ZN10vector_varD1Ev
 10477      00
1070:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = feq_lattice[k]
 10478              		.loc 9 1070 0 is_stmt 1 discriminator 1
 10479 7037 8B859CEF 		movl	-4196(%rbp), %eax
 10479      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 313


 10480 703d 4898     		cltq
 10481 703f F20F10BC 		movsd	-2832(%rbp,%rax,8), %xmm7
 10481      C5F0F4FF 
 10481      FF
 10482 7048 F20F11BD 		movsd	%xmm7, -4312(%rbp)
 10482      28EFFFFF 
1071:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),
 10483              		.loc 9 1071 0 discriminator 1
 10484 7050 488D9570 		leaq	-3728(%rbp), %rdx
 10484      F1FFFF
 10485 7057 488D8530 		leaq	-3536(%rbp), %rax
 10485      F2FFFF
 10486 705e 4889D6   		movq	%rdx, %rsi
 10487 7061 4889C7   		movq	%rax, %rdi
 10488 7064 E8000000 		call	_ZN10vector_varC1ERKS_
 10488      00
 10489 7069 488D9530 		leaq	-3536(%rbp), %rdx
 10489      F2FFFF
 10490 7070 488D8550 		leaq	-3760(%rbp), %rax
 10490      F1FFFF
 10491 7077 4889D6   		movq	%rdx, %rsi
 10492 707a 4889C7   		movq	%rax, %rdi
 10493              	.LEHB149:
 10494 707d E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10494      00
 10495              	.LEHE149:
 10496              		.loc 9 1071 0 is_stmt 0 discriminator 2
 10497 7082 BF020000 		movl	$2, %edi
 10497      00
 10498 7087 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10498      00
 10499 708c F20F1185 		movsd	%xmm0, -4320(%rbp)
 10499      20EFFFFF 
 10500 7094 488B8578 		movq	-4232(%rbp), %rax
 10500      EFFFFF
 10501 709b F20F1040 		movsd	40(%rax), %xmm0
 10501      28
 10502 70a0 F20F5985 		mulsd	-4080(%rbp), %xmm0
 10502      10F0FFFF 
 10503 70a8 BF020000 		movl	$2, %edi
 10503      00
 10504 70ad E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10504      00
 10505 70b2 F20F10AD 		movsd	-4320(%rbp), %xmm5
 10505      20EFFFFF 
 10506 70ba F20F5CE8 		subsd	%xmm0, %xmm5
 10507 70be F20F11AD 		movsd	%xmm5, -4320(%rbp)
 10507      20EFFFFF 
1072:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             / (2.0 * pow(cs,4)* globals.pre_conditioned_gamma) ;
 10508              		.loc 9 1072 0 is_stmt 1 discriminator 2
 10509 70c6 488B8578 		movq	-4232(%rbp), %rax
 10509      EFFFFF
 10510 70cd 488B4028 		movq	40(%rax), %rax
 10511 70d1 BF040000 		movl	$4, %edi
 10511      00
 10512 70d6 48898518 		movq	%rax, -4328(%rbp)
 10512      EFFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 314


 10513 70dd F20F1085 		movsd	-4328(%rbp), %xmm0
 10513      18EFFFFF 
 10514 70e5 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10514      00
 10515 70ea F20F58C0 		addsd	%xmm0, %xmm0
 10516 70ee 488B8550 		movq	-4272(%rbp), %rax
 10516      EFFFFF
 10517 70f5 F20F1048 		movsd	48(%rax), %xmm1
 10517      30
 10518 70fa F20F59C1 		mulsd	%xmm1, %xmm0
 10519 70fe F20F10AD 		movsd	-4320(%rbp), %xmm5
 10519      20EFFFFF 
 10520 7106 F20F5EE8 		divsd	%xmm0, %xmm5
 10521 710a 660F28C5 		movapd	%xmm5, %xmm0
1071:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),
 10522              		.loc 9 1071 0 discriminator 2
 10523 710e F20F5885 		addsd	-4312(%rbp), %xmm0
 10523      28EFFFFF 
 10524              		.loc 9 1072 0 discriminator 2
 10525 7116 8B859CEF 		movl	-4196(%rbp), %eax
 10525      FFFF
 10526 711c 4898     		cltq
 10527 711e F20F1184 		movsd	%xmm0, -2832(%rbp,%rax,8)
 10527      C5F0F4FF 
 10527      FF
1071:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + ( pow(e_alpha.Dot_Product(u_lattice),2)  - pow((u_magnitude* cs),
 10528              		.loc 9 1071 0 discriminator 2
 10529 7127 488D8530 		leaq	-3536(%rbp), %rax
 10529      F2FFFF
 10530 712e 4889C7   		movq	%rax, %rdi
 10531 7131 E8000000 		call	_ZN10vector_varD1Ev
 10531      00
1073:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = feq_lattice[k] *lattice_weight *rho_lattice ;
 10532              		.loc 9 1073 0 discriminator 2
 10533 7136 8B859CEF 		movl	-4196(%rbp), %eax
 10533      FFFF
 10534 713c 4898     		cltq
 10535 713e F20F108C 		movsd	-2832(%rbp,%rax,8), %xmm1
 10535      C5F0F4FF 
 10535      FF
 10536 7147 F20F1085 		movsd	-4176(%rbp), %xmm0
 10536      B0EFFFFF 
 10537 714f F20F59C1 		mulsd	%xmm1, %xmm0
 10538 7153 F20F5985 		mulsd	-4088(%rbp), %xmm0
 10538      08F0FFFF 
 10539 715b 8B859CEF 		movl	-4196(%rbp), %eax
 10539      FFFF
 10540 7161 4898     		cltq
 10541 7163 F20F1184 		movsd	%xmm0, -2832(%rbp,%rax,8)
 10541      C5F0F4FF 
 10541      FF
1074:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1075:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1076:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1077:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1078:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_interface = rho_interface + feq_lattice[k];
 10542              		.loc 9 1078 0 discriminator 2
GAS LISTING /tmp/cc2K2nX4.s 			page 315


 10543 716c 8B859CEF 		movl	-4196(%rbp), %eax
 10543      FFFF
 10544 7172 4898     		cltq
 10545 7174 F20F1084 		movsd	-2832(%rbp,%rax,8), %xmm0
 10545      C5F0F4FF 
 10545      FF
 10546 717d F20F108D 		movsd	-4144(%rbp), %xmm1
 10546      D0EFFFFF 
 10547 7185 F20F58C1 		addsd	%xmm1, %xmm0
 10548 7189 F20F1185 		movsd	%xmm0, -4144(%rbp)
 10548      D0EFFFFF 
1079:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.x = rho_u_interface.x + feq_lattice[k] * e_alpha.x;
 10549              		.loc 9 1079 0 discriminator 2
 10550 7191 F20F108D 		movsd	-3688(%rbp), %xmm1
 10550      98F1FFFF 
 10551 7199 8B859CEF 		movl	-4196(%rbp), %eax
 10551      FFFF
 10552 719f 4898     		cltq
 10553 71a1 F20F1094 		movsd	-2832(%rbp,%rax,8), %xmm2
 10553      C5F0F4FF 
 10553      FF
 10554 71aa F20F1085 		movsd	-3752(%rbp), %xmm0
 10554      58F1FFFF 
 10555 71b2 F20F59C2 		mulsd	%xmm2, %xmm0
 10556 71b6 F20F58C1 		addsd	%xmm1, %xmm0
 10557 71ba F20F1185 		movsd	%xmm0, -3688(%rbp)
 10557      98F1FFFF 
1080:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.y = rho_u_interface.y + feq_lattice[k] * e_alpha.y;
 10558              		.loc 9 1080 0 discriminator 2
 10559 71c2 F20F108D 		movsd	-3680(%rbp), %xmm1
 10559      A0F1FFFF 
 10560 71ca 8B859CEF 		movl	-4196(%rbp), %eax
 10560      FFFF
 10561 71d0 4898     		cltq
 10562 71d2 F20F1094 		movsd	-2832(%rbp,%rax,8), %xmm2
 10562      C5F0F4FF 
 10562      FF
 10563 71db F20F1085 		movsd	-3744(%rbp), %xmm0
 10563      60F1FFFF 
 10564 71e3 F20F59C2 		mulsd	%xmm2, %xmm0
 10565 71e7 F20F58C1 		addsd	%xmm1, %xmm0
 10566 71eb F20F1185 		movsd	%xmm0, -3680(%rbp)
 10566      A0F1FFFF 
1081:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             rho_u_interface.z = rho_u_interface.z + feq_lattice[k] * e_alpha.z;
 10567              		.loc 9 1081 0 discriminator 2
 10568 71f3 F20F108D 		movsd	-3672(%rbp), %xmm1
 10568      A8F1FFFF 
 10569 71fb 8B859CEF 		movl	-4196(%rbp), %eax
 10569      FFFF
 10570 7201 4898     		cltq
 10571 7203 F20F1094 		movsd	-2832(%rbp,%rax,8), %xmm2
 10571      C5F0F4FF 
 10571      FF
 10572 720c F20F1085 		movsd	-3736(%rbp), %xmm0
 10572      68F1FFFF 
 10573 7214 F20F59C2 		mulsd	%xmm2, %xmm0
 10574 7218 F20F58C1 		addsd	%xmm1, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 316


 10575 721c F20F1185 		movsd	%xmm0, -3672(%rbp)
 10575      A8F1FFFF 
1021:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 10576              		.loc 9 1021 0 discriminator 2
 10577 7224 83859CEF 		addl	$1, -4196(%rbp)
 10577      FFFF01
 10578 722b E91FF9FF 		jmp	.L851
 10578      FF
 10579              	.L850:
 10580              	.LBE74:
1082:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
1083:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1084:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //rho_interface = rho_interface + temp_soln.get_rho(i);
1085:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1086:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // divide rho * u to get u but only after complete summation
1087:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1088:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_interface.x = rho_u_interface.x /rho_interface;
 10581              		.loc 9 1088 0
 10582 7230 F20F1085 		movsd	-3688(%rbp), %xmm0
 10582      98F1FFFF 
 10583 7238 F20F5E85 		divsd	-4144(%rbp), %xmm0
 10583      D0EFFFFF 
 10584 7240 F20F1185 		movsd	%xmm0, -3656(%rbp)
 10584      B8F1FFFF 
1089:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_interface.y = rho_u_interface.y /rho_interface;
 10585              		.loc 9 1089 0
 10586 7248 F20F1085 		movsd	-3680(%rbp), %xmm0
 10586      A0F1FFFF 
 10587 7250 F20F5E85 		divsd	-4144(%rbp), %xmm0
 10587      D0EFFFFF 
 10588 7258 F20F1185 		movsd	%xmm0, -3648(%rbp)
 10588      C0F1FFFF 
1090:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             u_interface.z = rho_u_interface.z /rho_interface;
 10589              		.loc 9 1090 0
 10590 7260 F20F1085 		movsd	-3672(%rbp), %xmm0
 10590      A8F1FFFF 
 10591 7268 F20F5E85 		divsd	-4144(%rbp), %xmm0
 10591      D0EFFFFF 
 10592 7270 F20F1185 		movsd	%xmm0, -3640(%rbp)
 10592      C8F1FFFF 
1091:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                        u_interface.x = rho_u_interface.x /temp_soln.get_average_rho();
1092:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                        u_interface.y = rho_u_interface.y /temp_soln.get_average_rho();
1093:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                        u_interface.z = rho_u_interface.z /temp_soln.get_average_rho();
1094:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         u_magnitude = u_interface.Magnitude();
 10593              		.loc 9 1094 0
 10594 7278 488D85B0 		leaq	-3664(%rbp), %rax
 10594      F1FFFF
 10595 727f 4889C7   		movq	%rax, %rdi
 10596              	.LEHB150:
 10597 7282 E8000000 		call	_ZN10vector_var9MagnitudeEv
 10597      00
 10598 7287 66480F7E 		movq	%xmm0, %rax
 10598      C0
 10599 728c 48898510 		movq	%rax, -4080(%rbp)
 10599      F0FFFF
1095:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1096:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 317


1097:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1098:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         int_debug[j].momentum_x =u_interface.x;
 10600              		.loc 9 1098 0
 10601 7293 F20F1085 		movsd	-3656(%rbp), %xmm0
 10601      B8F1FFFF 
 10602 729b 8B8598EF 		movl	-4200(%rbp), %eax
 10602      FFFF
 10603 72a1 4863D0   		movslq	%eax, %rdx
 10604 72a4 4889D0   		movq	%rdx, %rax
 10605 72a7 48C1E002 		salq	$2, %rax
 10606 72ab 4801D0   		addq	%rdx, %rax
 10607 72ae 48C1E003 		salq	$3, %rax
 10608 72b2 488D4DD0 		leaq	-48(%rbp), %rcx
 10609 72b6 4801C8   		addq	%rcx, %rax
 10610 72b9 482D7006 		subq	$1648, %rax
 10610      0000
 10611 72bf F20F1100 		movsd	%xmm0, (%rax)
1099:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         int_debug[j].momentum_y = u_interface.y;
 10612              		.loc 9 1099 0
 10613 72c3 F20F1085 		movsd	-3648(%rbp), %xmm0
 10613      C0F1FFFF 
 10614 72cb 8B8598EF 		movl	-4200(%rbp), %eax
 10614      FFFF
 10615 72d1 4863D0   		movslq	%eax, %rdx
 10616 72d4 4889D0   		movq	%rdx, %rax
 10617 72d7 48C1E002 		salq	$2, %rax
 10618 72db 4801D0   		addq	%rdx, %rax
 10619 72de 48C1E003 		salq	$3, %rax
 10620 72e2 488D4DD0 		leaq	-48(%rbp), %rcx
 10621 72e6 4801C8   		addq	%rcx, %rax
 10622 72e9 482D6806 		subq	$1640, %rax
 10622      0000
 10623 72ef F20F1100 		movsd	%xmm0, (%rax)
1100:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         int_debug[j].P = rho_interface;
 10624              		.loc 9 1100 0
 10625 72f3 8B8598EF 		movl	-4200(%rbp), %eax
 10625      FFFF
 10626 72f9 4863D0   		movslq	%eax, %rdx
 10627 72fc 4889D0   		movq	%rdx, %rax
 10628 72ff 48C1E002 		salq	$2, %rax
 10629 7303 4801D0   		addq	%rdx, %rax
 10630 7306 48C1E003 		salq	$3, %rax
 10631 730a 488D4DD0 		leaq	-48(%rbp), %rcx
 10632 730e 4801C8   		addq	%rcx, %rax
 10633 7311 482D7806 		subq	$1656, %rax
 10633      0000
 10634 7317 F20F1085 		movsd	-4144(%rbp), %xmm0
 10634      D0EFFFFF 
 10635 731f F20F1100 		movsd	%xmm0, (%rax)
 10636              	.LBB75:
1101:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1102:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         for (int k =0 ; k<9; k++){
 10637              		.loc 9 1102 0
 10638 7323 C785A0EF 		movl	$0, -4192(%rbp)
 10638      FFFF0000 
 10638      0000
 10639              	.L853:
GAS LISTING /tmp/cc2K2nX4.s 			page 318


 10640              		.loc 9 1102 0 is_stmt 0 discriminator 2
 10641 732d 83BDA0EF 		cmpl	$8, -4192(%rbp)
 10641      FFFF08
 10642 7334 0F8FAA04 		jg	.L852
 10642      0000
1103:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1104:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1105:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             e_alpha = get_e_alpha(k,lattice_weight,c,globals.PI);
 10643              		.loc 9 1105 0 is_stmt 1
 10644 733a 488B8550 		movq	-4272(%rbp), %rax
 10644      EFFFFF
 10645 7341 F20F1040 		movsd	32(%rax), %xmm0
 10645      20
 10646 7346 488B8578 		movq	-4232(%rbp), %rax
 10646      EFFFFF
 10647 734d 488B7820 		movq	32(%rax), %rdi
 10648 7351 488D8530 		leaq	-3536(%rbp), %rax
 10648      F2FFFF
 10649 7358 488D8DB0 		leaq	-4176(%rbp), %rcx
 10649      EFFFFF
 10650 735f 8B95A0EF 		movl	-4192(%rbp), %edx
 10650      FFFF
 10651 7365 488BB578 		movq	-4232(%rbp), %rsi
 10651      EFFFFF
 10652 736c 660F28C8 		movapd	%xmm0, %xmm1
 10653 7370 4889BD28 		movq	%rdi, -4312(%rbp)
 10653      EFFFFF
 10654 7377 F20F1085 		movsd	-4312(%rbp), %xmm0
 10654      28EFFFFF 
 10655 737f 4889C7   		movq	%rax, %rdi
 10656 7382 E8000000 		call	_ZN6Solver11get_e_alphaEiRddd
 10656      00
 10657              	.LEHE150:
 10658              		.loc 9 1105 0 is_stmt 0 discriminator 1
 10659 7387 488D9530 		leaq	-3536(%rbp), %rdx
 10659      F2FFFF
 10660 738e 488D8550 		leaq	-3760(%rbp), %rax
 10660      F1FFFF
 10661 7395 4889D6   		movq	%rdx, %rsi
 10662 7398 4889C7   		movq	%rax, %rdi
 10663 739b E8000000 		call	_ZN10vector_varaSERKS_
 10663      00
 10664 73a0 488D8530 		leaq	-3536(%rbp), %rax
 10664      F2FFFF
 10665 73a7 4889C7   		movq	%rax, %rdi
 10666 73aa E8000000 		call	_ZN10vector_varD1Ev
 10666      00
1106:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1107:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             //
1108:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // get feq at cell interface
1109:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1110:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // different order of adding may aid rounding errors
1111:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1112:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_interface = e_alpha.Dot_Product(u_interface) / pow(cs,2) *temp_so
1113:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_interface = feq_interface
1114:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                + ( pow(e_alpha.Dot_Product(u_interface),2)  - pow((u_magnitude* 
1115:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                    / (2 * pow(cs,4) * globals.pre_conditioned_gamma)
GAS LISTING /tmp/cc2K2nX4.s 			page 319


1116:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                    *temp_soln.get_average_rho();
1117:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            feq_interface = feq_interface + 1 * rho_interface;
1118:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface = e_alpha.Dot_Product(u_interface) / pow(cs,2) ;
 10667              		.loc 9 1119 0 is_stmt 1 discriminator 1
 10668 73af 488D95B0 		leaq	-3664(%rbp), %rdx
 10668      F1FFFF
 10669 73b6 488D8530 		leaq	-3536(%rbp), %rax
 10669      F2FFFF
 10670 73bd 4889D6   		movq	%rdx, %rsi
 10671 73c0 4889C7   		movq	%rax, %rdi
 10672 73c3 E8000000 		call	_ZN10vector_varC1ERKS_
 10672      00
 10673 73c8 488D9530 		leaq	-3536(%rbp), %rdx
 10673      F2FFFF
 10674 73cf 488D8550 		leaq	-3760(%rbp), %rax
 10674      F1FFFF
 10675 73d6 4889D6   		movq	%rdx, %rsi
 10676 73d9 4889C7   		movq	%rax, %rdi
 10677              	.LEHB151:
 10678 73dc E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10678      00
 10679              	.LEHE151:
 10680 73e1 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10680      28EFFFFF 
 10681 73e9 488B8578 		movq	-4232(%rbp), %rax
 10681      EFFFFF
 10682 73f0 488B4028 		movq	40(%rax), %rax
 10683 73f4 BF020000 		movl	$2, %edi
 10683      00
 10684 73f9 48898520 		movq	%rax, -4320(%rbp)
 10684      EFFFFF
 10685 7400 F20F1085 		movsd	-4320(%rbp), %xmm0
 10685      20EFFFFF 
 10686 7408 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10686      00
 10687 740d F20F10BD 		movsd	-4312(%rbp), %xmm7
 10687      28EFFFFF 
 10688 7415 F20F5EF8 		divsd	%xmm0, %xmm7
 10689 7419 660F28C7 		movapd	%xmm7, %xmm0
 10690 741d F20F1185 		movsd	%xmm0, -4072(%rbp)
 10690      18F0FFFF 
 10691 7425 488D8530 		leaq	-3536(%rbp), %rax
 10691      F2FFFF
 10692 742c 4889C7   		movq	%rax, %rdi
 10693 742f E8000000 		call	_ZN10vector_varD1Ev
 10693      00
1120:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface = feq_interface
1121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + ( pow(e_alpha.Dot_Product(u_interface),2)  - pow((u_magnitude* cs
 10694              		.loc 9 1121 0 discriminator 1
 10695 7434 488D95B0 		leaq	-3664(%rbp), %rdx
 10695      F1FFFF
 10696 743b 488D8530 		leaq	-3536(%rbp), %rax
 10696      F2FFFF
 10697 7442 4889D6   		movq	%rdx, %rsi
 10698 7445 4889C7   		movq	%rax, %rdi
 10699 7448 E8000000 		call	_ZN10vector_varC1ERKS_
GAS LISTING /tmp/cc2K2nX4.s 			page 320


 10699      00
 10700 744d 488D9530 		leaq	-3536(%rbp), %rdx
 10700      F2FFFF
 10701 7454 488D8550 		leaq	-3760(%rbp), %rax
 10701      F1FFFF
 10702 745b 4889D6   		movq	%rdx, %rsi
 10703 745e 4889C7   		movq	%rax, %rdi
 10704              	.LEHB152:
 10705 7461 E8000000 		call	_ZN10vector_var11Dot_ProductES_
 10705      00
 10706              	.LEHE152:
 10707              		.loc 9 1121 0 is_stmt 0 discriminator 2
 10708 7466 BF020000 		movl	$2, %edi
 10708      00
 10709 746b E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10709      00
 10710 7470 F20F1185 		movsd	%xmm0, -4312(%rbp)
 10710      28EFFFFF 
 10711 7478 488B8578 		movq	-4232(%rbp), %rax
 10711      EFFFFF
 10712 747f F20F1040 		movsd	40(%rax), %xmm0
 10712      28
 10713 7484 F20F5985 		mulsd	-4080(%rbp), %xmm0
 10713      10F0FFFF 
 10714 748c BF020000 		movl	$2, %edi
 10714      00
 10715 7491 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10715      00
 10716 7496 F20F10B5 		movsd	-4312(%rbp), %xmm6
 10716      28EFFFFF 
 10717 749e F20F5CF0 		subsd	%xmm0, %xmm6
 10718 74a2 F20F11B5 		movsd	%xmm6, -4312(%rbp)
 10718      28EFFFFF 
1122:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     / (2 * pow(cs,4) * globals.pre_conditioned_gamma)
 10719              		.loc 9 1122 0 is_stmt 1 discriminator 2
 10720 74aa 488B8578 		movq	-4232(%rbp), %rax
 10720      EFFFFF
 10721 74b1 488B4028 		movq	40(%rax), %rax
 10722 74b5 BF040000 		movl	$4, %edi
 10722      00
 10723 74ba 48898520 		movq	%rax, -4320(%rbp)
 10723      EFFFFF
 10724 74c1 F20F1085 		movsd	-4320(%rbp), %xmm0
 10724      20EFFFFF 
 10725 74c9 E8000000 		call	_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 10725      00
 10726 74ce F20F58C0 		addsd	%xmm0, %xmm0
 10727 74d2 488B8550 		movq	-4272(%rbp), %rax
 10727      EFFFFF
 10728 74d9 F20F1048 		movsd	48(%rax), %xmm1
 10728      30
 10729 74de F20F59C1 		mulsd	%xmm1, %xmm0
 10730 74e2 F20F10B5 		movsd	-4312(%rbp), %xmm6
 10730      28EFFFFF 
 10731 74ea F20F5EF0 		divsd	%xmm0, %xmm6
 10732 74ee 660F28C6 		movapd	%xmm6, %xmm0
1123:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     ;
GAS LISTING /tmp/cc2K2nX4.s 			page 321


 10733              		.loc 9 1123 0 discriminator 2
 10734 74f2 F20F108D 		movsd	-4072(%rbp), %xmm1
 10734      18F0FFFF 
 10735 74fa F20F58C1 		addsd	%xmm1, %xmm0
 10736 74fe F20F1185 		movsd	%xmm0, -4072(%rbp)
 10736      18F0FFFF 
1121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     / (2 * pow(cs,4) * globals.pre_conditioned_gamma)
 10737              		.loc 9 1121 0 discriminator 2
 10738 7506 488D8530 		leaq	-3536(%rbp), %rax
 10738      F2FFFF
 10739 750d 4889C7   		movq	%rax, %rdi
 10740 7510 E8000000 		call	_ZN10vector_varD1Ev
 10740      00
1124:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface = (feq_interface + 1 )* rho_interface;
 10741              		.loc 9 1124 0 discriminator 2
 10742 7515 F20F108D 		movsd	-4072(%rbp), %xmm1
 10742      18F0FFFF 
 10743 751d F20F1005 		movsd	.LC4(%rip), %xmm0
 10743      00000000 
 10744 7525 F20F58C1 		addsd	%xmm1, %xmm0
 10745 7529 F20F5985 		mulsd	-4144(%rbp), %xmm0
 10745      D0EFFFFF 
 10746 7531 F20F1185 		movsd	%xmm0, -4072(%rbp)
 10746      18F0FFFF 
1125:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1126:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1127:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1128:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface = feq_interface  *lattice_weight ;
 10747              		.loc 9 1128 0 discriminator 2
 10748 7539 F20F1085 		movsd	-4176(%rbp), %xmm0
 10748      B0EFFFFF 
 10749 7541 F20F108D 		movsd	-4072(%rbp), %xmm1
 10749      18F0FFFF 
 10750 7549 F20F59C1 		mulsd	%xmm1, %xmm0
 10751 754d F20F1185 		movsd	%xmm0, -4072(%rbp)
 10751      18F0FFFF 
1129:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_int_debug[k] = feq_interface;
 10752              		.loc 9 1129 0 discriminator 2
 10753 7555 8B85A0EF 		movl	-4192(%rbp), %eax
 10753      FFFF
 10754 755b 4898     		cltq
 10755 755d F20F1085 		movsd	-4072(%rbp), %xmm0
 10755      18F0FFFF 
 10756 7565 F20F1184 		movsd	%xmm0, -2752(%rbp,%rax,8)
 10756      C540F5FF 
 10756      FF
1130:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1131:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //get fneq at cell interface
1132:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             fneq_interface = -tau * ( feq_interface -feq_lattice[k]);
 10757              		.loc 9 1132 0 discriminator 2
 10758 756e 488B8578 		movq	-4232(%rbp), %rax
 10758      EFFFFF
 10759 7575 F20F1048 		movsd	16(%rax), %xmm1
 10759      10
 10760 757a F20F1005 		movsd	.LC6(%rip), %xmm0
 10760      00000000 
 10761 7582 660F57C8 		xorpd	%xmm0, %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 322


 10762 7586 8B85A0EF 		movl	-4192(%rbp), %eax
 10762      FFFF
 10763 758c 4898     		cltq
 10764 758e F20F1094 		movsd	-2832(%rbp,%rax,8), %xmm2
 10764      C5F0F4FF 
 10764      FF
 10765 7597 F20F1085 		movsd	-4072(%rbp), %xmm0
 10765      18F0FFFF 
 10766 759f F20F5CC2 		subsd	%xmm2, %xmm0
 10767 75a3 F20F59C1 		mulsd	%xmm1, %xmm0
 10768 75a7 F20F1185 		movsd	%xmm0, -4064(%rbp)
 10768      20F0FFFF 
1133:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             fneq_int_debug[k] = fneq_interface;
 10769              		.loc 9 1133 0 discriminator 2
 10770 75af 8B85A0EF 		movl	-4192(%rbp), %eax
 10770      FFFF
 10771 75b5 4898     		cltq
 10772 75b7 F20F1085 		movsd	-4064(%rbp), %xmm0
 10772      20F0FFFF 
 10773 75bf F20F1184 		movsd	%xmm0, -2672(%rbp,%rax,8)
 10773      C590F5FF 
 10773      FF
1134:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1135:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //calculate fluxes from feq and fneq
1136:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1137:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //as DEnsity flux is a scaler, we need to reverse local coordinates
1138:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // into global coordinates
1139:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1140:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             // where as momentume flux is the dot product of e and returns a scaler
1141:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1142:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.P = x_flux.P + e_alpha.x* feq_interface*cell_normal.x;
 10774              		.loc 9 1142 0 discriminator 2
 10775 75c8 F20F108D 		movsd	-3448(%rbp), %xmm1
 10775      88F2FFFF 
 10776 75d0 F20F1085 		movsd	-3752(%rbp), %xmm0
 10776      58F1FFFF 
 10777 75d8 F20F5985 		mulsd	-4072(%rbp), %xmm0
 10777      18F0FFFF 
 10778 75e0 F20F1095 		movsd	-3592(%rbp), %xmm2
 10778      F8F1FFFF 
 10779 75e8 F20F59C2 		mulsd	%xmm2, %xmm0
 10780 75ec F20F58C1 		addsd	%xmm1, %xmm0
 10781 75f0 F20F1185 		movsd	%xmm0, -3448(%rbp)
 10781      88F2FFFF 
1143:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.P = y_flux.P +  e_alpha.y * feq_interface*cell_normal.y;
 10782              		.loc 9 1143 0 discriminator 2
 10783 75f8 F20F108D 		movsd	-3400(%rbp), %xmm1
 10783      B8F2FFFF 
 10784 7600 F20F1085 		movsd	-3744(%rbp), %xmm0
 10784      60F1FFFF 
 10785 7608 F20F5985 		mulsd	-4072(%rbp), %xmm0
 10785      18F0FFFF 
 10786 7610 F20F1095 		movsd	-3584(%rbp), %xmm2
 10786      00F2FFFF 
 10787 7618 F20F59C2 		mulsd	%xmm2, %xmm0
 10788 761c F20F58C1 		addsd	%xmm1, %xmm0
 10789 7620 F20F1185 		movsd	%xmm0, -3400(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 323


 10789      B8F2FFFF 
1144:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //x_flux.momentum_x = x_flux.momentum_x + pow(e_alpha.x,2) *( feq_inter
1145:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                              //(1-1/(2*tau))*fneq_i
1146:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1147:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_x = x_flux.momentum_x + e_alpha.x * (e_alpha.x) *( feq_
 10790              		.loc 9 1147 0 discriminator 2
 10791 7628 F20F109D 		movsd	-3440(%rbp), %xmm3
 10791      90F2FFFF 
 10792 7630 F20F108D 		movsd	-3752(%rbp), %xmm1
 10792      58F1FFFF 
 10793 7638 F20F1085 		movsd	-3752(%rbp), %xmm0
 10793      58F1FFFF 
 10794 7640 F20F59C8 		mulsd	%xmm0, %xmm1
1148:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     + (1-1/(2*tau))*fneq_interface);
 10795              		.loc 9 1148 0 discriminator 2
 10796 7644 488B8578 		movq	-4232(%rbp), %rax
 10796      EFFFFF
 10797 764b F20F1040 		movsd	16(%rax), %xmm0
 10797      10
 10798 7650 F20F58C0 		addsd	%xmm0, %xmm0
 10799 7654 F20F1015 		movsd	.LC4(%rip), %xmm2
 10799      00000000 
 10800 765c F20F5ED0 		divsd	%xmm0, %xmm2
 10801 7660 660F28C2 		movapd	%xmm2, %xmm0
 10802 7664 F20F1015 		movsd	.LC4(%rip), %xmm2
 10802      00000000 
 10803 766c F20F5CD0 		subsd	%xmm0, %xmm2
 10804 7670 660F28C2 		movapd	%xmm2, %xmm0
 10805 7674 F20F5985 		mulsd	-4064(%rbp), %xmm0
 10805      20F0FFFF 
 10806 767c F20F5885 		addsd	-4072(%rbp), %xmm0
 10806      18F0FFFF 
1147:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     + (1-1/(2*tau))*fneq_interface);
 10807              		.loc 9 1147 0 discriminator 2
 10808 7684 F20F59C1 		mulsd	%xmm1, %xmm0
 10809 7688 F20F58C3 		addsd	%xmm3, %xmm0
 10810              		.loc 9 1148 0 discriminator 2
 10811 768c F20F1185 		movsd	%xmm0, -3440(%rbp)
 10811      90F2FFFF 
1149:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_y = x_flux.momentum_y + e_alpha.x*(e_alpha.y) *( feq_in
 10812              		.loc 9 1149 0 discriminator 2
 10813 7694 F20F109D 		movsd	-3432(%rbp), %xmm3
 10813      98F2FFFF 
 10814 769c F20F108D 		movsd	-3752(%rbp), %xmm1
 10814      58F1FFFF 
 10815 76a4 F20F1085 		movsd	-3744(%rbp), %xmm0
 10815      60F1FFFF 
 10816 76ac F20F59C8 		mulsd	%xmm0, %xmm1
1150:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     + (1-1/(2*tau))*fneq_interface);
 10817              		.loc 9 1150 0 discriminator 2
 10818 76b0 488B8578 		movq	-4232(%rbp), %rax
 10818      EFFFFF
 10819 76b7 F20F1040 		movsd	16(%rax), %xmm0
 10819      10
 10820 76bc F20F58C0 		addsd	%xmm0, %xmm0
 10821 76c0 F20F1015 		movsd	.LC4(%rip), %xmm2
 10821      00000000 
GAS LISTING /tmp/cc2K2nX4.s 			page 324


 10822 76c8 F20F5ED0 		divsd	%xmm0, %xmm2
 10823 76cc 660F28C2 		movapd	%xmm2, %xmm0
 10824 76d0 F20F1015 		movsd	.LC4(%rip), %xmm2
 10824      00000000 
 10825 76d8 F20F5CD0 		subsd	%xmm0, %xmm2
 10826 76dc 660F28C2 		movapd	%xmm2, %xmm0
 10827 76e0 F20F5985 		mulsd	-4064(%rbp), %xmm0
 10827      20F0FFFF 
 10828 76e8 F20F5885 		addsd	-4072(%rbp), %xmm0
 10828      18F0FFFF 
1149:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             x_flux.momentum_y = x_flux.momentum_y + e_alpha.x*(e_alpha.y) *( feq_in
 10829              		.loc 9 1149 0 discriminator 2
 10830 76f0 F20F59C1 		mulsd	%xmm1, %xmm0
 10831 76f4 F20F58C3 		addsd	%xmm3, %xmm0
 10832              		.loc 9 1150 0 discriminator 2
 10833 76f8 F20F1185 		movsd	%xmm0, -3432(%rbp)
 10833      98F2FFFF 
1151:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1152:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_x = y_flux.momentum_x + e_alpha.y*(e_alpha.x) *( feq_in
 10834              		.loc 9 1152 0 discriminator 2
 10835 7700 F20F109D 		movsd	-3392(%rbp), %xmm3
 10835      C0F2FFFF 
 10836 7708 F20F108D 		movsd	-3744(%rbp), %xmm1
 10836      60F1FFFF 
 10837 7710 F20F1085 		movsd	-3752(%rbp), %xmm0
 10837      58F1FFFF 
 10838 7718 F20F59C8 		mulsd	%xmm0, %xmm1
1153:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     + (1-1/(2*tau))*fneq_interface);
 10839              		.loc 9 1153 0 discriminator 2
 10840 771c 488B8578 		movq	-4232(%rbp), %rax
 10840      EFFFFF
 10841 7723 F20F1040 		movsd	16(%rax), %xmm0
 10841      10
 10842 7728 F20F58C0 		addsd	%xmm0, %xmm0
 10843 772c F20F1015 		movsd	.LC4(%rip), %xmm2
 10843      00000000 
 10844 7734 F20F5ED0 		divsd	%xmm0, %xmm2
 10845 7738 660F28C2 		movapd	%xmm2, %xmm0
 10846 773c F20F1015 		movsd	.LC4(%rip), %xmm2
 10846      00000000 
 10847 7744 F20F5CD0 		subsd	%xmm0, %xmm2
 10848 7748 660F28C2 		movapd	%xmm2, %xmm0
 10849 774c F20F5985 		mulsd	-4064(%rbp), %xmm0
 10849      20F0FFFF 
 10850 7754 F20F5885 		addsd	-4072(%rbp), %xmm0
 10850      18F0FFFF 
1152:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     + (1-1/(2*tau))*fneq_interface);
 10851              		.loc 9 1152 0 discriminator 2
 10852 775c F20F59C1 		mulsd	%xmm1, %xmm0
 10853 7760 F20F58C3 		addsd	%xmm3, %xmm0
 10854              		.loc 9 1153 0 discriminator 2
 10855 7764 F20F1185 		movsd	%xmm0, -3392(%rbp)
 10855      C0F2FFFF 
1154:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //y_flux.momentum_y = y_flux.momentum_y + pow(e_alpha.y,2) *( feq_inter
1155:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                                              //+ (1-1/(2*tau))*fneq
1156:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             y_flux.momentum_y = y_flux.momentum_y + e_alpha.y * (e_alpha.y) *( feq_
 10856              		.loc 9 1156 0 discriminator 2
GAS LISTING /tmp/cc2K2nX4.s 			page 325


 10857 776c F20F109D 		movsd	-3384(%rbp), %xmm3
 10857      C8F2FFFF 
 10858 7774 F20F108D 		movsd	-3744(%rbp), %xmm1
 10858      60F1FFFF 
 10859 777c F20F1085 		movsd	-3744(%rbp), %xmm0
 10859      60F1FFFF 
 10860 7784 F20F59C8 		mulsd	%xmm0, %xmm1
1157:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     + (1-1/(2*tau))*fneq_interface);
 10861              		.loc 9 1157 0 discriminator 2
 10862 7788 488B8578 		movq	-4232(%rbp), %rax
 10862      EFFFFF
 10863 778f F20F1040 		movsd	16(%rax), %xmm0
 10863      10
 10864 7794 F20F58C0 		addsd	%xmm0, %xmm0
 10865 7798 F20F1015 		movsd	.LC4(%rip), %xmm2
 10865      00000000 
 10866 77a0 F20F5ED0 		divsd	%xmm0, %xmm2
 10867 77a4 660F28C2 		movapd	%xmm2, %xmm0
 10868 77a8 F20F1015 		movsd	.LC4(%rip), %xmm2
 10868      00000000 
 10869 77b0 F20F5CD0 		subsd	%xmm0, %xmm2
 10870 77b4 660F28C2 		movapd	%xmm2, %xmm0
 10871 77b8 F20F5985 		mulsd	-4064(%rbp), %xmm0
 10871      20F0FFFF 
 10872 77c0 F20F5885 		addsd	-4072(%rbp), %xmm0
 10872      18F0FFFF 
1156:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                     + (1-1/(2*tau))*fneq_interface);
 10873              		.loc 9 1156 0 discriminator 2
 10874 77c8 F20F59C1 		mulsd	%xmm1, %xmm0
 10875 77cc F20F58C3 		addsd	%xmm3, %xmm0
 10876              		.loc 9 1157 0 discriminator 2
 10877 77d0 F20F1185 		movsd	%xmm0, -3384(%rbp)
 10877      C8F2FFFF 
1102:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 10878              		.loc 9 1102 0 discriminator 2
 10879 77d8 8385A0EF 		addl	$1, -4192(%rbp)
 10879      FFFF01
 10880 77df E949FBFF 		jmp	.L853
 10880      FF
 10881              	.L852:
 10882              	.LBE75:
1158:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1159:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1160:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1161:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1162:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
1163:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //truncate_flux(x_flux);
1164:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //truncate_flux(y_flux);
1165:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1166:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             debug_flux[j].P = x_flux.P  ;
 10883              		.loc 9 1166 0 discriminator 2
 10884 77e4 F20F1085 		movsd	-3448(%rbp), %xmm0
 10884      88F2FFFF 
 10885 77ec 8B8598EF 		movl	-4200(%rbp), %eax
 10885      FFFF
 10886 77f2 4863D0   		movslq	%eax, %rdx
 10887 77f5 4889D0   		movq	%rdx, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 326


 10888 77f8 48C1E002 		salq	$2, %rax
 10889 77fc 4801D0   		addq	%rdx, %rax
 10890 77ff 48C1E003 		salq	$3, %rax
 10891 7803 488D4DD0 		leaq	-48(%rbp), %rcx
 10892 7807 4801C8   		addq	%rcx, %rax
 10893 780a 482D5808 		subq	$2136, %rax
 10893      0000
 10894 7810 F20F1100 		movsd	%xmm0, (%rax)
1167:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             debug_flux[j].momentum_x = x_flux.momentum_x* cell_normal.x ;
 10895              		.loc 9 1167 0 discriminator 2
 10896 7814 F20F108D 		movsd	-3440(%rbp), %xmm1
 10896      90F2FFFF 
 10897 781c F20F1085 		movsd	-3592(%rbp), %xmm0
 10897      F8F1FFFF 
 10898 7824 F20F59C1 		mulsd	%xmm1, %xmm0
 10899 7828 8B8598EF 		movl	-4200(%rbp), %eax
 10899      FFFF
 10900 782e 4863D0   		movslq	%eax, %rdx
 10901 7831 4889D0   		movq	%rdx, %rax
 10902 7834 48C1E002 		salq	$2, %rax
 10903 7838 4801D0   		addq	%rdx, %rax
 10904 783b 48C1E003 		salq	$3, %rax
 10905 783f 488D4DD0 		leaq	-48(%rbp), %rcx
 10906 7843 4801C8   		addq	%rcx, %rax
 10907 7846 482D5008 		subq	$2128, %rax
 10907      0000
 10908 784c F20F1100 		movsd	%xmm0, (%rax)
1168:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             debug_flux[j].momentum_y = x_flux.momentum_y* cell_normal.x ;
 10909              		.loc 9 1168 0 discriminator 2
 10910 7850 F20F108D 		movsd	-3432(%rbp), %xmm1
 10910      98F2FFFF 
 10911 7858 F20F1085 		movsd	-3592(%rbp), %xmm0
 10911      F8F1FFFF 
 10912 7860 F20F59C1 		mulsd	%xmm1, %xmm0
 10913 7864 8B8598EF 		movl	-4200(%rbp), %eax
 10913      FFFF
 10914 786a 4863D0   		movslq	%eax, %rdx
 10915 786d 4889D0   		movq	%rdx, %rax
 10916 7870 48C1E002 		salq	$2, %rax
 10917 7874 4801D0   		addq	%rdx, %rax
 10918 7877 48C1E003 		salq	$3, %rax
 10919 787b 488D4DD0 		leaq	-48(%rbp), %rcx
 10920 787f 4801C8   		addq	%rcx, %rax
 10921 7882 482D4808 		subq	$2120, %rax
 10921      0000
 10922 7888 F20F1100 		movsd	%xmm0, (%rax)
1169:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             debug_flux[j].momentum_z = x_flux.P* cell_normal.x ;
 10923              		.loc 9 1169 0 discriminator 2
 10924 788c F20F108D 		movsd	-3448(%rbp), %xmm1
 10924      88F2FFFF 
 10925 7894 F20F1085 		movsd	-3592(%rbp), %xmm0
 10925      F8F1FFFF 
 10926 789c F20F59C1 		mulsd	%xmm1, %xmm0
 10927 78a0 8B8598EF 		movl	-4200(%rbp), %eax
 10927      FFFF
 10928 78a6 4863D0   		movslq	%eax, %rdx
 10929 78a9 4889D0   		movq	%rdx, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 327


 10930 78ac 48C1E002 		salq	$2, %rax
 10931 78b0 4801D0   		addq	%rdx, %rax
 10932 78b3 48C1E003 		salq	$3, %rax
 10933 78b7 488D4DD0 		leaq	-48(%rbp), %rcx
 10934 78bb 4801C8   		addq	%rcx, %rax
 10935 78be 482D4008 		subq	$2112, %rax
 10935      0000
 10936 78c4 F20F1100 		movsd	%xmm0, (%rax)
1170:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1171:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                        // account for rounding errors
1172:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1173:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //artificial dissipation calcs
1174:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1175:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //arti_dis.get_local_coeffs( soln,bcs,Mesh,temp_soln,domain,j,i);
1176:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1177:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1178:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //cell_flux.P = 0;
1179:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             cell_flux.P = cell_flux.P
 10937              		.loc 9 1179 0 discriminator 2
 10938 78c8 F20F109D 		movsd	-3352(%rbp), %xmm3
 10938      E8F2FFFF 
1180:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 10939              		.loc 9 1180 0 discriminator 2
 10940 78d0 F20F108D 		movsd	-4184(%rbp), %xmm1
 10940      A8EFFFFF 
 10941 78d8 F20F1005 		movsd	.LC6(%rip), %xmm0
 10941      00000000 
 10942 78e0 660F57C8 		xorpd	%xmm0, %xmm1
1181:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 ( (x_flux.P +arti_dis.local_flux.P) * cell_normal.x
 10943              		.loc 9 1181 0 discriminator 2
 10944 78e4 F20F1095 		movsd	-3448(%rbp), %xmm2
 10944      88F2FFFF 
 10945 78ec F20F1085 		movsd	-1432(%rbp), %xmm0
 10945      68FAFFFF 
 10946 78f4 F20F58C2 		addsd	%xmm2, %xmm0
 10947 78f8 F20F1095 		movsd	-3592(%rbp), %xmm2
 10947      F8F1FFFF 
 10948 7900 F20F59D0 		mulsd	%xmm0, %xmm2
1182:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  + (y_flux.P +arti_dis.local_flux.P) *cell_normal.y );
 10949              		.loc 9 1182 0 discriminator 2
 10950 7904 F20F10A5 		movsd	-3400(%rbp), %xmm4
 10950      B8F2FFFF 
 10951 790c F20F1085 		movsd	-1432(%rbp), %xmm0
 10951      68FAFFFF 
 10952 7914 F20F58C4 		addsd	%xmm4, %xmm0
 10953 7918 F20F10A5 		movsd	-3584(%rbp), %xmm4
 10953      00F2FFFF 
 10954 7920 F20F59C4 		mulsd	%xmm4, %xmm0
 10955 7924 F20F58C2 		addsd	%xmm2, %xmm0
1180:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 10956              		.loc 9 1180 0 discriminator 2
 10957 7928 F20F59C1 		mulsd	%xmm1, %xmm0
 10958 792c F20F58C3 		addsd	%xmm3, %xmm0
 10959              		.loc 9 1182 0 discriminator 2
 10960 7930 F20F1185 		movsd	%xmm0, -3352(%rbp)
 10960      E8F2FFFF 
1183:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             cell_flux.momentum_x = cell_flux.momentum_x
GAS LISTING /tmp/cc2K2nX4.s 			page 328


 10961              		.loc 9 1183 0 discriminator 2
 10962 7938 F20F109D 		movsd	-3344(%rbp), %xmm3
 10962      F0F2FFFF 
1184:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 10963              		.loc 9 1184 0 discriminator 2
 10964 7940 F20F108D 		movsd	-4184(%rbp), %xmm1
 10964      A8EFFFFF 
 10965 7948 F20F1005 		movsd	.LC6(%rip), %xmm0
 10965      00000000 
 10966 7950 660F57C8 		xorpd	%xmm0, %xmm1
1185:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     ( (x_flux.momentum_x + arti_dis.local_flux.momentum_x)* cell_no
 10967              		.loc 9 1185 0 discriminator 2
 10968 7954 F20F1095 		movsd	-3440(%rbp), %xmm2
 10968      90F2FFFF 
 10969 795c F20F1085 		movsd	-1424(%rbp), %xmm0
 10969      70FAFFFF 
 10970 7964 F20F58C2 		addsd	%xmm2, %xmm0
 10971 7968 F20F1095 		movsd	-3592(%rbp), %xmm2
 10971      F8F1FFFF 
 10972 7970 F20F59D0 		mulsd	%xmm0, %xmm2
1186:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                      + (y_flux.momentum_x + arti_dis.local_flux.momentum_x) *cell_n
 10973              		.loc 9 1186 0 discriminator 2
 10974 7974 F20F10A5 		movsd	-3392(%rbp), %xmm4
 10974      C0F2FFFF 
 10975 797c F20F1085 		movsd	-1424(%rbp), %xmm0
 10975      70FAFFFF 
 10976 7984 F20F58C4 		addsd	%xmm4, %xmm0
 10977 7988 F20F10A5 		movsd	-3584(%rbp), %xmm4
 10977      00F2FFFF 
 10978 7990 F20F59C4 		mulsd	%xmm4, %xmm0
 10979 7994 F20F58C2 		addsd	%xmm2, %xmm0
1184:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 10980              		.loc 9 1184 0 discriminator 2
 10981 7998 F20F59C1 		mulsd	%xmm1, %xmm0
 10982 799c F20F58C3 		addsd	%xmm3, %xmm0
 10983              		.loc 9 1186 0 discriminator 2
 10984 79a0 F20F1185 		movsd	%xmm0, -3344(%rbp)
 10984      F0F2FFFF 
1187:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             cell_flux.momentum_y = cell_flux.momentum_y
 10985              		.loc 9 1187 0 discriminator 2
 10986 79a8 F20F109D 		movsd	-3336(%rbp), %xmm3
 10986      F8F2FFFF 
1188:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 10987              		.loc 9 1188 0 discriminator 2
 10988 79b0 F20F108D 		movsd	-4184(%rbp), %xmm1
 10988      A8EFFFFF 
 10989 79b8 F20F1005 		movsd	.LC6(%rip), %xmm0
 10989      00000000 
 10990 79c0 660F57C8 		xorpd	%xmm0, %xmm1
1189:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     ( (x_flux.momentum_y +arti_dis.local_flux.momentum_y ) * cell_n
 10991              		.loc 9 1189 0 discriminator 2
 10992 79c4 F20F1095 		movsd	-3432(%rbp), %xmm2
 10992      98F2FFFF 
 10993 79cc F20F1085 		movsd	-1416(%rbp), %xmm0
 10993      78FAFFFF 
 10994 79d4 F20F58C2 		addsd	%xmm2, %xmm0
 10995 79d8 F20F1095 		movsd	-3592(%rbp), %xmm2
GAS LISTING /tmp/cc2K2nX4.s 			page 329


 10995      F8F1FFFF 
 10996 79e0 F20F59D0 		mulsd	%xmm0, %xmm2
1190:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                        + ( y_flux.momentum_y +arti_dis.local_flux.momentum_y) *cell
 10997              		.loc 9 1190 0 discriminator 2
 10998 79e4 F20F10A5 		movsd	-3384(%rbp), %xmm4
 10998      C8F2FFFF 
 10999 79ec F20F1085 		movsd	-1416(%rbp), %xmm0
 10999      78FAFFFF 
 11000 79f4 F20F58C4 		addsd	%xmm4, %xmm0
 11001 79f8 F20F10A5 		movsd	-3584(%rbp), %xmm4
 11001      00F2FFFF 
 11002 7a00 F20F59C4 		mulsd	%xmm4, %xmm0
 11003 7a04 F20F58C2 		addsd	%xmm2, %xmm0
1188:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + (-1)*interface_area*
 11004              		.loc 9 1188 0 discriminator 2
 11005 7a08 F20F59C1 		mulsd	%xmm1, %xmm0
 11006 7a0c F20F58C3 		addsd	%xmm3, %xmm0
 11007              		.loc 9 1190 0 discriminator 2
 11008 7a10 F20F1185 		movsd	%xmm0, -3336(%rbp)
 11008      F8F2FFFF 
1191:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1192:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             /// debug
1193:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1194:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 debug[j].P = (-1)*interface_area/ 1*
 11009              		.loc 9 1194 0 discriminator 2
 11010 7a18 F20F108D 		movsd	-4184(%rbp), %xmm1
 11010      A8EFFFFF 
 11011 7a20 F20F1005 		movsd	.LC6(%rip), %xmm0
 11011      00000000 
 11012 7a28 660F57C8 		xorpd	%xmm0, %xmm1
1195:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                          ( x_flux.P * cell_normal.x + y_flux.P *cell_normal.y );
 11013              		.loc 9 1195 0 discriminator 2
 11014 7a2c F20F1095 		movsd	-3448(%rbp), %xmm2
 11014      88F2FFFF 
 11015 7a34 F20F1085 		movsd	-3592(%rbp), %xmm0
 11015      F8F1FFFF 
 11016 7a3c F20F59D0 		mulsd	%xmm0, %xmm2
 11017 7a40 F20F109D 		movsd	-3400(%rbp), %xmm3
 11017      B8F2FFFF 
 11018 7a48 F20F1085 		movsd	-3584(%rbp), %xmm0
 11018      00F2FFFF 
 11019 7a50 F20F59C3 		mulsd	%xmm3, %xmm0
 11020 7a54 F20F58C2 		addsd	%xmm2, %xmm0
1194:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                          ( x_flux.P * cell_normal.x + y_flux.P *cell_normal.y );
 11021              		.loc 9 1194 0 discriminator 2
 11022 7a58 F20F59C1 		mulsd	%xmm1, %xmm0
 11023              		.loc 9 1195 0 discriminator 2
 11024 7a5c 8B8598EF 		movl	-4200(%rbp), %eax
 11024      FFFF
 11025 7a62 4863D0   		movslq	%eax, %rdx
 11026 7a65 4889D0   		movq	%rdx, %rax
 11027 7a68 48C1E002 		salq	$2, %rax
 11028 7a6c 4801D0   		addq	%rdx, %rax
 11029 7a6f 48C1E003 		salq	$3, %rax
 11030 7a73 488D4DD0 		leaq	-48(%rbp), %rcx
 11031 7a77 4801C8   		addq	%rcx, %rax
 11032 7a7a 482DF808 		subq	$2296, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 330


 11032      0000
 11033 7a80 F20F1100 		movsd	%xmm0, (%rax)
1196:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 debug[j].momentum_x = (-1)*interface_area/ 1*
 11034              		.loc 9 1196 0 discriminator 2
 11035 7a84 F20F108D 		movsd	-4184(%rbp), %xmm1
 11035      A8EFFFFF 
 11036 7a8c F20F1005 		movsd	.LC6(%rip), %xmm0
 11036      00000000 
 11037 7a94 660F57C8 		xorpd	%xmm0, %xmm1
1197:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                         ( x_flux.momentum_x * cell_normal.x + y_flux.momentum_x *ce
 11038              		.loc 9 1197 0 discriminator 2
 11039 7a98 F20F1095 		movsd	-3440(%rbp), %xmm2
 11039      90F2FFFF 
 11040 7aa0 F20F1085 		movsd	-3592(%rbp), %xmm0
 11040      F8F1FFFF 
 11041 7aa8 F20F59D0 		mulsd	%xmm0, %xmm2
 11042 7aac F20F109D 		movsd	-3392(%rbp), %xmm3
 11042      C0F2FFFF 
 11043 7ab4 F20F1085 		movsd	-3584(%rbp), %xmm0
 11043      00F2FFFF 
 11044 7abc F20F59C3 		mulsd	%xmm3, %xmm0
 11045 7ac0 F20F58C2 		addsd	%xmm2, %xmm0
1196:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 debug[j].momentum_x = (-1)*interface_area/ 1*
 11046              		.loc 9 1196 0 discriminator 2
 11047 7ac4 F20F59C1 		mulsd	%xmm1, %xmm0
 11048              		.loc 9 1197 0 discriminator 2
 11049 7ac8 8B8598EF 		movl	-4200(%rbp), %eax
 11049      FFFF
 11050 7ace 4863D0   		movslq	%eax, %rdx
 11051 7ad1 4889D0   		movq	%rdx, %rax
 11052 7ad4 48C1E002 		salq	$2, %rax
 11053 7ad8 4801D0   		addq	%rdx, %rax
 11054 7adb 48C1E003 		salq	$3, %rax
 11055 7adf 488D4DD0 		leaq	-48(%rbp), %rcx
 11056 7ae3 4801C8   		addq	%rcx, %rax
 11057 7ae6 482DF008 		subq	$2288, %rax
 11057      0000
 11058 7aec F20F1100 		movsd	%xmm0, (%rax)
1198:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 debug[j].momentum_y =  (-1)*interface_area/ 1*
 11059              		.loc 9 1198 0 discriminator 2
 11060 7af0 F20F108D 		movsd	-4184(%rbp), %xmm1
 11060      A8EFFFFF 
 11061 7af8 F20F1005 		movsd	.LC6(%rip), %xmm0
 11061      00000000 
 11062 7b00 660F57C8 		xorpd	%xmm0, %xmm1
1199:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                         ( x_flux.momentum_y * cell_normal.x + y_flux.momentum_y *ce
 11063              		.loc 9 1199 0 discriminator 2
 11064 7b04 F20F1095 		movsd	-3432(%rbp), %xmm2
 11064      98F2FFFF 
 11065 7b0c F20F1085 		movsd	-3592(%rbp), %xmm0
 11065      F8F1FFFF 
 11066 7b14 F20F59D0 		mulsd	%xmm0, %xmm2
 11067 7b18 F20F109D 		movsd	-3384(%rbp), %xmm3
 11067      C8F2FFFF 
 11068 7b20 F20F1085 		movsd	-3584(%rbp), %xmm0
 11068      00F2FFFF 
 11069 7b28 F20F59C3 		mulsd	%xmm3, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 331


 11070 7b2c F20F58C2 		addsd	%xmm2, %xmm0
1198:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 debug[j].momentum_y =  (-1)*interface_area/ 1*
 11071              		.loc 9 1198 0 discriminator 2
 11072 7b30 F20F59C1 		mulsd	%xmm1, %xmm0
 11073              		.loc 9 1199 0 discriminator 2
 11074 7b34 8B8598EF 		movl	-4200(%rbp), %eax
 11074      FFFF
 11075 7b3a 4863D0   		movslq	%eax, %rdx
 11076 7b3d 4889D0   		movq	%rdx, %rax
 11077 7b40 48C1E002 		salq	$2, %rax
 11078 7b44 4801D0   		addq	%rdx, %rax
 11079 7b47 48C1E003 		salq	$3, %rax
 11080 7b4b 488D4DD0 		leaq	-48(%rbp), %rcx
 11081 7b4f 4801C8   		addq	%rcx, %rax
 11082 7b52 482DE808 		subq	$2280, %rax
 11082      0000
 11083 7b58 F20F1100 		movsd	%xmm0, (%rax)
1200:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1201:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 arti_debug[j].P =  arti_dis.local_flux.P * cell_normal.x
 11084              		.loc 9 1201 0 discriminator 2
 11085 7b5c F20F108D 		movsd	-1432(%rbp), %xmm1
 11085      68FAFFFF 
 11086 7b64 F20F1085 		movsd	-3592(%rbp), %xmm0
 11086      F8F1FFFF 
 11087 7b6c F20F59C8 		mulsd	%xmm0, %xmm1
1202:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  + arti_dis.local_flux.P *cell_normal.y ;
 11088              		.loc 9 1202 0 discriminator 2
 11089 7b70 F20F1095 		movsd	-1432(%rbp), %xmm2
 11089      68FAFFFF 
 11090 7b78 F20F1085 		movsd	-3584(%rbp), %xmm0
 11090      00F2FFFF 
 11091 7b80 F20F59C2 		mulsd	%xmm2, %xmm0
 11092 7b84 F20F58C1 		addsd	%xmm1, %xmm0
 11093 7b88 8B8598EF 		movl	-4200(%rbp), %eax
 11093      FFFF
 11094 7b8e 4863D0   		movslq	%eax, %rdx
 11095 7b91 4889D0   		movq	%rdx, %rax
 11096 7b94 48C1E002 		salq	$2, %rax
 11097 7b98 4801D0   		addq	%rdx, %rax
 11098 7b9b 48C1E003 		salq	$3, %rax
 11099 7b9f 488D4DD0 		leaq	-48(%rbp), %rcx
 11100 7ba3 4801C8   		addq	%rcx, %rax
 11101 7ba6 482DB807 		subq	$1976, %rax
 11101      0000
 11102 7bac F20F1100 		movsd	%xmm0, (%rax)
1203:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  arti_debug[j].momentum_x =  arti_dis.local_flux.momentum_x * cell_
 11103              		.loc 9 1203 0 discriminator 2
 11104 7bb0 F20F108D 		movsd	-1424(%rbp), %xmm1
 11104      70FAFFFF 
 11105 7bb8 F20F1085 		movsd	-3592(%rbp), %xmm0
 11105      F8F1FFFF 
 11106 7bc0 F20F59C8 		mulsd	%xmm0, %xmm1
1204:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  + arti_dis.local_flux.momentum_x *cell_normal.y ;
 11107              		.loc 9 1204 0 discriminator 2
 11108 7bc4 F20F1095 		movsd	-1424(%rbp), %xmm2
 11108      70FAFFFF 
 11109 7bcc F20F1085 		movsd	-3584(%rbp), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 332


 11109      00F2FFFF 
 11110 7bd4 F20F59C2 		mulsd	%xmm2, %xmm0
 11111 7bd8 F20F58C1 		addsd	%xmm1, %xmm0
 11112 7bdc 8B8598EF 		movl	-4200(%rbp), %eax
 11112      FFFF
 11113 7be2 4863D0   		movslq	%eax, %rdx
 11114 7be5 4889D0   		movq	%rdx, %rax
 11115 7be8 48C1E002 		salq	$2, %rax
 11116 7bec 4801D0   		addq	%rdx, %rax
 11117 7bef 48C1E003 		salq	$3, %rax
 11118 7bf3 488D4DD0 		leaq	-48(%rbp), %rcx
 11119 7bf7 4801C8   		addq	%rcx, %rax
 11120 7bfa 482DB007 		subq	$1968, %rax
 11120      0000
 11121 7c00 F20F1100 		movsd	%xmm0, (%rax)
1205:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  arti_debug[j].momentum_x =  arti_dis.local_flux.momentum_x * cell_
 11122              		.loc 9 1205 0 discriminator 2
 11123 7c04 F20F108D 		movsd	-1424(%rbp), %xmm1
 11123      70FAFFFF 
 11124 7c0c F20F1085 		movsd	-3592(%rbp), %xmm0
 11124      F8F1FFFF 
 11125 7c14 F20F59C8 		mulsd	%xmm0, %xmm1
1206:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                  + arti_dis.local_flux.momentum_x *cell_normal.y ;
 11126              		.loc 9 1206 0 discriminator 2
 11127 7c18 F20F1095 		movsd	-1424(%rbp), %xmm2
 11127      70FAFFFF 
 11128 7c20 F20F1085 		movsd	-3584(%rbp), %xmm0
 11128      00F2FFFF 
 11129 7c28 F20F59C2 		mulsd	%xmm2, %xmm0
 11130 7c2c F20F58C1 		addsd	%xmm1, %xmm0
 11131 7c30 8B8598EF 		movl	-4200(%rbp), %eax
 11131      FFFF
 11132 7c36 4863D0   		movslq	%eax, %rdx
 11133 7c39 4889D0   		movq	%rdx, %rax
 11134 7c3c 48C1E002 		salq	$2, %rax
 11135 7c40 4801D0   		addq	%rdx, %rax
 11136 7c43 48C1E003 		salq	$3, %rax
 11137 7c47 488D4DD0 		leaq	-48(%rbp), %rcx
 11138 7c4b 4801C8   		addq	%rcx, %rax
 11139 7c4e 482DB007 		subq	$1968, %rax
 11139      0000
 11140 7c54 F20F1100 		movsd	%xmm0, (%rax)
 11141              	.LBE73:
 971:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         bc.present = false;
 11142              		.loc 9 971 0 discriminator 2
 11143 7c58 838598EF 		addl	$1, -4200(%rbp)
 11143      FFFF01
 11144 7c5f E9BAEAFF 		jmp	.L854
 11144      FF
 11145              	.L849:
 11146              	.LBE72:
1207:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1208:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1209:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1210:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1211:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
1212:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // divide sum of fluxes by zero
GAS LISTING /tmp/cc2K2nX4.s 			page 333


1213:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //cell_flux.div_volume(Mesh.get_cell_volume(i),globals.small_number);
1214:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1215:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //
1216:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1217:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // account for rounding errors
1218:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //truncate_flux(cell_flux);
1219:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //(cell_flux);
1220:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1221:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // store RK fluxes
1222:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if (rk == 0){
 11147              		.loc 9 1222 0
 11148 7c64 83BD90EF 		cmpl	$0, -4208(%rbp)
 11148      FFFF00
 11149 7c6b 0F850502 		jne	.L855
 11149      0000
1223:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK = cell_flux;
 11150              		.loc 9 1223 0
 11151 7c71 488D95E0 		leaq	-3360(%rbp), %rdx
 11151      F2FFFF
 11152 7c78 488D8550 		leaq	-3504(%rbp), %rax
 11152      F2FFFF
 11153 7c7f 4889D6   		movq	%rdx, %rsi
 11154 7c82 4889C7   		movq	%rax, %rdi
 11155 7c85 E8000000 		call	_ZN8flux_varaSERKS_
 11155      00
1224:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         if( mg > 0){
 11156              		.loc 9 1224 0
 11157 7c8a 8B4528   		movl	40(%rbp), %eax
 11158 7c8d 85C0     		testl	%eax, %eax
 11159 7c8f 0F8E2901 		jle	.L856
 11159      0000
1225:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             if(t == 0){
 11160              		.loc 9 1225 0
 11161 7c95 83BD8CEF 		cmpl	$0, -4212(%rbp)
 11161      FFFF00
 11162 7c9c 0F85A301 		jne	.L857
 11162      0000
1226:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 mg_forcing_term[i].P =  -2 *residual.get_rho(i) + cell_flux.P;
 11163              		.loc 9 1226 0
 11164 7ca2 8B8594EF 		movl	-4204(%rbp), %eax
 11164      FFFF
 11165 7ca8 4863D0   		movslq	%eax, %rdx
 11166 7cab 4889D0   		movq	%rdx, %rax
 11167 7cae 48C1E002 		salq	$2, %rax
 11168 7cb2 4801D0   		addq	%rdx, %rax
 11169 7cb5 48C1E003 		salq	$3, %rax
 11170 7cb9 4889C2   		movq	%rax, %rdx
 11171 7cbc 488B85F8 		movq	-4104(%rbp), %rax
 11171      EFFFFF
 11172 7cc3 488D1C02 		leaq	(%rdx,%rax), %rbx
 11173 7cc7 8B9594EF 		movl	-4204(%rbp), %edx
 11173      FFFF
 11174 7ccd 488B8530 		movq	-4304(%rbp), %rax
 11174      EFFFFF
 11175 7cd4 89D6     		movl	%edx, %esi
 11176 7cd6 4889C7   		movq	%rax, %rdi
 11177 7cd9 E8000000 		call	_ZN8Solution7get_rhoEi
GAS LISTING /tmp/cc2K2nX4.s 			page 334


 11177      00
 11178 7cde 660F28C8 		movapd	%xmm0, %xmm1
 11179 7ce2 F20F1005 		movsd	.LC19(%rip), %xmm0
 11179      00000000 
 11180 7cea F20F59C1 		mulsd	%xmm1, %xmm0
 11181 7cee F20F108D 		movsd	-3352(%rbp), %xmm1
 11181      E8F2FFFF 
 11182 7cf6 F20F58C1 		addsd	%xmm1, %xmm0
 11183 7cfa F20F1143 		movsd	%xmm0, 8(%rbx)
 11183      08
1227:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 mg_forcing_term[i].momentum_x = -2* residual.get_u(i) + cell_flux.m
 11184              		.loc 9 1227 0
 11185 7cff 8B8594EF 		movl	-4204(%rbp), %eax
 11185      FFFF
 11186 7d05 4863D0   		movslq	%eax, %rdx
 11187 7d08 4889D0   		movq	%rdx, %rax
 11188 7d0b 48C1E002 		salq	$2, %rax
 11189 7d0f 4801D0   		addq	%rdx, %rax
 11190 7d12 48C1E003 		salq	$3, %rax
 11191 7d16 4889C2   		movq	%rax, %rdx
 11192 7d19 488B85F8 		movq	-4104(%rbp), %rax
 11192      EFFFFF
 11193 7d20 488D1C02 		leaq	(%rdx,%rax), %rbx
 11194 7d24 8B9594EF 		movl	-4204(%rbp), %edx
 11194      FFFF
 11195 7d2a 488B8530 		movq	-4304(%rbp), %rax
 11195      EFFFFF
 11196 7d31 89D6     		movl	%edx, %esi
 11197 7d33 4889C7   		movq	%rax, %rdi
 11198 7d36 E8000000 		call	_ZN8Solution5get_uEi
 11198      00
 11199 7d3b 660F28C8 		movapd	%xmm0, %xmm1
 11200 7d3f F20F1005 		movsd	.LC19(%rip), %xmm0
 11200      00000000 
 11201 7d47 F20F59C1 		mulsd	%xmm1, %xmm0
 11202 7d4b F20F108D 		movsd	-3344(%rbp), %xmm1
 11202      F0F2FFFF 
 11203 7d53 F20F58C1 		addsd	%xmm1, %xmm0
 11204 7d57 F20F1143 		movsd	%xmm0, 16(%rbx)
 11204      10
1228:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 mg_forcing_term[i].momentum_y =  -2 *residual.get_v(i) + cell_flux.
 11205              		.loc 9 1228 0
 11206 7d5c 8B8594EF 		movl	-4204(%rbp), %eax
 11206      FFFF
 11207 7d62 4863D0   		movslq	%eax, %rdx
 11208 7d65 4889D0   		movq	%rdx, %rax
 11209 7d68 48C1E002 		salq	$2, %rax
 11210 7d6c 4801D0   		addq	%rdx, %rax
 11211 7d6f 48C1E003 		salq	$3, %rax
 11212 7d73 4889C2   		movq	%rax, %rdx
 11213 7d76 488B85F8 		movq	-4104(%rbp), %rax
 11213      EFFFFF
 11214 7d7d 488D1C02 		leaq	(%rdx,%rax), %rbx
 11215 7d81 8B9594EF 		movl	-4204(%rbp), %edx
 11215      FFFF
 11216 7d87 488B8530 		movq	-4304(%rbp), %rax
 11216      EFFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 335


 11217 7d8e 89D6     		movl	%edx, %esi
 11218 7d90 4889C7   		movq	%rax, %rdi
 11219 7d93 E8000000 		call	_ZN8Solution5get_vEi
 11219      00
 11220 7d98 660F28C8 		movapd	%xmm0, %xmm1
 11221 7d9c F20F1005 		movsd	.LC19(%rip), %xmm0
 11221      00000000 
 11222 7da4 F20F59C1 		mulsd	%xmm1, %xmm0
 11223 7da8 F20F108D 		movsd	-3336(%rbp), %xmm1
 11223      F8F2FFFF 
 11224 7db0 F20F58C1 		addsd	%xmm1, %xmm0
 11225 7db4 F20F1143 		movsd	%xmm0, 24(%rbx)
 11225      18
 11226 7db9 E9870000 		jmp	.L857
 11226      00
 11227              	.L856:
1229:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             }
1230:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             //add momentum z later
1231:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1232:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1233:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }else{
1234:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             mg_forcing_term[i].P = 0;
 11228              		.loc 9 1234 0
 11229 7dbe 8B8594EF 		movl	-4204(%rbp), %eax
 11229      FFFF
 11230 7dc4 4863D0   		movslq	%eax, %rdx
 11231 7dc7 4889D0   		movq	%rdx, %rax
 11232 7dca 48C1E002 		salq	$2, %rax
 11233 7dce 4801D0   		addq	%rdx, %rax
 11234 7dd1 48C1E003 		salq	$3, %rax
 11235 7dd5 4889C2   		movq	%rax, %rdx
 11236 7dd8 488B85F8 		movq	-4104(%rbp), %rax
 11236      EFFFFF
 11237 7ddf 4801D0   		addq	%rdx, %rax
 11238 7de2 660FEFC0 		pxor	%xmm0, %xmm0
 11239 7de6 F20F1140 		movsd	%xmm0, 8(%rax)
 11239      08
1235:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             mg_forcing_term[i].momentum_x = 0;
 11240              		.loc 9 1235 0
 11241 7deb 8B8594EF 		movl	-4204(%rbp), %eax
 11241      FFFF
 11242 7df1 4863D0   		movslq	%eax, %rdx
 11243 7df4 4889D0   		movq	%rdx, %rax
 11244 7df7 48C1E002 		salq	$2, %rax
 11245 7dfb 4801D0   		addq	%rdx, %rax
 11246 7dfe 48C1E003 		salq	$3, %rax
 11247 7e02 4889C2   		movq	%rax, %rdx
 11248 7e05 488B85F8 		movq	-4104(%rbp), %rax
 11248      EFFFFF
 11249 7e0c 4801D0   		addq	%rdx, %rax
 11250 7e0f 660FEFC0 		pxor	%xmm0, %xmm0
 11251 7e13 F20F1140 		movsd	%xmm0, 16(%rax)
 11251      10
1236:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             mg_forcing_term[i].momentum_y = 0;
 11252              		.loc 9 1236 0
 11253 7e18 8B8594EF 		movl	-4204(%rbp), %eax
 11253      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 336


 11254 7e1e 4863D0   		movslq	%eax, %rdx
 11255 7e21 4889D0   		movq	%rdx, %rax
 11256 7e24 48C1E002 		salq	$2, %rax
 11257 7e28 4801D0   		addq	%rdx, %rax
 11258 7e2b 48C1E003 		salq	$3, %rax
 11259 7e2f 4889C2   		movq	%rax, %rdx
 11260 7e32 488B85F8 		movq	-4104(%rbp), %rax
 11260      EFFFFF
 11261 7e39 4801D0   		addq	%rdx, %rax
 11262 7e3c 660FEFC0 		pxor	%xmm0, %xmm0
 11263 7e40 F20F1140 		movsd	%xmm0, 24(%rax)
 11263      18
 11264              	.L857:
1237:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1238:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
1239:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         // timestep for calculating second step
1240:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_delta_t = delta_t/2;
 11265              		.loc 9 1240 0
 11266 7e45 F20F1085 		movsd	-4112(%rbp), %xmm0
 11266      F0EFFFFF 
 11267 7e4d F20F100D 		movsd	.LC11(%rip), %xmm1
 11267      00000000 
 11268 7e55 F20F5EC1 		divsd	%xmm1, %xmm0
 11269 7e59 F20F1185 		movsd	%xmm0, -4168(%rbp)
 11269      B8EFFFFF 
1241:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_weight = 1.0/6.0;
 11270              		.loc 9 1241 0
 11271 7e61 F20F1005 		movsd	.LC20(%rip), %xmm0
 11271      00000000 
 11272 7e69 F20F1185 		movsd	%xmm0, -4160(%rbp)
 11272      C0EFFFFF 
 11273 7e71 E9AD0000 		jmp	.L858
 11273      00
 11274              	.L855:
1242:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1243:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }else if (rk == 1){
 11275              		.loc 9 1243 0
 11276 7e76 83BD90EF 		cmpl	$1, -4208(%rbp)
 11276      FFFF01
 11277 7e7d 7547     		jne	.L859
1244:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK = cell_flux;
 11278              		.loc 9 1244 0
 11279 7e7f 488D95E0 		leaq	-3360(%rbp), %rdx
 11279      F2FFFF
 11280 7e86 488D8550 		leaq	-3504(%rbp), %rax
 11280      F2FFFF
 11281 7e8d 4889D6   		movq	%rdx, %rsi
 11282 7e90 4889C7   		movq	%rax, %rdi
 11283 7e93 E8000000 		call	_ZN8flux_varaSERKS_
 11283      00
1245:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_delta_t = delta_t/2;
 11284              		.loc 9 1245 0
 11285 7e98 F20F1085 		movsd	-4112(%rbp), %xmm0
 11285      F0EFFFFF 
 11286 7ea0 F20F100D 		movsd	.LC11(%rip), %xmm1
 11286      00000000 
 11287 7ea8 F20F5EC1 		divsd	%xmm1, %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 337


 11288 7eac F20F1185 		movsd	%xmm0, -4168(%rbp)
 11288      B8EFFFFF 
1246:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_weight = 2.0/6.0;
 11289              		.loc 9 1246 0
 11290 7eb4 F20F1005 		movsd	.LC21(%rip), %xmm0
 11290      00000000 
 11291 7ebc F20F1185 		movsd	%xmm0, -4160(%rbp)
 11291      C0EFFFFF 
 11292 7ec4 EB5D     		jmp	.L858
 11293              	.L859:
1247:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1248:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1249:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }else if (rk == 2){
 11294              		.loc 9 1249 0
 11295 7ec6 83BD90EF 		cmpl	$2, -4208(%rbp)
 11295      FFFF02
 11296 7ecd 753B     		jne	.L860
1250:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK = cell_flux;
 11297              		.loc 9 1250 0
 11298 7ecf 488D95E0 		leaq	-3360(%rbp), %rdx
 11298      F2FFFF
 11299 7ed6 488D8550 		leaq	-3504(%rbp), %rax
 11299      F2FFFF
 11300 7edd 4889D6   		movq	%rdx, %rsi
 11301 7ee0 4889C7   		movq	%rax, %rdi
 11302 7ee3 E8000000 		call	_ZN8flux_varaSERKS_
 11302      00
1251:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_delta_t = delta_t;
 11303              		.loc 9 1251 0
 11304 7ee8 F20F1085 		movsd	-4112(%rbp), %xmm0
 11304      F0EFFFFF 
 11305 7ef0 F20F1185 		movsd	%xmm0, -4168(%rbp)
 11305      B8EFFFFF 
1252:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK_weight = 2.0/6.0;
 11306              		.loc 9 1252 0
 11307 7ef8 F20F1005 		movsd	.LC21(%rip), %xmm0
 11307      00000000 
 11308 7f00 F20F1185 		movsd	%xmm0, -4160(%rbp)
 11308      C0EFFFFF 
 11309 7f08 EB19     		jmp	.L858
 11310              	.L860:
1253:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }else{
1254:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         RK = cell_flux;
 11311              		.loc 9 1254 0
 11312 7f0a 488D95E0 		leaq	-3360(%rbp), %rdx
 11312      F2FFFF
 11313 7f11 488D8550 		leaq	-3504(%rbp), %rax
 11313      F2FFFF
 11314 7f18 4889D6   		movq	%rdx, %rsi
 11315 7f1b 4889C7   		movq	%rax, %rdi
 11316 7f1e E8000000 		call	_ZN8flux_varaSERKS_
 11316      00
 11317              	.L858:
1255:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
1256:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     double f1,f2,f3,temp_force, R1,R2,R3;
1257:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1258:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // old forward euler method adapted to RK4
GAS LISTING /tmp/cc2K2nX4.s 			page 338


1259:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1260:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     temp_force = source.get_force(i)* Mesh.get_cell_volume(i) * temp_soln.get_rho(i
 11318              		.loc 9 1260 0
 11319 7f23 8B9594EF 		movl	-4204(%rbp), %edx
 11319      FFFF
 11320 7f29 488B8558 		movq	-4264(%rbp), %rax
 11320      EFFFFF
 11321 7f30 89D6     		movl	%edx, %esi
 11322 7f32 4889C7   		movq	%rax, %rdi
 11323 7f35 E8000000 		call	_ZN15external_forces9get_forceEi
 11323      00
 11324 7f3a F20F1185 		movsd	%xmm0, -4312(%rbp)
 11324      28EFFFFF 
 11325 7f42 8B9594EF 		movl	-4204(%rbp), %edx
 11325      FFFF
 11326 7f48 488B8570 		movq	-4240(%rbp), %rax
 11326      EFFFFF
 11327 7f4f 89D6     		movl	%edx, %esi
 11328 7f51 4889C7   		movq	%rax, %rdi
 11329 7f54 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11329      00
 11330 7f59 660F28E8 		movapd	%xmm0, %xmm5
 11331 7f5d F20F59AD 		mulsd	-4312(%rbp), %xmm5
 11331      28EFFFFF 
 11332 7f65 F20F11AD 		movsd	%xmm5, -4312(%rbp)
 11332      28EFFFFF 
 11333 7f6d 8B9594EF 		movl	-4204(%rbp), %edx
 11333      FFFF
 11334 7f73 488D8540 		leaq	-3264(%rbp), %rax
 11334      F3FFFF
 11335 7f7a 89D6     		movl	%edx, %esi
 11336 7f7c 4889C7   		movq	%rax, %rdi
 11337 7f7f E8000000 		call	_ZN8Solution7get_rhoEi
 11337      00
 11338 7f84 F20F5985 		mulsd	-4312(%rbp), %xmm0
 11338      28EFFFFF 
 11339 7f8c F20F1185 		movsd	%xmm0, -4056(%rbp)
 11339      28F0FFFF 
1261:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // try removing
1262:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f1= soln_t0.get_rho(i) + RK_delta_t * (RK.P/Mesh.get_cell_volume(i) + mg_forcin
 11340              		.loc 9 1262 0
 11341 7f94 8B9594EF 		movl	-4204(%rbp), %edx
 11341      FFFF
 11342 7f9a 488D8590 		leaq	-3184(%rbp), %rax
 11342      F3FFFF
 11343 7fa1 89D6     		movl	%edx, %esi
 11344 7fa3 4889C7   		movq	%rax, %rdi
 11345 7fa6 E8000000 		call	_ZN8Solution7get_rhoEi
 11345      00
 11346 7fab F20F1185 		movsd	%xmm0, -4312(%rbp)
 11346      28EFFFFF 
 11347 7fb3 F20F10B5 		movsd	-3496(%rbp), %xmm6
 11347      58F2FFFF 
 11348 7fbb F20F11B5 		movsd	%xmm6, -4320(%rbp)
 11348      20EFFFFF 
 11349 7fc3 8B9594EF 		movl	-4204(%rbp), %edx
 11349      FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 339


 11350 7fc9 488B8570 		movq	-4240(%rbp), %rax
 11350      EFFFFF
 11351 7fd0 89D6     		movl	%edx, %esi
 11352 7fd2 4889C7   		movq	%rax, %rdi
 11353 7fd5 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11353      00
 11354 7fda F20F10B5 		movsd	-4320(%rbp), %xmm6
 11354      20EFFFFF 
 11355 7fe2 F20F5EF0 		divsd	%xmm0, %xmm6
 11356 7fe6 660F28C6 		movapd	%xmm6, %xmm0
 11357 7fea 8B8594EF 		movl	-4204(%rbp), %eax
 11357      FFFF
 11358 7ff0 4863D0   		movslq	%eax, %rdx
 11359 7ff3 4889D0   		movq	%rdx, %rax
 11360 7ff6 48C1E002 		salq	$2, %rax
 11361 7ffa 4801D0   		addq	%rdx, %rax
 11362 7ffd 48C1E003 		salq	$3, %rax
 11363 8001 4889C2   		movq	%rax, %rdx
 11364 8004 488B85F8 		movq	-4104(%rbp), %rax
 11364      EFFFFF
 11365 800b 4801D0   		addq	%rdx, %rax
 11366 800e F20F1048 		movsd	8(%rax), %xmm1
 11366      08
 11367 8013 F20F58C1 		addsd	%xmm1, %xmm0
 11368 8017 F20F5985 		mulsd	-4168(%rbp), %xmm0
 11368      B8EFFFFF 
 11369 801f F20F5885 		addsd	-4312(%rbp), %xmm0
 11369      28EFFFFF 
 11370 8027 F20F1185 		movsd	%xmm0, -4136(%rbp)
 11370      D8EFFFFF 
1263:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                    f2 =  soln_t0.get_average_rho()* soln_t0.get_u(i) + (RK_delta_t *
1264:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            (RK.momentum_x + mg_forcing_term[i].momentum_x +
1265:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                            source.get_force(i)* Mesh.get_cell_volume(i) * temp_soln.get_average_
1266:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                    f3 =  soln_t0.get_average_rho() * soln_t0.get_v(i) + (RK_delta_t *
1267:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                                (RK.momentum_y + mg_forcing_term[i].momentum_y)) 
1268:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1269:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f2 =  soln_t0.get_rho(i)* soln_t0.get_u(i) + (RK_delta_t *
 11371              		.loc 9 1269 0
 11372 802f 8B9594EF 		movl	-4204(%rbp), %edx
 11372      FFFF
 11373 8035 488D8590 		leaq	-3184(%rbp), %rax
 11373      F3FFFF
 11374 803c 89D6     		movl	%edx, %esi
 11375 803e 4889C7   		movq	%rax, %rdi
 11376 8041 E8000000 		call	_ZN8Solution7get_rhoEi
 11376      00
 11377 8046 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11377      28EFFFFF 
 11378 804e 8B9594EF 		movl	-4204(%rbp), %edx
 11378      FFFF
 11379 8054 488D8590 		leaq	-3184(%rbp), %rax
 11379      F3FFFF
 11380 805b 89D6     		movl	%edx, %esi
 11381 805d 4889C7   		movq	%rax, %rdi
 11382 8060 E8000000 		call	_ZN8Solution5get_uEi
 11382      00
 11383 8065 660F28F8 		movapd	%xmm0, %xmm7
GAS LISTING /tmp/cc2K2nX4.s 			page 340


 11384 8069 F20F59BD 		mulsd	-4312(%rbp), %xmm7
 11384      28EFFFFF 
 11385 8071 F20F11BD 		movsd	%xmm7, -4312(%rbp)
 11385      28EFFFFF 
1270:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             (RK.momentum_x/Mesh.get_cell_volume(i) + mg_forcing_term[i].momentum_x 
 11386              		.loc 9 1270 0
 11387 8079 F20F10AD 		movsd	-3488(%rbp), %xmm5
 11387      60F2FFFF 
 11388 8081 F20F11AD 		movsd	%xmm5, -4320(%rbp)
 11388      20EFFFFF 
 11389 8089 8B9594EF 		movl	-4204(%rbp), %edx
 11389      FFFF
 11390 808f 488B8570 		movq	-4240(%rbp), %rax
 11390      EFFFFF
 11391 8096 89D6     		movl	%edx, %esi
 11392 8098 4889C7   		movq	%rax, %rdi
 11393 809b E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11393      00
 11394 80a0 F20F10AD 		movsd	-4320(%rbp), %xmm5
 11394      20EFFFFF 
 11395 80a8 F20F5EE8 		divsd	%xmm0, %xmm5
 11396 80ac 660F28C5 		movapd	%xmm5, %xmm0
 11397 80b0 8B8594EF 		movl	-4204(%rbp), %eax
 11397      FFFF
 11398 80b6 4863D0   		movslq	%eax, %rdx
 11399 80b9 4889D0   		movq	%rdx, %rax
 11400 80bc 48C1E002 		salq	$2, %rax
 11401 80c0 4801D0   		addq	%rdx, %rax
 11402 80c3 48C1E003 		salq	$3, %rax
 11403 80c7 4889C2   		movq	%rax, %rdx
 11404 80ca 488B85F8 		movq	-4104(%rbp), %rax
 11404      EFFFFF
 11405 80d1 4801D0   		addq	%rdx, %rax
 11406 80d4 F20F1048 		movsd	16(%rax), %xmm1
 11406      10
 11407 80d9 F20F58C1 		addsd	%xmm1, %xmm0
 11408 80dd F20F1185 		movsd	%xmm0, -4320(%rbp)
 11408      20EFFFFF 
1271:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             source.get_force(i)* Mesh.get_cell_volume(i) * temp_soln.get_rho(i)));
 11409              		.loc 9 1271 0
 11410 80e5 8B9594EF 		movl	-4204(%rbp), %edx
 11410      FFFF
 11411 80eb 488B8558 		movq	-4264(%rbp), %rax
 11411      EFFFFF
 11412 80f2 89D6     		movl	%edx, %esi
 11413 80f4 4889C7   		movq	%rax, %rdi
 11414 80f7 E8000000 		call	_ZN15external_forces9get_forceEi
 11414      00
 11415 80fc F20F1185 		movsd	%xmm0, -4328(%rbp)
 11415      18EFFFFF 
 11416 8104 8B9594EF 		movl	-4204(%rbp), %edx
 11416      FFFF
 11417 810a 488B8570 		movq	-4240(%rbp), %rax
 11417      EFFFFF
 11418 8111 89D6     		movl	%edx, %esi
 11419 8113 4889C7   		movq	%rax, %rdi
 11420 8116 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
GAS LISTING /tmp/cc2K2nX4.s 			page 341


 11420      00
 11421 811b 660F28E0 		movapd	%xmm0, %xmm4
 11422 811f F20F59A5 		mulsd	-4328(%rbp), %xmm4
 11422      18EFFFFF 
 11423 8127 F20F11A5 		movsd	%xmm4, -4328(%rbp)
 11423      18EFFFFF 
 11424 812f 8B9594EF 		movl	-4204(%rbp), %edx
 11424      FFFF
 11425 8135 488D8540 		leaq	-3264(%rbp), %rax
 11425      F3FFFF
 11426 813c 89D6     		movl	%edx, %esi
 11427 813e 4889C7   		movq	%rax, %rdi
 11428 8141 E8000000 		call	_ZN8Solution7get_rhoEi
 11428      00
 11429 8146 F20F5985 		mulsd	-4328(%rbp), %xmm0
 11429      18EFFFFF 
1270:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             (RK.momentum_x/Mesh.get_cell_volume(i) + mg_forcing_term[i].momentum_x 
 11430              		.loc 9 1270 0
 11431 814e F20F5885 		addsd	-4320(%rbp), %xmm0
 11431      20EFFFFF 
1269:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             (RK.momentum_x/Mesh.get_cell_volume(i) + mg_forcing_term[i].momentum_x 
 11432              		.loc 9 1269 0
 11433 8156 F20F5985 		mulsd	-4168(%rbp), %xmm0
 11433      B8EFFFFF 
 11434              		.loc 9 1271 0
 11435 815e F20F5885 		addsd	-4312(%rbp), %xmm0
 11435      28EFFFFF 
 11436 8166 F20F1185 		movsd	%xmm0, -4128(%rbp)
 11436      E0EFFFFF 
1272:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 =  soln_t0.get_rho(i) * soln_t0.get_v(i) + (RK_delta_t *
 11437              		.loc 9 1272 0
 11438 816e 8B9594EF 		movl	-4204(%rbp), %edx
 11438      FFFF
 11439 8174 488D8590 		leaq	-3184(%rbp), %rax
 11439      F3FFFF
 11440 817b 89D6     		movl	%edx, %esi
 11441 817d 4889C7   		movq	%rax, %rdi
 11442 8180 E8000000 		call	_ZN8Solution7get_rhoEi
 11442      00
 11443 8185 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11443      28EFFFFF 
 11444 818d 8B9594EF 		movl	-4204(%rbp), %edx
 11444      FFFF
 11445 8193 488D8590 		leaq	-3184(%rbp), %rax
 11445      F3FFFF
 11446 819a 89D6     		movl	%edx, %esi
 11447 819c 4889C7   		movq	%rax, %rdi
 11448 819f E8000000 		call	_ZN8Solution5get_vEi
 11448      00
 11449 81a4 660F28F8 		movapd	%xmm0, %xmm7
 11450 81a8 F20F59BD 		mulsd	-4312(%rbp), %xmm7
 11450      28EFFFFF 
 11451 81b0 F20F11BD 		movsd	%xmm7, -4312(%rbp)
 11451      28EFFFFF 
1273:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                                 (RK.momentum_y/Mesh.get_cell_volume(i) + mg_forcing
 11452              		.loc 9 1273 0
 11453 81b8 F20F10B5 		movsd	-3480(%rbp), %xmm6
GAS LISTING /tmp/cc2K2nX4.s 			page 342


 11453      68F2FFFF 
 11454 81c0 F20F11B5 		movsd	%xmm6, -4320(%rbp)
 11454      20EFFFFF 
 11455 81c8 8B9594EF 		movl	-4204(%rbp), %edx
 11455      FFFF
 11456 81ce 488B8570 		movq	-4240(%rbp), %rax
 11456      EFFFFF
 11457 81d5 89D6     		movl	%edx, %esi
 11458 81d7 4889C7   		movq	%rax, %rdi
 11459 81da E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11459      00
 11460 81df F20F10B5 		movsd	-4320(%rbp), %xmm6
 11460      20EFFFFF 
 11461 81e7 F20F5EF0 		divsd	%xmm0, %xmm6
 11462 81eb 660F28C6 		movapd	%xmm6, %xmm0
 11463 81ef 8B8594EF 		movl	-4204(%rbp), %eax
 11463      FFFF
 11464 81f5 4863D0   		movslq	%eax, %rdx
 11465 81f8 4889D0   		movq	%rdx, %rax
 11466 81fb 48C1E002 		salq	$2, %rax
 11467 81ff 4801D0   		addq	%rdx, %rax
 11468 8202 48C1E003 		salq	$3, %rax
 11469 8206 4889C2   		movq	%rax, %rdx
 11470 8209 488B85F8 		movq	-4104(%rbp), %rax
 11470      EFFFFF
 11471 8210 4801D0   		addq	%rdx, %rax
 11472 8213 F20F1048 		movsd	24(%rax), %xmm1
 11472      18
 11473 8218 F20F58C1 		addsd	%xmm1, %xmm0
1272:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 =  soln_t0.get_rho(i) * soln_t0.get_v(i) + (RK_delta_t *
 11474              		.loc 9 1272 0
 11475 821c F20F5985 		mulsd	-4168(%rbp), %xmm0
 11475      B8EFFFFF 
 11476              		.loc 9 1273 0
 11477 8224 F20F5885 		addsd	-4312(%rbp), %xmm0
 11477      28EFFFFF 
 11478 822c F20F1185 		movsd	%xmm0, -4120(%rbp)
 11478      E8EFFFFF 
1274:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1275:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     //f3 = 0.0;
1276:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     switch (rk){
 11479              		.loc 9 1276 0
 11480 8234 8B8590EF 		movl	-4208(%rbp), %eax
 11480      FFFF
 11481 823a 85C0     		testl	%eax, %eax
 11482 823c 7416     		je	.L862
 11483 823e 85C0     		testl	%eax, %eax
 11484 8240 0F880C02 		js	.L861
 11484      0000
 11485 8246 83F803   		cmpl	$3, %eax
 11486 8249 0F8F0302 		jg	.L861
 11486      0000
 11487 824f E9010100 		jmp	.L1136
 11487      00
 11488              	.L862:
1277:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1278:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         case 0:
GAS LISTING /tmp/cc2K2nX4.s 			page 343


1279:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.set_rho(i,((RK.P + mg_forcing_term[i].P)*(RK_weight)));
 11489              		.loc 9 1279 0
 11490 8254 F20F108D 		movsd	-3496(%rbp), %xmm1
 11490      58F2FFFF 
 11491 825c 8B8594EF 		movl	-4204(%rbp), %eax
 11491      FFFF
 11492 8262 4863D0   		movslq	%eax, %rdx
 11493 8265 4889D0   		movq	%rdx, %rax
 11494 8268 48C1E002 		salq	$2, %rax
 11495 826c 4801D0   		addq	%rdx, %rax
 11496 826f 48C1E003 		salq	$3, %rax
 11497 8273 4889C2   		movq	%rax, %rdx
 11498 8276 488B85F8 		movq	-4104(%rbp), %rax
 11498      EFFFFF
 11499 827d 4801D0   		addq	%rdx, %rax
 11500 8280 F20F1040 		movsd	8(%rax), %xmm0
 11500      08
 11501 8285 F20F58C1 		addsd	%xmm1, %xmm0
 11502 8289 F20F5985 		mulsd	-4160(%rbp), %xmm0
 11502      C0EFFFFF 
 11503 8291 8B9594EF 		movl	-4204(%rbp), %edx
 11503      FFFF
 11504 8297 488B8530 		movq	-4304(%rbp), %rax
 11504      EFFFFF
 11505 829e 89D6     		movl	%edx, %esi
 11506 82a0 4889C7   		movq	%rax, %rdi
 11507 82a3 E8000000 		call	_ZN8Solution7set_rhoEid
 11507      00
1280:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.set_u(i,((RK.momentum_x + mg_forcing_term[i].momentum_x)*RK_we
 11508              		.loc 9 1280 0
 11509 82a8 F20F108D 		movsd	-3488(%rbp), %xmm1
 11509      60F2FFFF 
 11510 82b0 8B8594EF 		movl	-4204(%rbp), %eax
 11510      FFFF
 11511 82b6 4863D0   		movslq	%eax, %rdx
 11512 82b9 4889D0   		movq	%rdx, %rax
 11513 82bc 48C1E002 		salq	$2, %rax
 11514 82c0 4801D0   		addq	%rdx, %rax
 11515 82c3 48C1E003 		salq	$3, %rax
 11516 82c7 4889C2   		movq	%rax, %rdx
 11517 82ca 488B85F8 		movq	-4104(%rbp), %rax
 11517      EFFFFF
 11518 82d1 4801D0   		addq	%rdx, %rax
 11519 82d4 F20F1040 		movsd	16(%rax), %xmm0
 11519      10
 11520 82d9 F20F58C1 		addsd	%xmm1, %xmm0
 11521 82dd F20F5985 		mulsd	-4160(%rbp), %xmm0
 11521      C0EFFFFF 
 11522 82e5 8B9594EF 		movl	-4204(%rbp), %edx
 11522      FFFF
 11523 82eb 488B8530 		movq	-4304(%rbp), %rax
 11523      EFFFFF
 11524 82f2 89D6     		movl	%edx, %esi
 11525 82f4 4889C7   		movq	%rax, %rdi
 11526 82f7 E8000000 		call	_ZN8Solution5set_uEid
 11526      00
1281:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.set_v(i,((RK.momentum_y + mg_forcing_term[i].momentum_z)*RK_we
GAS LISTING /tmp/cc2K2nX4.s 			page 344


 11527              		.loc 9 1281 0
 11528 82fc F20F108D 		movsd	-3480(%rbp), %xmm1
 11528      68F2FFFF 
 11529 8304 8B8594EF 		movl	-4204(%rbp), %eax
 11529      FFFF
 11530 830a 4863D0   		movslq	%eax, %rdx
 11531 830d 4889D0   		movq	%rdx, %rax
 11532 8310 48C1E002 		salq	$2, %rax
 11533 8314 4801D0   		addq	%rdx, %rax
 11534 8317 48C1E003 		salq	$3, %rax
 11535 831b 4889C2   		movq	%rax, %rdx
 11536 831e 488B85F8 		movq	-4104(%rbp), %rax
 11536      EFFFFF
 11537 8325 4801D0   		addq	%rdx, %rax
 11538 8328 F20F1040 		movsd	32(%rax), %xmm0
 11538      20
 11539 832d F20F58C1 		addsd	%xmm1, %xmm0
 11540 8331 F20F5985 		mulsd	-4160(%rbp), %xmm0
 11540      C0EFFFFF 
 11541 8339 8B9594EF 		movl	-4204(%rbp), %edx
 11541      FFFF
 11542 833f 488B8530 		movq	-4304(%rbp), %rax
 11542      EFFFFF
 11543 8346 89D6     		movl	%edx, %esi
 11544 8348 4889C7   		movq	%rax, %rdi
 11545 834b E8000000 		call	_ZN8Solution5set_vEid
 11545      00
1282:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1283:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             break;
 11546              		.loc 9 1283 0
 11547 8350 E9FD0000 		jmp	.L861
 11547      00
 11548              	.L1136:
1284:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1285:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         case 1:
1286:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         case 2:
1287:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         case 3:
1288:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.add_rho(i,((RK.P + mg_forcing_term[i].P)*(RK_weight)));
 11549              		.loc 9 1288 0
 11550 8355 F20F108D 		movsd	-3496(%rbp), %xmm1
 11550      58F2FFFF 
 11551 835d 8B8594EF 		movl	-4204(%rbp), %eax
 11551      FFFF
 11552 8363 4863D0   		movslq	%eax, %rdx
 11553 8366 4889D0   		movq	%rdx, %rax
 11554 8369 48C1E002 		salq	$2, %rax
 11555 836d 4801D0   		addq	%rdx, %rax
 11556 8370 48C1E003 		salq	$3, %rax
 11557 8374 4889C2   		movq	%rax, %rdx
 11558 8377 488B85F8 		movq	-4104(%rbp), %rax
 11558      EFFFFF
 11559 837e 4801D0   		addq	%rdx, %rax
 11560 8381 F20F1040 		movsd	8(%rax), %xmm0
 11560      08
 11561 8386 F20F58C1 		addsd	%xmm1, %xmm0
 11562 838a F20F5985 		mulsd	-4160(%rbp), %xmm0
 11562      C0EFFFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 345


 11563 8392 8B9594EF 		movl	-4204(%rbp), %edx
 11563      FFFF
 11564 8398 488B8530 		movq	-4304(%rbp), %rax
 11564      EFFFFF
 11565 839f 89D6     		movl	%edx, %esi
 11566 83a1 4889C7   		movq	%rax, %rdi
 11567 83a4 E8000000 		call	_ZN8Solution7add_rhoEid
 11567      00
1289:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.add_u(i,((RK.momentum_x + mg_forcing_term[i].momentum_x)*RK_we
 11568              		.loc 9 1289 0
 11569 83a9 F20F108D 		movsd	-3488(%rbp), %xmm1
 11569      60F2FFFF 
 11570 83b1 8B8594EF 		movl	-4204(%rbp), %eax
 11570      FFFF
 11571 83b7 4863D0   		movslq	%eax, %rdx
 11572 83ba 4889D0   		movq	%rdx, %rax
 11573 83bd 48C1E002 		salq	$2, %rax
 11574 83c1 4801D0   		addq	%rdx, %rax
 11575 83c4 48C1E003 		salq	$3, %rax
 11576 83c8 4889C2   		movq	%rax, %rdx
 11577 83cb 488B85F8 		movq	-4104(%rbp), %rax
 11577      EFFFFF
 11578 83d2 4801D0   		addq	%rdx, %rax
 11579 83d5 F20F1040 		movsd	16(%rax), %xmm0
 11579      10
 11580 83da F20F58C1 		addsd	%xmm1, %xmm0
 11581 83de F20F5985 		mulsd	-4160(%rbp), %xmm0
 11581      C0EFFFFF 
 11582 83e6 8B9594EF 		movl	-4204(%rbp), %edx
 11582      FFFF
 11583 83ec 488B8530 		movq	-4304(%rbp), %rax
 11583      EFFFFF
 11584 83f3 89D6     		movl	%edx, %esi
 11585 83f5 4889C7   		movq	%rax, %rdi
 11586 83f8 E8000000 		call	_ZN8Solution5add_uEid
 11586      00
1290:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             residual.add_v(i,((RK.momentum_y + mg_forcing_term[i].momentum_z)*RK_we
 11587              		.loc 9 1290 0
 11588 83fd F20F108D 		movsd	-3480(%rbp), %xmm1
 11588      68F2FFFF 
 11589 8405 8B8594EF 		movl	-4204(%rbp), %eax
 11589      FFFF
 11590 840b 4863D0   		movslq	%eax, %rdx
 11591 840e 4889D0   		movq	%rdx, %rax
 11592 8411 48C1E002 		salq	$2, %rax
 11593 8415 4801D0   		addq	%rdx, %rax
 11594 8418 48C1E003 		salq	$3, %rax
 11595 841c 4889C2   		movq	%rax, %rdx
 11596 841f 488B85F8 		movq	-4104(%rbp), %rax
 11596      EFFFFF
 11597 8426 4801D0   		addq	%rdx, %rax
 11598 8429 F20F1040 		movsd	32(%rax), %xmm0
 11598      20
 11599 842e F20F58C1 		addsd	%xmm1, %xmm0
 11600 8432 F20F5985 		mulsd	-4160(%rbp), %xmm0
 11600      C0EFFFFF 
 11601 843a 8B9594EF 		movl	-4204(%rbp), %edx
GAS LISTING /tmp/cc2K2nX4.s 			page 346


 11601      FFFF
 11602 8440 488B8530 		movq	-4304(%rbp), %rax
 11602      EFFFFF
 11603 8447 89D6     		movl	%edx, %esi
 11604 8449 4889C7   		movq	%rax, %rdi
 11605 844c E8000000 		call	_ZN8Solution5add_vEid
 11605      00
1291:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1292:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1293:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             break;
 11606              		.loc 9 1293 0
 11607 8451 90       		nop
 11608              	.L861:
1294:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1295:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
1296:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1297:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // on final loop get Runge Kutta integration
1298:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( rk == 3){
 11609              		.loc 9 1298 0
 11610 8452 83BD90EF 		cmpl	$3, -4208(%rbp)
 11610      FFFF03
 11611 8459 0F85CD01 		jne	.L864
 11611      0000
1299:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1300:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1301:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         f1 = soln_t0.get_rho(i) + residual.get_rho(i)/Mesh.get_cell_volume(i)* delt
 11612              		.loc 9 1301 0
 11613 845f 8B9594EF 		movl	-4204(%rbp), %edx
 11613      FFFF
 11614 8465 488D8590 		leaq	-3184(%rbp), %rax
 11614      F3FFFF
 11615 846c 89D6     		movl	%edx, %esi
 11616 846e 4889C7   		movq	%rax, %rdi
 11617 8471 E8000000 		call	_ZN8Solution7get_rhoEi
 11617      00
 11618 8476 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11618      28EFFFFF 
 11619 847e 8B9594EF 		movl	-4204(%rbp), %edx
 11619      FFFF
 11620 8484 488B8530 		movq	-4304(%rbp), %rax
 11620      EFFFFF
 11621 848b 89D6     		movl	%edx, %esi
 11622 848d 4889C7   		movq	%rax, %rdi
 11623 8490 E8000000 		call	_ZN8Solution7get_rhoEi
 11623      00
 11624 8495 F20F1185 		movsd	%xmm0, -4320(%rbp)
 11624      20EFFFFF 
 11625 849d 8B9594EF 		movl	-4204(%rbp), %edx
 11625      FFFF
 11626 84a3 488B8570 		movq	-4240(%rbp), %rax
 11626      EFFFFF
 11627 84aa 89D6     		movl	%edx, %esi
 11628 84ac 4889C7   		movq	%rax, %rdi
 11629 84af E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11629      00
 11630 84b4 F20F10AD 		movsd	-4320(%rbp), %xmm5
 11630      20EFFFFF 
GAS LISTING /tmp/cc2K2nX4.s 			page 347


 11631 84bc F20F5EE8 		divsd	%xmm0, %xmm5
 11632 84c0 660F28C5 		movapd	%xmm5, %xmm0
 11633 84c4 F20F5985 		mulsd	-4112(%rbp), %xmm0
 11633      F0EFFFFF 
 11634 84cc F20F5885 		addsd	-4312(%rbp), %xmm0
 11634      28EFFFFF 
 11635 84d4 F20F1185 		movsd	%xmm0, -4136(%rbp)
 11635      D8EFFFFF 
1302:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                        f2 = soln_t0.get_average_rho()* soln_t0.get_u(i)
1303:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                + residual.get_u(i) *  delta_t;
1304:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                        f3 = soln_t0.get_average_rho() * soln_t0.get_v(i)
1305:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                                + residual.get_v(i) * delta_t;
1306:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1307:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                          f2 = soln_t0.get_rho(i)* soln_t0.get_u(i)
 11636              		.loc 9 1307 0
 11637 84dc 8B9594EF 		movl	-4204(%rbp), %edx
 11637      FFFF
 11638 84e2 488D8590 		leaq	-3184(%rbp), %rax
 11638      F3FFFF
 11639 84e9 89D6     		movl	%edx, %esi
 11640 84eb 4889C7   		movq	%rax, %rdi
 11641 84ee E8000000 		call	_ZN8Solution7get_rhoEi
 11641      00
 11642 84f3 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11642      28EFFFFF 
 11643 84fb 8B9594EF 		movl	-4204(%rbp), %edx
 11643      FFFF
 11644 8501 488D8590 		leaq	-3184(%rbp), %rax
 11644      F3FFFF
 11645 8508 89D6     		movl	%edx, %esi
 11646 850a 4889C7   		movq	%rax, %rdi
 11647 850d E8000000 		call	_ZN8Solution5get_uEi
 11647      00
 11648 8512 660F28E0 		movapd	%xmm0, %xmm4
 11649 8516 F20F59A5 		mulsd	-4312(%rbp), %xmm4
 11649      28EFFFFF 
 11650 851e F20F11A5 		movsd	%xmm4, -4312(%rbp)
 11650      28EFFFFF 
1308:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + residual.get_u(i)/Mesh.get_cell_volume(i) *  delta_t;
 11651              		.loc 9 1308 0
 11652 8526 8B9594EF 		movl	-4204(%rbp), %edx
 11652      FFFF
 11653 852c 488B8530 		movq	-4304(%rbp), %rax
 11653      EFFFFF
 11654 8533 89D6     		movl	%edx, %esi
 11655 8535 4889C7   		movq	%rax, %rdi
 11656 8538 E8000000 		call	_ZN8Solution5get_uEi
 11656      00
 11657 853d F20F1185 		movsd	%xmm0, -4320(%rbp)
 11657      20EFFFFF 
 11658 8545 8B9594EF 		movl	-4204(%rbp), %edx
 11658      FFFF
 11659 854b 488B8570 		movq	-4240(%rbp), %rax
 11659      EFFFFF
 11660 8552 89D6     		movl	%edx, %esi
 11661 8554 4889C7   		movq	%rax, %rdi
 11662 8557 E8000000 		call	_ZN4Mesh15get_cell_volumeEi
GAS LISTING /tmp/cc2K2nX4.s 			page 348


 11662      00
 11663 855c F20F10BD 		movsd	-4320(%rbp), %xmm7
 11663      20EFFFFF 
 11664 8564 F20F5EF8 		divsd	%xmm0, %xmm7
 11665 8568 660F28C7 		movapd	%xmm7, %xmm0
 11666 856c F20F5985 		mulsd	-4112(%rbp), %xmm0
 11666      F0EFFFFF 
 11667 8574 F20F5885 		addsd	-4312(%rbp), %xmm0
 11667      28EFFFFF 
 11668 857c F20F1185 		movsd	%xmm0, -4128(%rbp)
 11668      E0EFFFFF 
1309:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         f3 = soln_t0.get_rho(i) * soln_t0.get_v(i)
 11669              		.loc 9 1309 0
 11670 8584 8B9594EF 		movl	-4204(%rbp), %edx
 11670      FFFF
 11671 858a 488D8590 		leaq	-3184(%rbp), %rax
 11671      F3FFFF
 11672 8591 89D6     		movl	%edx, %esi
 11673 8593 4889C7   		movq	%rax, %rdi
 11674 8596 E8000000 		call	_ZN8Solution7get_rhoEi
 11674      00
 11675 859b F20F1185 		movsd	%xmm0, -4312(%rbp)
 11675      28EFFFFF 
 11676 85a3 8B9594EF 		movl	-4204(%rbp), %edx
 11676      FFFF
 11677 85a9 488D8590 		leaq	-3184(%rbp), %rax
 11677      F3FFFF
 11678 85b0 89D6     		movl	%edx, %esi
 11679 85b2 4889C7   		movq	%rax, %rdi
 11680 85b5 E8000000 		call	_ZN8Solution5get_vEi
 11680      00
 11681 85ba 660F28F0 		movapd	%xmm0, %xmm6
 11682 85be F20F59B5 		mulsd	-4312(%rbp), %xmm6
 11682      28EFFFFF 
 11683 85c6 F20F11B5 		movsd	%xmm6, -4312(%rbp)
 11683      28EFFFFF 
1310:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 + residual.get_v(i)/Mesh.get_cell_volume(i) * delta_t;
 11684              		.loc 9 1310 0
 11685 85ce 8B9594EF 		movl	-4204(%rbp), %edx
 11685      FFFF
 11686 85d4 488B8530 		movq	-4304(%rbp), %rax
 11686      EFFFFF
 11687 85db 89D6     		movl	%edx, %esi
 11688 85dd 4889C7   		movq	%rax, %rdi
 11689 85e0 E8000000 		call	_ZN8Solution5get_vEi
 11689      00
 11690 85e5 F20F1185 		movsd	%xmm0, -4320(%rbp)
 11690      20EFFFFF 
 11691 85ed 8B9594EF 		movl	-4204(%rbp), %edx
 11691      FFFF
 11692 85f3 488B8570 		movq	-4240(%rbp), %rax
 11692      EFFFFF
 11693 85fa 89D6     		movl	%edx, %esi
 11694 85fc 4889C7   		movq	%rax, %rdi
 11695 85ff E8000000 		call	_ZN4Mesh15get_cell_volumeEi
 11695      00
 11696 8604 F20F10AD 		movsd	-4320(%rbp), %xmm5
GAS LISTING /tmp/cc2K2nX4.s 			page 349


 11696      20EFFFFF 
 11697 860c F20F5EE8 		divsd	%xmm0, %xmm5
 11698 8610 660F28C5 		movapd	%xmm5, %xmm0
 11699 8614 F20F5985 		mulsd	-4112(%rbp), %xmm0
 11699      F0EFFFFF 
 11700 861c F20F5885 		addsd	-4312(%rbp), %xmm0
 11700      28EFFFFF 
 11701 8624 F20F1185 		movsd	%xmm0, -4120(%rbp)
 11701      E8EFFFFF 
 11702              	.L864:
1311:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1312:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         //f3 = 0.0;
1313:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1314:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
1315:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1316:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1317:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1318:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1319:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                    f2 = f2 /soln_t0.get_average_rho();
1320:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //                    f3 = f3 /soln_t0.get_average_rho();
1321:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //
1322:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                        f2 = f2 /soln_t0.get_rho(i);
 11703              		.loc 9 1322 0
 11704 862c 8B9594EF 		movl	-4204(%rbp), %edx
 11704      FFFF
 11705 8632 488D8590 		leaq	-3184(%rbp), %rax
 11705      F3FFFF
 11706 8639 89D6     		movl	%edx, %esi
 11707 863b 4889C7   		movq	%rax, %rdi
 11708 863e E8000000 		call	_ZN8Solution7get_rhoEi
 11708      00
 11709 8643 660F28C8 		movapd	%xmm0, %xmm1
 11710 8647 F20F1085 		movsd	-4128(%rbp), %xmm0
 11710      E0EFFFFF 
 11711 864f F20F5EC1 		divsd	%xmm1, %xmm0
 11712 8653 F20F1185 		movsd	%xmm0, -4128(%rbp)
 11712      E0EFFFFF 
1323:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     f3 = f3 /soln_t0.get_rho(i);
 11713              		.loc 9 1323 0
 11714 865b 8B9594EF 		movl	-4204(%rbp), %edx
 11714      FFFF
 11715 8661 488D8590 		leaq	-3184(%rbp), %rax
 11715      F3FFFF
 11716 8668 89D6     		movl	%edx, %esi
 11717 866a 4889C7   		movq	%rax, %rdi
 11718 866d E8000000 		call	_ZN8Solution7get_rhoEi
 11718      00
 11719 8672 660F28C8 		movapd	%xmm0, %xmm1
 11720 8676 F20F1085 		movsd	-4120(%rbp), %xmm0
 11720      E8EFFFFF 
 11721 867e F20F5EC1 		divsd	%xmm1, %xmm0
 11722 8682 F20F1185 		movsd	%xmm0, -4120(%rbp)
 11722      E8EFFFFF 
1324:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1325:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     temp_soln.update(f1,f2,f3,0.0, i);
 11723              		.loc 9 1325 0
 11724 868a 8B8D94EF 		movl	-4204(%rbp), %ecx
GAS LISTING /tmp/cc2K2nX4.s 			page 350


 11724      FFFF
 11725 8690 F20F108D 		movsd	-4120(%rbp), %xmm1
 11725      E8EFFFFF 
 11726 8698 F20F1085 		movsd	-4128(%rbp), %xmm0
 11726      E0EFFFFF 
 11727 86a0 488B95D8 		movq	-4136(%rbp), %rdx
 11727      EFFFFF
 11728 86a7 488D8540 		leaq	-3264(%rbp), %rax
 11728      F3FFFF
 11729 86ae 89CE     		movl	%ecx, %esi
 11730 86b0 660FEFDB 		pxor	%xmm3, %xmm3
 11731 86b4 660F28D1 		movapd	%xmm1, %xmm2
 11732 86b8 660F28C8 		movapd	%xmm0, %xmm1
 11733 86bc 48899528 		movq	%rdx, -4312(%rbp)
 11733      EFFFFF
 11734 86c3 F20F1085 		movsd	-4312(%rbp), %xmm0
 11734      28EFFFFF 
 11735 86cb 4889C7   		movq	%rax, %rdi
 11736              	.LEHB153:
 11737 86ce E8000000 		call	_ZN8Solution6updateEddddi
 11737      00
1326:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1327:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     // error calculations
1328:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     if( rk ==3){
 11738              		.loc 9 1328 0
 11739 86d3 83BD90EF 		cmpl	$3, -4208(%rbp)
 11739      FFFF03
 11740 86da 0F852701 		jne	.L848
 11740      0000
1329:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //                        residual.add_l2_norm_residuals(f1,soln.get_rho(i),f2,soln.get_u(i),
1330:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //                            f3,soln.get_v(i));
1331:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             convergence_residual.add_ansys_l2_norm_residuals(f1,soln.get_rho(i),f2,
 11741              		.loc 9 1331 0
 11742 86e0 8B9594EF 		movl	-4204(%rbp), %edx
 11742      FFFF
 11743 86e6 488B8568 		movq	-4248(%rbp), %rax
 11743      EFFFFF
 11744 86ed 89D6     		movl	%edx, %esi
 11745 86ef 4889C7   		movq	%rax, %rdi
 11746 86f2 E8000000 		call	_ZN8Solution5get_vEi
 11746      00
 11747 86f7 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11747      28EFFFFF 
 11748 86ff 8B9594EF 		movl	-4204(%rbp), %edx
 11748      FFFF
 11749 8705 488B8568 		movq	-4248(%rbp), %rax
 11749      EFFFFF
 11750 870c 89D6     		movl	%edx, %esi
 11751 870e 4889C7   		movq	%rax, %rdi
 11752 8711 E8000000 		call	_ZN8Solution5get_uEi
 11752      00
 11753 8716 F20F1185 		movsd	%xmm0, -4320(%rbp)
 11753      20EFFFFF 
 11754 871e 8B9594EF 		movl	-4204(%rbp), %edx
 11754      FFFF
 11755 8724 488B8568 		movq	-4248(%rbp), %rax
 11755      EFFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 351


 11756 872b 89D6     		movl	%edx, %esi
 11757 872d 4889C7   		movq	%rax, %rdi
 11758 8730 E8000000 		call	_ZN8Solution7get_rhoEi
 11758      00
 11759 8735 660F28F8 		movapd	%xmm0, %xmm7
1332:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 f3,soln.get_v(i), delta_t);
 11760              		.loc 9 1332 0
 11761 8739 F20F1095 		movsd	-4112(%rbp), %xmm2
 11761      F0EFFFFF 
 11762 8741 F20F108D 		movsd	-4120(%rbp), %xmm1
 11762      E8EFFFFF 
 11763 8749 F20F1085 		movsd	-4128(%rbp), %xmm0
 11763      E0EFFFFF 
 11764 8751 488B95D8 		movq	-4136(%rbp), %rdx
 11764      EFFFFF
 11765 8758 488D85E0 		leaq	-3104(%rbp), %rax
 11765      F3FFFF
 11766 875f 660F28F2 		movapd	%xmm2, %xmm6
 11767 8763 F20F10AD 		movsd	-4312(%rbp), %xmm5
 11767      28EFFFFF 
 11768 876b 660F28E1 		movapd	%xmm1, %xmm4
 11769 876f F20F109D 		movsd	-4320(%rbp), %xmm3
 11769      20EFFFFF 
 11770 8777 660F28D0 		movapd	%xmm0, %xmm2
 11771 877b 660F28CF 		movapd	%xmm7, %xmm1
 11772 877f 48899528 		movq	%rdx, -4312(%rbp)
 11772      EFFFFF
 11773 8786 F20F1085 		movsd	-4312(%rbp), %xmm0
 11773      28EFFFFF 
 11774 878e 4889C7   		movq	%rax, %rdi
 11775 8791 E8000000 		call	_ZN9residuals27add_ansys_l2_norm_residualsEddddddd
 11775      00
1333:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1334:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                           if (std::isnan(temp_soln.get_rho(i)) || std::isnan(temp_soln.get_u(i))) {
 11776              		.loc 9 1334 0
 11777 8796 8B9594EF 		movl	-4204(%rbp), %edx
 11777      FFFF
 11778 879c 488D8540 		leaq	-3264(%rbp), %rax
 11778      F3FFFF
 11779 87a3 89D6     		movl	%edx, %esi
 11780 87a5 4889C7   		movq	%rax, %rdi
 11781 87a8 E8000000 		call	_ZN8Solution7get_rhoEi
 11781      00
 11782 87ad E8000000 		call	_ZSt5isnand
 11782      00
 11783 87b2 84C0     		testb	%al, %al
 11784 87b4 7520     		jne	.L866
 11785              		.loc 9 1334 0 is_stmt 0 discriminator 2
 11786 87b6 8B9594EF 		movl	-4204(%rbp), %edx
 11786      FFFF
 11787 87bc 488D8540 		leaq	-3264(%rbp), %rax
 11787      F3FFFF
 11788 87c3 89D6     		movl	%edx, %esi
 11789 87c5 4889C7   		movq	%rax, %rdi
 11790 87c8 E8000000 		call	_ZN8Solution5get_uEi
 11790      00
 11791 87cd E8000000 		call	_ZSt5isnand
GAS LISTING /tmp/cc2K2nX4.s 			page 352


 11791      00
 11792 87d2 84C0     		testb	%al, %al
 11793 87d4 7407     		je	.L867
 11794              	.L866:
 11795              		.loc 9 1334 0 discriminator 3
 11796 87d6 B8010000 		movl	$1, %eax
 11796      00
 11797 87db EB05     		jmp	.L868
 11798              	.L867:
 11799              		.loc 9 1334 0 discriminator 4
 11800 87dd B8000000 		movl	$0, %eax
 11800      00
 11801              	.L868:
 11802              		.loc 9 1334 0 discriminator 6
 11803 87e2 84C0     		testb	%al, %al
 11804 87e4 7421     		je	.L848
1335:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 if( mg == 0){
 11805              		.loc 9 1335 0 is_stmt 1
 11806 87e6 8B4528   		movl	40(%rbp), %eax
 11807 87e9 85C0     		testl	%eax, %eax
 11808 87eb 750F     		jne	.L869
1336:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     error_output.close();
 11809              		.loc 9 1336 0
 11810 87ed 488D85C0 		leaq	-1088(%rbp), %rax
 11810      FBFFFF
 11811 87f4 4889C7   		movq	%rax, %rdi
 11812 87f7 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 11812      00
 11813              	.L869:
 11814 87fc 41BC0000 		movl	$0, %r12d
 11814      0000
1337:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 }
1338:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 return;
 11815              		.loc 9 1338 0
 11816 8802 E9250300 		jmp	.L870
 11816      00
 11817              	.L848:
 11818              	.LBE71:
 11819              	.LBE70:
 11820              	.LBE69:
 950:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 11821              		.loc 9 950 0 discriminator 2
 11822 8807 838594EF 		addl	$1, -4204(%rbp)
 11822      FFFF01
 11823 880e E91ADEFF 		jmp	.L871
 11823      FF
 11824              	.L847:
 11825              	.LBE68:
 11826              	.LBE67:
 939:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 11827              		.loc 9 939 0 discriminator 2
 11828 8813 838590EF 		addl	$1, -4208(%rbp)
 11828      FFFF01
 11829 881a E9ABDDFF 		jmp	.L872
 11829      FF
 11830              	.L846:
 11831              	.LBE66:
GAS LISTING /tmp/cc2K2nX4.s 			page 353


1339:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         }
1340:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                     }
1341:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1342:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 }
1343:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
1344:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1345:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1346:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         int cycle_no;
1347:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1348:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1349:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1350:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1351:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         // get root of squared approximation error
1352:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1353:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** //        residual.l2_norm_rms();
1354:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         convergence_residual.ansys_5_iter_rms(t);
 11832              		.loc 9 1354 0
 11833 881f 8B958CEF 		movl	-4212(%rbp), %edx
 11833      FFFF
 11834 8825 488D85E0 		leaq	-3104(%rbp), %rax
 11834      F3FFFF
 11835 882c 89D6     		movl	%edx, %esi
 11836 882e 4889C7   		movq	%rax, %rdi
 11837 8831 E8000000 		call	_ZN9residuals16ansys_5_iter_rmsEi
 11837      00
1355:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1356:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if( mg == 0){
 11838              		.loc 9 1356 0
 11839 8836 8B4528   		movl	40(%rbp), %eax
 11840 8839 85C0     		testl	%eax, %eax
 11841 883b 0F85F600 		jne	.L873
 11841      0000
1357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.rho_rms << ", " << convergence_residual.u_rms << ", " <<
1359:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11842              		.loc 9 1359 0
 11843 8841 488B9DF8 		movq	-3080(%rbp), %rbx
 11843      F3FFFF
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11844              		.loc 9 1358 0
 11845 8848 4C8BA5F0 		movq	-3088(%rbp), %r12
 11845      F3FFFF
 11846 884f 4C8BADE8 		movq	-3096(%rbp), %r13
 11846      F3FFFF
1357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 11847              		.loc 9 1357 0
 11848 8856 488D85E0 		leaq	-3104(%rbp), %rax
 11848      F3FFFF
 11849 885d 4889C7   		movq	%rax, %rdi
 11850 8860 E8000000 		call	_ZN9residuals9max_errorEv
 11850      00
 11851 8865 F20F1185 		movsd	%xmm0, -4312(%rbp)
 11851      28EFFFFF 
 11852 886d 8B958CEF 		movl	-4212(%rbp), %edx
 11852      FFFF
 11853 8873 488D85C0 		leaq	-1088(%rbp), %rax
 11853      FBFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 354


 11854 887a 89D6     		movl	%edx, %esi
 11855 887c 4889C7   		movq	%rax, %rdi
 11856 887f E8000000 		call	_ZNSolsEi
 11856      00
1357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 11857              		.loc 9 1357 0 is_stmt 0 discriminator 1
 11858 8884 BE000000 		movl	$.LC7, %esi
 11858      00
 11859 8889 4889C7   		movq	%rax, %rdi
 11860 888c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11860      00
1357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 11861              		.loc 9 1357 0 discriminator 2
 11862 8891 F20F1085 		movsd	-4312(%rbp), %xmm0
 11862      28EFFFFF 
 11863 8899 4889C7   		movq	%rax, %rdi
 11864 889c E8000000 		call	_ZNSolsEd
 11864      00
1357:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             error_output << t << ", "  << convergence_residual.max_error()   << ", " <<
 11865              		.loc 9 1357 0 discriminator 3
 11866 88a1 BE000000 		movl	$.LC7, %esi
 11866      00
 11867 88a6 4889C7   		movq	%rax, %rdi
 11868 88a9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11868      00
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11869              		.loc 9 1358 0 is_stmt 1 discriminator 4
 11870 88ae 4C89AD28 		movq	%r13, -4312(%rbp)
 11870      EFFFFF
 11871 88b5 F20F1085 		movsd	-4312(%rbp), %xmm0
 11871      28EFFFFF 
 11872 88bd 4889C7   		movq	%rax, %rdi
 11873 88c0 E8000000 		call	_ZNSolsEd
 11873      00
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11874              		.loc 9 1358 0 is_stmt 0 discriminator 5
 11875 88c5 BE000000 		movl	$.LC7, %esi
 11875      00
 11876 88ca 4889C7   		movq	%rax, %rdi
 11877 88cd E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11877      00
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11878              		.loc 9 1358 0 discriminator 1
 11879 88d2 4C89A528 		movq	%r12, -4312(%rbp)
 11879      EFFFFF
 11880 88d9 F20F1085 		movsd	-4312(%rbp), %xmm0
 11880      28EFFFFF 
 11881 88e1 4889C7   		movq	%rax, %rdi
 11882 88e4 E8000000 		call	_ZNSolsEd
 11882      00
1358:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             convergence_residual.v_rms << " , FMG cycle: " << fmg << endl;
 11883              		.loc 9 1358 0 discriminator 2
 11884 88e9 BE000000 		movl	$.LC7, %esi
 11884      00
 11885 88ee 4889C7   		movq	%rax, %rdi
 11886 88f1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11886      00
GAS LISTING /tmp/cc2K2nX4.s 			page 355


 11887              		.loc 9 1359 0 is_stmt 1 discriminator 3
 11888 88f6 48899D28 		movq	%rbx, -4312(%rbp)
 11888      EFFFFF
 11889 88fd F20F1085 		movsd	-4312(%rbp), %xmm0
 11889      28EFFFFF 
 11890 8905 4889C7   		movq	%rax, %rdi
 11891 8908 E8000000 		call	_ZNSolsEd
 11891      00
 11892              		.loc 9 1359 0 is_stmt 0 discriminator 4
 11893 890d BE000000 		movl	$.LC8, %esi
 11893      00
 11894 8912 4889C7   		movq	%rax, %rdi
 11895 8915 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11895      00
 11896              		.loc 9 1359 0 discriminator 1
 11897 891a 4889C2   		movq	%rax, %rdx
 11898 891d 8B4538   		movl	56(%rbp), %eax
 11899 8920 89C6     		movl	%eax, %esi
 11900 8922 4889D7   		movq	%rdx, %rdi
 11901 8925 E8000000 		call	_ZNSolsEi
 11901      00
 11902              		.loc 9 1359 0 discriminator 2
 11903 892a BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 11903      00
 11904 892f 4889C7   		movq	%rax, %rdi
 11905 8932 E8000000 		call	_ZNSolsEPFRSoS_E
 11905      00
 11906              	.L873:
1360:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1361:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         soln.clone(temp_soln);
 11907              		.loc 9 1361 0 is_stmt 1
 11908 8937 488D9540 		leaq	-3264(%rbp), %rdx
 11908      F3FFFF
 11909 893e 488B8568 		movq	-4248(%rbp), %rax
 11909      EFFFFF
 11910 8945 4889D6   		movq	%rdx, %rsi
 11911 8948 4889C7   		movq	%rax, %rdi
 11912 894b E8000000 		call	_ZN8Solution5cloneERS_
 11912      00
1362:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1363:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         time = t*delta_t;
 11913              		.loc 9 1363 0
 11914 8950 660FEFC0 		pxor	%xmm0, %xmm0
 11915 8954 F20F2A85 		cvtsi2sd	-4212(%rbp), %xmm0
 11915      8CEFFFFF 
 11916 895c F20F5985 		mulsd	-4112(%rbp), %xmm0
 11916      F0EFFFFF 
 11917 8964 F20F1185 		movsd	%xmm0, -4096(%rbp)
 11917      00F0FFFF 
1364:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1365:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1366:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1367:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         cout << "time t=" << time << std::endl;
 11918              		.loc 9 1367 0
 11919 896c BE000000 		movl	$.LC9, %esi
 11919      00
 11920 8971 BF000000 		movl	$_ZSt4cout, %edi
GAS LISTING /tmp/cc2K2nX4.s 			page 356


 11920      00
 11921 8976 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 11921      00
 11922 897b 4889C2   		movq	%rax, %rdx
 11923 897e 488B8500 		movq	-4096(%rbp), %rax
 11923      F0FFFF
 11924 8985 48898528 		movq	%rax, -4312(%rbp)
 11924      EFFFFF
 11925 898c F20F1085 		movsd	-4312(%rbp), %xmm0
 11925      28EFFFFF 
 11926 8994 4889D7   		movq	%rdx, %rdi
 11927 8997 E8000000 		call	_ZNSolsEd
 11927      00
 11928              		.loc 9 1367 0 is_stmt 0 discriminator 1
 11929 899c BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 11929      00
 11930 89a1 4889C7   		movq	%rax, %rdi
 11931 89a4 E8000000 		call	_ZNSolsEPFRSoS_E
 11931      00
1368:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1369:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1370:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if ( convergence_residual.max_error() < local_tolerance){
 11932              		.loc 9 1370 0 is_stmt 1
 11933 89a9 488D85E0 		leaq	-3104(%rbp), %rax
 11933      F3FFFF
 11934 89b0 4889C7   		movq	%rax, %rdi
 11935 89b3 E8000000 		call	_ZN9residuals9max_errorEv
 11935      00
 11936 89b8 660F28C8 		movapd	%xmm0, %xmm1
 11937 89bc F20F1085 		movsd	-4152(%rbp), %xmm0
 11937      C8EFFFFF 
 11938 89c4 660F2EC1 		ucomisd	%xmm1, %xmm0
 11939 89c8 0F97C0   		seta	%al
 11940 89cb 84C0     		testb	%al, %al
 11941 89cd 7421     		je	.L874
1371:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             if( mg == 0){
 11942              		.loc 9 1371 0
 11943 89cf 8B4528   		movl	40(%rbp), %eax
 11944 89d2 85C0     		testl	%eax, %eax
 11945 89d4 750F     		jne	.L875
1372:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 error_output.close();
 11946              		.loc 9 1372 0
 11947 89d6 488D85C0 		leaq	-1088(%rbp), %rax
 11947      FBFFFF
 11948 89dd 4889C7   		movq	%rax, %rdi
 11949 89e0 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 11949      00
 11950              	.L875:
 11951 89e5 41BC0000 		movl	$0, %r12d
 11951      0000
1373:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
1374:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             return ;
 11952              		.loc 9 1374 0
 11953 89eb E93C0100 		jmp	.L870
 11953      00
 11954              	.L874:
1375:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 357


1376:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1377:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1378:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1379:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1380:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         //Give the program 5 iterations to find residuals
1381:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         //without MG and also perform MG cycle every 3 iterations
1382:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1383:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1384:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         ///Multigrid Agglomeration/Prolongation
1385:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if( mg < globals.max_mg_levels && fmg == 0 && t > 3){
 11955              		.loc 9 1385 0
 11956 89f0 488B8550 		movq	-4272(%rbp), %rax
 11956      EFFFFF
 11957 89f7 8B908000 		movl	128(%rax), %edx
 11957      0000
 11958 89fd 8B4528   		movl	40(%rbp), %eax
 11959 8a00 39C2     		cmpl	%eax, %edx
 11960 8a02 0F8E9700 		jle	.L876
 11960      0000
 11961              		.loc 9 1385 0 is_stmt 0 discriminator 1
 11962 8a08 837D3800 		cmpl	$0, 56(%rbp)
 11963 8a0c 0F858D00 		jne	.L876
 11963      0000
 11964              		.loc 9 1385 0 discriminator 2
 11965 8a12 83BD8CEF 		cmpl	$3, -4212(%rbp)
 11965      FFFF03
 11966 8a19 0F8E8000 		jle	.L876
 11966      0000
1386:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 multi_grid_agglomoration(residual,soln,cycle_no,Mesh,quad_bcs_orig,
 11967              		.loc 9 1386 0 is_stmt 1
 11968 8a1f 488B9550 		movq	-4272(%rbp), %rdx
 11968      EFFFFF
 11969 8a26 488D85A0 		leaq	-1376(%rbp), %rax
 11969      FAFFFF
 11970 8a2d 4889D6   		movq	%rdx, %rsi
 11971 8a30 4889C7   		movq	%rax, %rdi
 11972 8a33 E8000000 		call	_ZN16global_variablesC1ERKS_
 11972      00
 11973              	.LEHE153:
1387:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                          init_conds,mg,globals,domain,bcs);
 11974              		.loc 9 1387 0
 11975 8a38 4C8B8D38 		movq	-4296(%rbp), %r9
 11975      EFFFFF
 11976 8a3f 4C8B8570 		movq	-4240(%rbp), %r8
 11976      EFFFFF
 11977 8a46 8B8DA4EF 		movl	-4188(%rbp), %ecx
 11977      FFFF
 11978 8a4c 488B9568 		movq	-4248(%rbp), %rdx
 11978      EFFFFF
 11979 8a53 488BB530 		movq	-4304(%rbp), %rsi
 11979      EFFFFF
 11980 8a5a 488B8578 		movq	-4232(%rbp), %rax
 11980      EFFFFF
 11981 8a61 4883EC08 		subq	$8, %rsp
 11982 8a65 FFB560EF 		pushq	-4256(%rbp)
 11982      FFFF
 11983 8a6b FFB548EF 		pushq	-4280(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 358


 11983      FFFF
 11984 8a71 488DBDA0 		leaq	-1376(%rbp), %rdi
 11984      FAFFFF
 11985 8a78 57       		pushq	%rdi
 11986 8a79 488D7D28 		leaq	40(%rbp), %rdi
 11987 8a7d 57       		pushq	%rdi
 11988 8a7e FFB540EF 		pushq	-4288(%rbp)
 11988      FFFF
 11989 8a84 4889C7   		movq	%rax, %rdi
 11990              	.LEHB154:
 11991              		.cfi_escape 0x2e,0x30
 11992 8a87 E8000000 		call	_ZN6Solver24multi_grid_agglomorationER8SolutionS1_iR4MeshR13quad_bcs_plusR18initial_condition
 11992      00
 11993              	.LEHE154:
 11994 8a8c 4883C430 		addq	$48, %rsp
1386:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 multi_grid_agglomoration(residual,soln,cycle_no,Mesh,quad_bcs_orig,
 11995              		.loc 9 1386 0
 11996 8a90 488D85A0 		leaq	-1376(%rbp), %rax
 11996      FAFFFF
 11997 8a97 4889C7   		movq	%rax, %rdi
 11998 8a9a E8000000 		call	_ZN16global_variablesD1Ev
 11998      00
 11999              	.L876:
 12000              	.LBE65:
 931:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12001              		.loc 9 931 0 discriminator 2
 12002 8a9f 83858CEF 		addl	$1, -4212(%rbp)
 12002      FFFF01
 12003 8aa6 E9EADAFF 		jmp	.L878
 12003      FF
 12004              	.L845:
 12005              	.LBE64:
1388:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }else if( mg ==0){
1389:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1390:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1391:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1392:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1393:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1394:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     error_output.close();
 12006              		.loc 9 1394 0
 12007 8aab 488D85C0 		leaq	-1088(%rbp), %rax
 12007      FBFFFF
 12008 8ab2 4889C7   		movq	%rax, %rdi
 12009              	.LEHB155:
 12010              		.cfi_escape 0x2e,0
 12011 8ab5 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
 12011      00
 12012              	.LEHE155:
1395:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     delete []((mg_forcing_term));
 12013              		.loc 9 1395 0
 12014 8aba 4883BDF8 		cmpq	$0, -4104(%rbp)
 12014      EFFFFF00 
 12015 8ac2 7457     		je	.L879
 12016              		.loc 9 1395 0 is_stmt 0 discriminator 1
 12017 8ac4 488B85F8 		movq	-4104(%rbp), %rax
 12017      EFFFFF
 12018 8acb 4883E808 		subq	$8, %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 359


 12019 8acf 488B10   		movq	(%rax), %rdx
 12020 8ad2 4889D0   		movq	%rdx, %rax
 12021 8ad5 48C1E002 		salq	$2, %rax
 12022 8ad9 4801D0   		addq	%rdx, %rax
 12023 8adc 48C1E003 		salq	$3, %rax
 12024 8ae0 4889C2   		movq	%rax, %rdx
 12025 8ae3 488B85F8 		movq	-4104(%rbp), %rax
 12025      EFFFFF
 12026 8aea 488D1C02 		leaq	(%rdx,%rax), %rbx
 12027              	.L881:
 12028              		.loc 9 1395 0 discriminator 5
 12029 8aee 483B9DF8 		cmpq	-4104(%rbp), %rbx
 12029      EFFFFF
 12030 8af5 7411     		je	.L880
 12031              		.loc 9 1395 0 discriminator 4
 12032 8af7 4883EB28 		subq	$40, %rbx
 12033 8afb 488B03   		movq	(%rbx), %rax
 12034 8afe 488B00   		movq	(%rax), %rax
 12035 8b01 4889DF   		movq	%rbx, %rdi
 12036 8b04 FFD0     		call	*%rax
 12037 8b06 EBE6     		jmp	.L881
 12038              	.L880:
 12039              		.loc 9 1395 0 discriminator 3
 12040 8b08 488B85F8 		movq	-4104(%rbp), %rax
 12040      EFFFFF
 12041 8b0f 4883E808 		subq	$8, %rax
 12042 8b13 4889C7   		movq	%rax, %rdi
 12043 8b16 E8000000 		call	_ZdaPv
 12043      00
 12044              	.L879:
1396:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     mg_forcing_term = NULL;
 12045              		.loc 9 1396 0 is_stmt 1
 12046 8b1b 48C785F8 		movq	$0, -4104(%rbp)
 12046      EFFFFF00 
 12046      000000
 12047 8b26 41BC0100 		movl	$1, %r12d
 12047      0000
 12048              	.L870:
 12049 8b2c 488D9D50 		leaq	-1712(%rbp), %rbx
 12049      F9FFFF
 12050 8b33 4881C3A0 		addq	$160, %rbx
 12050      000000
 12051              	.L883:
 12052 8b3a 488D8550 		leaq	-1712(%rbp), %rax
 12052      F9FFFF
 12053 8b41 4839C3   		cmpq	%rax, %rbx
 12054 8b44 7411     		je	.L882
 12055 8b46 4883EB28 		subq	$40, %rbx
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12056              		.loc 9 904 0 discriminator 4
 12057 8b4a 488B03   		movq	(%rbx), %rax
 12058 8b4d 488B00   		movq	(%rax), %rax
 12059 8b50 4889DF   		movq	%rbx, %rdi
 12060 8b53 FFD0     		call	*%rax
 12061 8b55 EBE3     		jmp	.L883
 12062              	.L882:
 12063 8b57 4183FC01 		cmpl	$1, %r12d
GAS LISTING /tmp/cc2K2nX4.s 			page 360


 12064 8b5b 7408     		je	.L1138
 12065 8b5d 41BC0000 		movl	$0, %r12d
 12065      0000
 12066 8b63 EB07     		jmp	.L887
 12067              	.L1138:
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12068              		.loc 9 904 0 is_stmt 0
 12069 8b65 90       		nop
 12070 8b66 41BC0100 		movl	$1, %r12d
 12070      0000
 12071              	.L887:
 12072 8b6c 488D9DB0 		leaq	-1872(%rbp), %rbx
 12072      F8FFFF
 12073 8b73 4881C3A0 		addq	$160, %rbx
 12073      000000
 12074              	.L889:
 12075 8b7a 488D85B0 		leaq	-1872(%rbp), %rax
 12075      F8FFFF
 12076 8b81 4839C3   		cmpq	%rax, %rbx
 12077 8b84 7411     		je	.L888
 12078 8b86 4883EB28 		subq	$40, %rbx
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12079              		.loc 9 903 0 is_stmt 1 discriminator 9
 12080 8b8a 488B03   		movq	(%rbx), %rax
 12081 8b8d 488B00   		movq	(%rax), %rax
 12082 8b90 4889DF   		movq	%rbx, %rdi
 12083 8b93 FFD0     		call	*%rax
 12084 8b95 EBE3     		jmp	.L889
 12085              	.L888:
 12086 8b97 4183FC01 		cmpl	$1, %r12d
 12087 8b9b 7408     		je	.L1139
 12088 8b9d 41BC0000 		movl	$0, %r12d
 12088      0000
 12089 8ba3 EB07     		jmp	.L893
 12090              	.L1139:
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12091              		.loc 9 903 0 is_stmt 0
 12092 8ba5 90       		nop
 12093 8ba6 41BC0100 		movl	$1, %r12d
 12093      0000
 12094              	.L893:
 12095 8bac 488D9D10 		leaq	-2032(%rbp), %rbx
 12095      F8FFFF
 12096 8bb3 4881C3A0 		addq	$160, %rbx
 12096      000000
 12097              	.L895:
 12098 8bba 488D8510 		leaq	-2032(%rbp), %rax
 12098      F8FFFF
 12099 8bc1 4839C3   		cmpq	%rax, %rbx
 12100 8bc4 7411     		je	.L894
 12101 8bc6 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12102              		.loc 9 902 0 is_stmt 1 discriminator 14
 12103 8bca 488B03   		movq	(%rbx), %rax
 12104 8bcd 488B00   		movq	(%rax), %rax
 12105 8bd0 4889DF   		movq	%rbx, %rdi
 12106 8bd3 FFD0     		call	*%rax
GAS LISTING /tmp/cc2K2nX4.s 			page 361


 12107 8bd5 EBE3     		jmp	.L895
 12108              	.L894:
 12109 8bd7 4183FC01 		cmpl	$1, %r12d
 12110 8bdb 7408     		je	.L1140
 12111 8bdd 41BC0000 		movl	$0, %r12d
 12111      0000
 12112 8be3 EB07     		jmp	.L899
 12113              	.L1140:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12114              		.loc 9 902 0 is_stmt 0
 12115 8be5 90       		nop
 12116 8be6 41BC0100 		movl	$1, %r12d
 12116      0000
 12117              	.L899:
 12118 8bec 488D9D70 		leaq	-2192(%rbp), %rbx
 12118      F7FFFF
 12119 8bf3 4881C3A0 		addq	$160, %rbx
 12119      000000
 12120              	.L901:
 12121 8bfa 488D8570 		leaq	-2192(%rbp), %rax
 12121      F7FFFF
 12122 8c01 4839C3   		cmpq	%rax, %rbx
 12123 8c04 7411     		je	.L900
 12124 8c06 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12125              		.loc 9 902 0 discriminator 19
 12126 8c0a 488B03   		movq	(%rbx), %rax
 12127 8c0d 488B00   		movq	(%rax), %rax
 12128 8c10 4889DF   		movq	%rbx, %rdi
 12129 8c13 FFD0     		call	*%rax
 12130 8c15 EBE3     		jmp	.L901
 12131              	.L900:
 12132 8c17 4183FC01 		cmpl	$1, %r12d
 12133 8c1b 7408     		je	.L1141
 12134 8c1d 41BC0000 		movl	$0, %r12d
 12134      0000
 12135 8c23 EB07     		jmp	.L905
 12136              	.L1141:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12137              		.loc 9 902 0
 12138 8c25 90       		nop
 12139 8c26 41BC0100 		movl	$1, %r12d
 12139      0000
 12140              	.L905:
 12141 8c2c 488D9DD0 		leaq	-2352(%rbp), %rbx
 12141      F6FFFF
 12142 8c33 4881C3A0 		addq	$160, %rbx
 12142      000000
 12143              	.L907:
 12144 8c3a 488D85D0 		leaq	-2352(%rbp), %rax
 12144      F6FFFF
 12145 8c41 4839C3   		cmpq	%rax, %rbx
 12146 8c44 7411     		je	.L906
 12147 8c46 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12148              		.loc 9 902 0 discriminator 24
 12149 8c4a 488B03   		movq	(%rbx), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 362


 12150 8c4d 488B00   		movq	(%rax), %rax
 12151 8c50 4889DF   		movq	%rbx, %rdi
 12152 8c53 FFD0     		call	*%rax
 12153 8c55 EBE3     		jmp	.L907
 12154              	.L906:
 12155 8c57 4183FC01 		cmpl	$1, %r12d
 12156 8c5b 7407     		je	.L1142
 12157 8c5d BB000000 		movl	$0, %ebx
 12157      00
 12158 8c62 EB06     		jmp	.L911
 12159              	.L1142:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12160              		.loc 9 902 0
 12161 8c64 90       		nop
 12162 8c65 BB010000 		movl	$1, %ebx
 12162      00
 12163              	.L911:
 12164 8c6a 488D85E0 		leaq	-3360(%rbp), %rax
 12164      F2FFFF
 12165 8c71 4889C7   		movq	%rax, %rdi
 12166 8c74 E8000000 		call	_ZN8flux_varD1Ev
 12166      00
 12167 8c79 83FB01   		cmpl	$1, %ebx
 12168 8c7c 7407     		je	.L1143
 12169 8c7e BB000000 		movl	$0, %ebx
 12169      00
 12170 8c83 EB06     		jmp	.L915
 12171              	.L1143:
 897:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 12172              		.loc 9 897 0 is_stmt 1
 12173 8c85 90       		nop
 12174 8c86 BB010000 		movl	$1, %ebx
 12174      00
 12175              	.L915:
 12176 8c8b 488D85B0 		leaq	-3408(%rbp), %rax
 12176      F2FFFF
 12177 8c92 4889C7   		movq	%rax, %rdi
 12178 8c95 E8000000 		call	_ZN8flux_varD1Ev
 12178      00
 12179 8c9a 83FB01   		cmpl	$1, %ebx
 12180 8c9d 7407     		je	.L1144
 12181 8c9f BB000000 		movl	$0, %ebx
 12181      00
 12182 8ca4 EB06     		jmp	.L919
 12183              	.L1144:
 896:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 12184              		.loc 9 896 0
 12185 8ca6 90       		nop
 12186 8ca7 BB010000 		movl	$1, %ebx
 12186      00
 12187              	.L919:
 12188 8cac 488D8580 		leaq	-3456(%rbp), %rax
 12188      F2FFFF
 12189 8cb3 4889C7   		movq	%rax, %rdi
 12190 8cb6 E8000000 		call	_ZN8flux_varD1Ev
 12190      00
 12191 8cbb 83FB01   		cmpl	$1, %ebx
GAS LISTING /tmp/cc2K2nX4.s 			page 363


 12192 8cbe 7407     		je	.L1145
 12193 8cc0 BB000000 		movl	$0, %ebx
 12193      00
 12194 8cc5 EB06     		jmp	.L923
 12195              	.L1145:
 12196 8cc7 90       		nop
 12197 8cc8 BB010000 		movl	$1, %ebx
 12197      00
 12198              	.L923:
 12199 8ccd 488D85E0 		leaq	-3104(%rbp), %rax
 12199      F3FFFF
 12200 8cd4 4889C7   		movq	%rax, %rdi
 12201 8cd7 E8000000 		call	_ZN9residualsD1Ev
 12201      00
 12202 8cdc 83FB01   		cmpl	$1, %ebx
 12203 8cdf 7407     		je	.L1146
 12204 8ce1 BB000000 		movl	$0, %ebx
 12204      00
 12205 8ce6 EB06     		jmp	.L927
 12206              	.L1146:
 895:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 12207              		.loc 9 895 0
 12208 8ce8 90       		nop
 12209 8ce9 BB010000 		movl	$1, %ebx
 12209      00
 12210              	.L927:
 12211 8cee 488D85F0 		leaq	-3600(%rbp), %rax
 12211      F1FFFF
 12212 8cf5 4889C7   		movq	%rax, %rdi
 12213 8cf8 E8000000 		call	_ZN10vector_varD1Ev
 12213      00
 12214 8cfd 83FB01   		cmpl	$1, %ebx
 12215 8d00 7407     		je	.L1147
 12216 8d02 BB000000 		movl	$0, %ebx
 12216      00
 12217 8d07 EB06     		jmp	.L931
 12218              	.L1147:
 893:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_interface,feq_interface,fneq_interface;
 12219              		.loc 9 893 0
 12220 8d09 90       		nop
 12221 8d0a BB010000 		movl	$1, %ebx
 12221      00
 12222              	.L931:
 12223 8d0f 488D85D0 		leaq	-3632(%rbp), %rax
 12223      F1FFFF
 12224 8d16 4889C7   		movq	%rax, %rdi
 12225 8d19 E8000000 		call	_ZN10vector_varD1Ev
 12225      00
 12226 8d1e 83FB01   		cmpl	$1, %ebx
 12227 8d21 7407     		je	.L1148
 12228 8d23 BB000000 		movl	$0, %ebx
 12228      00
 12229 8d28 EB06     		jmp	.L935
 12230              	.L1148:
 892:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_normal;
 12231              		.loc 9 892 0
 12232 8d2a 90       		nop
GAS LISTING /tmp/cc2K2nX4.s 			page 364


 12233 8d2b BB010000 		movl	$1, %ebx
 12233      00
 12234              	.L935:
 12235 8d30 488D85B0 		leaq	-3664(%rbp), %rax
 12235      F1FFFF
 12236 8d37 4889C7   		movq	%rax, %rdi
 12237 8d3a E8000000 		call	_ZN10vector_varD1Ev
 12237      00
 12238 8d3f 83FB01   		cmpl	$1, %ebx
 12239 8d42 7407     		je	.L1149
 12240 8d44 BB000000 		movl	$0, %ebx
 12240      00
 12241 8d49 EB06     		jmp	.L939
 12242              	.L1149:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 12243              		.loc 9 891 0
 12244 8d4b 90       		nop
 12245 8d4c BB010000 		movl	$1, %ebx
 12245      00
 12246              	.L939:
 12247 8d51 488D8590 		leaq	-3696(%rbp), %rax
 12247      F1FFFF
 12248 8d58 4889C7   		movq	%rax, %rdi
 12249 8d5b E8000000 		call	_ZN10vector_varD1Ev
 12249      00
 12250 8d60 83FB01   		cmpl	$1, %ebx
 12251 8d63 7407     		je	.L1150
 12252 8d65 BB000000 		movl	$0, %ebx
 12252      00
 12253 8d6a EB06     		jmp	.L943
 12254              	.L1150:
 12255 8d6c 90       		nop
 12256 8d6d BB010000 		movl	$1, %ebx
 12256      00
 12257              	.L943:
 12258 8d72 488D8570 		leaq	-3728(%rbp), %rax
 12258      F1FFFF
 12259 8d79 4889C7   		movq	%rax, %rdi
 12260 8d7c E8000000 		call	_ZN10vector_varD1Ev
 12260      00
 12261 8d81 83FB01   		cmpl	$1, %ebx
 12262 8d84 7407     		je	.L1151
 12263 8d86 BB000000 		movl	$0, %ebx
 12263      00
 12264 8d8b EB06     		jmp	.L947
 12265              	.L1151:
 12266 8d8d 90       		nop
 12267 8d8e BB010000 		movl	$1, %ebx
 12267      00
 12268              	.L947:
 12269 8d93 488D8550 		leaq	-3760(%rbp), %rax
 12269      F1FFFF
 12270 8d9a 4889C7   		movq	%rax, %rdi
 12271 8d9d E8000000 		call	_ZN10vector_varD1Ev
 12271      00
 12272 8da2 83FB01   		cmpl	$1, %ebx
 12273 8da5 7407     		je	.L1152
GAS LISTING /tmp/cc2K2nX4.s 			page 365


 12274 8da7 BB000000 		movl	$0, %ebx
 12274      00
 12275 8dac EB06     		jmp	.L951
 12276              	.L1152:
 12277 8dae 90       		nop
 12278 8daf BB010000 		movl	$1, %ebx
 12278      00
 12279              	.L951:
 12280 8db4 488D8530 		leaq	-3792(%rbp), %rax
 12280      F1FFFF
 12281 8dbb 4889C7   		movq	%rax, %rdi
 12282 8dbe E8000000 		call	_ZN10vector_varD1Ev
 12282      00
 12283 8dc3 83FB01   		cmpl	$1, %ebx
 12284 8dc6 7407     		je	.L1153
 12285 8dc8 BB000000 		movl	$0, %ebx
 12285      00
 12286 8dcd EB06     		jmp	.L955
 12287              	.L1153:
 890:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var e_alpha, u_lattice,  rho_u_interface , u_interface;
 12288              		.loc 9 890 0
 12289 8dcf 90       		nop
 12290 8dd0 BB010000 		movl	$1, %ebx
 12290      00
 12291              	.L955:
 12292 8dd5 488D8510 		leaq	-3824(%rbp), %rax
 12292      F1FFFF
 12293 8ddc 4889C7   		movq	%rax, %rdi
 12294 8ddf E8000000 		call	_ZN10vector_varD1Ev
 12294      00
 12295 8de4 83FB01   		cmpl	$1, %ebx
 12296 8de7 7407     		je	.L1154
 12297 8de9 BB000000 		movl	$0, %ebx
 12297      00
 12298 8dee EB06     		jmp	.L959
 12299              	.L1154:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12300              		.loc 9 889 0
 12301 8df0 90       		nop
 12302 8df1 BB010000 		movl	$1, %ebx
 12302      00
 12303              	.L959:
 12304 8df6 488D85F0 		leaq	-3856(%rbp), %rax
 12304      F0FFFF
 12305 8dfd 4889C7   		movq	%rax, %rdi
 12306 8e00 E8000000 		call	_ZN10vector_varD1Ev
 12306      00
 12307 8e05 83FB01   		cmpl	$1, %ebx
 12308 8e08 7407     		je	.L1155
 12309 8e0a BB000000 		movl	$0, %ebx
 12309      00
 12310 8e0f EB06     		jmp	.L963
 12311              	.L1155:
 12312 8e11 90       		nop
 12313 8e12 BB010000 		movl	$1, %ebx
 12313      00
 12314              	.L963:
GAS LISTING /tmp/cc2K2nX4.s 			page 366


 12315 8e17 488D85D0 		leaq	-3888(%rbp), %rax
 12315      F0FFFF
 12316 8e1e 4889C7   		movq	%rax, %rdi
 12317 8e21 E8000000 		call	_ZN10vector_varD1Ev
 12317      00
 12318 8e26 83FB01   		cmpl	$1, %ebx
 12319 8e29 7407     		je	.L1156
 12320 8e2b BB000000 		movl	$0, %ebx
 12320      00
 12321 8e30 EB06     		jmp	.L967
 12322              	.L1156:
 12323 8e32 90       		nop
 12324 8e33 BB010000 		movl	$1, %ebx
 12324      00
 12325              	.L967:
 12326 8e38 488D85B0 		leaq	-3920(%rbp), %rax
 12326      F0FFFF
 12327 8e3f 4889C7   		movq	%rax, %rdi
 12328 8e42 E8000000 		call	_ZN10vector_varD1Ev
 12328      00
 12329 8e47 83FB01   		cmpl	$1, %ebx
 12330 8e4a 7407     		je	.L1157
 12331 8e4c BB000000 		movl	$0, %ebx
 12331      00
 12332 8e51 EB06     		jmp	.L971
 12333              	.L1157:
 12334 8e53 90       		nop
 12335 8e54 BB010000 		movl	$1, %ebx
 12335      00
 12336              	.L971:
 12337 8e59 488D8590 		leaq	-3952(%rbp), %rax
 12337      F0FFFF
 12338 8e60 4889C7   		movq	%rax, %rdi
 12339 8e63 E8000000 		call	_ZN10vector_varD1Ev
 12339      00
 12340 8e68 83FB01   		cmpl	$1, %ebx
 12341 8e6b 7407     		je	.L1158
 12342 8e6d BB000000 		movl	$0, %ebx
 12342      00
 12343 8e72 EB06     		jmp	.L975
 12344              	.L1158:
 12345 8e74 90       		nop
 12346 8e75 BB010000 		movl	$1, %ebx
 12346      00
 12347              	.L975:
 12348 8e7a 488D8570 		leaq	-3984(%rbp), %rax
 12348      F0FFFF
 12349 8e81 4889C7   		movq	%rax, %rdi
 12350 8e84 E8000000 		call	_ZN10vector_varD1Ev
 12350      00
 12351 8e89 83FB01   		cmpl	$1, %ebx
 12352 8e8c 7407     		je	.L1159
 12353 8e8e BB000000 		movl	$0, %ebx
 12353      00
 12354 8e93 EB06     		jmp	.L979
 12355              	.L1159:
 12356 8e95 90       		nop
GAS LISTING /tmp/cc2K2nX4.s 			page 367


 12357 8e96 BB010000 		movl	$1, %ebx
 12357      00
 12358              	.L979:
 12359 8e9b 488D8550 		leaq	-4016(%rbp), %rax
 12359      F0FFFF
 12360 8ea2 4889C7   		movq	%rax, %rdi
 12361 8ea5 E8000000 		call	_ZN10vector_varD1Ev
 12361      00
 12362 8eaa 83FB01   		cmpl	$1, %ebx
 12363 8ead 7407     		je	.L1160
 12364 8eaf BB000000 		movl	$0, %ebx
 12364      00
 12365 8eb4 EB06     		jmp	.L983
 12366              	.L1160:
 12367 8eb6 90       		nop
 12368 8eb7 BB010000 		movl	$1, %ebx
 12368      00
 12369              	.L983:
 12370 8ebc 488D8530 		leaq	-4048(%rbp), %rax
 12370      F0FFFF
 12371 8ec3 4889C7   		movq	%rax, %rdi
 12372 8ec6 E8000000 		call	_ZN10vector_varD1Ev
 12372      00
 12373 8ecb 83FB01   		cmpl	$1, %ebx
 12374 8ece 7407     		je	.L1161
 12375 8ed0 BB000000 		movl	$0, %ebx
 12375      00
 12376 8ed5 EB06     		jmp	.L987
 12377              	.L1161:
 12378 8ed7 90       		nop
 12379 8ed8 BB010000 		movl	$1, %ebx
 12379      00
 12380              	.L987:
 12381 8edd 488D85C0 		leaq	-576(%rbp), %rax
 12381      FDFFFF
 12382 8ee4 4889C7   		movq	%rax, %rdi
 12383 8ee7 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 12383      00
 12384 8eec 83FB01   		cmpl	$1, %ebx
 12385 8eef 7407     		je	.L1162
 12386 8ef1 BB000000 		movl	$0, %ebx
 12386      00
 12387 8ef6 EB06     		jmp	.L991
 12388              	.L1162:
 872:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12389              		.loc 9 872 0
 12390 8ef8 90       		nop
 12391 8ef9 BB010000 		movl	$1, %ebx
 12391      00
 12392              	.L991:
 12393 8efe 488D8570 		leaq	-2960(%rbp), %rax
 12393      F4FFFF
 12394 8f05 4889C7   		movq	%rax, %rdi
 12395 8f08 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 12395      00
 12396 8f0d 83FB01   		cmpl	$1, %ebx
 12397 8f10 7407     		je	.L1163
GAS LISTING /tmp/cc2K2nX4.s 			page 368


 12398 8f12 BB000000 		movl	$0, %ebx
 12398      00
 12399 8f17 EB06     		jmp	.L995
 12400              	.L1163:
 858:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg == 0){
 12401              		.loc 9 858 0
 12402 8f19 90       		nop
 12403 8f1a BB010000 		movl	$1, %ebx
 12403      00
 12404              	.L995:
 12405 8f1f 488D85C0 		leaq	-1088(%rbp), %rax
 12405      FBFFFF
 12406 8f26 4889C7   		movq	%rax, %rdi
 12407 8f29 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 12407      00
 12408 8f2e 83FB01   		cmpl	$1, %ebx
 12409 8f31 7407     		je	.L1164
 12410 8f33 BB000000 		movl	$0, %ebx
 12410      00
 12411 8f38 EB06     		jmp	.L999
 12412              	.L1164:
 857:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 12413              		.loc 9 857 0
 12414 8f3a 90       		nop
 12415 8f3b BB010000 		movl	$1, %ebx
 12415      00
 12416              	.L999:
 12417 8f40 488D8550 		leaq	-3504(%rbp), %rax
 12417      F2FFFF
 12418 8f47 4889C7   		movq	%rax, %rdi
 12419 8f4a E8000000 		call	_ZN8flux_varD1Ev
 12419      00
 12420 8f4f 83FB01   		cmpl	$1, %ebx
 12421 8f52 7407     		je	.L1165
 12422 8f54 BB000000 		movl	$0, %ebx
 12422      00
 12423 8f59 EB06     		jmp	.L1003
 12424              	.L1165:
 835:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 12425              		.loc 9 835 0
 12426 8f5b 90       		nop
 12427 8f5c BB010000 		movl	$1, %ebx
 12427      00
 12428              	.L1003:
 12429 8f61 488D85F0 		leaq	-1552(%rbp), %rax
 12429      F9FFFF
 12430 8f68 4889C7   		movq	%rax, %rdi
 12431 8f6b E8000000 		call	_ZN22artificial_dissipationD1Ev
 12431      00
 12432 8f70 83FB01   		cmpl	$1, %ebx
 12433 8f73 7407     		je	.L1166
 12434 8f75 BB000000 		movl	$0, %ebx
 12434      00
 12435 8f7a EB06     		jmp	.L1007
 12436              	.L1166:
 826:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12437              		.loc 9 826 0
GAS LISTING /tmp/cc2K2nX4.s 			page 369


 12438 8f7c 90       		nop
 12439 8f7d BB010000 		movl	$1, %ebx
 12439      00
 12440              	.L1007:
 12441 8f82 488D8590 		leaq	-3184(%rbp), %rax
 12441      F3FFFF
 12442 8f89 4889C7   		movq	%rax, %rdi
 12443 8f8c E8000000 		call	_ZN8SolutionD1Ev
 12443      00
 12444 8f91 83FB01   		cmpl	$1, %ebx
 12445 8f94 7407     		je	.L1167
 12446 8f96 BB000000 		movl	$0, %ebx
 12446      00
 12447 8f9b EB06     		jmp	.L1011
 12448              	.L1167:
 823:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12449              		.loc 9 823 0
 12450 8f9d 90       		nop
 12451 8f9e BB010000 		movl	$1, %ebx
 12451      00
 12452              	.L1011:
 12453 8fa3 488D8540 		leaq	-3264(%rbp), %rax
 12453      F3FFFF
 12454 8faa 4889C7   		movq	%rax, %rdi
 12455 8fad E8000000 		call	_ZN8SolutionD1Ev
 12455      00
 12456 8fb2 83FB01   		cmpl	$1, %ebx
 822:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells());
 12457              		.loc 9 822 0
 12458 8fb5 90       		nop
1397:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 12459              		.loc 9 1397 0
 12460 8fb6 488B45C8 		movq	-56(%rbp), %rax
 12461 8fba 64483304 		xorq	%fs:40, %rax
 12461      25280000 
 12461      00
 12462 8fc3 0F842306 		je	.L1088
 12462      0000
 12463 8fc9 E9190600 		jmp	.L1137
 12463      00
 12464              	.L1094:
 12465 8fce 4889C3   		movq	%rax, %rbx
 862:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }else{
 12466              		.loc 9 862 0
 12467 8fd1 488D8590 		leaq	-2928(%rbp), %rax
 12467      F4FFFF
 12468 8fd8 4889C7   		movq	%rax, %rdi
 12469 8fdb E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 12469      00
 12470 8fe0 E9890500 		jmp	.L1016
 12470      00
 12471              	.L1095:
 12472 8fe5 4889C3   		movq	%rax, %rbx
 864:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
 12473              		.loc 9 864 0
 12474 8fe8 488D85B0 		leaq	-2896(%rbp), %rax
 12474      F4FFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 370


 12475 8fef 4889C7   		movq	%rax, %rdi
 12476 8ff2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 12476      00
 12477 8ff7 E9720500 		jmp	.L1016
 12477      00
 12478              	.L1097:
 12479 8ffc 4889C3   		movq	%rax, %rbx
 875:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12480              		.loc 9 875 0
 12481 8fff 488D85D0 		leaq	-2864(%rbp), %rax
 12481      F4FFFF
 12482 9006 4889C7   		movq	%rax, %rdi
 12483 9009 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 12483      00
 12484 900e E9470500 		jmp	.L1019
 12484      00
 12485              	.L1117:
 12486 9013 4989C7   		movq	%rax, %r15
 12487 9016 4D85E4   		testq	%r12, %r12
 12488 9019 7435     		je	.L1021
 900:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg_forcing_term==NULL) exit (1);
 12489              		.loc 9 900 0 discriminator 81
 12490 901b 4C89F0   		movq	%r14, %rax
 12491 901e 4829C3   		subq	%rax, %rbx
 12492 9021 4889DA   		movq	%rbx, %rdx
 12493 9024 4889D0   		movq	%rdx, %rax
 12494 9027 48C1E002 		salq	$2, %rax
 12495 902b 4801D0   		addq	%rdx, %rax
 12496 902e 48C1E003 		salq	$3, %rax
 12497 9032 4883E828 		subq	$40, %rax
 12498 9036 498D1C04 		leaq	(%r12,%rax), %rbx
 12499              	.L1022:
 12500 903a 4C39E3   		cmpq	%r12, %rbx
 12501 903d 7411     		je	.L1021
 12502 903f 4883EB28 		subq	$40, %rbx
 900:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg_forcing_term==NULL) exit (1);
 12503              		.loc 9 900 0 is_stmt 0 discriminator 85
 12504 9043 488B03   		movq	(%rbx), %rax
 12505 9046 488B00   		movq	(%rax), %rax
 12506 9049 4889DF   		movq	%rbx, %rdi
 12507 904c FFD0     		call	*%rax
 12508 904e EBEA     		jmp	.L1022
 12509              	.L1021:
 12510 9050 4C89FB   		movq	%r15, %rbx
 900:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg_forcing_term==NULL) exit (1);
 12511              		.loc 9 900 0 discriminator 86
 12512 9053 4C89EF   		movq	%r13, %rdi
 12513 9056 E8000000 		call	_ZdaPv
 12513      00
 12514 905b E97E0300 		jmp	.L1023
 12514      00
 12515              	.L1118:
 12516 9060 4989C5   		movq	%rax, %r13
 12517 9063 4D85E4   		testq	%r12, %r12
 12518 9066 7433     		je	.L1025
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12519              		.loc 9 902 0 is_stmt 1 discriminator 87
GAS LISTING /tmp/cc2K2nX4.s 			page 371


 12520 9068 B8030000 		movl	$3, %eax
 12520      00
 12521 906d 4829D8   		subq	%rbx, %rax
 12522 9070 4889C2   		movq	%rax, %rdx
 12523 9073 4889D0   		movq	%rdx, %rax
 12524 9076 48C1E002 		salq	$2, %rax
 12525 907a 4801D0   		addq	%rdx, %rax
 12526 907d 48C1E003 		salq	$3, %rax
 12527 9081 498D1C04 		leaq	(%r12,%rax), %rbx
 12528              	.L1026:
 12529 9085 4C39E3   		cmpq	%r12, %rbx
 12530 9088 7411     		je	.L1025
 12531 908a 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12532              		.loc 9 902 0 is_stmt 0 discriminator 91
 12533 908e 488B03   		movq	(%rbx), %rax
 12534 9091 488B00   		movq	(%rax), %rax
 12535 9094 4889DF   		movq	%rbx, %rdi
 12536 9097 FFD0     		call	*%rax
 12537 9099 EBEA     		jmp	.L1026
 12538              	.L1025:
 12539 909b 4C89EB   		movq	%r13, %rbx
 12540 909e E93B0300 		jmp	.L1023
 12540      00
 12541              	.L1119:
 12542 90a3 4989C5   		movq	%rax, %r13
 12543 90a6 4D85E4   		testq	%r12, %r12
 12544 90a9 7433     		je	.L1028
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12545              		.loc 9 902 0 discriminator 93
 12546 90ab B8030000 		movl	$3, %eax
 12546      00
 12547 90b0 4829D8   		subq	%rbx, %rax
 12548 90b3 4889C2   		movq	%rax, %rdx
 12549 90b6 4889D0   		movq	%rdx, %rax
 12550 90b9 48C1E002 		salq	$2, %rax
 12551 90bd 4801D0   		addq	%rdx, %rax
 12552 90c0 48C1E003 		salq	$3, %rax
 12553 90c4 498D1C04 		leaq	(%r12,%rax), %rbx
 12554              	.L1029:
 12555 90c8 4C39E3   		cmpq	%r12, %rbx
 12556 90cb 7411     		je	.L1028
 12557 90cd 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12558              		.loc 9 902 0 discriminator 97
 12559 90d1 488B03   		movq	(%rbx), %rax
 12560 90d4 488B00   		movq	(%rax), %rax
 12561 90d7 4889DF   		movq	%rbx, %rdi
 12562 90da FFD0     		call	*%rax
 12563 90dc EBEA     		jmp	.L1029
 12564              	.L1028:
 12565 90de 4D89EC   		movq	%r13, %r12
 12566 90e1 E9C50200 		jmp	.L1030
 12566      00
 12567              	.L1120:
 12568 90e6 4989C5   		movq	%rax, %r13
 12569 90e9 4D85E4   		testq	%r12, %r12
GAS LISTING /tmp/cc2K2nX4.s 			page 372


 12570 90ec 7433     		je	.L1032
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12571              		.loc 9 902 0 discriminator 99
 12572 90ee B8030000 		movl	$3, %eax
 12572      00
 12573 90f3 4829D8   		subq	%rbx, %rax
 12574 90f6 4889C2   		movq	%rax, %rdx
 12575 90f9 4889D0   		movq	%rdx, %rax
 12576 90fc 48C1E002 		salq	$2, %rax
 12577 9100 4801D0   		addq	%rdx, %rax
 12578 9103 48C1E003 		salq	$3, %rax
 12579 9107 498D1C04 		leaq	(%r12,%rax), %rbx
 12580              	.L1033:
 12581 910b 4C39E3   		cmpq	%r12, %rbx
 12582 910e 7411     		je	.L1032
 12583 9110 4883EB28 		subq	$40, %rbx
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12584              		.loc 9 902 0 discriminator 103
 12585 9114 488B03   		movq	(%rbx), %rax
 12586 9117 488B00   		movq	(%rax), %rax
 12587 911a 4889DF   		movq	%rbx, %rdi
 12588 911d FFD0     		call	*%rax
 12589 911f EBEA     		jmp	.L1033
 12590              	.L1032:
 12591 9121 4D89EC   		movq	%r13, %r12
 12592 9124 E9570200 		jmp	.L1034
 12592      00
 12593              	.L1121:
 12594 9129 4989C5   		movq	%rax, %r13
 12595 912c 4D85E4   		testq	%r12, %r12
 12596 912f 7433     		je	.L1036
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12597              		.loc 9 903 0 is_stmt 1 discriminator 105
 12598 9131 B8030000 		movl	$3, %eax
 12598      00
 12599 9136 4829D8   		subq	%rbx, %rax
 12600 9139 4889C2   		movq	%rax, %rdx
 12601 913c 4889D0   		movq	%rdx, %rax
 12602 913f 48C1E002 		salq	$2, %rax
 12603 9143 4801D0   		addq	%rdx, %rax
 12604 9146 48C1E003 		salq	$3, %rax
 12605 914a 498D1C04 		leaq	(%r12,%rax), %rbx
 12606              	.L1037:
 12607 914e 4C39E3   		cmpq	%r12, %rbx
 12608 9151 7411     		je	.L1036
 12609 9153 4883EB28 		subq	$40, %rbx
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12610              		.loc 9 903 0 is_stmt 0 discriminator 109
 12611 9157 488B03   		movq	(%rbx), %rax
 12612 915a 488B00   		movq	(%rax), %rax
 12613 915d 4889DF   		movq	%rbx, %rdi
 12614 9160 FFD0     		call	*%rax
 12615 9162 EBEA     		jmp	.L1037
 12616              	.L1036:
 12617 9164 4D89EC   		movq	%r13, %r12
 12618 9167 E9E90100 		jmp	.L1038
 12618      00
GAS LISTING /tmp/cc2K2nX4.s 			page 373


 12619              	.L1122:
 12620 916c 4989C5   		movq	%rax, %r13
 12621 916f 4D85E4   		testq	%r12, %r12
 12622 9172 7433     		je	.L1040
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12623              		.loc 9 904 0 is_stmt 1 discriminator 111
 12624 9174 B8030000 		movl	$3, %eax
 12624      00
 12625 9179 4829D8   		subq	%rbx, %rax
 12626 917c 4889C2   		movq	%rax, %rdx
 12627 917f 4889D0   		movq	%rdx, %rax
 12628 9182 48C1E002 		salq	$2, %rax
 12629 9186 4801D0   		addq	%rdx, %rax
 12630 9189 48C1E003 		salq	$3, %rax
 12631 918d 498D1C04 		leaq	(%r12,%rax), %rbx
 12632              	.L1041:
 12633 9191 4C39E3   		cmpq	%r12, %rbx
 12634 9194 7411     		je	.L1040
 12635 9196 4883EB28 		subq	$40, %rbx
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12636              		.loc 9 904 0 is_stmt 0 discriminator 115
 12637 919a 488B03   		movq	(%rbx), %rax
 12638 919d 488B00   		movq	(%rax), %rax
 12639 91a0 4889DF   		movq	%rbx, %rdi
 12640 91a3 FFD0     		call	*%rax
 12641 91a5 EBEA     		jmp	.L1041
 12642              	.L1040:
 12643 91a7 4D89EC   		movq	%r13, %r12
 12644 91aa E97B0100 		jmp	.L1042
 12644      00
 12645              	.L1124:
 12646 91af 4889C3   		movq	%rax, %rbx
 12647              	.LBB87:
 12648              	.LBB86:
 12649              	.LBB85:
 12650              	.LBB84:
 12651              	.LBB83:
 12652              	.LBB82:
 12653              	.LBB81:
 12654              	.LBB80:
 12655              	.LBB79:
 12656              	.LBB78:
1009:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_u.Get_Gradient(temp_soln.get_u(i), soln.get_u(neighbour),cell_1,cell_
 12657              		.loc 9 1009 0 is_stmt 1
 12658 91b2 488D8510 		leaq	-3568(%rbp), %rax
 12658      F2FFFF
 12659 91b9 4889C7   		movq	%rax, %rdi
 12660 91bc E8000000 		call	_ZN10vector_varD1Ev
 12660      00
 12661 91c1 488D8530 		leaq	-3536(%rbp), %rax
 12661      F2FFFF
 12662 91c8 4889C7   		movq	%rax, %rdi
 12663 91cb E8000000 		call	_ZN10vector_varD1Ev
 12663      00
 12664 91d0 4989DC   		movq	%rbx, %r12
 12665 91d3 E9270100 		jmp	.L1044
 12665      00
GAS LISTING /tmp/cc2K2nX4.s 			page 374


 12666              	.L1125:
 12667 91d8 4889C3   		movq	%rax, %rbx
1010:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                         delta_v.Get_Gradient(temp_soln.get_v(i), soln.get_v(neighbour),cell_1,cell_
 12668              		.loc 9 1010 0
 12669 91db 488D8510 		leaq	-3568(%rbp), %rax
 12669      F2FFFF
 12670 91e2 4889C7   		movq	%rax, %rdi
 12671 91e5 E8000000 		call	_ZN10vector_varD1Ev
 12671      00
 12672 91ea 488D8530 		leaq	-3536(%rbp), %rax
 12672      F2FFFF
 12673 91f1 4889C7   		movq	%rax, %rdi
 12674 91f4 E8000000 		call	_ZN10vector_varD1Ev
 12674      00
 12675 91f9 4989DC   		movq	%rbx, %r12
 12676 91fc E9FE0000 		jmp	.L1044
 12676      00
 12677              	.L1126:
 12678 9201 4889C3   		movq	%rax, %rbx
1011:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12679              		.loc 9 1011 0
 12680 9204 488D8510 		leaq	-3568(%rbp), %rax
 12680      F2FFFF
 12681 920b 4889C7   		movq	%rax, %rdi
 12682 920e E8000000 		call	_ZN10vector_varD1Ev
 12682      00
 12683 9213 488D8530 		leaq	-3536(%rbp), %rax
 12683      F2FFFF
 12684 921a 4889C7   		movq	%rax, %rdi
 12685 921d E8000000 		call	_ZN10vector_varD1Ev
 12685      00
 12686 9222 4989DC   		movq	%rbx, %r12
 12687 9225 E9D50000 		jmp	.L1044
 12687      00
 12688              	.L1128:
 12689 922a 4889C3   		movq	%rax, %rbx
 12690              	.LBB76:
1040:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 12691              		.loc 9 1040 0
 12692 922d 488D8530 		leaq	-3536(%rbp), %rax
 12692      F2FFFF
 12693 9234 4889C7   		movq	%rax, %rdi
 12694 9237 E8000000 		call	_ZN10vector_varD1Ev
 12694      00
 12695 923c EB03     		jmp	.L1048
 12696              	.L1127:
 12697 923e 4889C3   		movq	%rax, %rbx
 12698              	.L1048:
1039:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                 +   pow(-1.0,signbit(cell_normal.x))*-1 *delta_rho.Dot_Product(e_al
 12699              		.loc 9 1039 0 discriminator 1
 12700 9241 488D8510 		leaq	-3568(%rbp), %rax
 12700      F2FFFF
 12701 9248 4889C7   		movq	%rax, %rdi
 12702 924b E8000000 		call	_ZN10vector_varD1Ev
 12702      00
 12703 9250 4989DC   		movq	%rbx, %r12
 12704 9253 E9A70000 		jmp	.L1044
GAS LISTING /tmp/cc2K2nX4.s 			page 375


 12704      00
 12705              	.L1129:
 12706 9258 4889C3   		movq	%rax, %rbx
1047:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_u(i) );
 12707              		.loc 9 1047 0
 12708 925b 488D8530 		leaq	-3536(%rbp), %rax
 12708      F2FFFF
 12709 9262 4889C7   		movq	%rax, %rdi
 12710 9265 E8000000 		call	_ZN10vector_varD1Ev
 12710      00
 12711 926a 4989DC   		movq	%rbx, %r12
 12712 926d E98D0000 		jmp	.L1044
 12712      00
 12713              	.L1130:
 12714 9272 4889C3   		movq	%rax, %rbx
1049:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                             + temp_soln.get_v(i)) ;
 12715              		.loc 9 1049 0
 12716 9275 488D8530 		leaq	-3536(%rbp), %rax
 12716      F2FFFF
 12717 927c 4889C7   		movq	%rax, %rdi
 12718 927f E8000000 		call	_ZN10vector_varD1Ev
 12718      00
 12719 9284 4989DC   		movq	%rbx, %r12
 12720 9287 EB76     		jmp	.L1044
 12721              	.L1131:
 12722 9289 4889C3   		movq	%rax, %rbx
1069:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_lattice[k] = feq_lattice[k]
 12723              		.loc 9 1069 0
 12724 928c 488D8530 		leaq	-3536(%rbp), %rax
 12724      F2FFFF
 12725 9293 4889C7   		movq	%rax, %rdi
 12726 9296 E8000000 		call	_ZN10vector_varD1Ev
 12726      00
 12727 929b 4989DC   		movq	%rbx, %r12
 12728 929e EB5F     		jmp	.L1044
 12729              	.L1132:
 12730 92a0 4889C3   		movq	%rax, %rbx
1071:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             / (2.0 * pow(cs,4)* globals.pre_conditioned_gamma) ;
 12731              		.loc 9 1071 0
 12732 92a3 488D8530 		leaq	-3536(%rbp), %rax
 12732      F2FFFF
 12733 92aa 4889C7   		movq	%rax, %rdi
 12734 92ad E8000000 		call	_ZN10vector_varD1Ev
 12734      00
 12735 92b2 4989DC   		movq	%rbx, %r12
 12736 92b5 EB48     		jmp	.L1044
 12737              	.L1133:
 12738 92b7 4889C3   		movq	%rax, %rbx
 12739              	.LBE76:
 12740              	.LBB77:
1119:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                             feq_interface = feq_interface
 12741              		.loc 9 1119 0
 12742 92ba 488D8530 		leaq	-3536(%rbp), %rax
 12742      F2FFFF
 12743 92c1 4889C7   		movq	%rax, %rdi
 12744 92c4 E8000000 		call	_ZN10vector_varD1Ev
 12744      00
GAS LISTING /tmp/cc2K2nX4.s 			page 376


 12745 92c9 4989DC   		movq	%rbx, %r12
 12746 92cc EB31     		jmp	.L1044
 12747              	.L1134:
 12748 92ce 4889C3   		movq	%rax, %rbx
1121:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                     / (2 * pow(cs,4) * globals.pre_conditioned_gamma)
 12749              		.loc 9 1121 0
 12750 92d1 488D8530 		leaq	-3536(%rbp), %rax
 12750      F2FFFF
 12751 92d8 4889C7   		movq	%rax, %rdi
 12752 92db E8000000 		call	_ZN10vector_varD1Ev
 12752      00
 12753 92e0 4989DC   		movq	%rbx, %r12
 12754 92e3 EB1A     		jmp	.L1044
 12755              	.L1135:
 12756 92e5 4889C3   		movq	%rax, %rbx
 12757              	.LBE77:
 12758              	.LBE78:
 12759              	.LBE79:
 12760              	.LBE80:
 12761              	.LBE81:
 12762              	.LBE82:
 12763              	.LBE83:
 12764              	.LBE84:
 12765              	.LBE85:
1386:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                          init_conds,mg,globals,domain,bcs);
 12766              		.loc 9 1386 0
 12767 92e8 488D85A0 		leaq	-1376(%rbp), %rax
 12767      FAFFFF
 12768 92ef 4889C7   		movq	%rax, %rdi
 12769 92f2 E8000000 		call	_ZN16global_variablesD1Ev
 12769      00
 12770 92f7 4989DC   		movq	%rbx, %r12
 12771 92fa EB03     		jmp	.L1044
 12772              	.L1123:
 12773 92fc 4989C4   		movq	%rax, %r12
 12774              	.L1044:
 12775              	.LBE86:
 12776              	.LBE87:
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12777              		.loc 9 904 0
 12778 92ff 488D9D50 		leaq	-1712(%rbp), %rbx
 12778      F9FFFF
 12779 9306 4881C3A0 		addq	$160, %rbx
 12779      000000
 12780              	.L1057:
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12781              		.loc 9 904 0 is_stmt 0 discriminator 8
 12782 930d 488D8550 		leaq	-1712(%rbp), %rax
 12782      F9FFFF
 12783 9314 4839C3   		cmpq	%rax, %rbx
 12784 9317 7411     		je	.L1042
 904:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double interface_area;
 12785              		.loc 9 904 0 discriminator 7
 12786 9319 4883EB28 		subq	$40, %rbx
 12787 931d 488B03   		movq	(%rbx), %rax
 12788 9320 488B00   		movq	(%rax), %rax
 12789 9323 4889DF   		movq	%rbx, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 377


 12790 9326 FFD0     		call	*%rax
 12791 9328 EBE3     		jmp	.L1057
 12792              	.L1042:
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12793              		.loc 9 903 0 is_stmt 1
 12794 932a 488D9DB0 		leaq	-1872(%rbp), %rbx
 12794      F8FFFF
 12795 9331 4881C3A0 		addq	$160, %rbx
 12795      000000
 12796              	.L1059:
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12797              		.loc 9 903 0 is_stmt 0 discriminator 8
 12798 9338 488D85B0 		leaq	-1872(%rbp), %rax
 12798      F8FFFF
 12799 933f 4839C3   		cmpq	%rax, %rbx
 12800 9342 7411     		je	.L1038
 903:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var int_debug[4];
 12801              		.loc 9 903 0 discriminator 7
 12802 9344 4883EB28 		subq	$40, %rbx
 12803 9348 488B03   		movq	(%rbx), %rax
 12804 934b 488B00   		movq	(%rax), %rax
 12805 934e 4889DF   		movq	%rbx, %rdi
 12806 9351 FFD0     		call	*%rax
 12807 9353 EBE3     		jmp	.L1059
 12808              	.L1038:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12809              		.loc 9 902 0 is_stmt 1
 12810 9355 488D9D10 		leaq	-2032(%rbp), %rbx
 12810      F8FFFF
 12811 935c 4881C3A0 		addq	$160, %rbx
 12811      000000
 12812              	.L1061:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12813              		.loc 9 902 0 is_stmt 0 discriminator 18
 12814 9363 488D8510 		leaq	-2032(%rbp), %rax
 12814      F8FFFF
 12815 936a 4839C3   		cmpq	%rax, %rbx
 12816 936d 7411     		je	.L1034
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12817              		.loc 9 902 0 discriminator 17
 12818 936f 4883EB28 		subq	$40, %rbx
 12819 9373 488B03   		movq	(%rbx), %rax
 12820 9376 488B00   		movq	(%rax), %rax
 12821 9379 4889DF   		movq	%rbx, %rdi
 12822 937c FFD0     		call	*%rax
 12823 937e EBE3     		jmp	.L1061
 12824              	.L1034:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12825              		.loc 9 902 0
 12826 9380 488D9D70 		leaq	-2192(%rbp), %rbx
 12826      F7FFFF
 12827 9387 4881C3A0 		addq	$160, %rbx
 12827      000000
 12828              	.L1063:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12829              		.loc 9 902 0 discriminator 21
 12830 938e 488D8570 		leaq	-2192(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 378


 12830      F7FFFF
 12831 9395 4839C3   		cmpq	%rax, %rbx
 12832 9398 7411     		je	.L1030
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12833              		.loc 9 902 0 discriminator 20
 12834 939a 4883EB28 		subq	$40, %rbx
 12835 939e 488B03   		movq	(%rbx), %rax
 12836 93a1 488B00   		movq	(%rax), %rax
 12837 93a4 4889DF   		movq	%rbx, %rdi
 12838 93a7 FFD0     		call	*%rax
 12839 93a9 EBE3     		jmp	.L1063
 12840              	.L1030:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12841              		.loc 9 902 0
 12842 93ab 488D9DD0 		leaq	-2352(%rbp), %rbx
 12842      F6FFFF
 12843 93b2 4881C3A0 		addq	$160, %rbx
 12843      000000
 12844              	.L1065:
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12845              		.loc 9 902 0 discriminator 24
 12846 93b9 488D85D0 		leaq	-2352(%rbp), %rax
 12846      F6FFFF
 12847 93c0 4839C3   		cmpq	%rax, %rbx
 12848 93c3 7411     		je	.L1064
 902:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var dbug [4];
 12849              		.loc 9 902 0 discriminator 23
 12850 93c5 4883EB28 		subq	$40, %rbx
 12851 93c9 488B03   		movq	(%rbx), %rax
 12852 93cc 488B00   		movq	(%rax), %rax
 12853 93cf 4889DF   		movq	%rbx, %rdi
 12854 93d2 FFD0     		call	*%rax
 12855 93d4 EBE3     		jmp	.L1065
 12856              	.L1064:
 12857 93d6 4C89E3   		movq	%r12, %rbx
 12858 93d9 EB03     		jmp	.L1023
 12859              	.L1116:
 12860 93db 4889C3   		movq	%rax, %rbx
 12861              	.L1023:
 897:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var *mg_forcing_term;
 12862              		.loc 9 897 0 is_stmt 1
 12863 93de 488D85E0 		leaq	-3360(%rbp), %rax
 12863      F2FFFF
 12864 93e5 4889C7   		movq	%rax, %rdi
 12865 93e8 E8000000 		call	_ZN8flux_varD1Ev
 12865      00
 12866 93ed EB03     		jmp	.L1066
 12867              	.L1115:
 12868 93ef 4889C3   		movq	%rax, %rbx
 12869              	.L1066:
 896:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 12870              		.loc 9 896 0
 12871 93f2 488D85B0 		leaq	-3408(%rbp), %rax
 12871      F2FFFF
 12872 93f9 4889C7   		movq	%rax, %rdi
 12873 93fc E8000000 		call	_ZN8flux_varD1Ev
 12873      00
GAS LISTING /tmp/cc2K2nX4.s 			page 379


 12874 9401 EB03     		jmp	.L1067
 12875              	.L1114:
 12876 9403 4889C3   		movq	%rax, %rbx
 12877              	.L1067:
 896:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var cell_flux ;
 12878              		.loc 9 896 0 is_stmt 0 discriminator 2
 12879 9406 488D8580 		leaq	-3456(%rbp), %rax
 12879      F2FFFF
 12880 940d 4889C7   		movq	%rax, %rdi
 12881 9410 E8000000 		call	_ZN8flux_varD1Ev
 12881      00
 12882 9415 EB03     		jmp	.L1068
 12883              	.L1113:
 12884 9417 4889C3   		movq	%rax, %rbx
 12885              	.L1068:
 895:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     flux_var x_flux , y_flux;
 12886              		.loc 9 895 0 is_stmt 1
 12887 941a 488D85E0 		leaq	-3104(%rbp), %rax
 12887      F3FFFF
 12888 9421 4889C7   		movq	%rax, %rdi
 12889 9424 E8000000 		call	_ZN9residualsD1Ev
 12889      00
 12890 9429 EB03     		jmp	.L1069
 12891              	.L1112:
 12892 942b 4889C3   		movq	%rax, %rbx
 12893              	.L1069:
 893:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double rho_interface,feq_interface,fneq_interface;
 12894              		.loc 9 893 0
 12895 942e 488D85F0 		leaq	-3600(%rbp), %rax
 12895      F1FFFF
 12896 9435 4889C7   		movq	%rax, %rdi
 12897 9438 E8000000 		call	_ZN10vector_varD1Ev
 12897      00
 12898 943d EB03     		jmp	.L1070
 12899              	.L1111:
 12900 943f 4889C3   		movq	%rax, %rbx
 12901              	.L1070:
 892:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var cell_normal;
 12902              		.loc 9 892 0
 12903 9442 488D85D0 		leaq	-3632(%rbp), %rax
 12903      F1FFFF
 12904 9449 4889C7   		movq	%rax, %rdi
 12905 944c E8000000 		call	_ZN10vector_varD1Ev
 12905      00
 12906 9451 EB03     		jmp	.L1071
 12907              	.L1110:
 12908 9453 4889C3   		movq	%rax, %rbx
 12909              	.L1071:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 12910              		.loc 9 891 0
 12911 9456 488D85B0 		leaq	-3664(%rbp), %rax
 12911      F1FFFF
 12912 945d 4889C7   		movq	%rax, %rdi
 12913 9460 E8000000 		call	_ZN10vector_varD1Ev
 12913      00
 12914 9465 EB03     		jmp	.L1072
 12915              	.L1109:
GAS LISTING /tmp/cc2K2nX4.s 			page 380


 12916 9467 4889C3   		movq	%rax, %rbx
 12917              	.L1072:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 12918              		.loc 9 891 0 is_stmt 0 discriminator 6
 12919 946a 488D8590 		leaq	-3696(%rbp), %rax
 12919      F1FFFF
 12920 9471 4889C7   		movq	%rax, %rdi
 12921 9474 E8000000 		call	_ZN10vector_varD1Ev
 12921      00
 12922 9479 EB03     		jmp	.L1073
 12923              	.L1108:
 12924 947b 4889C3   		movq	%rax, %rbx
 12925              	.L1073:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 12926              		.loc 9 891 0 discriminator 4
 12927 947e 488D8570 		leaq	-3728(%rbp), %rax
 12927      F1FFFF
 12928 9485 4889C7   		movq	%rax, %rdi
 12929 9488 E8000000 		call	_ZN10vector_varD1Ev
 12929      00
 12930 948d EB03     		jmp	.L1074
 12931              	.L1107:
 12932 948f 4889C3   		movq	%rax, %rbx
 12933              	.L1074:
 891:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var flux_e_alpha;
 12934              		.loc 9 891 0 discriminator 2
 12935 9492 488D8550 		leaq	-3760(%rbp), %rax
 12935      F1FFFF
 12936 9499 4889C7   		movq	%rax, %rdi
 12937 949c E8000000 		call	_ZN10vector_varD1Ev
 12937      00
 12938 94a1 EB03     		jmp	.L1075
 12939              	.L1106:
 12940 94a3 4889C3   		movq	%rax, %rbx
 12941              	.L1075:
 890:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var e_alpha, u_lattice,  rho_u_interface , u_interface;
 12942              		.loc 9 890 0 is_stmt 1
 12943 94a6 488D8530 		leaq	-3792(%rbp), %rax
 12943      F1FFFF
 12944 94ad 4889C7   		movq	%rax, %rdi
 12945 94b0 E8000000 		call	_ZN10vector_varD1Ev
 12945      00
 12946 94b5 EB03     		jmp	.L1076
 12947              	.L1105:
 12948 94b7 4889C3   		movq	%rax, %rbx
 12949              	.L1076:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12950              		.loc 9 889 0
 12951 94ba 488D8510 		leaq	-3824(%rbp), %rax
 12951      F1FFFF
 12952 94c1 4889C7   		movq	%rax, %rdi
 12953 94c4 E8000000 		call	_ZN10vector_varD1Ev
 12953      00
 12954 94c9 EB03     		jmp	.L1077
 12955              	.L1104:
 12956 94cb 4889C3   		movq	%rax, %rbx
 12957              	.L1077:
GAS LISTING /tmp/cc2K2nX4.s 			page 381


 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12958              		.loc 9 889 0 is_stmt 0 discriminator 14
 12959 94ce 488D85F0 		leaq	-3856(%rbp), %rax
 12959      F0FFFF
 12960 94d5 4889C7   		movq	%rax, %rdi
 12961 94d8 E8000000 		call	_ZN10vector_varD1Ev
 12961      00
 12962 94dd EB03     		jmp	.L1078
 12963              	.L1103:
 12964 94df 4889C3   		movq	%rax, %rbx
 12965              	.L1078:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12966              		.loc 9 889 0 discriminator 12
 12967 94e2 488D85D0 		leaq	-3888(%rbp), %rax
 12967      F0FFFF
 12968 94e9 4889C7   		movq	%rax, %rdi
 12969 94ec E8000000 		call	_ZN10vector_varD1Ev
 12969      00
 12970 94f1 EB03     		jmp	.L1079
 12971              	.L1102:
 12972 94f3 4889C3   		movq	%rax, %rbx
 12973              	.L1079:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12974              		.loc 9 889 0 discriminator 10
 12975 94f6 488D85B0 		leaq	-3920(%rbp), %rax
 12975      F0FFFF
 12976 94fd 4889C7   		movq	%rax, %rdi
 12977 9500 E8000000 		call	_ZN10vector_varD1Ev
 12977      00
 12978 9505 EB03     		jmp	.L1080
 12979              	.L1101:
 12980 9507 4889C3   		movq	%rax, %rbx
 12981              	.L1080:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12982              		.loc 9 889 0 discriminator 8
 12983 950a 488D8590 		leaq	-3952(%rbp), %rax
 12983      F0FFFF
 12984 9511 4889C7   		movq	%rax, %rdi
 12985 9514 E8000000 		call	_ZN10vector_varD1Ev
 12985      00
 12986 9519 EB03     		jmp	.L1081
 12987              	.L1100:
 12988 951b 4889C3   		movq	%rax, %rbx
 12989              	.L1081:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12990              		.loc 9 889 0 discriminator 6
 12991 951e 488D8570 		leaq	-3984(%rbp), %rax
 12991      F0FFFF
 12992 9525 4889C7   		movq	%rax, %rdi
 12993 9528 E8000000 		call	_ZN10vector_varD1Ev
 12993      00
 12994 952d EB03     		jmp	.L1082
 12995              	.L1099:
 12996 952f 4889C3   		movq	%rax, %rbx
 12997              	.L1082:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 12998              		.loc 9 889 0 discriminator 4
GAS LISTING /tmp/cc2K2nX4.s 			page 382


 12999 9532 488D8550 		leaq	-4016(%rbp), %rax
 12999      F0FFFF
 13000 9539 4889C7   		movq	%rax, %rdi
 13001 953c E8000000 		call	_ZN10vector_varD1Ev
 13001      00
 13002 9541 EB03     		jmp	.L1083
 13003              	.L1098:
 13004 9543 4889C3   		movq	%rax, %rbx
 13005              	.L1083:
 889:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     vector_var relative_interface;
 13006              		.loc 9 889 0 discriminator 2
 13007 9546 488D8530 		leaq	-4048(%rbp), %rax
 13007      F0FFFF
 13008 954d 4889C7   		movq	%rax, %rdi
 13009 9550 E8000000 		call	_ZN10vector_varD1Ev
 13009      00
 13010 9555 EB03     		jmp	.L1019
 13011              	.L1096:
 13012 9557 4889C3   		movq	%rax, %rbx
 13013              	.L1019:
 872:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13014              		.loc 9 872 0 is_stmt 1
 13015 955a 488D85C0 		leaq	-576(%rbp), %rax
 13015      FDFFFF
 13016 9561 4889C7   		movq	%rax, %rdi
 13017 9564 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 13017      00
 13018 9569 EB03     		jmp	.L1016
 13019              	.L1093:
 13020 956b 4889C3   		movq	%rax, %rbx
 13021              	.L1016:
 858:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (mg == 0){
 13022              		.loc 9 858 0
 13023 956e 488D8570 		leaq	-2960(%rbp), %rax
 13023      F4FFFF
 13024 9575 4889C7   		movq	%rax, %rdi
 13025 9578 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 13025      00
 857:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     std::string output_dir;
 13026              		.loc 9 857 0
 13027 957d 488D85C0 		leaq	-1088(%rbp), %rax
 13027      FBFFFF
 13028 9584 4889C7   		movq	%rax, %rdi
 13029 9587 E8000000 		call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
 13029      00
 13030 958c EB03     		jmp	.L1084
 13031              	.L1092:
 13032 958e 4889C3   		movq	%rax, %rbx
 13033              	.L1084:
 835:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double RK_delta_t,RK_weight;
 13034              		.loc 9 835 0
 13035 9591 488D8550 		leaq	-3504(%rbp), %rax
 13035      F2FFFF
 13036 9598 4889C7   		movq	%rax, %rdi
 13037 959b E8000000 		call	_ZN8flux_varD1Ev
 13037      00
 13038 95a0 EB03     		jmp	.L1085
GAS LISTING /tmp/cc2K2nX4.s 			page 383


 13039              	.L1091:
 13040 95a2 4889C3   		movq	%rax, %rbx
 13041              	.L1085:
 826:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13042              		.loc 9 826 0
 13043 95a5 488D85F0 		leaq	-1552(%rbp), %rax
 13043      F9FFFF
 13044 95ac 4889C7   		movq	%rax, %rdi
 13045 95af E8000000 		call	_ZN22artificial_dissipationD1Ev
 13045      00
 13046 95b4 EB03     		jmp	.L1086
 13047              	.L1090:
 13048 95b6 4889C3   		movq	%rax, %rbx
 13049              	.L1086:
 823:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13050              		.loc 9 823 0
 13051 95b9 488D8590 		leaq	-3184(%rbp), %rax
 13051      F3FFFF
 13052 95c0 4889C7   		movq	%rax, %rdi
 13053 95c3 E8000000 		call	_ZN8SolutionD1Ev
 13053      00
 13054 95c8 EB03     		jmp	.L1087
 13055              	.L1089:
 13056 95ca 4889C3   		movq	%rax, %rbx
 13057              	.L1087:
 822:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution soln_t0(Mesh.get_total_cells());
 13058              		.loc 9 822 0
 13059 95cd 488D8540 		leaq	-3264(%rbp), %rax
 13059      F3FFFF
 13060 95d4 4889C7   		movq	%rax, %rdi
 13061 95d7 E8000000 		call	_ZN8SolutionD1Ev
 13061      00
 13062 95dc 4889D8   		movq	%rbx, %rax
 13063 95df 4889C7   		movq	%rax, %rdi
 13064              	.LEHB156:
 13065 95e2 E8000000 		call	_Unwind_Resume
 13065      00
 13066              	.LEHE156:
 13067              	.L1137:
 13068              		.loc 9 1397 0
 13069 95e7 E8000000 		call	__stack_chk_fail
 13069      00
 13070              	.L1088:
 13071 95ec 488D65D8 		leaq	-40(%rbp), %rsp
 13072 95f0 5B       		popq	%rbx
 13073 95f1 415C     		popq	%r12
 13074 95f3 415D     		popq	%r13
 13075 95f5 415E     		popq	%r14
 13076 95f7 415F     		popq	%r15
 13077 95f9 5D       		popq	%rbp
 13078              		.cfi_def_cfa 7, 8
 13079 95fa C3       		ret
 13080              		.cfi_endproc
 13081              	.LFE7190:
 13082              		.section	.gcc_except_table
 13083              	.LLSDA7190:
 13084 0266 FF       		.byte	0xff
GAS LISTING /tmp/cc2K2nX4.s 			page 384


 13085 0267 FF       		.byte	0xff
 13086 0268 01       		.byte	0x1
 13087 0269 D702     		.uleb128 .LLSDACSE7190-.LLSDACSB7190
 13088              	.LLSDACSB7190:
 13089 026b EE01     		.uleb128 .LEHB100-.LFB7190
 13090 026d 05       		.uleb128 .LEHE100-.LEHB100
 13091 026e 00       		.uleb128 0
 13092 026f 00       		.uleb128 0
 13093 0270 9002     		.uleb128 .LEHB101-.LFB7190
 13094 0272 05       		.uleb128 .LEHE101-.LEHB101
 13095 0273 C46E     		.uleb128 .L1089-.LFB7190
 13096 0275 00       		.uleb128 0
 13097 0276 B902     		.uleb128 .LEHB102-.LFB7190
 13098 0278 05       		.uleb128 .LEHE102-.LEHB102
 13099 0279 B06E     		.uleb128 .L1090-.LFB7190
 13100 027b 00       		.uleb128 0
 13101 027c D202     		.uleb128 .LEHB103-.LFB7190
 13102 027e 2D       		.uleb128 .LEHE103-.LEHB103
 13103 027f 9C6E     		.uleb128 .L1091-.LFB7190
 13104 0281 00       		.uleb128 0
 13105 0282 D003     		.uleb128 .LEHB104-.LFB7190
 13106 0284 05       		.uleb128 .LEHE104-.LEHB104
 13107 0285 886E     		.uleb128 .L1092-.LFB7190
 13108 0287 00       		.uleb128 0
 13109 0288 9504     		.uleb128 .LEHB105-.LFB7190
 13110 028a 05       		.uleb128 .LEHE105-.LEHB105
 13111 028b E56D     		.uleb128 .L1093-.LFB7190
 13112 028d 00       		.uleb128 0
 13113 028e AE04     		.uleb128 .LEHB106-.LFB7190
 13114 0290 05       		.uleb128 .LEHE106-.LEHB106
 13115 0291 C862     		.uleb128 .L1094-.LFB7190
 13116 0293 00       		.uleb128 0
 13117 0294 E404     		.uleb128 .LEHB107-.LFB7190
 13118 0296 05       		.uleb128 .LEHE107-.LEHB107
 13119 0297 E56D     		.uleb128 .L1093-.LFB7190
 13120 0299 00       		.uleb128 0
 13121 029a FD04     		.uleb128 .LEHB108-.LFB7190
 13122 029c 05       		.uleb128 .LEHE108-.LEHB108
 13123 029d DF62     		.uleb128 .L1095-.LFB7190
 13124 029f 00       		.uleb128 0
 13125 02a0 B505     		.uleb128 .LEHB109-.LFB7190
 13126 02a2 14       		.uleb128 .LEHE109-.LEHB109
 13127 02a3 E56D     		.uleb128 .L1093-.LFB7190
 13128 02a5 00       		.uleb128 0
 13129 02a6 E905     		.uleb128 .LEHB110-.LFB7190
 13130 02a8 05       		.uleb128 .LEHE110-.LEHB110
 13131 02a9 D16D     		.uleb128 .L1096-.LFB7190
 13132 02ab 00       		.uleb128 0
 13133 02ac 8206     		.uleb128 .LEHB111-.LFB7190
 13134 02ae 05       		.uleb128 .LEHE111-.LEHB111
 13135 02af F662     		.uleb128 .L1097-.LFB7190
 13136 02b1 00       		.uleb128 0
 13137 02b2 BA06     		.uleb128 .LEHB112-.LFB7190
 13138 02b4 B102     		.uleb128 .LEHE112-.LEHB112
 13139 02b6 D16D     		.uleb128 .L1096-.LFB7190
 13140 02b8 00       		.uleb128 0
 13141 02b9 F508     		.uleb128 .LEHB113-.LFB7190
GAS LISTING /tmp/cc2K2nX4.s 			page 385


 13142 02bb 05       		.uleb128 .LEHE113-.LEHB113
 13143 02bc BD6D     		.uleb128 .L1098-.LFB7190
 13144 02be 00       		.uleb128 0
 13145 02bf 8409     		.uleb128 .LEHB114-.LFB7190
 13146 02c1 05       		.uleb128 .LEHE114-.LEHB114
 13147 02c2 A96D     		.uleb128 .L1099-.LFB7190
 13148 02c4 00       		.uleb128 0
 13149 02c5 9309     		.uleb128 .LEHB115-.LFB7190
 13150 02c7 05       		.uleb128 .LEHE115-.LEHB115
 13151 02c8 956D     		.uleb128 .L1100-.LFB7190
 13152 02ca 00       		.uleb128 0
 13153 02cb A209     		.uleb128 .LEHB116-.LFB7190
 13154 02cd 05       		.uleb128 .LEHE116-.LEHB116
 13155 02ce 816D     		.uleb128 .L1101-.LFB7190
 13156 02d0 00       		.uleb128 0
 13157 02d1 B109     		.uleb128 .LEHB117-.LFB7190
 13158 02d3 05       		.uleb128 .LEHE117-.LEHB117
 13159 02d4 ED6C     		.uleb128 .L1102-.LFB7190
 13160 02d6 00       		.uleb128 0
 13161 02d7 C009     		.uleb128 .LEHB118-.LFB7190
 13162 02d9 05       		.uleb128 .LEHE118-.LEHB118
 13163 02da D96C     		.uleb128 .L1103-.LFB7190
 13164 02dc 00       		.uleb128 0
 13165 02dd CF09     		.uleb128 .LEHB119-.LFB7190
 13166 02df 05       		.uleb128 .LEHE119-.LEHB119
 13167 02e0 C56C     		.uleb128 .L1104-.LFB7190
 13168 02e2 00       		.uleb128 0
 13169 02e3 DE09     		.uleb128 .LEHB120-.LFB7190
 13170 02e5 05       		.uleb128 .LEHE120-.LEHB120
 13171 02e6 B16C     		.uleb128 .L1105-.LFB7190
 13172 02e8 00       		.uleb128 0
 13173 02e9 ED09     		.uleb128 .LEHB121-.LFB7190
 13174 02eb 05       		.uleb128 .LEHE121-.LEHB121
 13175 02ec 9D6C     		.uleb128 .L1106-.LFB7190
 13176 02ee 00       		.uleb128 0
 13177 02ef FC09     		.uleb128 .LEHB122-.LFB7190
 13178 02f1 05       		.uleb128 .LEHE122-.LEHB122
 13179 02f2 896C     		.uleb128 .L1107-.LFB7190
 13180 02f4 00       		.uleb128 0
 13181 02f5 8B0A     		.uleb128 .LEHB123-.LFB7190
 13182 02f7 05       		.uleb128 .LEHE123-.LEHB123
 13183 02f8 F56B     		.uleb128 .L1108-.LFB7190
 13184 02fa 00       		.uleb128 0
 13185 02fb 9A0A     		.uleb128 .LEHB124-.LFB7190
 13186 02fd 05       		.uleb128 .LEHE124-.LEHB124
 13187 02fe E16B     		.uleb128 .L1109-.LFB7190
 13188 0300 00       		.uleb128 0
 13189 0301 A90A     		.uleb128 .LEHB125-.LFB7190
 13190 0303 05       		.uleb128 .LEHE125-.LEHB125
 13191 0304 CD6B     		.uleb128 .L1110-.LFB7190
 13192 0306 00       		.uleb128 0
 13193 0307 B80A     		.uleb128 .LEHB126-.LFB7190
 13194 0309 05       		.uleb128 .LEHE126-.LEHB126
 13195 030a B96B     		.uleb128 .L1111-.LFB7190
 13196 030c 00       		.uleb128 0
 13197 030d C70A     		.uleb128 .LEHB127-.LFB7190
 13198 030f 05       		.uleb128 .LEHE127-.LEHB127
GAS LISTING /tmp/cc2K2nX4.s 			page 386


 13199 0310 A56B     		.uleb128 .L1112-.LFB7190
 13200 0312 00       		.uleb128 0
 13201 0313 D60A     		.uleb128 .LEHB128-.LFB7190
 13202 0315 05       		.uleb128 .LEHE128-.LEHB128
 13203 0316 916B     		.uleb128 .L1113-.LFB7190
 13204 0318 00       		.uleb128 0
 13205 0319 E50A     		.uleb128 .LEHB129-.LFB7190
 13206 031b 05       		.uleb128 .LEHE129-.LEHB129
 13207 031c FD6A     		.uleb128 .L1114-.LFB7190
 13208 031e 00       		.uleb128 0
 13209 031f F40A     		.uleb128 .LEHB130-.LFB7190
 13210 0321 05       		.uleb128 .LEHE130-.LEHB130
 13211 0322 E96A     		.uleb128 .L1115-.LFB7190
 13212 0324 00       		.uleb128 0
 13213 0325 BB0B     		.uleb128 .LEHB131-.LFB7190
 13214 0327 05       		.uleb128 .LEHE131-.LEHB131
 13215 0328 D56A     		.uleb128 .L1116-.LFB7190
 13216 032a 00       		.uleb128 0
 13217 032b DE0B     		.uleb128 .LEHB132-.LFB7190
 13218 032d 05       		.uleb128 .LEHE132-.LEHB132
 13219 032e 8D63     		.uleb128 .L1117-.LFB7190
 13220 0330 00       		.uleb128 0
 13221 0331 A40C     		.uleb128 .LEHB133-.LFB7190
 13222 0333 05       		.uleb128 .LEHE133-.LEHB133
 13223 0334 DA63     		.uleb128 .L1118-.LFB7190
 13224 0336 00       		.uleb128 0
 13225 0337 CB0C     		.uleb128 .LEHB134-.LFB7190
 13226 0339 05       		.uleb128 .LEHE134-.LEHB134
 13227 033a 9D64     		.uleb128 .L1119-.LFB7190
 13228 033c 00       		.uleb128 0
 13229 033d F20C     		.uleb128 .LEHB135-.LFB7190
 13230 033f 05       		.uleb128 .LEHE135-.LEHB135
 13231 0340 E064     		.uleb128 .L1120-.LFB7190
 13232 0342 00       		.uleb128 0
 13233 0343 990D     		.uleb128 .LEHB136-.LFB7190
 13234 0345 05       		.uleb128 .LEHE136-.LEHB136
 13235 0346 A365     		.uleb128 .L1121-.LFB7190
 13236 0348 00       		.uleb128 0
 13237 0349 C00D     		.uleb128 .LEHB137-.LFB7190
 13238 034b 05       		.uleb128 .LEHE137-.LEHB137
 13239 034c E665     		.uleb128 .L1122-.LFB7190
 13240 034e 00       		.uleb128 0
 13241 034f B50E     		.uleb128 .LEHB138-.LFB7190
 13242 0351 68       		.uleb128 .LEHE138-.LEHB138
 13243 0352 F668     		.uleb128 .L1123-.LFB7190
 13244 0354 00       		.uleb128 0
 13245 0355 B015     		.uleb128 .LEHB139-.LFB7190
 13246 0357 05       		.uleb128 .LEHE139-.LEHB139
 13247 0358 A966     		.uleb128 .L1124-.LFB7190
 13248 035a 00       		.uleb128 0
 13249 035b DE16     		.uleb128 .LEHB140-.LFB7190
 13250 035d 05       		.uleb128 .LEHE140-.LEHB140
 13251 035e D266     		.uleb128 .L1125-.LFB7190
 13252 0360 00       		.uleb128 0
 13253 0361 8C18     		.uleb128 .LEHB141-.LFB7190
 13254 0363 05       		.uleb128 .LEHE141-.LEHB141
 13255 0364 FB66     		.uleb128 .L1126-.LFB7190
GAS LISTING /tmp/cc2K2nX4.s 			page 387


 13256 0366 00       		.uleb128 0
 13257 0367 9E1A     		.uleb128 .LEHB142-.LFB7190
 13258 0369 05       		.uleb128 .LEHE142-.LEHB142
 13259 036a F668     		.uleb128 .L1123-.LFB7190
 13260 036c 00       		.uleb128 0
 13261 036d CB1C     		.uleb128 .LEHB143-.LFB7190
 13262 036f 05       		.uleb128 .LEHE143-.LEHB143
 13263 0370 B867     		.uleb128 .L1127-.LFB7190
 13264 0372 00       		.uleb128 0
 13265 0373 D21D     		.uleb128 .LEHB144-.LFB7190
 13266 0375 05       		.uleb128 .LEHE144-.LEHB144
 13267 0376 A467     		.uleb128 .L1128-.LFB7190
 13268 0378 00       		.uleb128 0
 13269 0379 FF1E     		.uleb128 .LEHB145-.LFB7190
 13270 037b 05       		.uleb128 .LEHE145-.LEHB145
 13271 037c D267     		.uleb128 .L1129-.LFB7190
 13272 037e 00       		.uleb128 0
 13273 037f AC20     		.uleb128 .LEHB146-.LFB7190
 13274 0381 05       		.uleb128 .LEHE146-.LEHB146
 13275 0382 EC67     		.uleb128 .L1130-.LFB7190
 13276 0384 00       		.uleb128 0
 13277 0385 D821     		.uleb128 .LEHB147-.LFB7190
 13278 0387 05       		.uleb128 .LEHE147-.LEHB147
 13279 0388 F668     		.uleb128 .L1123-.LFB7190
 13280 038a 00       		.uleb128 0
 13281 038b C822     		.uleb128 .LEHB148-.LFB7190
 13282 038d 05       		.uleb128 .LEHE148-.LEHB148
 13283 038e 8368     		.uleb128 .L1131-.LFB7190
 13284 0390 00       		.uleb128 0
 13285 0391 F723     		.uleb128 .LEHB149-.LFB7190
 13286 0393 05       		.uleb128 .LEHE149-.LEHB149
 13287 0394 9A68     		.uleb128 .L1132-.LFB7190
 13288 0396 00       		.uleb128 0
 13289 0397 FC27     		.uleb128 .LEHB150-.LFB7190
 13290 0399 8502     		.uleb128 .LEHE150-.LEHB150
 13291 039b F668     		.uleb128 .L1123-.LFB7190
 13292 039d 00       		.uleb128 0
 13293 039e D62A     		.uleb128 .LEHB151-.LFB7190
 13294 03a0 05       		.uleb128 .LEHE151-.LEHB151
 13295 03a1 B168     		.uleb128 .L1133-.LFB7190
 13296 03a3 00       		.uleb128 0
 13297 03a4 DB2B     		.uleb128 .LEHB152-.LFB7190
 13298 03a6 05       		.uleb128 .LEHE152-.LEHB152
 13299 03a7 C868     		.uleb128 .L1134-.LFB7190
 13300 03a9 00       		.uleb128 0
 13301 03aa C850     		.uleb128 .LEHB153-.LFB7190
 13302 03ac EA06     		.uleb128 .LEHE153-.LEHB153
 13303 03ae F668     		.uleb128 .L1123-.LFB7190
 13304 03b0 00       		.uleb128 0
 13305 03b1 8158     		.uleb128 .LEHB154-.LFB7190
 13306 03b3 05       		.uleb128 .LEHE154-.LEHB154
 13307 03b4 DF68     		.uleb128 .L1135-.LFB7190
 13308 03b6 00       		.uleb128 0
 13309 03b7 AF58     		.uleb128 .LEHB155-.LFB7190
 13310 03b9 05       		.uleb128 .LEHE155-.LEHB155
 13311 03ba F668     		.uleb128 .L1123-.LFB7190
 13312 03bc 00       		.uleb128 0
GAS LISTING /tmp/cc2K2nX4.s 			page 388


 13313 03bd DC6E     		.uleb128 .LEHB156-.LFB7190
 13314 03bf 05       		.uleb128 .LEHE156-.LEHB156
 13315 03c0 00       		.uleb128 0
 13316 03c1 00       		.uleb128 0
 13317              	.LLSDACSE7190:
 13318              		.text
 13320              		.section	.text._ZN15domain_geometryC2ERKS_,"axG",@progbits,_ZN15domain_geometryC5ERKS_,comdat
 13321              		.align 2
 13322              		.weak	_ZN15domain_geometryC2ERKS_
 13324              	_ZN15domain_geometryC2ERKS_:
 13325              	.LFB7199:
 13326              		.file 12 "include/domain_geometry.h"
   1:include/domain_geometry.h **** #ifndef DOMAIN_GEOMETRY_H
   2:include/domain_geometry.h **** #define DOMAIN_GEOMETRY_H
   3:include/domain_geometry.h **** 
   4:include/domain_geometry.h **** 
   5:include/domain_geometry.h **** class domain_geometry
 13327              		.loc 12 5 0
 13328              		.cfi_startproc
 13329 0000 55       		pushq	%rbp
 13330              		.cfi_def_cfa_offset 16
 13331              		.cfi_offset 6, -16
 13332 0001 4889E5   		movq	%rsp, %rbp
 13333              		.cfi_def_cfa_register 6
 13334 0004 48897DF8 		movq	%rdi, -8(%rbp)
 13335 0008 488975F0 		movq	%rsi, -16(%rbp)
 13336              	.LBB88:
 13337              		.loc 12 5 0
 13338 000c BA000000 		movl	$_ZTV15domain_geometry+16, %edx
 13338      00
 13339 0011 488B45F8 		movq	-8(%rbp), %rax
 13340 0015 488910   		movq	%rdx, (%rax)
 13341 0018 488B45F0 		movq	-16(%rbp), %rax
 13342 001c F20F1040 		movsd	8(%rax), %xmm0
 13342      08
 13343 0021 488B45F8 		movq	-8(%rbp), %rax
 13344 0025 F20F1140 		movsd	%xmm0, 8(%rax)
 13344      08
 13345 002a 488B45F0 		movq	-16(%rbp), %rax
 13346 002e F20F1040 		movsd	16(%rax), %xmm0
 13346      10
 13347 0033 488B45F8 		movq	-8(%rbp), %rax
 13348 0037 F20F1140 		movsd	%xmm0, 16(%rax)
 13348      10
 13349 003c 488B45F0 		movq	-16(%rbp), %rax
 13350 0040 F20F1040 		movsd	24(%rax), %xmm0
 13350      18
 13351 0045 488B45F8 		movq	-8(%rbp), %rax
 13352 0049 F20F1140 		movsd	%xmm0, 24(%rax)
 13352      18
 13353 004e 488B45F0 		movq	-16(%rbp), %rax
 13354 0052 F20F1040 		movsd	32(%rax), %xmm0
 13354      20
 13355 0057 488B45F8 		movq	-8(%rbp), %rax
 13356 005b F20F1140 		movsd	%xmm0, 32(%rax)
 13356      20
 13357 0060 488B45F0 		movq	-16(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 389


 13358 0064 F20F1040 		movsd	40(%rax), %xmm0
 13358      28
 13359 0069 488B45F8 		movq	-8(%rbp), %rax
 13360 006d F20F1140 		movsd	%xmm0, 40(%rax)
 13360      28
 13361 0072 488B45F0 		movq	-16(%rbp), %rax
 13362 0076 F20F1040 		movsd	48(%rax), %xmm0
 13362      30
 13363 007b 488B45F8 		movq	-8(%rbp), %rax
 13364 007f F20F1140 		movsd	%xmm0, 48(%rax)
 13364      30
 13365              	.LBE88:
 13366 0084 90       		nop
 13367 0085 5D       		popq	%rbp
 13368              		.cfi_def_cfa 7, 8
 13369 0086 C3       		ret
 13370              		.cfi_endproc
 13371              	.LFE7199:
 13373              		.weak	_ZN15domain_geometryC1ERKS_
 13374              		.set	_ZN15domain_geometryC1ERKS_,_ZN15domain_geometryC2ERKS_
 13375              		.section	.text._ZN13quad_bcs_plusC2ERKS_,"axG",@progbits,_ZN13quad_bcs_plusC5ERKS_,comdat
 13376              		.align 2
 13377              		.weak	_ZN13quad_bcs_plusC2ERKS_
 13379              	_ZN13quad_bcs_plusC2ERKS_:
 13380              	.LFB7202:
 13381              		.file 13 "include/quad_bcs_plus.h"
   1:include/quad_bcs_plus.h **** #ifndef QUAD_BCS_PLUS_H
   2:include/quad_bcs_plus.h **** #define QUAD_BCS_PLUS_H
   3:include/quad_bcs_plus.h **** 
   4:include/quad_bcs_plus.h **** 
   5:include/quad_bcs_plus.h **** class quad_bcs_plus
 13382              		.loc 13 5 0
 13383              		.cfi_startproc
 13384 0000 55       		pushq	%rbp
 13385              		.cfi_def_cfa_offset 16
 13386              		.cfi_offset 6, -16
 13387 0001 4889E5   		movq	%rsp, %rbp
 13388              		.cfi_def_cfa_register 6
 13389 0004 48897DF8 		movq	%rdi, -8(%rbp)
 13390 0008 488975F0 		movq	%rsi, -16(%rbp)
 13391              	.LBB89:
 13392              		.loc 13 5 0
 13393 000c BA000000 		movl	$_ZTV13quad_bcs_plus+16, %edx
 13393      00
 13394 0011 488B45F8 		movq	-8(%rbp), %rax
 13395 0015 488910   		movq	%rdx, (%rax)
 13396 0018 488B45F0 		movq	-16(%rbp), %rax
 13397 001c F20F1040 		movsd	8(%rax), %xmm0
 13397      08
 13398 0021 488B45F8 		movq	-8(%rbp), %rax
 13399 0025 F20F1140 		movsd	%xmm0, 8(%rax)
 13399      08
 13400 002a 488B45F0 		movq	-16(%rbp), %rax
 13401 002e F20F1040 		movsd	16(%rax), %xmm0
 13401      10
 13402 0033 488B45F8 		movq	-8(%rbp), %rax
 13403 0037 F20F1140 		movsd	%xmm0, 16(%rax)
GAS LISTING /tmp/cc2K2nX4.s 			page 390


 13403      10
 13404 003c 488B45F0 		movq	-16(%rbp), %rax
 13405 0040 F20F1040 		movsd	24(%rax), %xmm0
 13405      18
 13406 0045 488B45F8 		movq	-8(%rbp), %rax
 13407 0049 F20F1140 		movsd	%xmm0, 24(%rax)
 13407      18
 13408 004e 488B45F0 		movq	-16(%rbp), %rax
 13409 0052 F20F1040 		movsd	32(%rax), %xmm0
 13409      20
 13410 0057 488B45F8 		movq	-8(%rbp), %rax
 13411 005b F20F1140 		movsd	%xmm0, 32(%rax)
 13411      20
 13412 0060 488B45F0 		movq	-16(%rbp), %rax
 13413 0064 F20F1040 		movsd	40(%rax), %xmm0
 13413      28
 13414 0069 488B45F8 		movq	-8(%rbp), %rax
 13415 006d F20F1140 		movsd	%xmm0, 40(%rax)
 13415      28
 13416 0072 488B45F0 		movq	-16(%rbp), %rax
 13417 0076 F20F1040 		movsd	48(%rax), %xmm0
 13417      30
 13418 007b 488B45F8 		movq	-8(%rbp), %rax
 13419 007f F20F1140 		movsd	%xmm0, 48(%rax)
 13419      30
 13420 0084 488B45F0 		movq	-16(%rbp), %rax
 13421 0088 F20F1040 		movsd	56(%rax), %xmm0
 13421      38
 13422 008d 488B45F8 		movq	-8(%rbp), %rax
 13423 0091 F20F1140 		movsd	%xmm0, 56(%rax)
 13423      38
 13424 0096 488B45F0 		movq	-16(%rbp), %rax
 13425 009a F20F1040 		movsd	64(%rax), %xmm0
 13425      40
 13426 009f 488B45F8 		movq	-8(%rbp), %rax
 13427 00a3 F20F1140 		movsd	%xmm0, 64(%rax)
 13427      40
 13428 00a8 488B45F0 		movq	-16(%rbp), %rax
 13429 00ac F20F1040 		movsd	72(%rax), %xmm0
 13429      48
 13430 00b1 488B45F8 		movq	-8(%rbp), %rax
 13431 00b5 F20F1140 		movsd	%xmm0, 72(%rax)
 13431      48
 13432 00ba 488B45F0 		movq	-16(%rbp), %rax
 13433 00be F20F1040 		movsd	80(%rax), %xmm0
 13433      50
 13434 00c3 488B45F8 		movq	-8(%rbp), %rax
 13435 00c7 F20F1140 		movsd	%xmm0, 80(%rax)
 13435      50
 13436 00cc 488B45F0 		movq	-16(%rbp), %rax
 13437 00d0 F20F1040 		movsd	88(%rax), %xmm0
 13437      58
 13438 00d5 488B45F8 		movq	-8(%rbp), %rax
 13439 00d9 F20F1140 		movsd	%xmm0, 88(%rax)
 13439      58
 13440 00de 488B45F0 		movq	-16(%rbp), %rax
 13441 00e2 F20F1040 		movsd	96(%rax), %xmm0
GAS LISTING /tmp/cc2K2nX4.s 			page 391


 13441      60
 13442 00e7 488B45F8 		movq	-8(%rbp), %rax
 13443 00eb F20F1140 		movsd	%xmm0, 96(%rax)
 13443      60
 13444 00f0 488B45F0 		movq	-16(%rbp), %rax
 13445 00f4 F20F1040 		movsd	104(%rax), %xmm0
 13445      68
 13446 00f9 488B45F8 		movq	-8(%rbp), %rax
 13447 00fd F20F1140 		movsd	%xmm0, 104(%rax)
 13447      68
 13448 0102 488B45F0 		movq	-16(%rbp), %rax
 13449 0106 F20F1040 		movsd	112(%rax), %xmm0
 13449      70
 13450 010b 488B45F8 		movq	-8(%rbp), %rax
 13451 010f F20F1140 		movsd	%xmm0, 112(%rax)
 13451      70
 13452 0114 488B45F0 		movq	-16(%rbp), %rax
 13453 0118 F20F1040 		movsd	120(%rax), %xmm0
 13453      78
 13454 011d 488B45F8 		movq	-8(%rbp), %rax
 13455 0121 F20F1140 		movsd	%xmm0, 120(%rax)
 13455      78
 13456 0126 488B45F0 		movq	-16(%rbp), %rax
 13457 012a F20F1080 		movsd	128(%rax), %xmm0
 13457      80000000 
 13458 0132 488B45F8 		movq	-8(%rbp), %rax
 13459 0136 F20F1180 		movsd	%xmm0, 128(%rax)
 13459      80000000 
 13460 013e 488B45F0 		movq	-16(%rbp), %rax
 13461 0142 8B908800 		movl	136(%rax), %edx
 13461      0000
 13462 0148 488B45F8 		movq	-8(%rbp), %rax
 13463 014c 89908800 		movl	%edx, 136(%rax)
 13463      0000
 13464 0152 488B45F0 		movq	-16(%rbp), %rax
 13465 0156 8B908C00 		movl	140(%rax), %edx
 13465      0000
 13466 015c 488B45F8 		movq	-8(%rbp), %rax
 13467 0160 89908C00 		movl	%edx, 140(%rax)
 13467      0000
 13468 0166 488B45F0 		movq	-16(%rbp), %rax
 13469 016a 8B909000 		movl	144(%rax), %edx
 13469      0000
 13470 0170 488B45F8 		movq	-8(%rbp), %rax
 13471 0174 89909000 		movl	%edx, 144(%rax)
 13471      0000
 13472 017a 488B45F0 		movq	-16(%rbp), %rax
 13473 017e 8B909400 		movl	148(%rax), %edx
 13473      0000
 13474 0184 488B45F8 		movq	-8(%rbp), %rax
 13475 0188 89909400 		movl	%edx, 148(%rax)
 13475      0000
 13476 018e 488B45F0 		movq	-16(%rbp), %rax
 13477 0192 8B909800 		movl	152(%rax), %edx
 13477      0000
 13478 0198 488B45F8 		movq	-8(%rbp), %rax
 13479 019c 89909800 		movl	%edx, 152(%rax)
GAS LISTING /tmp/cc2K2nX4.s 			page 392


 13479      0000
 13480 01a2 488B45F0 		movq	-16(%rbp), %rax
 13481 01a6 8B909C00 		movl	156(%rax), %edx
 13481      0000
 13482 01ac 488B45F8 		movq	-8(%rbp), %rax
 13483 01b0 89909C00 		movl	%edx, 156(%rax)
 13483      0000
 13484 01b6 488B45F0 		movq	-16(%rbp), %rax
 13485 01ba 8B90A000 		movl	160(%rax), %edx
 13485      0000
 13486 01c0 488B45F8 		movq	-8(%rbp), %rax
 13487 01c4 8990A000 		movl	%edx, 160(%rax)
 13487      0000
 13488 01ca 488B45F0 		movq	-16(%rbp), %rax
 13489 01ce 8B90A400 		movl	164(%rax), %edx
 13489      0000
 13490 01d4 488B45F8 		movq	-8(%rbp), %rax
 13491 01d8 8990A400 		movl	%edx, 164(%rax)
 13491      0000
 13492 01de 488B45F0 		movq	-16(%rbp), %rax
 13493 01e2 8B90A800 		movl	168(%rax), %edx
 13493      0000
 13494 01e8 488B45F8 		movq	-8(%rbp), %rax
 13495 01ec 8990A800 		movl	%edx, 168(%rax)
 13495      0000
 13496              	.LBE89:
 13497 01f2 90       		nop
 13498 01f3 5D       		popq	%rbp
 13499              		.cfi_def_cfa 7, 8
 13500 01f4 C3       		ret
 13501              		.cfi_endproc
 13502              	.LFE7202:
 13504              		.weak	_ZN13quad_bcs_plusC1ERKS_
 13505              		.set	_ZN13quad_bcs_plusC1ERKS_,_ZN13quad_bcs_plusC2ERKS_
 13506              		.text
 13507 95fb 90       		.align 2
 13508              		.globl	_ZN6Solver24multi_grid_agglomorationER8SolutionS1_iR4MeshR13quad_bcs_plusR18initial_conditi
 13510              	_ZN6Solver24multi_grid_agglomorationER8SolutionS1_iR4MeshR13quad_bcs_plusR18initial_conditionsRi16g
 13511              	.LFB7197:
1398:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1399:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1400:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::multi_grid_agglomoration( Solution &residual , Solution &soln, int cycle_no,
1401:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                       Mesh &fine_mesh, quad_bcs_plus &bcs,
1402:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                       initial_conditions &initial_conds, int &mg,
1403:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                       global_variables globals, domain_geometry &fine_domain,
1404:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                       Boundary_Conditions &fine_bc){
 13512              		.loc 9 1404 0
 13513              		.cfi_startproc
 13514              		.cfi_personality 0x3,__gxx_personality_v0
 13515              		.cfi_lsda 0x3,.LLSDA7197
 13516 95fc 55       		pushq	%rbp
 13517              		.cfi_def_cfa_offset 16
 13518              		.cfi_offset 6, -16
 13519 95fd 4889E5   		movq	%rsp, %rbp
 13520              		.cfi_def_cfa_register 6
 13521 9600 53       		pushq	%rbx
 13522 9601 4881EC48 		subq	$1352, %rsp
GAS LISTING /tmp/cc2K2nX4.s 			page 393


 13522      050000
 13523              		.cfi_offset 3, -24
 13524 9608 4889BD08 		movq	%rdi, -1272(%rbp)
 13524      FBFFFF
 13525 960f 4889B500 		movq	%rsi, -1280(%rbp)
 13525      FBFFFF
 13526 9616 488995F8 		movq	%rdx, -1288(%rbp)
 13526      FAFFFF
 13527 961d 898DF4FA 		movl	%ecx, -1292(%rbp)
 13527      FFFF
 13528 9623 4C8985E8 		movq	%r8, -1304(%rbp)
 13528      FAFFFF
 13529 962a 4C898DE0 		movq	%r9, -1312(%rbp)
 13529      FAFFFF
 13530 9631 488B4510 		movq	16(%rbp), %rax
 13531 9635 488985D8 		movq	%rax, -1320(%rbp)
 13531      FAFFFF
 13532 963c 488B4518 		movq	24(%rbp), %rax
 13533 9640 488985D0 		movq	%rax, -1328(%rbp)
 13533      FAFFFF
 13534 9647 488B4520 		movq	32(%rbp), %rax
 13535 964b 488985C8 		movq	%rax, -1336(%rbp)
 13535      FAFFFF
 13536 9652 488B4528 		movq	40(%rbp), %rax
 13537 9656 488985C0 		movq	%rax, -1344(%rbp)
 13537      FAFFFF
 13538 965d 488B4530 		movq	48(%rbp), %rax
 13539 9661 488985B8 		movq	%rax, -1352(%rbp)
 13539      FAFFFF
 13540              		.loc 9 1404 0
 13541 9668 64488B04 		movq	%fs:40, %rax
 13541      25280000 
 13541      00
 13542 9671 488945E8 		movq	%rax, -24(%rbp)
 13543 9675 31C0     		xorl	%eax, %eax
1405:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1406:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1407:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     mg = mg +1; // increase multigrid levels by 1
 13544              		.loc 9 1407 0
 13545 9677 488B85D0 		movq	-1328(%rbp), %rax
 13545      FAFFFF
 13546 967e 8B00     		movl	(%rax), %eax
 13547 9680 8D5001   		leal	1(%rax), %edx
 13548 9683 488B85D0 		movq	-1328(%rbp), %rax
 13548      FAFFFF
 13549 968a 8910     		movl	%edx, (%rax)
1408:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int fmg = 0;
 13550              		.loc 9 1408 0
 13551 968c C7851CFB 		movl	$0, -1252(%rbp)
 13551      FFFF0000 
 13551      0000
1409:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // create new coarse Mesh with double up dimensions
1410:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     domain_geometry coarse_domain = fine_mesh.create_coarse_mesh_domain();
 13552              		.loc 9 1410 0
 13553 9696 488D8570 		leaq	-1168(%rbp), %rax
 13553      FBFFFF
 13554 969d 488B95E8 		movq	-1304(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 394


 13554      FAFFFF
 13555 96a4 4889D6   		movq	%rdx, %rsi
 13556 96a7 4889C7   		movq	%rax, %rdi
 13557              	.LEHB157:
 13558 96aa E8000000 		call	_ZN4Mesh25create_coarse_mesh_domainEv
 13558      00
 13559              	.LEHE157:
1411:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1412:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Mesh coarse_mesh (coarse_domain,globals);
 13560              		.loc 9 1412 0
 13561 96af 488B95C8 		movq	-1336(%rbp), %rdx
 13561      FAFFFF
 13562 96b6 488D85D0 		leaq	-304(%rbp), %rax
 13562      FEFFFF
 13563 96bd 4889D6   		movq	%rdx, %rsi
 13564 96c0 4889C7   		movq	%rax, %rdi
 13565              	.LEHB158:
 13566 96c3 E8000000 		call	_ZN16global_variablesC1ERKS_
 13566      00
 13567              	.LEHE158:
 13568              		.loc 9 1412 0 is_stmt 0 discriminator 1
 13569 96c8 488D9570 		leaq	-1168(%rbp), %rdx
 13569      FBFFFF
 13570 96cf 488D85A0 		leaq	-864(%rbp), %rax
 13570      FCFFFF
 13571 96d6 4889D6   		movq	%rdx, %rsi
 13572 96d9 4889C7   		movq	%rax, %rdi
 13573 96dc E8000000 		call	_ZN15domain_geometryC1ERKS_
 13573      00
 13574 96e1 488D95D0 		leaq	-304(%rbp), %rdx
 13574      FEFFFF
 13575 96e8 488D8DA0 		leaq	-864(%rbp), %rcx
 13575      FCFFFF
 13576 96ef 488D8550 		leaq	-688(%rbp), %rax
 13576      FDFFFF
 13577 96f6 4889CE   		movq	%rcx, %rsi
 13578 96f9 4889C7   		movq	%rax, %rdi
 13579              	.LEHB159:
 13580 96fc E8000000 		call	_ZN4MeshC1E15domain_geometry16global_variables
 13580      00
 13581              	.LEHE159:
 13582 9701 488D85A0 		leaq	-864(%rbp), %rax
 13582      FCFFFF
 13583 9708 4889C7   		movq	%rax, %rdi
 13584 970b E8000000 		call	_ZN15domain_geometryD1Ev
 13584      00
 13585              		.loc 9 1412 0
 13586 9710 488D85D0 		leaq	-304(%rbp), %rax
 13586      FEFFFF
 13587 9717 4889C7   		movq	%rax, %rdi
 13588 971a E8000000 		call	_ZN16global_variablesD1Ev
 13588      00
1413:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1414:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //globals.update_tau(coarse_domain);
1415:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //globals.update_coarse_tau();
1416:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //Apply Boundary Conditions to new Mesh
1417:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 395


1418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Boundary_Conditions bc(coarse_mesh.get_num_x(), coarse_mesh.get_num_y());
 13589              		.loc 9 1418 0 is_stmt 1
 13590 971f 488D8550 		leaq	-688(%rbp), %rax
 13590      FDFFFF
 13591 9726 4889C7   		movq	%rax, %rdi
 13592 9729 E8000000 		call	_ZN4Mesh9get_num_yEv
 13592      00
 13593 972e 89C3     		movl	%eax, %ebx
 13594 9730 488D8550 		leaq	-688(%rbp), %rax
 13594      FDFFFF
 13595 9737 4889C7   		movq	%rax, %rdi
 13596 973a E8000000 		call	_ZN4Mesh9get_num_xEv
 13596      00
 13597 973f 89C1     		movl	%eax, %ecx
 13598 9741 488D8550 		leaq	-944(%rbp), %rax
 13598      FCFFFF
 13599 9748 89DA     		movl	%ebx, %edx
 13600 974a 89CE     		movl	%ecx, %esi
 13601 974c 4889C7   		movq	%rax, %rdi
 13602              	.LEHB160:
 13603 974f E8000000 		call	_ZN19Boundary_ConditionsC1Eii
 13603      00
 13604              	.LEHE160:
1419:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc.assign_boundary_conditions(coarse_mesh.get_num_x(), coarse_mesh.get_num_y(),bcs);
 13605              		.loc 9 1419 0
 13606 9754 488B95E0 		movq	-1312(%rbp), %rdx
 13606      FAFFFF
 13607 975b 488D85A0 		leaq	-864(%rbp), %rax
 13607      FCFFFF
 13608 9762 4889D6   		movq	%rdx, %rsi
 13609 9765 4889C7   		movq	%rax, %rdi
 13610 9768 E8000000 		call	_ZN13quad_bcs_plusC1ERKS_
 13610      00
 13611 976d 488D8550 		leaq	-688(%rbp), %rax
 13611      FDFFFF
 13612 9774 4889C7   		movq	%rax, %rdi
 13613 9777 E8000000 		call	_ZN4Mesh9get_num_yEv
 13613      00
 13614 977c 89C3     		movl	%eax, %ebx
 13615 977e 488D8550 		leaq	-688(%rbp), %rax
 13615      FDFFFF
 13616 9785 4889C7   		movq	%rax, %rdi
 13617 9788 E8000000 		call	_ZN4Mesh9get_num_xEv
 13617      00
 13618 978d 89C6     		movl	%eax, %esi
 13619 978f 488D95A0 		leaq	-864(%rbp), %rdx
 13619      FCFFFF
 13620 9796 488D8550 		leaq	-944(%rbp), %rax
 13620      FCFFFF
 13621 979d 4889D1   		movq	%rdx, %rcx
 13622 97a0 89DA     		movl	%ebx, %edx
 13623 97a2 4889C7   		movq	%rax, %rdi
 13624              	.LEHB161:
 13625 97a5 E8000000 		call	_ZN19Boundary_Conditions26assign_boundary_conditionsEii13quad_bcs_plus
 13625      00
 13626              	.LEHE161:
 13627              		.loc 9 1419 0 is_stmt 0 discriminator 2
GAS LISTING /tmp/cc2K2nX4.s 			page 396


 13628 97aa 488D85A0 		leaq	-864(%rbp), %rax
 13628      FCFFFF
 13629 97b1 4889C7   		movq	%rax, %rdi
 13630 97b4 E8000000 		call	_ZN13quad_bcs_plusD1Ev
 13630      00
1420:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1421:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     external_forces source_term(coarse_mesh.get_total_cells());
 13631              		.loc 9 1421 0 is_stmt 1 discriminator 2
 13632 97b9 488D8550 		leaq	-688(%rbp), %rax
 13632      FDFFFF
 13633 97c0 4889C7   		movq	%rax, %rdi
 13634 97c3 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 13634      00
 13635 97c8 89C2     		movl	%eax, %edx
 13636 97ca 488D8520 		leaq	-1248(%rbp), %rax
 13636      FBFFFF
 13637 97d1 89D6     		movl	%edx, %esi
 13638 97d3 4889C7   		movq	%rax, %rdi
 13639              	.LEHB162:
 13640 97d6 E8000000 		call	_ZN15external_forcesC1Ei
 13640      00
 13641              	.LEHE162:
1422:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     source_term.set_uniform_force(initial_conds.pressure_gradient); //pressure force applied throug
 13642              		.loc 9 1422 0
 13643 97db 488B85D8 		movq	-1320(%rbp), %rax
 13643      FAFFFF
 13644 97e2 488B90D0 		movq	208(%rax), %rdx
 13644      000000
 13645 97e9 488D8520 		leaq	-1248(%rbp), %rax
 13645      FBFFFF
 13646 97f0 488995B0 		movq	%rdx, -1360(%rbp)
 13646      FAFFFF
 13647 97f7 F20F1085 		movsd	-1360(%rbp), %xmm0
 13647      B0FAFFFF 
 13648 97ff 4889C7   		movq	%rax, %rdi
 13649              	.LEHB163:
 13650 9802 E8000000 		call	_ZN15external_forces17set_uniform_forceEd
 13650      00
1423:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1424:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution coarse_soln( coarse_mesh.get_total_cells());
 13651              		.loc 9 1424 0
 13652 9807 488D8550 		leaq	-688(%rbp), %rax
 13652      FDFFFF
 13653 980e 4889C7   		movq	%rax, %rdi
 13654 9811 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 13654      00
 13655 9816 89C2     		movl	%eax, %edx
 13656 9818 488D85B0 		leaq	-1104(%rbp), %rax
 13656      FBFFFF
 13657 981f 89D6     		movl	%edx, %esi
 13658 9821 4889C7   		movq	%rax, %rdi
 13659 9824 E8000000 		call	_ZN8SolutionC1Ei
 13659      00
 13660              	.LEHE163:
1425:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution coarse_residual_0( coarse_mesh.get_total_cells()) ;
 13661              		.loc 9 1425 0
 13662 9829 488D8550 		leaq	-688(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 397


 13662      FDFFFF
 13663 9830 4889C7   		movq	%rax, %rdi
 13664 9833 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 13664      00
 13665 9838 89C2     		movl	%eax, %edx
 13666 983a 488D8500 		leaq	-1024(%rbp), %rax
 13666      FCFFFF
 13667 9841 89D6     		movl	%edx, %esi
 13668 9843 4889C7   		movq	%rax, %rdi
 13669              	.LEHB164:
 13670 9846 E8000000 		call	_ZN8SolutionC1Ei
 13670      00
 13671              	.LEHE164:
1426:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1427:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln.restriction(coarse_soln,coarse_mesh,fine_mesh,fine_bc);
 13672              		.loc 9 1427 0
 13673 984b 488BBDB8 		movq	-1352(%rbp), %rdi
 13673      FAFFFF
 13674 9852 488B8DE8 		movq	-1304(%rbp), %rcx
 13674      FAFFFF
 13675 9859 488D9550 		leaq	-688(%rbp), %rdx
 13675      FDFFFF
 13676 9860 488DB5B0 		leaq	-1104(%rbp), %rsi
 13676      FBFFFF
 13677 9867 488B85F8 		movq	-1288(%rbp), %rax
 13677      FAFFFF
 13678 986e 4989F8   		movq	%rdi, %r8
 13679 9871 4889C7   		movq	%rax, %rdi
 13680              	.LEHB165:
 13681 9874 E8000000 		call	_ZN8Solution11restrictionERS_R4MeshS2_R19Boundary_Conditions
 13681      00
1428:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1429:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     residual.restriction(coarse_residual_0,coarse_mesh,fine_mesh,fine_bc);
 13682              		.loc 9 1429 0
 13683 9879 488BBDB8 		movq	-1352(%rbp), %rdi
 13683      FAFFFF
 13684 9880 488B8DE8 		movq	-1304(%rbp), %rcx
 13684      FAFFFF
 13685 9887 488D9550 		leaq	-688(%rbp), %rdx
 13685      FDFFFF
 13686 988e 488DB500 		leaq	-1024(%rbp), %rsi
 13686      FCFFFF
 13687 9895 488B8500 		movq	-1280(%rbp), %rax
 13687      FBFFFF
 13688 989c 4989F8   		movq	%rdi, %r8
 13689 989f 4889C7   		movq	%rax, %rdi
 13690 98a2 E8000000 		call	_ZN8Solution11restrictionERS_R4MeshS2_R19Boundary_Conditions
 13690      00
 13691              	.LEHE165:
1430:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1431:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // call solver for coarser mesh
1432:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1433:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solver solve_coarse;
 13692              		.loc 9 1433 0
 13693 98a7 488D8540 		leaq	-1216(%rbp), %rax
 13693      FBFFFF
 13694 98ae 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 398


 13695 98b1 E8000000 		call	_ZN6SolverC1Ev
 13695      00
1434:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(coarse_mesh.get_total_cells());
 13696              		.loc 9 1434 0
 13697 98b6 488D8550 		leaq	-688(%rbp), %rax
 13697      FDFFFF
 13698 98bd 4889C7   		movq	%rax, %rdi
 13699 98c0 E8000000 		call	_ZN4Mesh15get_total_cellsEv
 13699      00
 13700 98c5 89C2     		movl	%eax, %edx
 13701 98c7 488D85A0 		leaq	-864(%rbp), %rax
 13701      FCFFFF
 13702 98ce 89D6     		movl	%edx, %esi
 13703 98d0 4889C7   		movq	%rax, %rdi
 13704              	.LEHB166:
 13705 98d3 E8000000 		call	_ZN8SolutionC1Ei
 13705      00
 13706              	.LEHE166:
1435:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     coarse_soln.update_bcs(bc,coarse_mesh,coarse_domain);
 13707              		.loc 9 1435 0
 13708 98d8 488D8D70 		leaq	-1168(%rbp), %rcx
 13708      FBFFFF
 13709 98df 488D9550 		leaq	-688(%rbp), %rdx
 13709      FDFFFF
 13710 98e6 488DB550 		leaq	-944(%rbp), %rsi
 13710      FCFFFF
 13711 98ed 488D85B0 		leaq	-1104(%rbp), %rax
 13711      FBFFFF
 13712 98f4 4889C7   		movq	%rax, %rdi
 13713              	.LEHB167:
 13714 98f7 E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 13714      00
1436:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp_soln.clone(coarse_soln);
 13715              		.loc 9 1436 0
 13716 98fc 488D95B0 		leaq	-1104(%rbp), %rdx
 13716      FBFFFF
 13717 9903 488D85A0 		leaq	-864(%rbp), %rax
 13717      FCFFFF
 13718 990a 4889D6   		movq	%rdx, %rsi
 13719 990d 4889C7   		movq	%rax, %rdi
 13720 9910 E8000000 		call	_ZN8Solution5cloneERS_
 13720      00
1437:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1438:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     solve_coarse.Mesh_Solver(coarse_mesh,coarse_soln,bc,source_term,globals,
 13721              		.loc 9 1438 0
 13722 9915 488B85D0 		movq	-1328(%rbp), %rax
 13722      FAFFFF
 13723 991c 8B38     		movl	(%rax), %edi
1439:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                                      coarse_domain,initial_conds,bcs,mg,coarse_residual_0,fmg);
 13724              		.loc 9 1439 0
 13725 991e 4C8B8DC8 		movq	-1336(%rbp), %r9
 13725      FAFFFF
 13726 9925 4C8D9520 		leaq	-1248(%rbp), %r10
 13726      FBFFFF
 13727 992c 488D8D50 		leaq	-944(%rbp), %rcx
 13727      FCFFFF
 13728 9933 488D95B0 		leaq	-1104(%rbp), %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 399


 13728      FBFFFF
 13729 993a 488DB550 		leaq	-688(%rbp), %rsi
 13729      FDFFFF
 13730 9941 488D8540 		leaq	-1216(%rbp), %rax
 13730      FBFFFF
 13731 9948 448B851C 		movl	-1252(%rbp), %r8d
 13731      FBFFFF
 13732 994f 4150     		pushq	%r8
 13733 9951 4C8D8500 		leaq	-1024(%rbp), %r8
 13733      FCFFFF
 13734 9958 4150     		pushq	%r8
 13735 995a 57       		pushq	%rdi
 13736 995b FFB5E0FA 		pushq	-1312(%rbp)
 13736      FFFF
 13737 9961 FFB5D8FA 		pushq	-1320(%rbp)
 13737      FFFF
 13738 9967 488DBD70 		leaq	-1168(%rbp), %rdi
 13738      FBFFFF
 13739 996e 57       		pushq	%rdi
 13740 996f 4D89D0   		movq	%r10, %r8
 13741 9972 4889C7   		movq	%rax, %rdi
 13742              		.cfi_escape 0x2e,0x30
 13743 9975 E8000000 		call	_ZN6Solver11Mesh_SolverER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_var
 13743      00
 13744 997a 4883C430 		addq	$48, %rsp
1440:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1441:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     coarse_soln.update_bcs(bc,coarse_mesh,coarse_domain);
 13745              		.loc 9 1441 0
 13746 997e 488D8D70 		leaq	-1168(%rbp), %rcx
 13746      FBFFFF
 13747 9985 488D9550 		leaq	-688(%rbp), %rdx
 13747      FDFFFF
 13748 998c 488DB550 		leaq	-944(%rbp), %rsi
 13748      FCFFFF
 13749 9993 488D85B0 		leaq	-1104(%rbp), %rax
 13749      FBFFFF
 13750 999a 4889C7   		movq	%rax, %rdi
 13751              		.cfi_escape 0x2e,0
 13752 999d E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 13752      00
1442:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp_soln.update_bcs(bc,coarse_mesh,coarse_domain);
 13753              		.loc 9 1442 0
 13754 99a2 488D8D70 		leaq	-1168(%rbp), %rcx
 13754      FBFFFF
 13755 99a9 488D9550 		leaq	-688(%rbp), %rdx
 13755      FDFFFF
 13756 99b0 488DB550 		leaq	-944(%rbp), %rsi
 13756      FCFFFF
 13757 99b7 488D85A0 		leaq	-864(%rbp), %rax
 13757      FCFFFF
 13758 99be 4889C7   		movq	%rax, %rdi
 13759 99c1 E8000000 		call	_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
 13759      00
1443:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     // prolongation occurs here
1444:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln.prolongation(coarse_soln, temp_soln, soln,coarse_mesh, fine_mesh,fine_bc,false);
 13760              		.loc 9 1444 0
 13761 99c6 4C8B85E8 		movq	-1304(%rbp), %r8
GAS LISTING /tmp/cc2K2nX4.s 			page 400


 13761      FAFFFF
 13762 99cd 488DBD50 		leaq	-688(%rbp), %rdi
 13762      FDFFFF
 13763 99d4 488B8DF8 		movq	-1288(%rbp), %rcx
 13763      FAFFFF
 13764 99db 488D95A0 		leaq	-864(%rbp), %rdx
 13764      FCFFFF
 13765 99e2 488DB5B0 		leaq	-1104(%rbp), %rsi
 13765      FBFFFF
 13766 99e9 488B85F8 		movq	-1288(%rbp), %rax
 13766      FAFFFF
 13767 99f0 6A00     		pushq	$0
 13768 99f2 FFB5B8FA 		pushq	-1352(%rbp)
 13768      FFFF
 13769 99f8 4D89C1   		movq	%r8, %r9
 13770 99fb 4989F8   		movq	%rdi, %r8
 13771 99fe 4889C7   		movq	%rax, %rdi
 13772              		.cfi_escape 0x2e,0x10
 13773 9a01 E8000000 		call	_ZN8Solution12prolongationERS_S0_S0_R4MeshS2_R19Boundary_Conditionsb
 13773      00
 13774              	.LEHE167:
 13775 9a06 4883C410 		addq	$16, %rsp
1445:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     soln.set_average_rho(initial_conds.average_rho);
 13776              		.loc 9 1445 0
 13777 9a0a 488B85D8 		movq	-1320(%rbp), %rax
 13777      FAFFFF
 13778 9a11 488B5068 		movq	104(%rax), %rdx
 13779 9a15 488B85F8 		movq	-1288(%rbp), %rax
 13779      FAFFFF
 13780 9a1c 488995B0 		movq	%rdx, -1360(%rbp)
 13780      FAFFFF
 13781 9a23 F20F1085 		movsd	-1360(%rbp), %xmm0
 13781      B0FAFFFF 
 13782 9a2b 4889C7   		movq	%rax, %rdi
 13783 9a2e E8000000 		call	_ZN8Solution15set_average_rhoEd
 13783      00
1446:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     //globals.update_fine_tau();
1447:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     mg = mg -1;
 13784              		.loc 9 1447 0
 13785 9a33 488B85D0 		movq	-1328(%rbp), %rax
 13785      FAFFFF
 13786 9a3a 8B00     		movl	(%rax), %eax
 13787 9a3c 8D50FF   		leal	-1(%rax), %edx
 13788 9a3f 488B85D0 		movq	-1328(%rbp), %rax
 13788      FAFFFF
 13789 9a46 8910     		movl	%edx, (%rax)
1434:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     coarse_soln.update_bcs(bc,coarse_mesh,coarse_domain);
 13790              		.loc 9 1434 0
 13791 9a48 488D85A0 		leaq	-864(%rbp), %rax
 13791      FCFFFF
 13792 9a4f 4889C7   		movq	%rax, %rdi
 13793 9a52 E8000000 		call	_ZN8SolutionD1Ev
 13793      00
1433:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(coarse_mesh.get_total_cells());
 13794              		.loc 9 1433 0
 13795 9a57 488D8540 		leaq	-1216(%rbp), %rax
 13795      FBFFFF
GAS LISTING /tmp/cc2K2nX4.s 			page 401


 13796 9a5e 4889C7   		movq	%rax, %rdi
 13797 9a61 E8000000 		call	_ZN6SolverD1Ev
 13797      00
1425:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13798              		.loc 9 1425 0
 13799 9a66 488D8500 		leaq	-1024(%rbp), %rax
 13799      FCFFFF
 13800 9a6d 4889C7   		movq	%rax, %rdi
 13801 9a70 E8000000 		call	_ZN8SolutionD1Ev
 13801      00
1424:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution coarse_residual_0( coarse_mesh.get_total_cells()) ;
 13802              		.loc 9 1424 0
 13803 9a75 488D85B0 		leaq	-1104(%rbp), %rax
 13803      FBFFFF
 13804 9a7c 4889C7   		movq	%rax, %rdi
 13805 9a7f E8000000 		call	_ZN8SolutionD1Ev
 13805      00
1421:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     source_term.set_uniform_force(initial_conds.pressure_gradient); //pressure force applied throug
 13806              		.loc 9 1421 0
 13807 9a84 488D8520 		leaq	-1248(%rbp), %rax
 13807      FBFFFF
 13808 9a8b 4889C7   		movq	%rax, %rdi
 13809 9a8e E8000000 		call	_ZN15external_forcesD1Ev
 13809      00
1418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc.assign_boundary_conditions(coarse_mesh.get_num_x(), coarse_mesh.get_num_y(),bcs);
 13810              		.loc 9 1418 0
 13811 9a93 488D8550 		leaq	-944(%rbp), %rax
 13811      FCFFFF
 13812 9a9a 4889C7   		movq	%rax, %rdi
 13813 9a9d E8000000 		call	_ZN19Boundary_ConditionsD1Ev
 13813      00
1412:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13814              		.loc 9 1412 0
 13815 9aa2 488D8550 		leaq	-688(%rbp), %rax
 13815      FDFFFF
 13816 9aa9 4889C7   		movq	%rax, %rdi
 13817 9aac E8000000 		call	_ZN4MeshD1Ev
 13817      00
1410:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13818              		.loc 9 1410 0
 13819 9ab1 488D8570 		leaq	-1168(%rbp), %rax
 13819      FBFFFF
 13820 9ab8 4889C7   		movq	%rax, %rdi
 13821 9abb E8000000 		call	_ZN15domain_geometryD1Ev
 13821      00
1448:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1449:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 13822              		.loc 9 1449 0
 13823 9ac0 90       		nop
 13824 9ac1 488B45E8 		movq	-24(%rbp), %rax
 13825 9ac5 64483304 		xorq	%fs:40, %rax
 13825      25280000 
 13825      00
 13826 9ace 0F84ED00 		je	.L1181
 13826      0000
 13827 9ad4 E9E30000 		jmp	.L1192
 13827      00
GAS LISTING /tmp/cc2K2nX4.s 			page 402


 13828              	.L1183:
 13829 9ad9 4889C3   		movq	%rax, %rbx
 13830 9adc 488D85A0 		leaq	-864(%rbp), %rax
 13830      FCFFFF
 13831 9ae3 4889C7   		movq	%rax, %rdi
 13832 9ae6 E8000000 		call	_ZN15domain_geometryD1Ev
 13832      00
 13833 9aeb 488D85D0 		leaq	-304(%rbp), %rax
 13833      FEFFFF
 13834 9af2 4889C7   		movq	%rax, %rdi
 13835 9af5 E8000000 		call	_ZN16global_variablesD1Ev
 13835      00
 13836 9afa E9A30000 		jmp	.L1172
 13836      00
 13837              	.L1185:
 13838 9aff 4889C3   		movq	%rax, %rbx
1419:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13839              		.loc 9 1419 0
 13840 9b02 488D85A0 		leaq	-864(%rbp), %rax
 13840      FCFFFF
 13841 9b09 4889C7   		movq	%rax, %rdi
 13842 9b0c E8000000 		call	_ZN13quad_bcs_plusD1Ev
 13842      00
 13843 9b11 EB67     		jmp	.L1174
 13844              	.L1191:
 13845 9b13 4889C3   		movq	%rax, %rbx
1434:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     coarse_soln.update_bcs(bc,coarse_mesh,coarse_domain);
 13846              		.loc 9 1434 0
 13847 9b16 488D85A0 		leaq	-864(%rbp), %rax
 13847      FCFFFF
 13848 9b1d 4889C7   		movq	%rax, %rdi
 13849 9b20 E8000000 		call	_ZN8SolutionD1Ev
 13849      00
 13850 9b25 EB03     		jmp	.L1176
 13851              	.L1190:
 13852 9b27 4889C3   		movq	%rax, %rbx
 13853              	.L1176:
1433:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution temp_soln(coarse_mesh.get_total_cells());
 13854              		.loc 9 1433 0
 13855 9b2a 488D8540 		leaq	-1216(%rbp), %rax
 13855      FBFFFF
 13856 9b31 4889C7   		movq	%rax, %rdi
 13857 9b34 E8000000 		call	_ZN6SolverD1Ev
 13857      00
 13858 9b39 EB03     		jmp	.L1177
 13859              	.L1189:
 13860 9b3b 4889C3   		movq	%rax, %rbx
 13861              	.L1177:
1425:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13862              		.loc 9 1425 0
 13863 9b3e 488D8500 		leaq	-1024(%rbp), %rax
 13863      FCFFFF
 13864 9b45 4889C7   		movq	%rax, %rdi
 13865 9b48 E8000000 		call	_ZN8SolutionD1Ev
 13865      00
 13866 9b4d EB03     		jmp	.L1178
 13867              	.L1188:
GAS LISTING /tmp/cc2K2nX4.s 			page 403


 13868 9b4f 4889C3   		movq	%rax, %rbx
 13869              	.L1178:
1424:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     Solution coarse_residual_0( coarse_mesh.get_total_cells()) ;
 13870              		.loc 9 1424 0
 13871 9b52 488D85B0 		leaq	-1104(%rbp), %rax
 13871      FBFFFF
 13872 9b59 4889C7   		movq	%rax, %rdi
 13873 9b5c E8000000 		call	_ZN8SolutionD1Ev
 13873      00
 13874 9b61 EB03     		jmp	.L1179
 13875              	.L1187:
 13876 9b63 4889C3   		movq	%rax, %rbx
 13877              	.L1179:
1421:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     source_term.set_uniform_force(initial_conds.pressure_gradient); //pressure force applied throug
 13878              		.loc 9 1421 0
 13879 9b66 488D8520 		leaq	-1248(%rbp), %rax
 13879      FBFFFF
 13880 9b6d 4889C7   		movq	%rax, %rdi
 13881 9b70 E8000000 		call	_ZN15external_forcesD1Ev
 13881      00
 13882 9b75 EB03     		jmp	.L1174
 13883              	.L1186:
 13884 9b77 4889C3   		movq	%rax, %rbx
 13885              	.L1174:
1418:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     bc.assign_boundary_conditions(coarse_mesh.get_num_x(), coarse_mesh.get_num_y(),bcs);
 13886              		.loc 9 1418 0
 13887 9b7a 488D8550 		leaq	-944(%rbp), %rax
 13887      FCFFFF
 13888 9b81 4889C7   		movq	%rax, %rdi
 13889 9b84 E8000000 		call	_ZN19Boundary_ConditionsD1Ev
 13889      00
 13890 9b89 EB03     		jmp	.L1180
 13891              	.L1184:
 13892 9b8b 4889C3   		movq	%rax, %rbx
 13893              	.L1180:
1412:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13894              		.loc 9 1412 0
 13895 9b8e 488D8550 		leaq	-688(%rbp), %rax
 13895      FDFFFF
 13896 9b95 4889C7   		movq	%rax, %rdi
 13897 9b98 E8000000 		call	_ZN4MeshD1Ev
 13897      00
 13898 9b9d EB03     		jmp	.L1172
 13899              	.L1182:
 13900 9b9f 4889C3   		movq	%rax, %rbx
 13901              	.L1172:
1410:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
 13902              		.loc 9 1410 0
 13903 9ba2 488D8570 		leaq	-1168(%rbp), %rax
 13903      FBFFFF
 13904 9ba9 4889C7   		movq	%rax, %rdi
 13905 9bac E8000000 		call	_ZN15domain_geometryD1Ev
 13905      00
 13906 9bb1 4889D8   		movq	%rbx, %rax
 13907 9bb4 4889C7   		movq	%rax, %rdi
 13908              	.LEHB168:
 13909 9bb7 E8000000 		call	_Unwind_Resume
GAS LISTING /tmp/cc2K2nX4.s 			page 404


 13909      00
 13910              	.LEHE168:
 13911              	.L1192:
 13912              		.loc 9 1449 0
 13913 9bbc E8000000 		call	__stack_chk_fail
 13913      00
 13914              	.L1181:
 13915 9bc1 488B5DF8 		movq	-8(%rbp), %rbx
 13916 9bc5 C9       		leave
 13917              		.cfi_def_cfa 7, 8
 13918 9bc6 C3       		ret
 13919              		.cfi_endproc
 13920              	.LFE7197:
 13921              		.section	.gcc_except_table
 13922              	.LLSDA7197:
 13923 03c2 FF       		.byte	0xff
 13924 03c3 FF       		.byte	0xff
 13925 03c4 01       		.byte	0x1
 13926 03c5 47       		.uleb128 .LLSDACSE7197-.LLSDACSB7197
 13927              	.LLSDACSB7197:
 13928 03c6 AE01     		.uleb128 .LEHB157-.LFB7197
 13929 03c8 05       		.uleb128 .LEHE157-.LEHB157
 13930 03c9 00       		.uleb128 0
 13931 03ca 00       		.uleb128 0
 13932 03cb C701     		.uleb128 .LEHB158-.LFB7197
 13933 03cd 05       		.uleb128 .LEHE158-.LEHB158
 13934 03ce A30B     		.uleb128 .L1182-.LFB7197
 13935 03d0 00       		.uleb128 0
 13936 03d1 8002     		.uleb128 .LEHB159-.LFB7197
 13937 03d3 05       		.uleb128 .LEHE159-.LEHB159
 13938 03d4 DD09     		.uleb128 .L1183-.LFB7197
 13939 03d6 00       		.uleb128 0
 13940 03d7 D302     		.uleb128 .LEHB160-.LFB7197
 13941 03d9 05       		.uleb128 .LEHE160-.LEHB160
 13942 03da 8F0B     		.uleb128 .L1184-.LFB7197
 13943 03dc 00       		.uleb128 0
 13944 03dd A903     		.uleb128 .LEHB161-.LFB7197
 13945 03df 05       		.uleb128 .LEHE161-.LEHB161
 13946 03e0 830A     		.uleb128 .L1185-.LFB7197
 13947 03e2 00       		.uleb128 0
 13948 03e3 DA03     		.uleb128 .LEHB162-.LFB7197
 13949 03e5 05       		.uleb128 .LEHE162-.LEHB162
 13950 03e6 FB0A     		.uleb128 .L1186-.LFB7197
 13951 03e8 00       		.uleb128 0
 13952 03e9 8604     		.uleb128 .LEHB163-.LFB7197
 13953 03eb 27       		.uleb128 .LEHE163-.LEHB163
 13954 03ec E70A     		.uleb128 .L1187-.LFB7197
 13955 03ee 00       		.uleb128 0
 13956 03ef CA04     		.uleb128 .LEHB164-.LFB7197
 13957 03f1 05       		.uleb128 .LEHE164-.LEHB164
 13958 03f2 D30A     		.uleb128 .L1188-.LFB7197
 13959 03f4 00       		.uleb128 0
 13960 03f5 F804     		.uleb128 .LEHB165-.LFB7197
 13961 03f7 33       		.uleb128 .LEHE165-.LEHB165
 13962 03f8 BF0A     		.uleb128 .L1189-.LFB7197
 13963 03fa 00       		.uleb128 0
 13964 03fb D705     		.uleb128 .LEHB166-.LFB7197
GAS LISTING /tmp/cc2K2nX4.s 			page 405


 13965 03fd 05       		.uleb128 .LEHE166-.LEHB166
 13966 03fe AB0A     		.uleb128 .L1190-.LFB7197
 13967 0400 00       		.uleb128 0
 13968 0401 FB05     		.uleb128 .LEHB167-.LFB7197
 13969 0403 8F02     		.uleb128 .LEHE167-.LEHB167
 13970 0405 970A     		.uleb128 .L1191-.LFB7197
 13971 0407 00       		.uleb128 0
 13972 0408 BB0B     		.uleb128 .LEHB168-.LFB7197
 13973 040a 05       		.uleb128 .LEHE168-.LEHB168
 13974 040b 00       		.uleb128 0
 13975 040c 00       		.uleb128 0
 13976              	.LLSDACSE7197:
 13977              		.text
 13979              		.section	.text._ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_
 13980              		.weak	_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__value
 13982              	_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__ty
 13983              	.LFB7205:
 434:/usr/include/c++/5/cmath ****     {
 13984              		.loc 1 434 0
 13985              		.cfi_startproc
 13986 0000 55       		pushq	%rbp
 13987              		.cfi_def_cfa_offset 16
 13988              		.cfi_offset 6, -16
 13989 0001 4889E5   		movq	%rsp, %rbp
 13990              		.cfi_def_cfa_register 6
 13991 0004 4883EC10 		subq	$16, %rsp
 13992 0008 897DFC   		movl	%edi, -4(%rbp)
 13993 000b 8975F8   		movl	%esi, -8(%rbp)
 437:/usr/include/c++/5/cmath ****     }
 13994              		.loc 1 437 0
 13995 000e 660FEFC9 		pxor	%xmm1, %xmm1
 13996 0012 F20F2A4D 		cvtsi2sd	-8(%rbp), %xmm1
 13996      F8
 13997 0017 660FEFC0 		pxor	%xmm0, %xmm0
 13998 001b F20F2A45 		cvtsi2sd	-4(%rbp), %xmm0
 13998      FC
 13999 0020 E8000000 		call	pow
 13999      00
 14000 0025 66480F7E 		movq	%xmm0, %rax
 14000      C0
 14001 002a 488945F0 		movq	%rax, -16(%rbp)
 14002 002e F20F1045 		movsd	-16(%rbp), %xmm0
 14002      F0
 438:/usr/include/c++/5/cmath **** 
 14003              		.loc 1 438 0
 14004 0033 C9       		leave
 14005              		.cfi_def_cfa 7, 8
 14006 0034 C3       		ret
 14007              		.cfi_endproc
 14008              	.LFE7205:
 14010              		.text
 14011 9bc7 90       		.align 2
 14012              		.globl	_ZN6Solver13truncate_fluxER8flux_var
 14014              	_ZN6Solver13truncate_fluxER8flux_var:
 14015              	.LFB7204:
1450:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1451:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::truncate_flux(flux_var &flux){
GAS LISTING /tmp/cc2K2nX4.s 			page 406


 14016              		.loc 9 1451 0
 14017              		.cfi_startproc
 14018 9bc8 55       		pushq	%rbp
 14019              		.cfi_def_cfa_offset 16
 14020              		.cfi_offset 6, -16
 14021 9bc9 4889E5   		movq	%rsp, %rbp
 14022              		.cfi_def_cfa_register 6
 14023 9bcc 4883EC30 		subq	$48, %rsp
 14024 9bd0 48897DD8 		movq	%rdi, -40(%rbp)
 14025 9bd4 488975D0 		movq	%rsi, -48(%rbp)
1452:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1453:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double temp = std::numeric_limits<double>::epsilon();
 14026              		.loc 9 1453 0
 14027 9bd8 E8000000 		call	_ZNSt14numeric_limitsIdE7epsilonEv
 14027      00
 14028 9bdd 66480F7E 		movq	%xmm0, %rax
 14028      C0
 14029 9be2 488945F0 		movq	%rax, -16(%rbp)
1454:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int digits;
1455:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     digits = 10;
 14030              		.loc 9 1455 0
 14031 9be6 C745EC0A 		movl	$10, -20(%rbp)
 14031      000000
1456:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1457:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if(fabs(flux.P -0.0) < temp){
 14032              		.loc 9 1457 0
 14033 9bed 488B45D0 		movq	-48(%rbp), %rax
 14034 9bf1 F20F1048 		movsd	8(%rax), %xmm1
 14034      08
 14035 9bf6 F20F1005 		movsd	.LC22(%rip), %xmm0
 14035      00000000 
 14036 9bfe 660F54C1 		andpd	%xmm1, %xmm0
 14037 9c02 F20F104D 		movsd	-16(%rbp), %xmm1
 14037      F0
 14038 9c07 660F2EC8 		ucomisd	%xmm0, %xmm1
 14039 9c0b 760D     		jbe	.L1196
1458:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.P  = 0.0;
 14040              		.loc 9 1458 0
 14041 9c0d 488B45D0 		movq	-48(%rbp), %rax
 14042 9c11 660FEFC0 		pxor	%xmm0, %xmm0
 14043 9c15 F20F1140 		movsd	%xmm0, 8(%rax)
 14043      08
 14044              	.L1196:
1459:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1460:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1461:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1462:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1463:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double f = pow(10,digits);
 14045              		.loc 9 1463 0
 14046 9c1a 8B45EC   		movl	-20(%rbp), %eax
 14047 9c1d 89C6     		movl	%eax, %esi
 14048 9c1f BF0A0000 		movl	$10, %edi
 14048      00
 14049 9c24 E8000000 		call	_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 14049      00
 14050 9c29 66480F7E 		movq	%xmm0, %rax
 14050      C0
GAS LISTING /tmp/cc2K2nX4.s 			page 407


 14051 9c2e 488945F8 		movq	%rax, -8(%rbp)
1464:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1465:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1466:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp = floor(fabs(flux.P *f))/f;
 14052              		.loc 9 1466 0
 14053 9c32 488B45D0 		movq	-48(%rbp), %rax
 14054 9c36 F20F1040 		movsd	8(%rax), %xmm0
 14054      08
 14055 9c3b F20F5945 		mulsd	-8(%rbp), %xmm0
 14055      F8
 14056 9c40 F20F100D 		movsd	.LC22(%rip), %xmm1
 14056      00000000 
 14057 9c48 660F54C1 		andpd	%xmm1, %xmm0
 14058 9c4c E8000000 		call	trunc
 14058      00
 14059 9c51 F20F5E45 		divsd	-8(%rbp), %xmm0
 14059      F8
 14060 9c56 F20F1145 		movsd	%xmm0, -16(%rbp)
 14060      F0
1467:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (flux.P < 0.0){
 14061              		.loc 9 1467 0
 14062 9c5b 488B45D0 		movq	-48(%rbp), %rax
 14063 9c5f F20F1048 		movsd	8(%rax), %xmm1
 14063      08
 14064 9c64 660FEFC0 		pxor	%xmm0, %xmm0
 14065 9c68 660F2EC1 		ucomisd	%xmm1, %xmm0
 14066 9c6c 761C     		jbe	.L1215
1468:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.P = -temp;
 14067              		.loc 9 1468 0
 14068 9c6e F20F104D 		movsd	-16(%rbp), %xmm1
 14068      F0
 14069 9c73 F20F1005 		movsd	.LC6(%rip), %xmm0
 14069      00000000 
 14070 9c7b 660F57C1 		xorpd	%xmm1, %xmm0
 14071 9c7f 488B45D0 		movq	-48(%rbp), %rax
 14072 9c83 F20F1140 		movsd	%xmm0, 8(%rax)
 14072      08
 14073 9c88 EB0E     		jmp	.L1200
 14074              	.L1215:
1469:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
1470:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.P = temp;
 14075              		.loc 9 1470 0
 14076 9c8a 488B45D0 		movq	-48(%rbp), %rax
 14077 9c8e F20F1045 		movsd	-16(%rbp), %xmm0
 14077      F0
 14078 9c93 F20F1140 		movsd	%xmm0, 8(%rax)
 14078      08
 14079              	.L1200:
1471:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1472:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp = floor(fabs(flux.momentum_x *f))/f;
 14080              		.loc 9 1472 0
 14081 9c98 488B45D0 		movq	-48(%rbp), %rax
 14082 9c9c F20F1040 		movsd	16(%rax), %xmm0
 14082      10
 14083 9ca1 F20F5945 		mulsd	-8(%rbp), %xmm0
 14083      F8
 14084 9ca6 F20F100D 		movsd	.LC22(%rip), %xmm1
GAS LISTING /tmp/cc2K2nX4.s 			page 408


 14084      00000000 
 14085 9cae 660F54C1 		andpd	%xmm1, %xmm0
 14086 9cb2 E8000000 		call	trunc
 14086      00
 14087 9cb7 F20F5E45 		divsd	-8(%rbp), %xmm0
 14087      F8
 14088 9cbc F20F1145 		movsd	%xmm0, -16(%rbp)
 14088      F0
1473:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (flux.momentum_x < 0.0){
 14089              		.loc 9 1473 0
 14090 9cc1 488B45D0 		movq	-48(%rbp), %rax
 14091 9cc5 F20F1048 		movsd	16(%rax), %xmm1
 14091      10
 14092 9cca 660FEFC0 		pxor	%xmm0, %xmm0
 14093 9cce 660F2EC1 		ucomisd	%xmm1, %xmm0
 14094 9cd2 761C     		jbe	.L1216
1474:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_x = -temp;
 14095              		.loc 9 1474 0
 14096 9cd4 F20F104D 		movsd	-16(%rbp), %xmm1
 14096      F0
 14097 9cd9 F20F1005 		movsd	.LC6(%rip), %xmm0
 14097      00000000 
 14098 9ce1 660F57C1 		xorpd	%xmm1, %xmm0
 14099 9ce5 488B45D0 		movq	-48(%rbp), %rax
 14100 9ce9 F20F1140 		movsd	%xmm0, 16(%rax)
 14100      10
 14101 9cee EB0E     		jmp	.L1203
 14102              	.L1216:
1475:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
1476:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_x = temp;
 14103              		.loc 9 1476 0
 14104 9cf0 488B45D0 		movq	-48(%rbp), %rax
 14105 9cf4 F20F1045 		movsd	-16(%rbp), %xmm0
 14105      F0
 14106 9cf9 F20F1140 		movsd	%xmm0, 16(%rax)
 14106      10
 14107              	.L1203:
1477:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1478:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp = floor(fabs(flux.momentum_y *f))/f;
 14108              		.loc 9 1478 0
 14109 9cfe 488B45D0 		movq	-48(%rbp), %rax
 14110 9d02 F20F1040 		movsd	24(%rax), %xmm0
 14110      18
 14111 9d07 F20F5945 		mulsd	-8(%rbp), %xmm0
 14111      F8
 14112 9d0c F20F100D 		movsd	.LC22(%rip), %xmm1
 14112      00000000 
 14113 9d14 660F54C1 		andpd	%xmm1, %xmm0
 14114 9d18 E8000000 		call	trunc
 14114      00
 14115 9d1d F20F5E45 		divsd	-8(%rbp), %xmm0
 14115      F8
 14116 9d22 F20F1145 		movsd	%xmm0, -16(%rbp)
 14116      F0
1479:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (flux.momentum_y < 0.0){
 14117              		.loc 9 1479 0
 14118 9d27 488B45D0 		movq	-48(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 409


 14119 9d2b F20F1048 		movsd	24(%rax), %xmm1
 14119      18
 14120 9d30 660FEFC0 		pxor	%xmm0, %xmm0
 14121 9d34 660F2EC1 		ucomisd	%xmm1, %xmm0
 14122 9d38 761C     		jbe	.L1217
1480:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_y = -temp;
 14123              		.loc 9 1480 0
 14124 9d3a F20F104D 		movsd	-16(%rbp), %xmm1
 14124      F0
 14125 9d3f F20F1005 		movsd	.LC6(%rip), %xmm0
 14125      00000000 
 14126 9d47 660F57C1 		xorpd	%xmm1, %xmm0
 14127 9d4b 488B45D0 		movq	-48(%rbp), %rax
 14128 9d4f F20F1140 		movsd	%xmm0, 24(%rax)
 14128      18
 14129 9d54 EB0E     		jmp	.L1206
 14130              	.L1217:
1481:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
1482:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_y = temp;
 14131              		.loc 9 1482 0
 14132 9d56 488B45D0 		movq	-48(%rbp), %rax
 14133 9d5a F20F1045 		movsd	-16(%rbp), %xmm0
 14133      F0
 14134 9d5f F20F1140 		movsd	%xmm0, 24(%rax)
 14134      18
 14135              	.L1206:
1483:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1484:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp = floor(fabs(flux.momentum_z *f))/f;
 14136              		.loc 9 1484 0
 14137 9d64 488B45D0 		movq	-48(%rbp), %rax
 14138 9d68 F20F1040 		movsd	32(%rax), %xmm0
 14138      20
 14139 9d6d F20F5945 		mulsd	-8(%rbp), %xmm0
 14139      F8
 14140 9d72 F20F100D 		movsd	.LC22(%rip), %xmm1
 14140      00000000 
 14141 9d7a 660F54C1 		andpd	%xmm1, %xmm0
 14142 9d7e E8000000 		call	trunc
 14142      00
 14143 9d83 F20F5E45 		divsd	-8(%rbp), %xmm0
 14143      F8
 14144 9d88 F20F1145 		movsd	%xmm0, -16(%rbp)
 14144      F0
1485:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (flux.momentum_z < 0.0){
 14145              		.loc 9 1485 0
 14146 9d8d 488B45D0 		movq	-48(%rbp), %rax
 14147 9d91 F20F1048 		movsd	32(%rax), %xmm1
 14147      20
 14148 9d96 660FEFC0 		pxor	%xmm0, %xmm0
 14149 9d9a 660F2EC1 		ucomisd	%xmm1, %xmm0
 14150 9d9e 761C     		jbe	.L1218
1486:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_z = -temp;
 14151              		.loc 9 1486 0
 14152 9da0 F20F104D 		movsd	-16(%rbp), %xmm1
 14152      F0
 14153 9da5 F20F1005 		movsd	.LC6(%rip), %xmm0
 14153      00000000 
GAS LISTING /tmp/cc2K2nX4.s 			page 410


 14154 9dad 660F57C1 		xorpd	%xmm1, %xmm0
 14155 9db1 488B45D0 		movq	-48(%rbp), %rax
 14156 9db5 F20F1140 		movsd	%xmm0, 32(%rax)
 14156      20
1487:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
1488:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         flux.momentum_z = temp;
1489:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1490:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1491:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 14157              		.loc 9 1491 0
 14158 9dba EB0E     		jmp	.L1219
 14159              	.L1218:
1488:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 14160              		.loc 9 1488 0
 14161 9dbc 488B45D0 		movq	-48(%rbp), %rax
 14162 9dc0 F20F1045 		movsd	-16(%rbp), %xmm0
 14162      F0
 14163 9dc5 F20F1140 		movsd	%xmm0, 32(%rax)
 14163      20
 14164              	.L1219:
 14165              		.loc 9 1491 0
 14166 9dca 90       		nop
 14167 9dcb C9       		leave
 14168              		.cfi_def_cfa 7, 8
 14169 9dcc C3       		ret
 14170              		.cfi_endproc
 14171              	.LFE7204:
 14173 9dcd 90       		.align 2
 14174              		.globl	_ZN6Solver13truncate_fluxERd
 14176              	_ZN6Solver13truncate_fluxERd:
 14177              	.LFB7206:
1492:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1493:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::truncate_flux(double &val){
 14178              		.loc 9 1493 0
 14179              		.cfi_startproc
 14180 9dce 55       		pushq	%rbp
 14181              		.cfi_def_cfa_offset 16
 14182              		.cfi_offset 6, -16
 14183 9dcf 4889E5   		movq	%rsp, %rbp
 14184              		.cfi_def_cfa_register 6
 14185 9dd2 4883EC30 		subq	$48, %rsp
 14186 9dd6 48897DD8 		movq	%rdi, -40(%rbp)
 14187 9dda 488975D0 		movq	%rsi, -48(%rbp)
1494:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1495:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double temp = std::numeric_limits<double>::epsilon();
 14188              		.loc 9 1495 0
 14189 9dde E8000000 		call	_ZNSt14numeric_limitsIdE7epsilonEv
 14189      00
 14190 9de3 66480F7E 		movq	%xmm0, %rax
 14190      C0
 14191 9de8 488945F0 		movq	%rax, -16(%rbp)
1496:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     int digits;
1497:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     digits = 10;
 14192              		.loc 9 1497 0
 14193 9dec C745EC0A 		movl	$10, -20(%rbp)
 14193      000000
1498:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 411


1499:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if(fabs(val-0.0) < temp){
 14194              		.loc 9 1499 0
 14195 9df3 488B45D0 		movq	-48(%rbp), %rax
 14196 9df7 F20F1008 		movsd	(%rax), %xmm1
 14197 9dfb F20F1005 		movsd	.LC22(%rip), %xmm0
 14197      00000000 
 14198 9e03 660F54C1 		andpd	%xmm1, %xmm0
 14199 9e07 F20F104D 		movsd	-16(%rbp), %xmm1
 14199      F0
 14200 9e0c 660F2EC8 		ucomisd	%xmm0, %xmm1
 14201 9e10 760C     		jbe	.L1221
1500:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         val = 0.0;
 14202              		.loc 9 1500 0
 14203 9e12 488B45D0 		movq	-48(%rbp), %rax
 14204 9e16 660FEFC0 		pxor	%xmm0, %xmm0
 14205 9e1a F20F1100 		movsd	%xmm0, (%rax)
 14206              	.L1221:
1501:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1502:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1503:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1504:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     double f = pow(10,digits);
 14207              		.loc 9 1504 0
 14208 9e1e 8B45EC   		movl	-20(%rbp), %eax
 14209 9e21 89C6     		movl	%eax, %esi
 14210 9e23 BF0A0000 		movl	$10, %edi
 14210      00
 14211 9e28 E8000000 		call	_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueE
 14211      00
 14212 9e2d 66480F7E 		movq	%xmm0, %rax
 14212      C0
 14213 9e32 488945F8 		movq	%rax, -8(%rbp)
1505:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1506:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1507:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     temp = floor(fabs(val*f))/f;
 14214              		.loc 9 1507 0
 14215 9e36 488B45D0 		movq	-48(%rbp), %rax
 14216 9e3a F20F1000 		movsd	(%rax), %xmm0
 14217 9e3e F20F5945 		mulsd	-8(%rbp), %xmm0
 14217      F8
 14218 9e43 F20F100D 		movsd	.LC22(%rip), %xmm1
 14218      00000000 
 14219 9e4b 660F54C1 		andpd	%xmm1, %xmm0
 14220 9e4f E8000000 		call	trunc
 14220      00
 14221 9e54 F20F5E45 		divsd	-8(%rbp), %xmm0
 14221      F8
 14222 9e59 F20F1145 		movsd	%xmm0, -16(%rbp)
 14222      F0
1508:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     if (val < 0.0){
 14223              		.loc 9 1508 0
 14224 9e5e 488B45D0 		movq	-48(%rbp), %rax
 14225 9e62 F20F1008 		movsd	(%rax), %xmm1
 14226 9e66 660FEFC0 		pxor	%xmm0, %xmm0
 14227 9e6a 660F2EC1 		ucomisd	%xmm1, %xmm0
 14228 9e6e 761B     		jbe	.L1228
1509:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         val = -temp;
 14229              		.loc 9 1509 0
GAS LISTING /tmp/cc2K2nX4.s 			page 412


 14230 9e70 F20F104D 		movsd	-16(%rbp), %xmm1
 14230      F0
 14231 9e75 F20F1005 		movsd	.LC6(%rip), %xmm0
 14231      00000000 
 14232 9e7d 660F57C1 		xorpd	%xmm1, %xmm0
 14233 9e81 488B45D0 		movq	-48(%rbp), %rax
 14234 9e85 F20F1100 		movsd	%xmm0, (%rax)
1510:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }else{
1511:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         val= temp;
1512:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
1513:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1514:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1515:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 14235              		.loc 9 1515 0
 14236 9e89 EB0D     		jmp	.L1229
 14237              	.L1228:
1511:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     }
 14238              		.loc 9 1511 0
 14239 9e8b 488B45D0 		movq	-48(%rbp), %rax
 14240 9e8f F20F1045 		movsd	-16(%rbp), %xmm0
 14240      F0
 14241 9e94 F20F1100 		movsd	%xmm0, (%rax)
 14242              	.L1229:
 14243              		.loc 9 1515 0
 14244 9e98 90       		nop
 14245 9e99 C9       		leave
 14246              		.cfi_def_cfa 7, 8
 14247 9e9a C3       		ret
 14248              		.cfi_endproc
 14249              	.LFE7206:
 14251 9e9b 90       		.align 2
 14252              		.globl	_ZN6Solver11get_e_alphaEiRddd
 14254              	_ZN6Solver11get_e_alphaEiRddd:
 14255              	.LFB7207:
1516:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1517:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1518:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** vector_var Solver::get_e_alpha(int k, double &lattice_weight, double c, double PI ){
 14256              		.loc 9 1518 0
 14257              		.cfi_startproc
 14258 9e9c 55       		pushq	%rbp
 14259              		.cfi_def_cfa_offset 16
 14260              		.cfi_offset 6, -16
 14261 9e9d 4889E5   		movq	%rsp, %rbp
 14262              		.cfi_def_cfa_register 6
 14263 9ea0 4883EC60 		subq	$96, %rsp
 14264 9ea4 48897DD8 		movq	%rdi, -40(%rbp)
 14265 9ea8 488975D0 		movq	%rsi, -48(%rbp)
 14266 9eac 8955CC   		movl	%edx, -52(%rbp)
 14267 9eaf 48894DC0 		movq	%rcx, -64(%rbp)
 14268 9eb3 F20F1145 		movsd	%xmm0, -72(%rbp)
 14268      B8
 14269 9eb8 F20F114D 		movsd	%xmm1, -80(%rbp)
 14269      B0
 14270              		.loc 9 1518 0
 14271 9ebd 64488B04 		movq	%fs:40, %rax
 14271      25280000 
 14271      00
GAS LISTING /tmp/cc2K2nX4.s 			page 413


 14272 9ec6 488945F8 		movq	%rax, -8(%rbp)
 14273 9eca 31C0     		xorl	%eax, %eax
1519:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1520:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         vector_var temp;
 14274              		.loc 9 1520 0
 14275 9ecc 488B45D8 		movq	-40(%rbp), %rax
 14276 9ed0 4889C7   		movq	%rax, %rdi
 14277 9ed3 E8000000 		call	_ZN10vector_varC1Ev
 14277      00
1521:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         int x ,y,z;
1522:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         //get e_alpha again
1523:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         if (k >0 && k< 5){ //
 14278              		.loc 9 1523 0
 14279 9ed8 837DCC00 		cmpl	$0, -52(%rbp)
 14280 9edc 0F8E9000 		jle	.L1231
 14280      0000
 14281              		.loc 9 1523 0 is_stmt 0 discriminator 1
 14282 9ee2 837DCC04 		cmpl	$4, -52(%rbp)
 14283 9ee6 0F8F8600 		jg	.L1231
 14283      0000
1524:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1525:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             x = round(cos((k-1)*PI/2 ) * c );
 14284              		.loc 9 1525 0 is_stmt 1
 14285 9eec 8B45CC   		movl	-52(%rbp), %eax
 14286 9eef 83E801   		subl	$1, %eax
 14287 9ef2 660FEFC0 		pxor	%xmm0, %xmm0
 14288 9ef6 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14289 9efa F20F5945 		mulsd	-80(%rbp), %xmm0
 14289      B0
 14290 9eff F20F100D 		movsd	.LC11(%rip), %xmm1
 14290      00000000 
 14291 9f07 F20F5EC1 		divsd	%xmm1, %xmm0
 14292 9f0b E8000000 		call	cos
 14292      00
 14293 9f10 F20F5945 		mulsd	-72(%rbp), %xmm0
 14293      B8
 14294 9f15 E8000000 		call	round
 14294      00
 14295 9f1a F20F2CC0 		cvttsd2si	%xmm0, %eax
 14296 9f1e 8945EC   		movl	%eax, -20(%rbp)
1526:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             y = round(sin((k-1)*PI/2 )* c);
 14297              		.loc 9 1526 0
 14298 9f21 8B45CC   		movl	-52(%rbp), %eax
 14299 9f24 83E801   		subl	$1, %eax
 14300 9f27 660FEFC0 		pxor	%xmm0, %xmm0
 14301 9f2b F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14302 9f2f F20F5945 		mulsd	-80(%rbp), %xmm0
 14302      B0
 14303 9f34 F20F100D 		movsd	.LC11(%rip), %xmm1
 14303      00000000 
 14304 9f3c F20F5EC1 		divsd	%xmm1, %xmm0
 14305 9f40 E8000000 		call	sin
 14305      00
 14306 9f45 F20F5945 		mulsd	-72(%rbp), %xmm0
 14306      B8
 14307 9f4a E8000000 		call	round
 14307      00
GAS LISTING /tmp/cc2K2nX4.s 			page 414


 14308 9f4f F20F2CC0 		cvttsd2si	%xmm0, %eax
 14309 9f53 8945F0   		movl	%eax, -16(%rbp)
1527:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             z = 0; //update in 3D
 14310              		.loc 9 1527 0
 14311 9f56 C745F400 		movl	$0, -12(%rbp)
 14311      000000
1528:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             lattice_weight = 1.0/9.0;
 14312              		.loc 9 1528 0
 14313 9f5d 488B45C0 		movq	-64(%rbp), %rax
 14314 9f61 F20F1005 		movsd	.LC23(%rip), %xmm0
 14314      00000000 
 14315 9f69 F20F1100 		movsd	%xmm0, (%rax)
 14316 9f6d E9140100 		jmp	.L1232
 14316      00
 14317              	.L1231:
1529:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }else if( k >4){
 14318              		.loc 9 1529 0
 14319 9f72 837DCC04 		cmpl	$4, -52(%rbp)
 14320 9f76 0F8EE500 		jle	.L1233
 14320      0000
1530:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1531:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             x = round(sqrt(2) * cos((k-5)*PI/2 + PI/4 ) * c );
 14321              		.loc 9 1531 0
 14322 9f7c BF020000 		movl	$2, %edi
 14322      00
 14323 9f81 E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 14323      00
 14324 9f86 F20F1145 		movsd	%xmm0, -88(%rbp)
 14324      A8
 14325 9f8b 8B45CC   		movl	-52(%rbp), %eax
 14326 9f8e 83E805   		subl	$5, %eax
 14327 9f91 660FEFC0 		pxor	%xmm0, %xmm0
 14328 9f95 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14329 9f99 F20F5945 		mulsd	-80(%rbp), %xmm0
 14329      B0
 14330 9f9e F20F100D 		movsd	.LC11(%rip), %xmm1
 14330      00000000 
 14331 9fa6 660F28D8 		movapd	%xmm0, %xmm3
 14332 9faa F20F5ED9 		divsd	%xmm1, %xmm3
 14333 9fae 660F28CB 		movapd	%xmm3, %xmm1
 14334 9fb2 F20F1045 		movsd	-80(%rbp), %xmm0
 14334      B0
 14335 9fb7 F20F1015 		movsd	.LC24(%rip), %xmm2
 14335      00000000 
 14336 9fbf F20F5EC2 		divsd	%xmm2, %xmm0
 14337 9fc3 F20F58C1 		addsd	%xmm1, %xmm0
 14338 9fc7 E8000000 		call	cos
 14338      00
 14339 9fcc F20F5945 		mulsd	-88(%rbp), %xmm0
 14339      A8
 14340 9fd1 F20F5945 		mulsd	-72(%rbp), %xmm0
 14340      B8
 14341 9fd6 E8000000 		call	round
 14341      00
 14342 9fdb F20F2CC0 		cvttsd2si	%xmm0, %eax
 14343 9fdf 8945EC   		movl	%eax, -20(%rbp)
1532:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             y = round(sqrt(2) * sin((k-5)*PI/2 + PI/4 ) * c);
GAS LISTING /tmp/cc2K2nX4.s 			page 415


 14344              		.loc 9 1532 0
 14345 9fe2 BF020000 		movl	$2, %edi
 14345      00
 14346 9fe7 E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 14346      00
 14347 9fec F20F1145 		movsd	%xmm0, -88(%rbp)
 14347      A8
 14348 9ff1 8B45CC   		movl	-52(%rbp), %eax
 14349 9ff4 83E805   		subl	$5, %eax
 14350 9ff7 660FEFC0 		pxor	%xmm0, %xmm0
 14351 9ffb F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14352 9fff F20F5945 		mulsd	-80(%rbp), %xmm0
 14352      B0
 14353 a004 F20F100D 		movsd	.LC11(%rip), %xmm1
 14353      00000000 
 14354 a00c 660F28E0 		movapd	%xmm0, %xmm4
 14355 a010 F20F5EE1 		divsd	%xmm1, %xmm4
 14356 a014 660F28CC 		movapd	%xmm4, %xmm1
 14357 a018 F20F1045 		movsd	-80(%rbp), %xmm0
 14357      B0
 14358 a01d F20F1015 		movsd	.LC24(%rip), %xmm2
 14358      00000000 
 14359 a025 F20F5EC2 		divsd	%xmm2, %xmm0
 14360 a029 F20F58C1 		addsd	%xmm1, %xmm0
 14361 a02d E8000000 		call	sin
 14361      00
 14362 a032 F20F5945 		mulsd	-88(%rbp), %xmm0
 14362      A8
 14363 a037 F20F5945 		mulsd	-72(%rbp), %xmm0
 14363      B8
 14364 a03c E8000000 		call	round
 14364      00
 14365 a041 F20F2CC0 		cvttsd2si	%xmm0, %eax
 14366 a045 8945F0   		movl	%eax, -16(%rbp)
1533:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             z = 0; //update in 3D
 14367              		.loc 9 1533 0
 14368 a048 C745F400 		movl	$0, -12(%rbp)
 14368      000000
1534:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             lattice_weight = 1.0/36.0;
 14369              		.loc 9 1534 0
 14370 a04f 488B45C0 		movq	-64(%rbp), %rax
 14371 a053 F20F1005 		movsd	.LC25(%rip), %xmm0
 14371      00000000 
 14372 a05b F20F1100 		movsd	%xmm0, (%rax)
 14373 a05f EB25     		jmp	.L1232
 14374              	.L1233:
1535:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1536:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }else{
1537:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             x = 0 ;
 14375              		.loc 9 1537 0
 14376 a061 C745EC00 		movl	$0, -20(%rbp)
 14376      000000
1538:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             y = 0;
 14377              		.loc 9 1538 0
 14378 a068 C745F000 		movl	$0, -16(%rbp)
 14378      000000
1539:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             z = 0;
GAS LISTING /tmp/cc2K2nX4.s 			page 416


 14379              		.loc 9 1539 0
 14380 a06f C745F400 		movl	$0, -12(%rbp)
 14380      000000
1540:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             lattice_weight = 4.0/9.0;
 14381              		.loc 9 1540 0
 14382 a076 488B45C0 		movq	-64(%rbp), %rax
 14383 a07a F20F1005 		movsd	.LC26(%rip), %xmm0
 14383      00000000 
 14384 a082 F20F1100 		movsd	%xmm0, (%rax)
 14385              	.L1232:
1541:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1542:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         temp.x = x;
 14386              		.loc 9 1542 0
 14387 a086 660FEFC0 		pxor	%xmm0, %xmm0
 14388 a08a F20F2A45 		cvtsi2sd	-20(%rbp), %xmm0
 14388      EC
 14389 a08f 488B45D8 		movq	-40(%rbp), %rax
 14390 a093 F20F1140 		movsd	%xmm0, 8(%rax)
 14390      08
1543:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         temp.y = y;
 14391              		.loc 9 1543 0
 14392 a098 660FEFC0 		pxor	%xmm0, %xmm0
 14393 a09c F20F2A45 		cvtsi2sd	-16(%rbp), %xmm0
 14393      F0
 14394 a0a1 488B45D8 		movq	-40(%rbp), %rax
 14395 a0a5 F20F1140 		movsd	%xmm0, 16(%rax)
 14395      10
1544:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         temp.z = z;
 14396              		.loc 9 1544 0
 14397 a0aa 660FEFC0 		pxor	%xmm0, %xmm0
 14398 a0ae F20F2A45 		cvtsi2sd	-12(%rbp), %xmm0
 14398      F4
 14399 a0b3 488B45D8 		movq	-40(%rbp), %rax
 14400 a0b7 F20F1140 		movsd	%xmm0, 24(%rax)
 14400      18
1545:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1546:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1547:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****     return temp;
 14401              		.loc 9 1547 0
 14402 a0bc 90       		nop
1548:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 14403              		.loc 9 1548 0
 14404 a0bd 488B45D8 		movq	-40(%rbp), %rax
 14405 a0c1 488B55F8 		movq	-8(%rbp), %rdx
 14406 a0c5 64483314 		xorq	%fs:40, %rdx
 14406      25280000 
 14406      00
 14407 a0ce 7405     		je	.L1235
 14408 a0d0 E8000000 		call	__stack_chk_fail
 14408      00
 14409              	.L1235:
 14410 a0d5 C9       		leave
 14411              		.cfi_def_cfa 7, 8
 14412 a0d6 C3       		ret
 14413              		.cfi_endproc
 14414              	.LFE7207:
 14416 a0d7 90       		.align 2
GAS LISTING /tmp/cc2K2nX4.s 			page 417


 14417              		.globl	_ZN6Solver16populate_e_alphaERSt6vectorI10vector_varSaIS1_EEPdddi
 14419              	_ZN6Solver16populate_e_alphaERSt6vectorI10vector_varSaIS1_EEPdddi:
 14420              	.LFB7208:
1549:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1550:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::populate_e_alpha(vector<vector_var> &e_alpha,double *lattice_weight, double c, double 
 14421              		.loc 9 1550 0
 14422              		.cfi_startproc
 14423              		.cfi_personality 0x3,__gxx_personality_v0
 14424              		.cfi_lsda 0x3,.LLSDA7208
 14425 a0d8 55       		pushq	%rbp
 14426              		.cfi_def_cfa_offset 16
 14427              		.cfi_offset 6, -16
 14428 a0d9 4889E5   		movq	%rsp, %rbp
 14429              		.cfi_def_cfa_register 6
 14430 a0dc 53       		pushq	%rbx
 14431 a0dd 4881EC88 		subq	$136, %rsp
 14431      000000
 14432              		.cfi_offset 3, -24
 14433 a0e4 48897DA8 		movq	%rdi, -88(%rbp)
 14434 a0e8 488975A0 		movq	%rsi, -96(%rbp)
 14435 a0ec 48895598 		movq	%rdx, -104(%rbp)
 14436 a0f0 F20F1145 		movsd	%xmm0, -112(%rbp)
 14436      90
 14437 a0f5 F20F114D 		movsd	%xmm1, -120(%rbp)
 14437      88
 14438 a0fa 894D84   		movl	%ecx, -124(%rbp)
 14439              		.loc 9 1550 0
 14440 a0fd 64488B04 		movq	%fs:40, %rax
 14440      25280000 
 14440      00
 14441 a106 488945E8 		movq	%rax, -24(%rbp)
 14442 a10a 31C0     		xorl	%eax, %eax
1551:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1552:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         vector_var temp;
 14443              		.loc 9 1552 0
 14444 a10c 488D45C0 		leaq	-64(%rbp), %rax
 14445 a110 4889C7   		movq	%rax, %rdi
 14446              	.LEHB169:
 14447 a113 E8000000 		call	_ZN10vector_varC1Ev
 14447      00
 14448              	.LEHE169:
 14449              	.LBB90:
1553:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         int x ,y,z;
1554:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         //get e_alpha again
1555:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1556:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         for(int k =0; k<j; k++){
 14450              		.loc 9 1556 0
 14451 a118 C745BC00 		movl	$0, -68(%rbp)
 14451      000000
 14452              	.L1241:
 14453              		.loc 9 1556 0 is_stmt 0 discriminator 1
 14454 a11f 8B45BC   		movl	-68(%rbp), %eax
 14455 a122 3B4584   		cmpl	-124(%rbp), %eax
 14456 a125 0F8D3002 		jge	.L1237
 14456      0000
1557:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             if (k >0 && k< 5){ //
 14457              		.loc 9 1557 0 is_stmt 1
GAS LISTING /tmp/cc2K2nX4.s 			page 418


 14458 a12b 837DBC00 		cmpl	$0, -68(%rbp)
 14459 a12f 0F8EA000 		jle	.L1238
 14459      0000
 14460              		.loc 9 1557 0 is_stmt 0 discriminator 1
 14461 a135 837DBC04 		cmpl	$4, -68(%rbp)
 14462 a139 0F8F9600 		jg	.L1238
 14462      0000
1558:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1559:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 x = round(cos((k-1)*PI/2 ) * c );
 14463              		.loc 9 1559 0 is_stmt 1
 14464 a13f 8B45BC   		movl	-68(%rbp), %eax
 14465 a142 83E801   		subl	$1, %eax
 14466 a145 660FEFC0 		pxor	%xmm0, %xmm0
 14467 a149 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14468 a14d F20F5945 		mulsd	-120(%rbp), %xmm0
 14468      88
 14469 a152 F20F100D 		movsd	.LC11(%rip), %xmm1
 14469      00000000 
 14470 a15a F20F5EC1 		divsd	%xmm1, %xmm0
 14471 a15e E8000000 		call	cos
 14471      00
 14472 a163 F20F5945 		mulsd	-112(%rbp), %xmm0
 14472      90
 14473 a168 E8000000 		call	round
 14473      00
 14474 a16d F20F2CC0 		cvttsd2si	%xmm0, %eax
 14475 a171 8945B0   		movl	%eax, -80(%rbp)
1560:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 y = round(sin((k-1)*PI/2 )* c);
 14476              		.loc 9 1560 0
 14477 a174 8B45BC   		movl	-68(%rbp), %eax
 14478 a177 83E801   		subl	$1, %eax
 14479 a17a 660FEFC0 		pxor	%xmm0, %xmm0
 14480 a17e F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14481 a182 F20F5945 		mulsd	-120(%rbp), %xmm0
 14481      88
 14482 a187 F20F100D 		movsd	.LC11(%rip), %xmm1
 14482      00000000 
 14483 a18f F20F5EC1 		divsd	%xmm1, %xmm0
 14484 a193 E8000000 		call	sin
 14484      00
 14485 a198 F20F5945 		mulsd	-112(%rbp), %xmm0
 14485      90
 14486 a19d E8000000 		call	round
 14486      00
 14487 a1a2 F20F2CC0 		cvttsd2si	%xmm0, %eax
 14488 a1a6 8945B4   		movl	%eax, -76(%rbp)
1561:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 z = 0; //update in 3D
 14489              		.loc 9 1561 0
 14490 a1a9 C745B800 		movl	$0, -72(%rbp)
 14490      000000
1562:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 lattice_weight[k] = 1.0/9.0;
 14491              		.loc 9 1562 0
 14492 a1b0 8B45BC   		movl	-68(%rbp), %eax
 14493 a1b3 4898     		cltq
 14494 a1b5 488D14C5 		leaq	0(,%rax,8), %rdx
 14494      00000000 
 14495 a1bd 488B4598 		movq	-104(%rbp), %rax
GAS LISTING /tmp/cc2K2nX4.s 			page 419


 14496 a1c1 4801D0   		addq	%rdx, %rax
 14497 a1c4 F20F1005 		movsd	.LC23(%rip), %xmm0
 14497      00000000 
 14498 a1cc F20F1100 		movsd	%xmm0, (%rax)
 14499 a1d0 E9400100 		jmp	.L1239
 14499      00
 14500              	.L1238:
1563:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }else if( k >4){
 14501              		.loc 9 1563 0
 14502 a1d5 837DBC04 		cmpl	$4, -68(%rbp)
 14503 a1d9 0F8E0101 		jle	.L1240
 14503      0000
1564:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1565:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 x = round(sqrt(2) * cos((k-5)*PI/2 + PI/4 ) * c );
 14504              		.loc 9 1565 0
 14505 a1df BF020000 		movl	$2, %edi
 14505      00
 14506 a1e4 E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 14506      00
 14507 a1e9 F20F1185 		movsd	%xmm0, -136(%rbp)
 14507      78FFFFFF 
 14508 a1f1 8B45BC   		movl	-68(%rbp), %eax
 14509 a1f4 83E805   		subl	$5, %eax
 14510 a1f7 660FEFC0 		pxor	%xmm0, %xmm0
 14511 a1fb F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14512 a1ff F20F5945 		mulsd	-120(%rbp), %xmm0
 14512      88
 14513 a204 F20F100D 		movsd	.LC11(%rip), %xmm1
 14513      00000000 
 14514 a20c 660F28D8 		movapd	%xmm0, %xmm3
 14515 a210 F20F5ED9 		divsd	%xmm1, %xmm3
 14516 a214 660F28CB 		movapd	%xmm3, %xmm1
 14517 a218 F20F1045 		movsd	-120(%rbp), %xmm0
 14517      88
 14518 a21d F20F1015 		movsd	.LC24(%rip), %xmm2
 14518      00000000 
 14519 a225 F20F5EC2 		divsd	%xmm2, %xmm0
 14520 a229 F20F58C1 		addsd	%xmm1, %xmm0
 14521 a22d E8000000 		call	cos
 14521      00
 14522 a232 F20F5985 		mulsd	-136(%rbp), %xmm0
 14522      78FFFFFF 
 14523 a23a F20F5945 		mulsd	-112(%rbp), %xmm0
 14523      90
 14524 a23f E8000000 		call	round
 14524      00
 14525 a244 F20F2CC0 		cvttsd2si	%xmm0, %eax
 14526 a248 8945B0   		movl	%eax, -80(%rbp)
1566:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 y = round(sqrt(2) * sin((k-5)*PI/2 + PI/4 ) * c);
 14527              		.loc 9 1566 0
 14528 a24b BF020000 		movl	$2, %edi
 14528      00
 14529 a250 E8000000 		call	_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
 14529      00
 14530 a255 F20F1185 		movsd	%xmm0, -136(%rbp)
 14530      78FFFFFF 
 14531 a25d 8B45BC   		movl	-68(%rbp), %eax
GAS LISTING /tmp/cc2K2nX4.s 			page 420


 14532 a260 83E805   		subl	$5, %eax
 14533 a263 660FEFC0 		pxor	%xmm0, %xmm0
 14534 a267 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 14535 a26b F20F5945 		mulsd	-120(%rbp), %xmm0
 14535      88
 14536 a270 F20F100D 		movsd	.LC11(%rip), %xmm1
 14536      00000000 
 14537 a278 660F28E0 		movapd	%xmm0, %xmm4
 14538 a27c F20F5EE1 		divsd	%xmm1, %xmm4
 14539 a280 660F28CC 		movapd	%xmm4, %xmm1
 14540 a284 F20F1045 		movsd	-120(%rbp), %xmm0
 14540      88
 14541 a289 F20F1015 		movsd	.LC24(%rip), %xmm2
 14541      00000000 
 14542 a291 F20F5EC2 		divsd	%xmm2, %xmm0
 14543 a295 F20F58C1 		addsd	%xmm1, %xmm0
 14544 a299 E8000000 		call	sin
 14544      00
 14545 a29e F20F5985 		mulsd	-136(%rbp), %xmm0
 14545      78FFFFFF 
 14546 a2a6 F20F5945 		mulsd	-112(%rbp), %xmm0
 14546      90
 14547 a2ab E8000000 		call	round
 14547      00
 14548 a2b0 F20F2CC0 		cvttsd2si	%xmm0, %eax
 14549 a2b4 8945B4   		movl	%eax, -76(%rbp)
1567:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 z = 0; //update in 3D
 14550              		.loc 9 1567 0
 14551 a2b7 C745B800 		movl	$0, -72(%rbp)
 14551      000000
1568:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 lattice_weight[k] = 1.0/36.0;
 14552              		.loc 9 1568 0
 14553 a2be 8B45BC   		movl	-68(%rbp), %eax
 14554 a2c1 4898     		cltq
 14555 a2c3 488D14C5 		leaq	0(,%rax,8), %rdx
 14555      00000000 
 14556 a2cb 488B4598 		movq	-104(%rbp), %rax
 14557 a2cf 4801D0   		addq	%rdx, %rax
 14558 a2d2 F20F1005 		movsd	.LC25(%rip), %xmm0
 14558      00000000 
 14559 a2da F20F1100 		movsd	%xmm0, (%rax)
 14560 a2de EB35     		jmp	.L1239
 14561              	.L1240:
1569:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1570:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }else{
1571:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 x = 0 ;
 14562              		.loc 9 1571 0
 14563 a2e0 C745B000 		movl	$0, -80(%rbp)
 14563      000000
1572:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 y = 0;
 14564              		.loc 9 1572 0
 14565 a2e7 C745B400 		movl	$0, -76(%rbp)
 14565      000000
1573:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 z = 0;
 14566              		.loc 9 1573 0
 14567 a2ee C745B800 		movl	$0, -72(%rbp)
 14567      000000
GAS LISTING /tmp/cc2K2nX4.s 			page 421


1574:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 lattice_weight[k] = 4.0/9.0;
 14568              		.loc 9 1574 0
 14569 a2f5 8B45BC   		movl	-68(%rbp), %eax
 14570 a2f8 4898     		cltq
 14571 a2fa 488D14C5 		leaq	0(,%rax,8), %rdx
 14571      00000000 
 14572 a302 488B4598 		movq	-104(%rbp), %rax
 14573 a306 4801D0   		addq	%rdx, %rax
 14574 a309 F20F1005 		movsd	.LC26(%rip), %xmm0
 14574      00000000 
 14575 a311 F20F1100 		movsd	%xmm0, (%rax)
 14576              	.L1239:
1575:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
1576:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             temp.x = x;
 14577              		.loc 9 1576 0
 14578 a315 660FEFC0 		pxor	%xmm0, %xmm0
 14579 a319 F20F2A45 		cvtsi2sd	-80(%rbp), %xmm0
 14579      B0
 14580 a31e F20F1145 		movsd	%xmm0, -56(%rbp)
 14580      C8
1577:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             temp.y = y;
 14581              		.loc 9 1577 0
 14582 a323 660FEFC0 		pxor	%xmm0, %xmm0
 14583 a327 F20F2A45 		cvtsi2sd	-76(%rbp), %xmm0
 14583      B4
 14584 a32c F20F1145 		movsd	%xmm0, -48(%rbp)
 14584      D0
1578:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             temp.z = z;
 14585              		.loc 9 1578 0
 14586 a331 660FEFC0 		pxor	%xmm0, %xmm0
 14587 a335 F20F2A45 		cvtsi2sd	-72(%rbp), %xmm0
 14587      B8
 14588 a33a F20F1145 		movsd	%xmm0, -40(%rbp)
 14588      D8
1579:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1580:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             e_alpha.push_back(temp);
 14589              		.loc 9 1580 0
 14590 a33f 488D55C0 		leaq	-64(%rbp), %rdx
 14591 a343 488B45A0 		movq	-96(%rbp), %rax
 14592 a347 4889D6   		movq	%rdx, %rsi
 14593 a34a 4889C7   		movq	%rax, %rdi
 14594              	.LEHB170:
 14595 a34d E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_
 14595      00
 14596              	.LEHE170:
1556:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             if (k >0 && k< 5){ //
 14597              		.loc 9 1556 0 discriminator 2
 14598 a352 8345BC01 		addl	$1, -68(%rbp)
 14599 a356 E9C4FDFF 		jmp	.L1241
 14599      FF
 14600              	.L1237:
 14601              	.LBE90:
1552:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         int x ,y,z;
 14602              		.loc 9 1552 0
 14603 a35b 488D45C0 		leaq	-64(%rbp), %rax
 14604 a35f 4889C7   		movq	%rax, %rdi
 14605 a362 E8000000 		call	_ZN10vector_varD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 422


 14605      00
1581:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1582:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1583:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         }
1584:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1585:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1586:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1587:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** }
 14606              		.loc 9 1587 0
 14607 a367 90       		nop
 14608 a368 488B45E8 		movq	-24(%rbp), %rax
 14609 a36c 64483304 		xorq	%fs:40, %rax
 14609      25280000 
 14609      00
 14610 a375 7421     		je	.L1243
 14611 a377 EB1A     		jmp	.L1245
 14612              	.L1244:
 14613 a379 4889C3   		movq	%rax, %rbx
1552:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         int x ,y,z;
 14614              		.loc 9 1552 0
 14615 a37c 488D45C0 		leaq	-64(%rbp), %rax
 14616 a380 4889C7   		movq	%rax, %rdi
 14617 a383 E8000000 		call	_ZN10vector_varD1Ev
 14617      00
 14618 a388 4889D8   		movq	%rbx, %rax
 14619 a38b 4889C7   		movq	%rax, %rdi
 14620              	.LEHB171:
 14621 a38e E8000000 		call	_Unwind_Resume
 14621      00
 14622              	.LEHE171:
 14623              	.L1245:
 14624              		.loc 9 1587 0
 14625 a393 E8000000 		call	__stack_chk_fail
 14625      00
 14626              	.L1243:
 14627 a398 4881C488 		addq	$136, %rsp
 14627      000000
 14628 a39f 5B       		popq	%rbx
 14629 a3a0 5D       		popq	%rbp
 14630              		.cfi_def_cfa 7, 8
 14631 a3a1 C3       		ret
 14632              		.cfi_endproc
 14633              	.LFE7208:
 14634              		.section	.gcc_except_table
 14635              	.LLSDA7208:
 14636 040d FF       		.byte	0xff
 14637 040e FF       		.byte	0xff
 14638 040f 01       		.byte	0x1
 14639 0410 0F       		.uleb128 .LLSDACSE7208-.LLSDACSB7208
 14640              	.LLSDACSB7208:
 14641 0411 3B       		.uleb128 .LEHB169-.LFB7208
 14642 0412 05       		.uleb128 .LEHE169-.LEHB169
 14643 0413 00       		.uleb128 0
 14644 0414 00       		.uleb128 0
 14645 0415 F504     		.uleb128 .LEHB170-.LFB7208
 14646 0417 05       		.uleb128 .LEHE170-.LEHB170
 14647 0418 A105     		.uleb128 .L1244-.LFB7208
GAS LISTING /tmp/cc2K2nX4.s 			page 423


 14648 041a 00       		.uleb128 0
 14649 041b B605     		.uleb128 .LEHB171-.LFB7208
 14650 041d 05       		.uleb128 .LEHE171-.LEHB171
 14651 041e 00       		.uleb128 0
 14652 041f 00       		.uleb128 0
 14653              	.LLSDACSE7208:
 14654              		.text
 14656              		.align 2
 14657              		.globl	_ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_va
 14659              	_ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_varER4Mesh
 14660              	.LFB7209:
1588:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1589:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1590:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** void Solver::cell_interface_variables( int j, int i, vector_var &interface_node, int &neighbour, do
1591:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                               vector_var &cell_normal, Boundary_Conditions &boundary_conditions,  b
1592:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                               Mesh &Mesh, vector_var &cell_2) {
 14661              		.loc 9 1592 0
 14662              		.cfi_startproc
 14663 a3a2 55       		pushq	%rbp
 14664              		.cfi_def_cfa_offset 16
 14665              		.cfi_offset 6, -16
 14666 a3a3 4889E5   		movq	%rsp, %rbp
 14667              		.cfi_def_cfa_register 6
 14668 a3a6 4883EC30 		subq	$48, %rsp
 14669 a3aa 48897DF8 		movq	%rdi, -8(%rbp)
 14670 a3ae 8975F4   		movl	%esi, -12(%rbp)
 14671 a3b1 8955F0   		movl	%edx, -16(%rbp)
 14672 a3b4 48894DE8 		movq	%rcx, -24(%rbp)
 14673 a3b8 4C8945E0 		movq	%r8, -32(%rbp)
 14674 a3bc 4C894DD8 		movq	%r9, -40(%rbp)
1593:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1594:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****           switch(j) {
 14675              		.loc 9 1594 0
 14676 a3c0 837DF405 		cmpl	$5, -12(%rbp)
 14677 a3c4 0F87C703 		ja	.L1247
 14677      0000
 14678 a3ca 8B45F4   		movl	-12(%rbp), %eax
 14679 a3cd 488B04C5 		movq	.L1249(,%rax,8), %rax
 14679      00000000 
 14680 a3d5 FFE0     		jmp	*%rax
 14681              		.section	.rodata
 14682 009b 00000000 		.align 8
 14682      00
 14683              		.align 4
 14684              	.L1249:
 14685 00a0 00000000 		.quad	.L1248
 14685      00000000 
 14686 00a8 00000000 		.quad	.L1250
 14686      00000000 
 14687 00b0 00000000 		.quad	.L1251
 14687      00000000 
 14688 00b8 00000000 		.quad	.L1252
 14688      00000000 
 14689 00c0 00000000 		.quad	.L1255
 14689      00000000 
 14690 00c8 00000000 		.quad	.L1255
 14690      00000000 
GAS LISTING /tmp/cc2K2nX4.s 			page 424


 14691              		.text
 14692              	.L1248:
1595:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1596:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 0: // West
1597:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.x = Mesh.get_west_x(i);
 14693              		.loc 9 1597 0
 14694 a3d7 8B55F0   		movl	-16(%rbp), %edx
 14695 a3da 488B4528 		movq	40(%rbp), %rax
 14696 a3de 89D6     		movl	%edx, %esi
 14697 a3e0 4889C7   		movq	%rax, %rdi
 14698 a3e3 E8000000 		call	_ZN4Mesh10get_west_xEi
 14698      00
 14699 a3e8 66480F7E 		movq	%xmm0, %rdx
 14699      C2
 14700 a3ed 488B45E8 		movq	-24(%rbp), %rax
 14701 a3f1 48895008 		movq	%rdx, 8(%rax)
1598:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.y = Mesh.get_west_y(i);
 14702              		.loc 9 1598 0
 14703 a3f5 8B55F0   		movl	-16(%rbp), %edx
 14704 a3f8 488B4528 		movq	40(%rbp), %rax
 14705 a3fc 89D6     		movl	%edx, %esi
 14706 a3fe 4889C7   		movq	%rax, %rdi
 14707 a401 E8000000 		call	_ZN4Mesh10get_west_yEi
 14707      00
 14708 a406 66480F7E 		movq	%xmm0, %rdx
 14708      C2
 14709 a40b 488B45E8 		movq	-24(%rbp), %rax
 14710 a40f 48895010 		movq	%rdx, 16(%rax)
1599:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.z= Mesh.get_west_z(i);
 14711              		.loc 9 1599 0
 14712 a413 8B55F0   		movl	-16(%rbp), %edx
 14713 a416 488B4528 		movq	40(%rbp), %rax
 14714 a41a 89D6     		movl	%edx, %esi
 14715 a41c 4889C7   		movq	%rax, %rdi
 14716 a41f E8000000 		call	_ZN4Mesh10get_west_zEi
 14716      00
 14717 a424 66480F7E 		movq	%xmm0, %rdx
 14717      C2
 14718 a429 488B45E8 		movq	-24(%rbp), %rax
 14719 a42d 48895018 		movq	%rdx, 24(%rax)
1600:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 neighbour = Mesh.get_w_node(i);
 14720              		.loc 9 1600 0
 14721 a431 8B55F0   		movl	-16(%rbp), %edx
 14722 a434 488B4528 		movq	40(%rbp), %rax
 14723 a438 89D6     		movl	%edx, %esi
 14724 a43a 4889C7   		movq	%rax, %rdi
 14725 a43d E8000000 		call	_ZN4Mesh10get_w_nodeEi
 14725      00
 14726 a442 89C2     		movl	%eax, %edx
 14727 a444 488B45E0 		movq	-32(%rbp), %rax
 14728 a448 8910     		movl	%edx, (%rax)
1601:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_area = Mesh.get_w_area(i);
 14729              		.loc 9 1601 0
 14730 a44a 8B55F0   		movl	-16(%rbp), %edx
 14731 a44d 488B4528 		movq	40(%rbp), %rax
 14732 a451 89D6     		movl	%edx, %esi
 14733 a453 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 425


 14734 a456 E8000000 		call	_ZN4Mesh10get_w_areaEi
 14734      00
 14735 a45b 66480F7E 		movq	%xmm0, %rdx
 14735      C2
 14736 a460 488B45D8 		movq	-40(%rbp), %rax
 14737 a464 488910   		movq	%rdx, (%rax)
1602:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.x = Mesh.get_w_i(i);
 14738              		.loc 9 1602 0
 14739 a467 8B55F0   		movl	-16(%rbp), %edx
 14740 a46a 488B4528 		movq	40(%rbp), %rax
 14741 a46e 89D6     		movl	%edx, %esi
 14742 a470 4889C7   		movq	%rax, %rdi
 14743 a473 E8000000 		call	_ZN4Mesh7get_w_iEi
 14743      00
 14744 a478 66480F7E 		movq	%xmm0, %rdx
 14744      C2
 14745 a47d 488B4510 		movq	16(%rbp), %rax
 14746 a481 48895008 		movq	%rdx, 8(%rax)
1603:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.y = Mesh.get_w_j(i);
 14747              		.loc 9 1603 0
 14748 a485 8B55F0   		movl	-16(%rbp), %edx
 14749 a488 488B4528 		movq	40(%rbp), %rax
 14750 a48c 89D6     		movl	%edx, %esi
 14751 a48e 4889C7   		movq	%rax, %rdi
 14752 a491 E8000000 		call	_ZN4Mesh7get_w_jEi
 14752      00
 14753 a496 66480F7E 		movq	%xmm0, %rdx
 14753      C2
 14754 a49b 488B4510 		movq	16(%rbp), %rax
 14755 a49f 48895010 		movq	%rdx, 16(%rax)
1604:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.z = Mesh.get_w_k(i);
 14756              		.loc 9 1604 0
 14757 a4a3 8B55F0   		movl	-16(%rbp), %edx
 14758 a4a6 488B4528 		movq	40(%rbp), %rax
 14759 a4aa 89D6     		movl	%edx, %esi
 14760 a4ac 4889C7   		movq	%rax, %rdi
 14761 a4af E8000000 		call	_ZN4Mesh7get_w_kEi
 14761      00
 14762 a4b4 66480F7E 		movq	%xmm0, %rdx
 14762      C2
 14763 a4b9 488B4510 		movq	16(%rbp), %rax
 14764 a4bd 48895018 		movq	%rdx, 24(%rax)
1605:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
 14765              		.loc 9 1605 0
 14766 a4c1 E9CB0200 		jmp	.L1247
 14766      00
 14767              	.L1250:
1606:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1607:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 1: // South
1608:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.x = Mesh.get_south_x(i);
 14768              		.loc 9 1608 0
 14769 a4c6 8B55F0   		movl	-16(%rbp), %edx
 14770 a4c9 488B4528 		movq	40(%rbp), %rax
 14771 a4cd 89D6     		movl	%edx, %esi
 14772 a4cf 4889C7   		movq	%rax, %rdi
 14773 a4d2 E8000000 		call	_ZN4Mesh11get_south_xEi
 14773      00
GAS LISTING /tmp/cc2K2nX4.s 			page 426


 14774 a4d7 66480F7E 		movq	%xmm0, %rdx
 14774      C2
 14775 a4dc 488B45E8 		movq	-24(%rbp), %rax
 14776 a4e0 48895008 		movq	%rdx, 8(%rax)
1609:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.y = Mesh.get_south_y(i);
 14777              		.loc 9 1609 0
 14778 a4e4 8B55F0   		movl	-16(%rbp), %edx
 14779 a4e7 488B4528 		movq	40(%rbp), %rax
 14780 a4eb 89D6     		movl	%edx, %esi
 14781 a4ed 4889C7   		movq	%rax, %rdi
 14782 a4f0 E8000000 		call	_ZN4Mesh11get_south_yEi
 14782      00
 14783 a4f5 66480F7E 		movq	%xmm0, %rdx
 14783      C2
 14784 a4fa 488B45E8 		movq	-24(%rbp), %rax
 14785 a4fe 48895010 		movq	%rdx, 16(%rax)
1610:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.z= Mesh.get_south_z(i);
 14786              		.loc 9 1610 0
 14787 a502 8B55F0   		movl	-16(%rbp), %edx
 14788 a505 488B4528 		movq	40(%rbp), %rax
 14789 a509 89D6     		movl	%edx, %esi
 14790 a50b 4889C7   		movq	%rax, %rdi
 14791 a50e E8000000 		call	_ZN4Mesh11get_south_zEi
 14791      00
 14792 a513 66480F7E 		movq	%xmm0, %rdx
 14792      C2
 14793 a518 488B45E8 		movq	-24(%rbp), %rax
 14794 a51c 48895018 		movq	%rdx, 24(%rax)
1611:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 neighbour =Mesh.get_s_node(i);
 14795              		.loc 9 1611 0
 14796 a520 8B55F0   		movl	-16(%rbp), %edx
 14797 a523 488B4528 		movq	40(%rbp), %rax
 14798 a527 89D6     		movl	%edx, %esi
 14799 a529 4889C7   		movq	%rax, %rdi
 14800 a52c E8000000 		call	_ZN4Mesh10get_s_nodeEi
 14800      00
 14801 a531 89C2     		movl	%eax, %edx
 14802 a533 488B45E0 		movq	-32(%rbp), %rax
 14803 a537 8910     		movl	%edx, (%rax)
1612:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_area = Mesh.get_s_area(i);
 14804              		.loc 9 1612 0
 14805 a539 8B55F0   		movl	-16(%rbp), %edx
 14806 a53c 488B4528 		movq	40(%rbp), %rax
 14807 a540 89D6     		movl	%edx, %esi
 14808 a542 4889C7   		movq	%rax, %rdi
 14809 a545 E8000000 		call	_ZN4Mesh10get_s_areaEi
 14809      00
 14810 a54a 66480F7E 		movq	%xmm0, %rdx
 14810      C2
 14811 a54f 488B45D8 		movq	-40(%rbp), %rax
 14812 a553 488910   		movq	%rdx, (%rax)
1613:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.x = Mesh.get_s_i(i);
 14813              		.loc 9 1613 0
 14814 a556 8B55F0   		movl	-16(%rbp), %edx
 14815 a559 488B4528 		movq	40(%rbp), %rax
 14816 a55d 89D6     		movl	%edx, %esi
 14817 a55f 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 427


 14818 a562 E8000000 		call	_ZN4Mesh7get_s_iEi
 14818      00
 14819 a567 66480F7E 		movq	%xmm0, %rdx
 14819      C2
 14820 a56c 488B4510 		movq	16(%rbp), %rax
 14821 a570 48895008 		movq	%rdx, 8(%rax)
1614:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.y = Mesh.get_s_j(i);
 14822              		.loc 9 1614 0
 14823 a574 8B55F0   		movl	-16(%rbp), %edx
 14824 a577 488B4528 		movq	40(%rbp), %rax
 14825 a57b 89D6     		movl	%edx, %esi
 14826 a57d 4889C7   		movq	%rax, %rdi
 14827 a580 E8000000 		call	_ZN4Mesh7get_s_jEi
 14827      00
 14828 a585 66480F7E 		movq	%xmm0, %rdx
 14828      C2
 14829 a58a 488B4510 		movq	16(%rbp), %rax
 14830 a58e 48895010 		movq	%rdx, 16(%rax)
1615:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.z = Mesh.get_s_k(i);
 14831              		.loc 9 1615 0
 14832 a592 8B55F0   		movl	-16(%rbp), %edx
 14833 a595 488B4528 		movq	40(%rbp), %rax
 14834 a599 89D6     		movl	%edx, %esi
 14835 a59b 4889C7   		movq	%rax, %rdi
 14836 a59e E8000000 		call	_ZN4Mesh7get_s_kEi
 14836      00
 14837 a5a3 66480F7E 		movq	%xmm0, %rdx
 14837      C2
 14838 a5a8 488B4510 		movq	16(%rbp), %rax
 14839 a5ac 48895018 		movq	%rdx, 24(%rax)
1616:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1617:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
 14840              		.loc 9 1617 0
 14841 a5b0 E9DC0100 		jmp	.L1247
 14841      00
 14842              	.L1251:
1618:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 2: // East
1619:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.x = Mesh.get_east_x(i);
 14843              		.loc 9 1619 0
 14844 a5b5 8B55F0   		movl	-16(%rbp), %edx
 14845 a5b8 488B4528 		movq	40(%rbp), %rax
 14846 a5bc 89D6     		movl	%edx, %esi
 14847 a5be 4889C7   		movq	%rax, %rdi
 14848 a5c1 E8000000 		call	_ZN4Mesh10get_east_xEi
 14848      00
 14849 a5c6 66480F7E 		movq	%xmm0, %rdx
 14849      C2
 14850 a5cb 488B45E8 		movq	-24(%rbp), %rax
 14851 a5cf 48895008 		movq	%rdx, 8(%rax)
1620:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.y = Mesh.get_east_y(i);
 14852              		.loc 9 1620 0
 14853 a5d3 8B55F0   		movl	-16(%rbp), %edx
 14854 a5d6 488B4528 		movq	40(%rbp), %rax
 14855 a5da 89D6     		movl	%edx, %esi
 14856 a5dc 4889C7   		movq	%rax, %rdi
 14857 a5df E8000000 		call	_ZN4Mesh10get_east_yEi
 14857      00
GAS LISTING /tmp/cc2K2nX4.s 			page 428


 14858 a5e4 66480F7E 		movq	%xmm0, %rdx
 14858      C2
 14859 a5e9 488B45E8 		movq	-24(%rbp), %rax
 14860 a5ed 48895010 		movq	%rdx, 16(%rax)
1621:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.z= Mesh.get_east_z(i);
 14861              		.loc 9 1621 0
 14862 a5f1 8B55F0   		movl	-16(%rbp), %edx
 14863 a5f4 488B4528 		movq	40(%rbp), %rax
 14864 a5f8 89D6     		movl	%edx, %esi
 14865 a5fa 4889C7   		movq	%rax, %rdi
 14866 a5fd E8000000 		call	_ZN4Mesh10get_east_zEi
 14866      00
 14867 a602 66480F7E 		movq	%xmm0, %rdx
 14867      C2
 14868 a607 488B45E8 		movq	-24(%rbp), %rax
 14869 a60b 48895018 		movq	%rdx, 24(%rax)
1622:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_area = Mesh.get_e_area(i);
 14870              		.loc 9 1622 0
 14871 a60f 8B55F0   		movl	-16(%rbp), %edx
 14872 a612 488B4528 		movq	40(%rbp), %rax
 14873 a616 89D6     		movl	%edx, %esi
 14874 a618 4889C7   		movq	%rax, %rdi
 14875 a61b E8000000 		call	_ZN4Mesh10get_e_areaEi
 14875      00
 14876 a620 66480F7E 		movq	%xmm0, %rdx
 14876      C2
 14877 a625 488B45D8 		movq	-40(%rbp), %rax
 14878 a629 488910   		movq	%rdx, (%rax)
1623:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 neighbour =Mesh.get_e_node(i);
 14879              		.loc 9 1623 0
 14880 a62c 8B55F0   		movl	-16(%rbp), %edx
 14881 a62f 488B4528 		movq	40(%rbp), %rax
 14882 a633 89D6     		movl	%edx, %esi
 14883 a635 4889C7   		movq	%rax, %rdi
 14884 a638 E8000000 		call	_ZN4Mesh10get_e_nodeEi
 14884      00
 14885 a63d 89C2     		movl	%eax, %edx
 14886 a63f 488B45E0 		movq	-32(%rbp), %rax
 14887 a643 8910     		movl	%edx, (%rax)
1624:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.x = Mesh.get_e_i(i);
 14888              		.loc 9 1624 0
 14889 a645 8B55F0   		movl	-16(%rbp), %edx
 14890 a648 488B4528 		movq	40(%rbp), %rax
 14891 a64c 89D6     		movl	%edx, %esi
 14892 a64e 4889C7   		movq	%rax, %rdi
 14893 a651 E8000000 		call	_ZN4Mesh7get_e_iEi
 14893      00
 14894 a656 66480F7E 		movq	%xmm0, %rdx
 14894      C2
 14895 a65b 488B4510 		movq	16(%rbp), %rax
 14896 a65f 48895008 		movq	%rdx, 8(%rax)
1625:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.y = Mesh.get_e_j(i);
 14897              		.loc 9 1625 0
 14898 a663 8B55F0   		movl	-16(%rbp), %edx
 14899 a666 488B4528 		movq	40(%rbp), %rax
 14900 a66a 89D6     		movl	%edx, %esi
 14901 a66c 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 429


 14902 a66f E8000000 		call	_ZN4Mesh7get_e_jEi
 14902      00
 14903 a674 66480F7E 		movq	%xmm0, %rdx
 14903      C2
 14904 a679 488B4510 		movq	16(%rbp), %rax
 14905 a67d 48895010 		movq	%rdx, 16(%rax)
1626:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.z = Mesh.get_e_k(i);
 14906              		.loc 9 1626 0
 14907 a681 8B55F0   		movl	-16(%rbp), %edx
 14908 a684 488B4528 		movq	40(%rbp), %rax
 14909 a688 89D6     		movl	%edx, %esi
 14910 a68a 4889C7   		movq	%rax, %rdi
 14911 a68d E8000000 		call	_ZN4Mesh7get_e_kEi
 14911      00
 14912 a692 66480F7E 		movq	%xmm0, %rdx
 14912      C2
 14913 a697 488B4510 		movq	16(%rbp), %rax
 14914 a69b 48895018 		movq	%rdx, 24(%rax)
1627:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1628:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
 14915              		.loc 9 1628 0
 14916 a69f E9ED0000 		jmp	.L1247
 14916      00
 14917              	.L1252:
1629:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 3: // North
1630:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.x = Mesh.get_north_x(i);
 14918              		.loc 9 1630 0
 14919 a6a4 8B55F0   		movl	-16(%rbp), %edx
 14920 a6a7 488B4528 		movq	40(%rbp), %rax
 14921 a6ab 89D6     		movl	%edx, %esi
 14922 a6ad 4889C7   		movq	%rax, %rdi
 14923 a6b0 E8000000 		call	_ZN4Mesh11get_north_xEi
 14923      00
 14924 a6b5 66480F7E 		movq	%xmm0, %rdx
 14924      C2
 14925 a6ba 488B45E8 		movq	-24(%rbp), %rax
 14926 a6be 48895008 		movq	%rdx, 8(%rax)
1631:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.y = Mesh.get_north_y(i);
 14927              		.loc 9 1631 0
 14928 a6c2 8B55F0   		movl	-16(%rbp), %edx
 14929 a6c5 488B4528 		movq	40(%rbp), %rax
 14930 a6c9 89D6     		movl	%edx, %esi
 14931 a6cb 4889C7   		movq	%rax, %rdi
 14932 a6ce E8000000 		call	_ZN4Mesh11get_north_yEi
 14932      00
 14933 a6d3 66480F7E 		movq	%xmm0, %rdx
 14933      C2
 14934 a6d8 488B45E8 		movq	-24(%rbp), %rax
 14935 a6dc 48895010 		movq	%rdx, 16(%rax)
1632:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_node.z= Mesh.get_north_z(i);
 14936              		.loc 9 1632 0
 14937 a6e0 8B55F0   		movl	-16(%rbp), %edx
 14938 a6e3 488B4528 		movq	40(%rbp), %rax
 14939 a6e7 89D6     		movl	%edx, %esi
 14940 a6e9 4889C7   		movq	%rax, %rdi
 14941 a6ec E8000000 		call	_ZN4Mesh11get_north_zEi
 14941      00
GAS LISTING /tmp/cc2K2nX4.s 			page 430


 14942 a6f1 66480F7E 		movq	%xmm0, %rdx
 14942      C2
 14943 a6f6 488B45E8 		movq	-24(%rbp), %rax
 14944 a6fa 48895018 		movq	%rdx, 24(%rax)
1633:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 neighbour =Mesh.get_n_node(i);
 14945              		.loc 9 1633 0
 14946 a6fe 8B55F0   		movl	-16(%rbp), %edx
 14947 a701 488B4528 		movq	40(%rbp), %rax
 14948 a705 89D6     		movl	%edx, %esi
 14949 a707 4889C7   		movq	%rax, %rdi
 14950 a70a E8000000 		call	_ZN4Mesh10get_n_nodeEi
 14950      00
 14951 a70f 89C2     		movl	%eax, %edx
 14952 a711 488B45E0 		movq	-32(%rbp), %rax
 14953 a715 8910     		movl	%edx, (%rax)
1634:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 interface_area = Mesh.get_n_area(i);
 14954              		.loc 9 1634 0
 14955 a717 8B55F0   		movl	-16(%rbp), %edx
 14956 a71a 488B4528 		movq	40(%rbp), %rax
 14957 a71e 89D6     		movl	%edx, %esi
 14958 a720 4889C7   		movq	%rax, %rdi
 14959 a723 E8000000 		call	_ZN4Mesh10get_n_areaEi
 14959      00
 14960 a728 66480F7E 		movq	%xmm0, %rdx
 14960      C2
 14961 a72d 488B45D8 		movq	-40(%rbp), %rax
 14962 a731 488910   		movq	%rdx, (%rax)
1635:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.x = Mesh.get_n_i(i);
 14963              		.loc 9 1635 0
 14964 a734 8B55F0   		movl	-16(%rbp), %edx
 14965 a737 488B4528 		movq	40(%rbp), %rax
 14966 a73b 89D6     		movl	%edx, %esi
 14967 a73d 4889C7   		movq	%rax, %rdi
 14968 a740 E8000000 		call	_ZN4Mesh7get_n_iEi
 14968      00
 14969 a745 66480F7E 		movq	%xmm0, %rdx
 14969      C2
 14970 a74a 488B4510 		movq	16(%rbp), %rax
 14971 a74e 48895008 		movq	%rdx, 8(%rax)
1636:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.y = Mesh.get_n_j(i);
 14972              		.loc 9 1636 0
 14973 a752 8B55F0   		movl	-16(%rbp), %edx
 14974 a755 488B4528 		movq	40(%rbp), %rax
 14975 a759 89D6     		movl	%edx, %esi
 14976 a75b 4889C7   		movq	%rax, %rdi
 14977 a75e E8000000 		call	_ZN4Mesh7get_n_jEi
 14977      00
 14978 a763 66480F7E 		movq	%xmm0, %rdx
 14978      C2
 14979 a768 488B4510 		movq	16(%rbp), %rax
 14980 a76c 48895010 		movq	%rdx, 16(%rax)
1637:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 cell_normal.z = Mesh.get_n_k(i);
 14981              		.loc 9 1637 0
 14982 a770 8B55F0   		movl	-16(%rbp), %edx
 14983 a773 488B4528 		movq	40(%rbp), %rax
 14984 a777 89D6     		movl	%edx, %esi
 14985 a779 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 431


 14986 a77c E8000000 		call	_ZN4Mesh7get_n_kEi
 14986      00
 14987 a781 66480F7E 		movq	%xmm0, %rdx
 14987      C2
 14988 a786 488B4510 		movq	16(%rbp), %rax
 14989 a78a 48895018 		movq	%rdx, 24(%rax)
1638:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1639:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
 14990              		.loc 9 1639 0
 14991 a78e EB01     		jmp	.L1247
 14992              	.L1255:
1640:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 4: // Front
1641:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1642:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
1643:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             case 5: // Back
1644:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****                 break;
 14993              		.loc 9 1644 0
 14994 a790 90       		nop
 14995              	.L1247:
1645:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1646:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****             }
1647:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         cell_2.x = Mesh.get_centroid_x(neighbour);
 14996              		.loc 9 1647 0
 14997 a791 488B45E0 		movq	-32(%rbp), %rax
 14998 a795 8B10     		movl	(%rax), %edx
 14999 a797 488B4528 		movq	40(%rbp), %rax
 15000 a79b 89D6     		movl	%edx, %esi
 15001 a79d 4889C7   		movq	%rax, %rdi
 15002 a7a0 E8000000 		call	_ZN4Mesh14get_centroid_xEi
 15002      00
 15003 a7a5 66480F7E 		movq	%xmm0, %rdx
 15003      C2
 15004 a7aa 488B4530 		movq	48(%rbp), %rax
 15005 a7ae 48895008 		movq	%rdx, 8(%rax)
1648:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         cell_2.y = Mesh.get_centroid_y((neighbour));
 15006              		.loc 9 1648 0
 15007 a7b2 488B45E0 		movq	-32(%rbp), %rax
 15008 a7b6 8B10     		movl	(%rax), %edx
 15009 a7b8 488B4528 		movq	40(%rbp), %rax
 15010 a7bc 89D6     		movl	%edx, %esi
 15011 a7be 4889C7   		movq	%rax, %rdi
 15012 a7c1 E8000000 		call	_ZN4Mesh14get_centroid_yEi
 15012      00
 15013 a7c6 66480F7E 		movq	%xmm0, %rdx
 15013      C2
 15014 a7cb 488B4530 		movq	48(%rbp), %rax
 15015 a7cf 48895010 		movq	%rdx, 16(%rax)
1649:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****         cell_2.z = Mesh.get_centroid_z(neighbour);
 15016              		.loc 9 1649 0
 15017 a7d3 488B45E0 		movq	-32(%rbp), %rax
 15018 a7d7 8B10     		movl	(%rax), %edx
 15019 a7d9 488B4528 		movq	40(%rbp), %rax
 15020 a7dd 89D6     		movl	%edx, %esi
 15021 a7df 4889C7   		movq	%rax, %rdi
 15022 a7e2 E8000000 		call	_ZN4Mesh14get_centroid_zEi
 15022      00
 15023 a7e7 66480F7E 		movq	%xmm0, %rdx
GAS LISTING /tmp/cc2K2nX4.s 			page 432


 15023      C2
 15024 a7ec 488B4530 		movq	48(%rbp), %rax
 15025 a7f0 48895018 		movq	%rdx, 24(%rax)
1650:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp **** 
1651:/home/brendan/Dropbox/PhD/Code/LBM/2D LBFS/src/Solver.cpp ****       }
 15026              		.loc 9 1651 0
 15027 a7f4 90       		nop
 15028 a7f5 C9       		leave
 15029              		.cfi_def_cfa 7, 8
 15030 a7f6 C3       		ret
 15031              		.cfi_endproc
 15032              	.LFE7209:
 15034              		.section	.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_,"axG
 15035              		.weak	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
 15037              	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_:
 15038              	.LFB7271:
 15039              		.file 14 "/usr/include/c++/5/bits/basic_string.h"
   1:/usr/include/c++/5/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/5/bits/basic_string.h **** 
   3:/usr/include/c++/5/bits/basic_string.h **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/basic_string.h **** //
   5:/usr/include/c++/5/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/5/bits/basic_string.h **** 
  11:/usr/include/c++/5/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/basic_string.h **** 
  16:/usr/include/c++/5/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/basic_string.h **** 
  20:/usr/include/c++/5/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/basic_string.h **** 
  25:/usr/include/c++/5/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/5/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/5/bits/basic_string.h ****  */
  29:/usr/include/c++/5/bits/basic_string.h **** 
  30:/usr/include/c++/5/bits/basic_string.h **** //
  31:/usr/include/c++/5/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/5/bits/basic_string.h **** //
  33:/usr/include/c++/5/bits/basic_string.h **** 
  34:/usr/include/c++/5/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/5/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/5/bits/basic_string.h **** 
  37:/usr/include/c++/5/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/5/bits/basic_string.h **** 
  39:/usr/include/c++/5/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/5/bits/basic_string.h **** #include <ext/alloc_traits.h>
GAS LISTING /tmp/cc2K2nX4.s 			page 433


  41:/usr/include/c++/5/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
  43:/usr/include/c++/5/bits/basic_string.h **** #include <initializer_list>
  44:/usr/include/c++/5/bits/basic_string.h **** #endif
  45:/usr/include/c++/5/bits/basic_string.h **** 
  46:/usr/include/c++/5/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/5/bits/basic_string.h **** {
  48:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/5/bits/basic_string.h **** 
  50:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  52:/usr/include/c++/5/bits/basic_string.h ****   /**
  53:/usr/include/c++/5/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  54:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  55:/usr/include/c++/5/bits/basic_string.h ****    *
  56:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup strings
  57:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup sequences
  58:/usr/include/c++/5/bits/basic_string.h ****    *
  59:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  60:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/5/bits/basic_string.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  63:/usr/include/c++/5/bits/basic_string.h ****    *
  64:/usr/include/c++/5/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  65:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  66:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  67:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  68:/usr/include/c++/5/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  69:/usr/include/c++/5/bits/basic_string.h ****    */
  70:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  71:/usr/include/c++/5/bits/basic_string.h ****     class basic_string
  72:/usr/include/c++/5/bits/basic_string.h ****     {
  73:/usr/include/c++/5/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  74:/usr/include/c++/5/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  75:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  76:/usr/include/c++/5/bits/basic_string.h **** 
  77:/usr/include/c++/5/bits/basic_string.h ****       // Types:
  78:/usr/include/c++/5/bits/basic_string.h ****     public:
  79:/usr/include/c++/5/bits/basic_string.h ****       typedef _Traits					traits_type;
  80:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  81:/usr/include/c++/5/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  82:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  83:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  84:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  85:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  86:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  87:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  88:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  89:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  90:/usr/include/c++/5/bits/basic_string.h **** 							const_iterator;
  91:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  92:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  93:/usr/include/c++/5/bits/basic_string.h **** 
  94:/usr/include/c++/5/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
  95:/usr/include/c++/5/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
  96:/usr/include/c++/5/bits/basic_string.h **** 
  97:/usr/include/c++/5/bits/basic_string.h ****     private:
GAS LISTING /tmp/cc2K2nX4.s 			page 434


  98:/usr/include/c++/5/bits/basic_string.h ****       // type used for positions in insert, erase etc.
  99:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus < 201103L
 100:/usr/include/c++/5/bits/basic_string.h ****       typedef iterator __const_iterator;
 101:/usr/include/c++/5/bits/basic_string.h **** #else
 102:/usr/include/c++/5/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 103:/usr/include/c++/5/bits/basic_string.h **** #endif
 104:/usr/include/c++/5/bits/basic_string.h **** 
 105:/usr/include/c++/5/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 106:/usr/include/c++/5/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 107:/usr/include/c++/5/bits/basic_string.h ****       {
 108:/usr/include/c++/5/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 109:/usr/include/c++/5/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 110:/usr/include/c++/5/bits/basic_string.h **** 
 111:/usr/include/c++/5/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 112:/usr/include/c++/5/bits/basic_string.h ****       };
 113:/usr/include/c++/5/bits/basic_string.h **** 
 114:/usr/include/c++/5/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 115:/usr/include/c++/5/bits/basic_string.h ****       size_type		_M_string_length;
 116:/usr/include/c++/5/bits/basic_string.h **** 
 117:/usr/include/c++/5/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 118:/usr/include/c++/5/bits/basic_string.h **** 
 119:/usr/include/c++/5/bits/basic_string.h ****       union
 120:/usr/include/c++/5/bits/basic_string.h ****       {
 121:/usr/include/c++/5/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 122:/usr/include/c++/5/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 123:/usr/include/c++/5/bits/basic_string.h ****       };
 124:/usr/include/c++/5/bits/basic_string.h **** 
 125:/usr/include/c++/5/bits/basic_string.h ****       void
 126:/usr/include/c++/5/bits/basic_string.h ****       _M_data(pointer __p)
 127:/usr/include/c++/5/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 128:/usr/include/c++/5/bits/basic_string.h **** 
 129:/usr/include/c++/5/bits/basic_string.h ****       void
 130:/usr/include/c++/5/bits/basic_string.h ****       _M_length(size_type __length)
 131:/usr/include/c++/5/bits/basic_string.h ****       { _M_string_length = __length; }
 132:/usr/include/c++/5/bits/basic_string.h **** 
 133:/usr/include/c++/5/bits/basic_string.h ****       pointer
 134:/usr/include/c++/5/bits/basic_string.h ****       _M_data() const
 135:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 136:/usr/include/c++/5/bits/basic_string.h **** 
 137:/usr/include/c++/5/bits/basic_string.h ****       pointer
 138:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data()
 139:/usr/include/c++/5/bits/basic_string.h ****       {
 140:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 142:/usr/include/c++/5/bits/basic_string.h **** #else
 143:/usr/include/c++/5/bits/basic_string.h **** 	return pointer(_M_local_buf);
 144:/usr/include/c++/5/bits/basic_string.h **** #endif
 145:/usr/include/c++/5/bits/basic_string.h ****       }
 146:/usr/include/c++/5/bits/basic_string.h **** 
 147:/usr/include/c++/5/bits/basic_string.h ****       const_pointer
 148:/usr/include/c++/5/bits/basic_string.h ****       _M_local_data() const
 149:/usr/include/c++/5/bits/basic_string.h ****       {
 150:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 151:/usr/include/c++/5/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 152:/usr/include/c++/5/bits/basic_string.h **** #else
 153:/usr/include/c++/5/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 154:/usr/include/c++/5/bits/basic_string.h **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 435


 155:/usr/include/c++/5/bits/basic_string.h ****       }
 156:/usr/include/c++/5/bits/basic_string.h **** 
 157:/usr/include/c++/5/bits/basic_string.h ****       void
 158:/usr/include/c++/5/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 159:/usr/include/c++/5/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 160:/usr/include/c++/5/bits/basic_string.h **** 
 161:/usr/include/c++/5/bits/basic_string.h ****       void
 162:/usr/include/c++/5/bits/basic_string.h ****       _M_set_length(size_type __n)
 163:/usr/include/c++/5/bits/basic_string.h ****       {
 164:/usr/include/c++/5/bits/basic_string.h **** 	_M_length(__n);
 165:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 166:/usr/include/c++/5/bits/basic_string.h ****       }
 167:/usr/include/c++/5/bits/basic_string.h **** 
 168:/usr/include/c++/5/bits/basic_string.h ****       bool
 169:/usr/include/c++/5/bits/basic_string.h ****       _M_is_local() const
 170:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 171:/usr/include/c++/5/bits/basic_string.h **** 
 172:/usr/include/c++/5/bits/basic_string.h ****       // Create & Destroy
 173:/usr/include/c++/5/bits/basic_string.h ****       pointer
 174:/usr/include/c++/5/bits/basic_string.h ****       _M_create(size_type&, size_type);
 175:/usr/include/c++/5/bits/basic_string.h **** 
 176:/usr/include/c++/5/bits/basic_string.h ****       void
 177:/usr/include/c++/5/bits/basic_string.h ****       _M_dispose()
 178:/usr/include/c++/5/bits/basic_string.h ****       {
 179:/usr/include/c++/5/bits/basic_string.h **** 	if (!_M_is_local())
 180:/usr/include/c++/5/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 181:/usr/include/c++/5/bits/basic_string.h ****       }
 182:/usr/include/c++/5/bits/basic_string.h **** 
 183:/usr/include/c++/5/bits/basic_string.h ****       void
 184:/usr/include/c++/5/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 185:/usr/include/c++/5/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 186:/usr/include/c++/5/bits/basic_string.h **** 
 187:/usr/include/c++/5/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 188:/usr/include/c++/5/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 189:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 190:/usr/include/c++/5/bits/basic_string.h ****         void
 191:/usr/include/c++/5/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 192:/usr/include/c++/5/bits/basic_string.h **** 			 std::__false_type)
 193:/usr/include/c++/5/bits/basic_string.h **** 	{
 194:/usr/include/c++/5/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 195:/usr/include/c++/5/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 196:/usr/include/c++/5/bits/basic_string.h **** 	}
 197:/usr/include/c++/5/bits/basic_string.h **** 
 198:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 199:/usr/include/c++/5/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 200:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Integer>
 201:/usr/include/c++/5/bits/basic_string.h ****         void
 202:/usr/include/c++/5/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 203:/usr/include/c++/5/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 204:/usr/include/c++/5/bits/basic_string.h **** 
 205:/usr/include/c++/5/bits/basic_string.h ****       void
 206:/usr/include/c++/5/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 207:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__req, __c); }
 208:/usr/include/c++/5/bits/basic_string.h **** 
 209:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 210:/usr/include/c++/5/bits/basic_string.h ****         void
 211:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
GAS LISTING /tmp/cc2K2nX4.s 			page 436


 212:/usr/include/c++/5/bits/basic_string.h **** 	{
 213:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 214:/usr/include/c++/5/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 215:/usr/include/c++/5/bits/basic_string.h ****         }
 216:/usr/include/c++/5/bits/basic_string.h **** 
 217:/usr/include/c++/5/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 218:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InIterator>
 219:/usr/include/c++/5/bits/basic_string.h ****         void
 220:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 221:/usr/include/c++/5/bits/basic_string.h **** 		     std::input_iterator_tag);
 222:/usr/include/c++/5/bits/basic_string.h **** 
 223:/usr/include/c++/5/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 224:/usr/include/c++/5/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 225:/usr/include/c++/5/bits/basic_string.h ****       template<typename _FwdIterator>
 226:/usr/include/c++/5/bits/basic_string.h ****         void
 227:/usr/include/c++/5/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 228:/usr/include/c++/5/bits/basic_string.h **** 		     std::forward_iterator_tag);
 229:/usr/include/c++/5/bits/basic_string.h **** 
 230:/usr/include/c++/5/bits/basic_string.h ****       void
 231:/usr/include/c++/5/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 232:/usr/include/c++/5/bits/basic_string.h **** 
 233:/usr/include/c++/5/bits/basic_string.h ****       allocator_type&
 234:/usr/include/c++/5/bits/basic_string.h ****       _M_get_allocator()
 235:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
 236:/usr/include/c++/5/bits/basic_string.h **** 
 237:/usr/include/c++/5/bits/basic_string.h ****       const allocator_type&
 238:/usr/include/c++/5/bits/basic_string.h ****       _M_get_allocator() const
 239:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
 240:/usr/include/c++/5/bits/basic_string.h **** 
 241:/usr/include/c++/5/bits/basic_string.h ****     private:
 242:/usr/include/c++/5/bits/basic_string.h **** 
 243:/usr/include/c++/5/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 244:/usr/include/c++/5/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 245:/usr/include/c++/5/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 246:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 247:/usr/include/c++/5/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 248:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 249:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 250:/usr/include/c++/5/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 251:/usr/include/c++/5/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 252:/usr/include/c++/5/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 253:/usr/include/c++/5/bits/basic_string.h ****       template<typename _Tp>
 254:/usr/include/c++/5/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 255:/usr/include/c++/5/bits/basic_string.h **** #endif
 256:/usr/include/c++/5/bits/basic_string.h **** 
 257:/usr/include/c++/5/bits/basic_string.h ****       size_type
 258:/usr/include/c++/5/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 259:/usr/include/c++/5/bits/basic_string.h ****       {
 260:/usr/include/c++/5/bits/basic_string.h **** 	if (__pos > this->size())
 261:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 262:/usr/include/c++/5/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 263:/usr/include/c++/5/bits/basic_string.h **** 				   __s, __pos, this->size());
 264:/usr/include/c++/5/bits/basic_string.h **** 	return __pos;
 265:/usr/include/c++/5/bits/basic_string.h ****       }
 266:/usr/include/c++/5/bits/basic_string.h **** 
 267:/usr/include/c++/5/bits/basic_string.h ****       void
 268:/usr/include/c++/5/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
GAS LISTING /tmp/cc2K2nX4.s 			page 437


 269:/usr/include/c++/5/bits/basic_string.h ****       {
 270:/usr/include/c++/5/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 271:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 272:/usr/include/c++/5/bits/basic_string.h ****       }
 273:/usr/include/c++/5/bits/basic_string.h **** 
 274:/usr/include/c++/5/bits/basic_string.h **** 
 275:/usr/include/c++/5/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 276:/usr/include/c++/5/bits/basic_string.h ****       size_type
 277:/usr/include/c++/5/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 278:/usr/include/c++/5/bits/basic_string.h ****       {
 279:/usr/include/c++/5/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 280:/usr/include/c++/5/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 281:/usr/include/c++/5/bits/basic_string.h ****       }
 282:/usr/include/c++/5/bits/basic_string.h **** 
 283:/usr/include/c++/5/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 284:/usr/include/c++/5/bits/basic_string.h ****       bool
 285:/usr/include/c++/5/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 286:/usr/include/c++/5/bits/basic_string.h ****       {
 287:/usr/include/c++/5/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 288:/usr/include/c++/5/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 289:/usr/include/c++/5/bits/basic_string.h ****       }
 290:/usr/include/c++/5/bits/basic_string.h **** 
 291:/usr/include/c++/5/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 292:/usr/include/c++/5/bits/basic_string.h ****       // traits_type::copy/move/assign.
 293:/usr/include/c++/5/bits/basic_string.h ****       static void
 294:/usr/include/c++/5/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 295:/usr/include/c++/5/bits/basic_string.h ****       {
 296:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 297:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 298:/usr/include/c++/5/bits/basic_string.h **** 	else
 299:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 300:/usr/include/c++/5/bits/basic_string.h ****       }
 301:/usr/include/c++/5/bits/basic_string.h **** 
 302:/usr/include/c++/5/bits/basic_string.h ****       static void
 303:/usr/include/c++/5/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 304:/usr/include/c++/5/bits/basic_string.h ****       {
 305:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 306:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 307:/usr/include/c++/5/bits/basic_string.h **** 	else
 308:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 309:/usr/include/c++/5/bits/basic_string.h ****       }
 310:/usr/include/c++/5/bits/basic_string.h **** 
 311:/usr/include/c++/5/bits/basic_string.h ****       static void
 312:/usr/include/c++/5/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 313:/usr/include/c++/5/bits/basic_string.h ****       {
 314:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
 315:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 316:/usr/include/c++/5/bits/basic_string.h **** 	else
 317:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 318:/usr/include/c++/5/bits/basic_string.h ****       }
 319:/usr/include/c++/5/bits/basic_string.h **** 
 320:/usr/include/c++/5/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 321:/usr/include/c++/5/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 322:/usr/include/c++/5/bits/basic_string.h ****       template<class _Iterator>
 323:/usr/include/c++/5/bits/basic_string.h ****         static void
 324:/usr/include/c++/5/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 325:/usr/include/c++/5/bits/basic_string.h ****         {
GAS LISTING /tmp/cc2K2nX4.s 			page 438


 326:/usr/include/c++/5/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, ++__p)
 327:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 328:/usr/include/c++/5/bits/basic_string.h **** 	}
 329:/usr/include/c++/5/bits/basic_string.h **** 
 330:/usr/include/c++/5/bits/basic_string.h ****       static void
 331:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 332:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 333:/usr/include/c++/5/bits/basic_string.h **** 
 334:/usr/include/c++/5/bits/basic_string.h ****       static void
 335:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 336:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 337:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 338:/usr/include/c++/5/bits/basic_string.h **** 
 339:/usr/include/c++/5/bits/basic_string.h ****       static void
 340:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 341:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 342:/usr/include/c++/5/bits/basic_string.h **** 
 343:/usr/include/c++/5/bits/basic_string.h ****       static void
 344:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 345:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 346:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 347:/usr/include/c++/5/bits/basic_string.h **** 
 348:/usr/include/c++/5/bits/basic_string.h ****       static int
 349:/usr/include/c++/5/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 350:/usr/include/c++/5/bits/basic_string.h ****       {
 351:/usr/include/c++/5/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 352:/usr/include/c++/5/bits/basic_string.h **** 
 353:/usr/include/c++/5/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 354:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 355:/usr/include/c++/5/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 356:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 357:/usr/include/c++/5/bits/basic_string.h **** 	else
 358:/usr/include/c++/5/bits/basic_string.h **** 	  return int(__d);
 359:/usr/include/c++/5/bits/basic_string.h ****       }
 360:/usr/include/c++/5/bits/basic_string.h **** 
 361:/usr/include/c++/5/bits/basic_string.h ****       void
 362:/usr/include/c++/5/bits/basic_string.h ****       _M_assign(const basic_string& __rcs);
 363:/usr/include/c++/5/bits/basic_string.h **** 
 364:/usr/include/c++/5/bits/basic_string.h ****       void
 365:/usr/include/c++/5/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 366:/usr/include/c++/5/bits/basic_string.h **** 		size_type __len2);
 367:/usr/include/c++/5/bits/basic_string.h **** 
 368:/usr/include/c++/5/bits/basic_string.h ****       void
 369:/usr/include/c++/5/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 370:/usr/include/c++/5/bits/basic_string.h **** 
 371:/usr/include/c++/5/bits/basic_string.h ****     public:
 372:/usr/include/c++/5/bits/basic_string.h ****       // Construct/copy/destroy:
 373:/usr/include/c++/5/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 374:/usr/include/c++/5/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 375:/usr/include/c++/5/bits/basic_string.h **** 
 376:/usr/include/c++/5/bits/basic_string.h ****       /**
 377:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 378:/usr/include/c++/5/bits/basic_string.h ****        */
 379:/usr/include/c++/5/bits/basic_string.h ****       basic_string()
 380:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 381:/usr/include/c++/5/bits/basic_string.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 382:/usr/include/c++/5/bits/basic_string.h **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 439


 383:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 384:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 385:/usr/include/c++/5/bits/basic_string.h **** 
 386:/usr/include/c++/5/bits/basic_string.h ****       /**
 387:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 388:/usr/include/c++/5/bits/basic_string.h ****        */
 389:/usr/include/c++/5/bits/basic_string.h ****       explicit
 390:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _Alloc& __a)
 391:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 392:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 393:/usr/include/c++/5/bits/basic_string.h **** 
 394:/usr/include/c++/5/bits/basic_string.h ****       /**
 395:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 396:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 397:/usr/include/c++/5/bits/basic_string.h ****        */
 398:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str)
 399:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __str._M_get_allocator()) // TODO A traits
 400:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 401:/usr/include/c++/5/bits/basic_string.h **** 
 402:/usr/include/c++/5/bits/basic_string.h ****       /**
 403:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 404:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 405:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 406:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 407:/usr/include/c++/5/bits/basic_string.h ****        */
 408:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 409:/usr/include/c++/5/bits/basic_string.h ****       // 2402. [this constructor] shouldn't use Allocator()
 410:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 411:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n = npos)
 412:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 413:/usr/include/c++/5/bits/basic_string.h ****       {
 414:/usr/include/c++/5/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 415:/usr/include/c++/5/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 416:/usr/include/c++/5/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 417:/usr/include/c++/5/bits/basic_string.h ****       }
 418:/usr/include/c++/5/bits/basic_string.h **** 
 419:/usr/include/c++/5/bits/basic_string.h ****       /**
 420:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 421:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 422:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 423:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
 424:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 425:/usr/include/c++/5/bits/basic_string.h ****        */
 426:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 427:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 428:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 429:/usr/include/c++/5/bits/basic_string.h ****       {
 430:/usr/include/c++/5/bits/basic_string.h **** 	const _CharT* __start
 431:/usr/include/c++/5/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 432:/usr/include/c++/5/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 433:/usr/include/c++/5/bits/basic_string.h ****       }
 434:/usr/include/c++/5/bits/basic_string.h **** 
 435:/usr/include/c++/5/bits/basic_string.h ****       /**
 436:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 437:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source character %array.
 438:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 439:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
GAS LISTING /tmp/cc2K2nX4.s 			page 440


 440:/usr/include/c++/5/bits/basic_string.h ****        *
 441:/usr/include/c++/5/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 442:/usr/include/c++/5/bits/basic_string.h ****        *  has no special meaning.
 443:/usr/include/c++/5/bits/basic_string.h ****        */
 444:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 445:/usr/include/c++/5/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 446:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 447:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 448:/usr/include/c++/5/bits/basic_string.h **** 
 449:/usr/include/c++/5/bits/basic_string.h ****       /**
 450:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 451:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source C string.
 452:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 453:/usr/include/c++/5/bits/basic_string.h ****        */
 454:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 455:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 456:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 457:/usr/include/c++/5/bits/basic_string.h **** 
 458:/usr/include/c++/5/bits/basic_string.h ****       /**
 459:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 460:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters.
 461:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to use.
 462:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 463:/usr/include/c++/5/bits/basic_string.h ****        */
 464:/usr/include/c++/5/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 465:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 466:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__n, __c); }
 467:/usr/include/c++/5/bits/basic_string.h **** 
 468:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 469:/usr/include/c++/5/bits/basic_string.h ****       /**
 470:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move construct string.
 471:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 472:/usr/include/c++/5/bits/basic_string.h ****        *
 473:/usr/include/c++/5/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 474:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 475:/usr/include/c++/5/bits/basic_string.h ****        **/
 476:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 477:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 478:/usr/include/c++/5/bits/basic_string.h ****       {
 479:/usr/include/c++/5/bits/basic_string.h **** 	if (__str._M_is_local())
 480:/usr/include/c++/5/bits/basic_string.h **** 	  {
 481:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 482:/usr/include/c++/5/bits/basic_string.h **** 			      _S_local_capacity + 1);
 483:/usr/include/c++/5/bits/basic_string.h **** 	  }
 484:/usr/include/c++/5/bits/basic_string.h **** 	else
 485:/usr/include/c++/5/bits/basic_string.h **** 	  {
 486:/usr/include/c++/5/bits/basic_string.h **** 	    _M_data(__str._M_data());
 487:/usr/include/c++/5/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 488:/usr/include/c++/5/bits/basic_string.h **** 	  }
 489:/usr/include/c++/5/bits/basic_string.h **** 
 490:/usr/include/c++/5/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 491:/usr/include/c++/5/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 492:/usr/include/c++/5/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 493:/usr/include/c++/5/bits/basic_string.h **** 	_M_length(__str.length());
 494:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 495:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_set_length(0);
 496:/usr/include/c++/5/bits/basic_string.h ****       }
GAS LISTING /tmp/cc2K2nX4.s 			page 441


 497:/usr/include/c++/5/bits/basic_string.h **** 
 498:/usr/include/c++/5/bits/basic_string.h ****       /**
 499:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 500:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 501:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 502:/usr/include/c++/5/bits/basic_string.h ****        */
 503:/usr/include/c++/5/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 504:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 505:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 506:/usr/include/c++/5/bits/basic_string.h **** 
 507:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 508:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 509:/usr/include/c++/5/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 510:/usr/include/c++/5/bits/basic_string.h **** 
 511:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 512:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:/usr/include/c++/5/bits/basic_string.h ****       {
 514:/usr/include/c++/5/bits/basic_string.h **** 	if (__str.get_allocator() == __a)
 515:/usr/include/c++/5/bits/basic_string.h **** 	  *this = std::move(__str);
 516:/usr/include/c++/5/bits/basic_string.h **** 	else
 517:/usr/include/c++/5/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 518:/usr/include/c++/5/bits/basic_string.h ****       }
 519:/usr/include/c++/5/bits/basic_string.h **** 
 520:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 521:/usr/include/c++/5/bits/basic_string.h **** 
 522:/usr/include/c++/5/bits/basic_string.h ****       /**
 523:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 524:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __beg  Start of range.
 525:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __end  End of range.
 526:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 527:/usr/include/c++/5/bits/basic_string.h ****        */
 528:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 529:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InputIterator,
 530:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 531:/usr/include/c++/5/bits/basic_string.h **** #else
 532:/usr/include/c++/5/bits/basic_string.h ****       template<typename _InputIterator>
 533:/usr/include/c++/5/bits/basic_string.h **** #endif
 534:/usr/include/c++/5/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 535:/usr/include/c++/5/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 536:/usr/include/c++/5/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 537:/usr/include/c++/5/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 538:/usr/include/c++/5/bits/basic_string.h **** 
 539:/usr/include/c++/5/bits/basic_string.h ****       /**
 540:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 541:/usr/include/c++/5/bits/basic_string.h ****        */
 542:/usr/include/c++/5/bits/basic_string.h ****       ~basic_string()
 543:/usr/include/c++/5/bits/basic_string.h ****       { _M_dispose(); }
 544:/usr/include/c++/5/bits/basic_string.h **** 
 545:/usr/include/c++/5/bits/basic_string.h ****       /**
 546:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 547:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 548:/usr/include/c++/5/bits/basic_string.h ****        */
 549:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 550:/usr/include/c++/5/bits/basic_string.h ****       operator=(const basic_string& __str)
 551:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str); }
 552:/usr/include/c++/5/bits/basic_string.h **** 
 553:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 442


 554:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 555:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 556:/usr/include/c++/5/bits/basic_string.h ****        */
 557:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 558:/usr/include/c++/5/bits/basic_string.h ****       operator=(const _CharT* __s)
 559:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__s); }
 560:/usr/include/c++/5/bits/basic_string.h **** 
 561:/usr/include/c++/5/bits/basic_string.h ****       /**
 562:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 563:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Source character.
 564:/usr/include/c++/5/bits/basic_string.h ****        *
 565:/usr/include/c++/5/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 566:/usr/include/c++/5/bits/basic_string.h ****        *  (*this)[0] == @a c.
 567:/usr/include/c++/5/bits/basic_string.h ****        */
 568:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 569:/usr/include/c++/5/bits/basic_string.h ****       operator=(_CharT __c)
 570:/usr/include/c++/5/bits/basic_string.h ****       {
 571:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(1, __c);
 572:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 573:/usr/include/c++/5/bits/basic_string.h ****       }
 574:/usr/include/c++/5/bits/basic_string.h **** 
 575:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 576:/usr/include/c++/5/bits/basic_string.h ****       /**
 577:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 578:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
 579:/usr/include/c++/5/bits/basic_string.h ****        *
 580:/usr/include/c++/5/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 581:/usr/include/c++/5/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 582:/usr/include/c++/5/bits/basic_string.h ****        **/
 583:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
 584:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 585:/usr/include/c++/5/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 586:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 587:/usr/include/c++/5/bits/basic_string.h ****       operator=(basic_string&& __str)
 588:/usr/include/c++/5/bits/basic_string.h ****       {
 589:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
 590:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 591:/usr/include/c++/5/bits/basic_string.h ****       }
 592:/usr/include/c++/5/bits/basic_string.h **** 
 593:/usr/include/c++/5/bits/basic_string.h ****       /**
 594:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 595:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 596:/usr/include/c++/5/bits/basic_string.h ****        */
 597:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 598:/usr/include/c++/5/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 599:/usr/include/c++/5/bits/basic_string.h ****       {
 600:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 601:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 602:/usr/include/c++/5/bits/basic_string.h ****       }
 603:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 604:/usr/include/c++/5/bits/basic_string.h **** 
 605:/usr/include/c++/5/bits/basic_string.h ****       // Iterators:
 606:/usr/include/c++/5/bits/basic_string.h ****       /**
 607:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 608:/usr/include/c++/5/bits/basic_string.h ****        *  the %string.
 609:/usr/include/c++/5/bits/basic_string.h ****        */
 610:/usr/include/c++/5/bits/basic_string.h ****       iterator
GAS LISTING /tmp/cc2K2nX4.s 			page 443


 611:/usr/include/c++/5/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 612:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data()); }
 613:/usr/include/c++/5/bits/basic_string.h **** 
 614:/usr/include/c++/5/bits/basic_string.h ****       /**
 615:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 616:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 617:/usr/include/c++/5/bits/basic_string.h ****        */
 618:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 619:/usr/include/c++/5/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 620:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 621:/usr/include/c++/5/bits/basic_string.h **** 
 622:/usr/include/c++/5/bits/basic_string.h ****       /**
 623:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 624:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 625:/usr/include/c++/5/bits/basic_string.h ****        */
 626:/usr/include/c++/5/bits/basic_string.h ****       iterator
 627:/usr/include/c++/5/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 628:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 629:/usr/include/c++/5/bits/basic_string.h **** 
 630:/usr/include/c++/5/bits/basic_string.h ****       /**
 631:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 632:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
 633:/usr/include/c++/5/bits/basic_string.h ****        */
 634:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 635:/usr/include/c++/5/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 636:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 637:/usr/include/c++/5/bits/basic_string.h **** 
 638:/usr/include/c++/5/bits/basic_string.h ****       /**
 639:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 640:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 641:/usr/include/c++/5/bits/basic_string.h ****        *  order.
 642:/usr/include/c++/5/bits/basic_string.h ****        */
 643:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
 644:/usr/include/c++/5/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 645:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 646:/usr/include/c++/5/bits/basic_string.h **** 
 647:/usr/include/c++/5/bits/basic_string.h ****       /**
 648:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 649:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 650:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
 651:/usr/include/c++/5/bits/basic_string.h ****        */
 652:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 653:/usr/include/c++/5/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 654:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 655:/usr/include/c++/5/bits/basic_string.h **** 
 656:/usr/include/c++/5/bits/basic_string.h ****       /**
 657:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 658:/usr/include/c++/5/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 659:/usr/include/c++/5/bits/basic_string.h ****        *  element order.
 660:/usr/include/c++/5/bits/basic_string.h ****        */
 661:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
 662:/usr/include/c++/5/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 663:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 664:/usr/include/c++/5/bits/basic_string.h **** 
 665:/usr/include/c++/5/bits/basic_string.h ****       /**
 666:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 667:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
GAS LISTING /tmp/cc2K2nX4.s 			page 444


 668:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
 669:/usr/include/c++/5/bits/basic_string.h ****        */
 670:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 671:/usr/include/c++/5/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 672:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 673:/usr/include/c++/5/bits/basic_string.h **** 
 674:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 675:/usr/include/c++/5/bits/basic_string.h ****       /**
 676:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 677:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
 678:/usr/include/c++/5/bits/basic_string.h ****        */
 679:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 680:/usr/include/c++/5/bits/basic_string.h ****       cbegin() const noexcept
 681:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 682:/usr/include/c++/5/bits/basic_string.h **** 
 683:/usr/include/c++/5/bits/basic_string.h ****       /**
 684:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 685:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
 686:/usr/include/c++/5/bits/basic_string.h ****        */
 687:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
 688:/usr/include/c++/5/bits/basic_string.h ****       cend() const noexcept
 689:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 690:/usr/include/c++/5/bits/basic_string.h **** 
 691:/usr/include/c++/5/bits/basic_string.h ****       /**
 692:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 693:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 694:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
 695:/usr/include/c++/5/bits/basic_string.h ****        */
 696:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 697:/usr/include/c++/5/bits/basic_string.h ****       crbegin() const noexcept
 698:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 699:/usr/include/c++/5/bits/basic_string.h **** 
 700:/usr/include/c++/5/bits/basic_string.h ****       /**
 701:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 702:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 703:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
 704:/usr/include/c++/5/bits/basic_string.h ****        */
 705:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
 706:/usr/include/c++/5/bits/basic_string.h ****       crend() const noexcept
 707:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 708:/usr/include/c++/5/bits/basic_string.h **** #endif
 709:/usr/include/c++/5/bits/basic_string.h **** 
 710:/usr/include/c++/5/bits/basic_string.h ****     public:
 711:/usr/include/c++/5/bits/basic_string.h ****       // Capacity:
 712:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 713:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
 714:/usr/include/c++/5/bits/basic_string.h ****       size_type
 715:/usr/include/c++/5/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 716:/usr/include/c++/5/bits/basic_string.h ****       { return _M_string_length; }
 717:/usr/include/c++/5/bits/basic_string.h **** 
 718:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 719:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
 720:/usr/include/c++/5/bits/basic_string.h ****       size_type
 721:/usr/include/c++/5/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 722:/usr/include/c++/5/bits/basic_string.h ****       { return _M_string_length; }
 723:/usr/include/c++/5/bits/basic_string.h **** 
 724:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
GAS LISTING /tmp/cc2K2nX4.s 			page 445


 725:/usr/include/c++/5/bits/basic_string.h ****       size_type
 726:/usr/include/c++/5/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 727:/usr/include/c++/5/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 728:/usr/include/c++/5/bits/basic_string.h **** 
 729:/usr/include/c++/5/bits/basic_string.h ****       /**
 730:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 731:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 732:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 733:/usr/include/c++/5/bits/basic_string.h ****        *
 734:/usr/include/c++/5/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 735:/usr/include/c++/5/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 736:/usr/include/c++/5/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 737:/usr/include/c++/5/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 738:/usr/include/c++/5/bits/basic_string.h ****        */
 739:/usr/include/c++/5/bits/basic_string.h ****       void
 740:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 741:/usr/include/c++/5/bits/basic_string.h **** 
 742:/usr/include/c++/5/bits/basic_string.h ****       /**
 743:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 744:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 745:/usr/include/c++/5/bits/basic_string.h ****        *
 746:/usr/include/c++/5/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 747:/usr/include/c++/5/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 748:/usr/include/c++/5/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 749:/usr/include/c++/5/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 750:/usr/include/c++/5/bits/basic_string.h ****        *  setting them to 0.
 751:/usr/include/c++/5/bits/basic_string.h ****        */
 752:/usr/include/c++/5/bits/basic_string.h ****       void
 753:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n)
 754:/usr/include/c++/5/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 755:/usr/include/c++/5/bits/basic_string.h **** 
 756:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 757:/usr/include/c++/5/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 758:/usr/include/c++/5/bits/basic_string.h ****       void
 759:/usr/include/c++/5/bits/basic_string.h ****       shrink_to_fit() noexcept
 760:/usr/include/c++/5/bits/basic_string.h ****       {
 761:/usr/include/c++/5/bits/basic_string.h **** #if __cpp_exceptions
 762:/usr/include/c++/5/bits/basic_string.h **** 	if (capacity() > size())
 763:/usr/include/c++/5/bits/basic_string.h **** 	  {
 764:/usr/include/c++/5/bits/basic_string.h **** 	    try
 765:/usr/include/c++/5/bits/basic_string.h **** 	      { reserve(0); }
 766:/usr/include/c++/5/bits/basic_string.h **** 	    catch(...)
 767:/usr/include/c++/5/bits/basic_string.h **** 	      { }
 768:/usr/include/c++/5/bits/basic_string.h **** 	  }
 769:/usr/include/c++/5/bits/basic_string.h **** #endif
 770:/usr/include/c++/5/bits/basic_string.h ****       }
 771:/usr/include/c++/5/bits/basic_string.h **** #endif
 772:/usr/include/c++/5/bits/basic_string.h **** 
 773:/usr/include/c++/5/bits/basic_string.h ****       /**
 774:/usr/include/c++/5/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 775:/usr/include/c++/5/bits/basic_string.h ****        *  before needing to allocate more memory.
 776:/usr/include/c++/5/bits/basic_string.h ****        */
 777:/usr/include/c++/5/bits/basic_string.h ****       size_type
 778:/usr/include/c++/5/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 779:/usr/include/c++/5/bits/basic_string.h ****       {
 780:/usr/include/c++/5/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 781:/usr/include/c++/5/bits/basic_string.h **** 	                     : _M_allocated_capacity;
GAS LISTING /tmp/cc2K2nX4.s 			page 446


 782:/usr/include/c++/5/bits/basic_string.h ****       }
 783:/usr/include/c++/5/bits/basic_string.h **** 
 784:/usr/include/c++/5/bits/basic_string.h ****       /**
 785:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 786:/usr/include/c++/5/bits/basic_string.h ****        *          characters.
 787:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 788:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 789:/usr/include/c++/5/bits/basic_string.h ****        *
 790:/usr/include/c++/5/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 791:/usr/include/c++/5/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 792:/usr/include/c++/5/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 793:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
 794:/usr/include/c++/5/bits/basic_string.h ****        *
 795:/usr/include/c++/5/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 796:/usr/include/c++/5/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 797:/usr/include/c++/5/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 798:/usr/include/c++/5/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 799:/usr/include/c++/5/bits/basic_string.h ****        *  data.
 800:/usr/include/c++/5/bits/basic_string.h ****        */
 801:/usr/include/c++/5/bits/basic_string.h ****       void
 802:/usr/include/c++/5/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
 803:/usr/include/c++/5/bits/basic_string.h **** 
 804:/usr/include/c++/5/bits/basic_string.h ****       /**
 805:/usr/include/c++/5/bits/basic_string.h ****        *  Erases the string, making it empty.
 806:/usr/include/c++/5/bits/basic_string.h ****        */
 807:/usr/include/c++/5/bits/basic_string.h ****       void
 808:/usr/include/c++/5/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
 809:/usr/include/c++/5/bits/basic_string.h ****       { _M_set_length(0); }
 810:/usr/include/c++/5/bits/basic_string.h **** 
 811:/usr/include/c++/5/bits/basic_string.h ****       /**
 812:/usr/include/c++/5/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
 813:/usr/include/c++/5/bits/basic_string.h ****        *  <code>*this == ""</code>.
 814:/usr/include/c++/5/bits/basic_string.h ****        */
 815:/usr/include/c++/5/bits/basic_string.h ****       bool
 816:/usr/include/c++/5/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
 817:/usr/include/c++/5/bits/basic_string.h ****       { return this->size() == 0; }
 818:/usr/include/c++/5/bits/basic_string.h **** 
 819:/usr/include/c++/5/bits/basic_string.h ****       // Element access:
 820:/usr/include/c++/5/bits/basic_string.h ****       /**
 821:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
 822:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 823:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
 824:/usr/include/c++/5/bits/basic_string.h ****        *
 825:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 826:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 827:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 828:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
 829:/usr/include/c++/5/bits/basic_string.h ****        */
 830:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 831:/usr/include/c++/5/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
 832:/usr/include/c++/5/bits/basic_string.h ****       {
 833:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 834:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
 835:/usr/include/c++/5/bits/basic_string.h ****       }
 836:/usr/include/c++/5/bits/basic_string.h **** 
 837:/usr/include/c++/5/bits/basic_string.h ****       /**
 838:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
GAS LISTING /tmp/cc2K2nX4.s 			page 447


 839:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
 840:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 841:/usr/include/c++/5/bits/basic_string.h ****        *
 842:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
 843:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
 844:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
 845:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
 846:/usr/include/c++/5/bits/basic_string.h ****        */
 847:/usr/include/c++/5/bits/basic_string.h ****       reference
 848:/usr/include/c++/5/bits/basic_string.h ****       operator[](size_type __pos)
 849:/usr/include/c++/5/bits/basic_string.h ****       {
 850:/usr/include/c++/5/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
 851:/usr/include/c++/5/bits/basic_string.h **** 	// and in C++11 mode.
 852:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
 853:/usr/include/c++/5/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
 854:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
 855:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
 856:/usr/include/c++/5/bits/basic_string.h ****       }
 857:/usr/include/c++/5/bits/basic_string.h **** 
 858:/usr/include/c++/5/bits/basic_string.h ****       /**
 859:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 860:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
 861:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
 862:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 863:/usr/include/c++/5/bits/basic_string.h ****        *
 864:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 865:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 866:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 867:/usr/include/c++/5/bits/basic_string.h ****        */
 868:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 869:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n) const
 870:/usr/include/c++/5/bits/basic_string.h ****       {
 871:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= this->size())
 872:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 873:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 874:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
 875:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
 876:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
 877:/usr/include/c++/5/bits/basic_string.h ****       }
 878:/usr/include/c++/5/bits/basic_string.h **** 
 879:/usr/include/c++/5/bits/basic_string.h ****       /**
 880:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
 881:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
 882:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
 883:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 884:/usr/include/c++/5/bits/basic_string.h ****        *
 885:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
 886:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
 887:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
 888:/usr/include/c++/5/bits/basic_string.h ****        */
 889:/usr/include/c++/5/bits/basic_string.h ****       reference
 890:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n)
 891:/usr/include/c++/5/bits/basic_string.h ****       {
 892:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= size())
 893:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
 894:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
 895:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
GAS LISTING /tmp/cc2K2nX4.s 			page 448


 896:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
 897:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
 898:/usr/include/c++/5/bits/basic_string.h ****       }
 899:/usr/include/c++/5/bits/basic_string.h **** 
 900:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 901:/usr/include/c++/5/bits/basic_string.h ****       /**
 902:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
 903:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 904:/usr/include/c++/5/bits/basic_string.h ****        */
 905:/usr/include/c++/5/bits/basic_string.h ****       reference
 906:/usr/include/c++/5/bits/basic_string.h ****       front() noexcept
 907:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
 908:/usr/include/c++/5/bits/basic_string.h **** 
 909:/usr/include/c++/5/bits/basic_string.h ****       /**
 910:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
 911:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 912:/usr/include/c++/5/bits/basic_string.h ****        */
 913:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 914:/usr/include/c++/5/bits/basic_string.h ****       front() const noexcept
 915:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
 916:/usr/include/c++/5/bits/basic_string.h **** 
 917:/usr/include/c++/5/bits/basic_string.h ****       /**
 918:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
 919:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
 920:/usr/include/c++/5/bits/basic_string.h ****        */
 921:/usr/include/c++/5/bits/basic_string.h ****       reference
 922:/usr/include/c++/5/bits/basic_string.h ****       back() noexcept
 923:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 924:/usr/include/c++/5/bits/basic_string.h **** 
 925:/usr/include/c++/5/bits/basic_string.h ****       /**
 926:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
 927:/usr/include/c++/5/bits/basic_string.h ****        *  last element of the %string.
 928:/usr/include/c++/5/bits/basic_string.h ****        */
 929:/usr/include/c++/5/bits/basic_string.h ****       const_reference
 930:/usr/include/c++/5/bits/basic_string.h ****       back() const noexcept
 931:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
 932:/usr/include/c++/5/bits/basic_string.h **** #endif
 933:/usr/include/c++/5/bits/basic_string.h **** 
 934:/usr/include/c++/5/bits/basic_string.h ****       // Modifiers:
 935:/usr/include/c++/5/bits/basic_string.h ****       /**
 936:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
 937:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 938:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 939:/usr/include/c++/5/bits/basic_string.h ****        */
 940:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 941:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const basic_string& __str)
 942:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__str); }
 943:/usr/include/c++/5/bits/basic_string.h **** 
 944:/usr/include/c++/5/bits/basic_string.h ****       /**
 945:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
 946:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
 947:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 948:/usr/include/c++/5/bits/basic_string.h ****        */
 949:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 950:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const _CharT* __s)
 951:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__s); }
 952:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 449


 953:/usr/include/c++/5/bits/basic_string.h ****       /**
 954:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a character.
 955:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to append.
 956:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 957:/usr/include/c++/5/bits/basic_string.h ****        */
 958:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 959:/usr/include/c++/5/bits/basic_string.h ****       operator+=(_CharT __c)
 960:/usr/include/c++/5/bits/basic_string.h ****       {
 961:/usr/include/c++/5/bits/basic_string.h **** 	this->push_back(__c);
 962:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
 963:/usr/include/c++/5/bits/basic_string.h ****       }
 964:/usr/include/c++/5/bits/basic_string.h **** 
 965:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
 966:/usr/include/c++/5/bits/basic_string.h ****       /**
 967:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
 968:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
 969:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 970:/usr/include/c++/5/bits/basic_string.h ****        */
 971:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 972:/usr/include/c++/5/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
 973:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
 974:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
 975:/usr/include/c++/5/bits/basic_string.h **** 
 976:/usr/include/c++/5/bits/basic_string.h ****       /**
 977:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
 978:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 979:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 980:/usr/include/c++/5/bits/basic_string.h ****        */
 981:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 982:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str)
 983:/usr/include/c++/5/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 984:/usr/include/c++/5/bits/basic_string.h **** 
 985:/usr/include/c++/5/bits/basic_string.h ****       /**
 986:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a substring.
 987:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
 988:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
 989:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
 990:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
 991:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
 992:/usr/include/c++/5/bits/basic_string.h ****        *
 993:/usr/include/c++/5/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
 994:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
 995:/usr/include/c++/5/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
 996:/usr/include/c++/5/bits/basic_string.h ****        *  remainder of @a __str is appended.
 997:/usr/include/c++/5/bits/basic_string.h ****        */
 998:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
 999:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n)
1000:/usr/include/c++/5/bits/basic_string.h ****       { return _M_append(__str._M_data()
1001:/usr/include/c++/5/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1002:/usr/include/c++/5/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1003:/usr/include/c++/5/bits/basic_string.h **** 
1004:/usr/include/c++/5/bits/basic_string.h ****       /**
1005:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C substring.
1006:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
1007:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1008:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1009:/usr/include/c++/5/bits/basic_string.h ****        */
GAS LISTING /tmp/cc2K2nX4.s 			page 450


1010:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1011:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1012:/usr/include/c++/5/bits/basic_string.h ****       {
1013:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1014:/usr/include/c++/5/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1015:/usr/include/c++/5/bits/basic_string.h **** 	return _M_append(__s, __n);
1016:/usr/include/c++/5/bits/basic_string.h ****       }
1017:/usr/include/c++/5/bits/basic_string.h **** 
1018:/usr/include/c++/5/bits/basic_string.h ****       /**
1019:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
1020:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
1021:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1022:/usr/include/c++/5/bits/basic_string.h ****        */
1023:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1024:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s)
1025:/usr/include/c++/5/bits/basic_string.h ****       {
1026:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1027:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1028:/usr/include/c++/5/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1029:/usr/include/c++/5/bits/basic_string.h **** 	return _M_append(__s, __n);
1030:/usr/include/c++/5/bits/basic_string.h ****       }
1031:/usr/include/c++/5/bits/basic_string.h **** 
1032:/usr/include/c++/5/bits/basic_string.h ****       /**
1033:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append multiple characters.
1034:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1035:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
1036:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1037:/usr/include/c++/5/bits/basic_string.h ****        *
1038:/usr/include/c++/5/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1039:/usr/include/c++/5/bits/basic_string.h ****        */
1040:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1041:/usr/include/c++/5/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1042:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1043:/usr/include/c++/5/bits/basic_string.h **** 
1044:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1045:/usr/include/c++/5/bits/basic_string.h ****       /**
1046:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1047:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1048:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1049:/usr/include/c++/5/bits/basic_string.h ****        */
1050:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1051:/usr/include/c++/5/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1052:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1053:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1054:/usr/include/c++/5/bits/basic_string.h **** 
1055:/usr/include/c++/5/bits/basic_string.h ****       /**
1056:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a range of characters.
1057:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1058:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1059:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1060:/usr/include/c++/5/bits/basic_string.h ****        *
1061:/usr/include/c++/5/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1062:/usr/include/c++/5/bits/basic_string.h ****        */
1063:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1064:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1065:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1066:/usr/include/c++/5/bits/basic_string.h **** #else
GAS LISTING /tmp/cc2K2nX4.s 			page 451


1067:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1068:/usr/include/c++/5/bits/basic_string.h **** #endif
1069:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1070:/usr/include/c++/5/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1071:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1072:/usr/include/c++/5/bits/basic_string.h **** 
1073:/usr/include/c++/5/bits/basic_string.h ****       /**
1074:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a single character.
1075:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to append.
1076:/usr/include/c++/5/bits/basic_string.h ****        */
1077:/usr/include/c++/5/bits/basic_string.h ****       void
1078:/usr/include/c++/5/bits/basic_string.h ****       push_back(_CharT __c)
1079:/usr/include/c++/5/bits/basic_string.h ****       {
1080:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
1081:/usr/include/c++/5/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1082:/usr/include/c++/5/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1083:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1084:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1085:/usr/include/c++/5/bits/basic_string.h ****       }
1086:/usr/include/c++/5/bits/basic_string.h **** 
1087:/usr/include/c++/5/bits/basic_string.h ****       /**
1088:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1089:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
1090:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1091:/usr/include/c++/5/bits/basic_string.h ****        */
1092:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1093:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str)
1094:/usr/include/c++/5/bits/basic_string.h ****       {
1095:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_assign(__str);
1096:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
1097:/usr/include/c++/5/bits/basic_string.h ****       }
1098:/usr/include/c++/5/bits/basic_string.h **** 
1099:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1100:/usr/include/c++/5/bits/basic_string.h ****       /**
1101:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1102:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
1103:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1104:/usr/include/c++/5/bits/basic_string.h ****        *
1105:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1106:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1107:/usr/include/c++/5/bits/basic_string.h ****        */
1108:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1109:/usr/include/c++/5/bits/basic_string.h ****       assign(basic_string&& __str)
1110:/usr/include/c++/5/bits/basic_string.h ****       {
1111:/usr/include/c++/5/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1112:/usr/include/c++/5/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1113:/usr/include/c++/5/bits/basic_string.h **** 	return *this = std::move(__str);
1114:/usr/include/c++/5/bits/basic_string.h ****       }
1115:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1116:/usr/include/c++/5/bits/basic_string.h **** 
1117:/usr/include/c++/5/bits/basic_string.h ****       /**
1118:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1119:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to use.
1120:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1121:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1122:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1123:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
GAS LISTING /tmp/cc2K2nX4.s 			page 452


1124:/usr/include/c++/5/bits/basic_string.h ****        *
1125:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1126:/usr/include/c++/5/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1127:/usr/include/c++/5/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1128:/usr/include/c++/5/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1129:/usr/include/c++/5/bits/basic_string.h ****        */
1130:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1131:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
1132:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1133:/usr/include/c++/5/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1134:/usr/include/c++/5/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1135:/usr/include/c++/5/bits/basic_string.h **** 
1136:/usr/include/c++/5/bits/basic_string.h ****       /**
1137:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1138:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
1139:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1140:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1141:/usr/include/c++/5/bits/basic_string.h ****        *
1142:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1143:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1144:/usr/include/c++/5/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1145:/usr/include/c++/5/bits/basic_string.h ****        */
1146:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1147:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1148:/usr/include/c++/5/bits/basic_string.h ****       {
1149:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1150:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1151:/usr/include/c++/5/bits/basic_string.h ****       }
1152:/usr/include/c++/5/bits/basic_string.h **** 
1153:/usr/include/c++/5/bits/basic_string.h ****       /**
1154:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1155:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
1156:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1157:/usr/include/c++/5/bits/basic_string.h ****        *
1158:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1159:/usr/include/c++/5/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1160:/usr/include/c++/5/bits/basic_string.h ****        *  function returns.
1161:/usr/include/c++/5/bits/basic_string.h ****        */
1162:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1163:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s)
1164:/usr/include/c++/5/bits/basic_string.h ****       {
1165:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1166:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1167:/usr/include/c++/5/bits/basic_string.h **** 			  traits_type::length(__s));
1168:/usr/include/c++/5/bits/basic_string.h ****       }
1169:/usr/include/c++/5/bits/basic_string.h **** 
1170:/usr/include/c++/5/bits/basic_string.h ****       /**
1171:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1172:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1173:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
1174:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/usr/include/c++/5/bits/basic_string.h ****        *
1176:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1177:/usr/include/c++/5/bits/basic_string.h ****        *  character @a __c.
1178:/usr/include/c++/5/bits/basic_string.h ****        */
1179:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1180:/usr/include/c++/5/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
GAS LISTING /tmp/cc2K2nX4.s 			page 453


1181:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1182:/usr/include/c++/5/bits/basic_string.h **** 
1183:/usr/include/c++/5/bits/basic_string.h ****       /**
1184:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1185:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1186:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1187:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1188:/usr/include/c++/5/bits/basic_string.h ****        *
1189:/usr/include/c++/5/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1190:/usr/include/c++/5/bits/basic_string.h ****       */
1191:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1192:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1193:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1194:/usr/include/c++/5/bits/basic_string.h **** #else
1195:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1196:/usr/include/c++/5/bits/basic_string.h **** #endif
1197:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1198:/usr/include/c++/5/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1199:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1200:/usr/include/c++/5/bits/basic_string.h **** 
1201:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1202:/usr/include/c++/5/bits/basic_string.h ****       /**
1203:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1204:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1205:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1206:/usr/include/c++/5/bits/basic_string.h ****        */
1207:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1208:/usr/include/c++/5/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1209:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1210:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1211:/usr/include/c++/5/bits/basic_string.h **** 
1212:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1213:/usr/include/c++/5/bits/basic_string.h ****       /**
1214:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1215:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1216:/usr/include/c++/5/bits/basic_string.h ****        *              insert at.
1217:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1218:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1219:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1220:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1221:/usr/include/c++/5/bits/basic_string.h ****        *
1222:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1223:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1224:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1225:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1226:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1227:/usr/include/c++/5/bits/basic_string.h ****       */
1228:/usr/include/c++/5/bits/basic_string.h ****       iterator
1229:/usr/include/c++/5/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1230:/usr/include/c++/5/bits/basic_string.h ****       {
1231:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1232:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1233:/usr/include/c++/5/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1234:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1235:/usr/include/c++/5/bits/basic_string.h ****       }
1236:/usr/include/c++/5/bits/basic_string.h **** #else
1237:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 454


1238:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1239:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1240:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1241:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1242:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1243:/usr/include/c++/5/bits/basic_string.h ****        *
1244:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1245:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1246:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1247:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1248:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1249:/usr/include/c++/5/bits/basic_string.h ****       */
1250:/usr/include/c++/5/bits/basic_string.h ****       void
1251:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1252:/usr/include/c++/5/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1253:/usr/include/c++/5/bits/basic_string.h **** #endif
1254:/usr/include/c++/5/bits/basic_string.h **** 
1255:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1256:/usr/include/c++/5/bits/basic_string.h ****       /**
1257:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1258:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1259:/usr/include/c++/5/bits/basic_string.h ****        *              insert at.
1260:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
1261:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
1262:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1263:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1264:/usr/include/c++/5/bits/basic_string.h ****        *
1265:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1266:/usr/include/c++/5/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1267:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1268:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1269:/usr/include/c++/5/bits/basic_string.h ****       */
1270:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1271:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1272:/usr/include/c++/5/bits/basic_string.h **** 	iterator
1273:/usr/include/c++/5/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1274:/usr/include/c++/5/bits/basic_string.h ****         {
1275:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1276:/usr/include/c++/5/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1277:/usr/include/c++/5/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1278:/usr/include/c++/5/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1279:/usr/include/c++/5/bits/basic_string.h **** 	}
1280:/usr/include/c++/5/bits/basic_string.h **** #else
1281:/usr/include/c++/5/bits/basic_string.h ****       /**
1282:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1283:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1284:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
1285:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
1286:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1287:/usr/include/c++/5/bits/basic_string.h ****        *
1288:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1289:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1290:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1291:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1292:/usr/include/c++/5/bits/basic_string.h ****       */
1293:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1294:/usr/include/c++/5/bits/basic_string.h ****         void
GAS LISTING /tmp/cc2K2nX4.s 			page 455


1295:/usr/include/c++/5/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1296:/usr/include/c++/5/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1297:/usr/include/c++/5/bits/basic_string.h **** #endif
1298:/usr/include/c++/5/bits/basic_string.h **** 
1299:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1300:/usr/include/c++/5/bits/basic_string.h ****       /**
1301:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1302:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1303:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1304:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1305:/usr/include/c++/5/bits/basic_string.h ****        */
1306:/usr/include/c++/5/bits/basic_string.h ****       void
1307:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1308:/usr/include/c++/5/bits/basic_string.h ****       {
1309:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1310:/usr/include/c++/5/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1311:/usr/include/c++/5/bits/basic_string.h ****       }
1312:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1313:/usr/include/c++/5/bits/basic_string.h **** 
1314:/usr/include/c++/5/bits/basic_string.h ****       /**
1315:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert value of a string.
1316:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1317:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
1318:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1319:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1320:/usr/include/c++/5/bits/basic_string.h ****        *
1321:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1322:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1323:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1324:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1325:/usr/include/c++/5/bits/basic_string.h ****       */
1326:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1327:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1328:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1329:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1330:/usr/include/c++/5/bits/basic_string.h **** 
1331:/usr/include/c++/5/bits/basic_string.h ****       /**
1332:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a substring.
1333:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1334:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
1335:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1336:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1337:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1338:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1339:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1340:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1341:/usr/include/c++/5/bits/basic_string.h ****        *
1342:/usr/include/c++/5/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1343:/usr/include/c++/5/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1344:/usr/include/c++/5/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1345:/usr/include/c++/5/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1346:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1347:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1348:/usr/include/c++/5/bits/basic_string.h ****       */
1349:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1350:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1351:/usr/include/c++/5/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
GAS LISTING /tmp/cc2K2nX4.s 			page 456


1352:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1353:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1354:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1355:/usr/include/c++/5/bits/basic_string.h **** 
1356:/usr/include/c++/5/bits/basic_string.h ****       /**
1357:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C substring.
1358:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1359:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
1360:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1361:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1362:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1363:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1364:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1365:/usr/include/c++/5/bits/basic_string.h ****        *
1366:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1367:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1368:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1369:/usr/include/c++/5/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1370:/usr/include/c++/5/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1371:/usr/include/c++/5/bits/basic_string.h ****       */
1372:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1373:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1374:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1375:/usr/include/c++/5/bits/basic_string.h **** 
1376:/usr/include/c++/5/bits/basic_string.h ****       /**
1377:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C string.
1378:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1379:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
1380:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1381:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1382:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1383:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1384:/usr/include/c++/5/bits/basic_string.h ****        *
1385:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1386:/usr/include/c++/5/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1387:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1388:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1389:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1390:/usr/include/c++/5/bits/basic_string.h ****       */
1391:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1392:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1393:/usr/include/c++/5/bits/basic_string.h ****       {
1394:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1395:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1396:/usr/include/c++/5/bits/basic_string.h **** 			     traits_type::length(__s));
1397:/usr/include/c++/5/bits/basic_string.h ****       }
1398:/usr/include/c++/5/bits/basic_string.h **** 
1399:/usr/include/c++/5/bits/basic_string.h ****       /**
1400:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1401:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1402:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1403:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1404:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1405:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1406:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1407:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1408:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 457


1409:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1410:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1411:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1412:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1413:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1414:/usr/include/c++/5/bits/basic_string.h ****       */
1415:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1416:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1417:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1418:/usr/include/c++/5/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1419:/usr/include/c++/5/bits/basic_string.h **** 
1420:/usr/include/c++/5/bits/basic_string.h ****       /**
1421:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert one character.
1422:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1423:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
1424:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1425:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1426:/usr/include/c++/5/bits/basic_string.h ****        *
1427:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1428:/usr/include/c++/5/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1429:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1430:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1431:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1432:/usr/include/c++/5/bits/basic_string.h ****       */
1433:/usr/include/c++/5/bits/basic_string.h ****       iterator
1434:/usr/include/c++/5/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1435:/usr/include/c++/5/bits/basic_string.h ****       {
1436:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1437:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1438:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1439:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1440:/usr/include/c++/5/bits/basic_string.h ****       }
1441:/usr/include/c++/5/bits/basic_string.h **** 
1442:/usr/include/c++/5/bits/basic_string.h ****       /**
1443:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove characters.
1444:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1445:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1446:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1447:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1448:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1449:/usr/include/c++/5/bits/basic_string.h ****        *
1450:/usr/include/c++/5/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1451:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1452:/usr/include/c++/5/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1453:/usr/include/c++/5/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1454:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1455:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1456:/usr/include/c++/5/bits/basic_string.h ****       */
1457:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1458:/usr/include/c++/5/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1459:/usr/include/c++/5/bits/basic_string.h ****       {
1460:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(_M_check(__pos, "basic_string::erase"),
1461:/usr/include/c++/5/bits/basic_string.h **** 		       _M_limit(__pos, __n));
1462:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
1463:/usr/include/c++/5/bits/basic_string.h ****       }
1464:/usr/include/c++/5/bits/basic_string.h **** 
1465:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 458


1466:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove one character.
1467:/usr/include/c++/5/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1468:/usr/include/c++/5/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1469:/usr/include/c++/5/bits/basic_string.h ****        *
1470:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1471:/usr/include/c++/5/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1472:/usr/include/c++/5/bits/basic_string.h ****       */
1473:/usr/include/c++/5/bits/basic_string.h ****       iterator
1474:/usr/include/c++/5/bits/basic_string.h ****       erase(__const_iterator __position)
1475:/usr/include/c++/5/bits/basic_string.h ****       {
1476:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1477:/usr/include/c++/5/bits/basic_string.h **** 				 && __position < end());
1478:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1479:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1480:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1481:/usr/include/c++/5/bits/basic_string.h ****       }
1482:/usr/include/c++/5/bits/basic_string.h **** 
1483:/usr/include/c++/5/bits/basic_string.h ****       /**
1484:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1485:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1486:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1487:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1488:/usr/include/c++/5/bits/basic_string.h ****        *
1489:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1490:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1491:/usr/include/c++/5/bits/basic_string.h ****       */
1492:/usr/include/c++/5/bits/basic_string.h ****       iterator
1493:/usr/include/c++/5/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1494:/usr/include/c++/5/bits/basic_string.h ****       {
1495:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1496:/usr/include/c++/5/bits/basic_string.h **** 				 && __last <= end());
1497:/usr/include/c++/5/bits/basic_string.h ****         const size_type __pos = __first - begin();
1498:/usr/include/c++/5/bits/basic_string.h **** 	this->_M_erase(__pos, __last - __first);
1499:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1500:/usr/include/c++/5/bits/basic_string.h ****       }
1501:/usr/include/c++/5/bits/basic_string.h **** 
1502:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1503:/usr/include/c++/5/bits/basic_string.h ****       /**
1504:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove the last character.
1505:/usr/include/c++/5/bits/basic_string.h ****        *
1506:/usr/include/c++/5/bits/basic_string.h ****        *  The string must be non-empty.
1507:/usr/include/c++/5/bits/basic_string.h ****        */
1508:/usr/include/c++/5/bits/basic_string.h ****       void
1509:/usr/include/c++/5/bits/basic_string.h ****       pop_back() noexcept
1510:/usr/include/c++/5/bits/basic_string.h ****       { _M_erase(size()-1, 1); }
1511:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1512:/usr/include/c++/5/bits/basic_string.h **** 
1513:/usr/include/c++/5/bits/basic_string.h ****       /**
1514:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1515:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1516:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1517:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
1518:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1519:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1520:/usr/include/c++/5/bits/basic_string.h ****        *  string.
1521:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1522:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 459


1523:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1524:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1525:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1526:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1527:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1528:/usr/include/c++/5/bits/basic_string.h ****        *  error is thrown.
1529:/usr/include/c++/5/bits/basic_string.h ****       */
1530:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1531:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1532:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1533:/usr/include/c++/5/bits/basic_string.h **** 
1534:/usr/include/c++/5/bits/basic_string.h ****       /**
1535:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1536:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1537:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1538:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
1539:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1540:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1541:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1542:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1543:/usr/include/c++/5/bits/basic_string.h ****        *  __str.size().
1544:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1545:/usr/include/c++/5/bits/basic_string.h ****        *
1546:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1547:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1548:/usr/include/c++/5/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1549:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1550:/usr/include/c++/5/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1551:/usr/include/c++/5/bits/basic_string.h ****       */
1552:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1553:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1554:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
1555:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1556:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1557:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1558:/usr/include/c++/5/bits/basic_string.h **** 
1559:/usr/include/c++/5/bits/basic_string.h ****       /**
1560:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1561:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1562:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1563:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
1564:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1565:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1566:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1567:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1568:/usr/include/c++/5/bits/basic_string.h ****        *
1569:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1570:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1571:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1572:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1573:/usr/include/c++/5/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1574:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1575:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1576:/usr/include/c++/5/bits/basic_string.h ****       */
1577:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1578:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1579:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2)
GAS LISTING /tmp/cc2K2nX4.s 			page 460


1580:/usr/include/c++/5/bits/basic_string.h ****       {
1581:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1582:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1583:/usr/include/c++/5/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1584:/usr/include/c++/5/bits/basic_string.h ****       }
1585:/usr/include/c++/5/bits/basic_string.h **** 
1586:/usr/include/c++/5/bits/basic_string.h ****       /**
1587:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1588:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1589:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1590:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
1591:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1592:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1593:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1594:/usr/include/c++/5/bits/basic_string.h ****        *
1595:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1596:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1597:/usr/include/c++/5/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1598:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1599:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1600:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
1601:/usr/include/c++/5/bits/basic_string.h ****       */
1602:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1603:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1604:/usr/include/c++/5/bits/basic_string.h ****       {
1605:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1606:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1607:/usr/include/c++/5/bits/basic_string.h ****       }
1608:/usr/include/c++/5/bits/basic_string.h **** 
1609:/usr/include/c++/5/bits/basic_string.h ****       /**
1610:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1611:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1612:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1613:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1614:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
1615:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1616:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1617:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1618:/usr/include/c++/5/bits/basic_string.h ****        *
1619:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1620:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1621:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1622:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1623:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1624:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
1625:/usr/include/c++/5/bits/basic_string.h ****       */
1626:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1627:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1628:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1629:/usr/include/c++/5/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1630:/usr/include/c++/5/bits/basic_string.h **** 
1631:/usr/include/c++/5/bits/basic_string.h ****       /**
1632:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1633:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1634:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1635:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String value to insert.
1636:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
GAS LISTING /tmp/cc2K2nX4.s 			page 461


1637:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1638:/usr/include/c++/5/bits/basic_string.h ****        *
1639:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1640:/usr/include/c++/5/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1641:/usr/include/c++/5/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1642:/usr/include/c++/5/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1643:/usr/include/c++/5/bits/basic_string.h ****       */
1644:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1645:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1646:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string& __str)
1647:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1648:/usr/include/c++/5/bits/basic_string.h **** 
1649:/usr/include/c++/5/bits/basic_string.h ****       /**
1650:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
1651:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1652:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1653:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
1654:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
1655:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1656:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1657:/usr/include/c++/5/bits/basic_string.h ****        *
1658:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1659:/usr/include/c++/5/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
1660:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1661:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1662:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1663:/usr/include/c++/5/bits/basic_string.h ****       */
1664:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1665:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1666:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
1667:/usr/include/c++/5/bits/basic_string.h ****       {
1668:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1669:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1670:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
1671:/usr/include/c++/5/bits/basic_string.h ****       }
1672:/usr/include/c++/5/bits/basic_string.h **** 
1673:/usr/include/c++/5/bits/basic_string.h ****       /**
1674:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
1675:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1676:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1677:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
1678:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1679:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1680:/usr/include/c++/5/bits/basic_string.h ****        *
1681:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1682:/usr/include/c++/5/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
1683:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1684:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1685:/usr/include/c++/5/bits/basic_string.h ****       */
1686:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1687:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
1688:/usr/include/c++/5/bits/basic_string.h ****       {
1689:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1690:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
1691:/usr/include/c++/5/bits/basic_string.h ****       }
1692:/usr/include/c++/5/bits/basic_string.h **** 
1693:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 462


1694:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
1695:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1696:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1697:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1698:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
1699:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1700:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1701:/usr/include/c++/5/bits/basic_string.h ****        *
1702:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1703:/usr/include/c++/5/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
1704:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
1705:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1706:/usr/include/c++/5/bits/basic_string.h ****       */
1707:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1708:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
1709:/usr/include/c++/5/bits/basic_string.h **** 	      _CharT __c)
1710:/usr/include/c++/5/bits/basic_string.h ****       {
1711:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1712:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1713:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
1714:/usr/include/c++/5/bits/basic_string.h ****       }
1715:/usr/include/c++/5/bits/basic_string.h **** 
1716:/usr/include/c++/5/bits/basic_string.h ****       /**
1717:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
1718:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1719:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1720:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
1721:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
1722:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1723:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1724:/usr/include/c++/5/bits/basic_string.h ****        *
1725:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1726:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1727:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1728:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1729:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1730:/usr/include/c++/5/bits/basic_string.h ****       */
1731:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1732:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator,
1733:/usr/include/c++/5/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1734:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1735:/usr/include/c++/5/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
1736:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1737:/usr/include/c++/5/bits/basic_string.h ****         {
1738:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1739:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= end());
1740:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1741:/usr/include/c++/5/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
1742:/usr/include/c++/5/bits/basic_string.h **** 					   std::__false_type());
1743:/usr/include/c++/5/bits/basic_string.h **** 	}
1744:/usr/include/c++/5/bits/basic_string.h **** #else
1745:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1746:/usr/include/c++/5/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
1747:/usr/include/c++/5/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
1748:/usr/include/c++/5/bits/basic_string.h **** #else
1749:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
1750:/usr/include/c++/5/bits/basic_string.h **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 463


1751:/usr/include/c++/5/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
1752:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
1753:/usr/include/c++/5/bits/basic_string.h ****         {
1754:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1755:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= end());
1756:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
1757:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1758:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
1759:/usr/include/c++/5/bits/basic_string.h **** 	}
1760:/usr/include/c++/5/bits/basic_string.h **** #endif
1761:/usr/include/c++/5/bits/basic_string.h **** 
1762:/usr/include/c++/5/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
1763:/usr/include/c++/5/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
1764:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1765:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1766:/usr/include/c++/5/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
1767:/usr/include/c++/5/bits/basic_string.h ****       {
1768:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1769:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1770:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1771:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1772:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1773:/usr/include/c++/5/bits/basic_string.h ****       }
1774:/usr/include/c++/5/bits/basic_string.h **** 
1775:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1776:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1777:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
1778:/usr/include/c++/5/bits/basic_string.h ****       {
1779:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1780:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1781:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1782:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1783:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
1784:/usr/include/c++/5/bits/basic_string.h ****       }
1785:/usr/include/c++/5/bits/basic_string.h **** 
1786:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1787:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1788:/usr/include/c++/5/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
1789:/usr/include/c++/5/bits/basic_string.h ****       {
1790:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1791:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1792:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1793:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1794:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1795:/usr/include/c++/5/bits/basic_string.h ****       }
1796:/usr/include/c++/5/bits/basic_string.h **** 
1797:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1798:/usr/include/c++/5/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1799:/usr/include/c++/5/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
1800:/usr/include/c++/5/bits/basic_string.h ****       {
1801:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1802:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= end());
1803:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
1804:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
1805:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
1806:/usr/include/c++/5/bits/basic_string.h ****       }
1807:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 464


1808:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
1809:/usr/include/c++/5/bits/basic_string.h ****       /**
1810:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
1811:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1812:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1813:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1814:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
1815:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1816:/usr/include/c++/5/bits/basic_string.h ****        *
1817:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1818:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
1819:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1820:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1821:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
1822:/usr/include/c++/5/bits/basic_string.h ****       */
1823:/usr/include/c++/5/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
1824:/usr/include/c++/5/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
1825:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
1826:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
1827:/usr/include/c++/5/bits/basic_string.h **** 
1828:/usr/include/c++/5/bits/basic_string.h ****     private:
1829:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
1830:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
1831:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1832:/usr/include/c++/5/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
1833:/usr/include/c++/5/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
1834:/usr/include/c++/5/bits/basic_string.h **** 
1835:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
1836:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
1837:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
1838:/usr/include/c++/5/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
1839:/usr/include/c++/5/bits/basic_string.h **** 			    __false_type);
1840:/usr/include/c++/5/bits/basic_string.h **** 
1841:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1842:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
1843:/usr/include/c++/5/bits/basic_string.h **** 		     _CharT __c);
1844:/usr/include/c++/5/bits/basic_string.h **** 
1845:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1846:/usr/include/c++/5/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
1847:/usr/include/c++/5/bits/basic_string.h **** 		 const size_type __len2);
1848:/usr/include/c++/5/bits/basic_string.h **** 
1849:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
1850:/usr/include/c++/5/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
1851:/usr/include/c++/5/bits/basic_string.h **** 
1852:/usr/include/c++/5/bits/basic_string.h ****     public:
1853:/usr/include/c++/5/bits/basic_string.h **** 
1854:/usr/include/c++/5/bits/basic_string.h ****       /**
1855:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy substring into C string.
1856:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to copy value into.
1857:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
1858:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
1859:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Number of characters actually copied
1860:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
1861:/usr/include/c++/5/bits/basic_string.h ****        *
1862:/usr/include/c++/5/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
1863:/usr/include/c++/5/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
1864:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.
GAS LISTING /tmp/cc2K2nX4.s 			page 465


1865:/usr/include/c++/5/bits/basic_string.h ****       */
1866:/usr/include/c++/5/bits/basic_string.h ****       size_type
1867:/usr/include/c++/5/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
1868:/usr/include/c++/5/bits/basic_string.h **** 
1869:/usr/include/c++/5/bits/basic_string.h ****       /**
1870:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Swap contents with another string.
1871:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String to swap with.
1872:/usr/include/c++/5/bits/basic_string.h ****        *
1873:/usr/include/c++/5/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
1874:/usr/include/c++/5/bits/basic_string.h ****        *  time.
1875:/usr/include/c++/5/bits/basic_string.h ****       */
1876:/usr/include/c++/5/bits/basic_string.h ****       void
1877:/usr/include/c++/5/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
1878:/usr/include/c++/5/bits/basic_string.h **** 
1879:/usr/include/c++/5/bits/basic_string.h ****       // String operations:
1880:/usr/include/c++/5/bits/basic_string.h ****       /**
1881:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
1882:/usr/include/c++/5/bits/basic_string.h ****        *
1883:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1884:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
1885:/usr/include/c++/5/bits/basic_string.h ****       */
1886:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
1887:/usr/include/c++/5/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
1888:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
1889:/usr/include/c++/5/bits/basic_string.h **** 
1890:/usr/include/c++/5/bits/basic_string.h ****       /**
1891:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
1892:/usr/include/c++/5/bits/basic_string.h ****        *
1893:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
1894:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
1895:/usr/include/c++/5/bits/basic_string.h ****       */
1896:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
1897:/usr/include/c++/5/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
1898:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
1899:/usr/include/c++/5/bits/basic_string.h **** 
1900:/usr/include/c++/5/bits/basic_string.h ****       /**
1901:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
1902:/usr/include/c++/5/bits/basic_string.h ****       */
1903:/usr/include/c++/5/bits/basic_string.h ****       allocator_type
1904:/usr/include/c++/5/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
1905:/usr/include/c++/5/bits/basic_string.h ****       { return _M_get_allocator(); }
1906:/usr/include/c++/5/bits/basic_string.h **** 
1907:/usr/include/c++/5/bits/basic_string.h ****       /**
1908:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C substring.
1909:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1910:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
1911:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
1912:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1913:/usr/include/c++/5/bits/basic_string.h ****        *
1914:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
1915:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
1916:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
1917:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
1918:/usr/include/c++/5/bits/basic_string.h ****       */
1919:/usr/include/c++/5/bits/basic_string.h ****       size_type
1920:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
1921:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 466


1922:/usr/include/c++/5/bits/basic_string.h ****       /**
1923:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a string.
1924:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
1925:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1926:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1927:/usr/include/c++/5/bits/basic_string.h ****        *
1928:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
1929:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
1930:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns npos.
1931:/usr/include/c++/5/bits/basic_string.h ****       */
1932:/usr/include/c++/5/bits/basic_string.h ****       size_type
1933:/usr/include/c++/5/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
1934:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
1935:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
1936:/usr/include/c++/5/bits/basic_string.h **** 
1937:/usr/include/c++/5/bits/basic_string.h ****       /**
1938:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C string.
1939:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1940:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1941:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
1942:/usr/include/c++/5/bits/basic_string.h ****        *
1943:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
1944:/usr/include/c++/5/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
1945:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
1946:/usr/include/c++/5/bits/basic_string.h ****       */
1947:/usr/include/c++/5/bits/basic_string.h ****       size_type
1948:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
1949:/usr/include/c++/5/bits/basic_string.h ****       {
1950:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1951:/usr/include/c++/5/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
1952:/usr/include/c++/5/bits/basic_string.h ****       }
1953:/usr/include/c++/5/bits/basic_string.h **** 
1954:/usr/include/c++/5/bits/basic_string.h ****       /**
1955:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
1956:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
1957:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
1958:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
1959:/usr/include/c++/5/bits/basic_string.h ****        *
1960:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
1961:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
1962:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
1963:/usr/include/c++/5/bits/basic_string.h ****       */
1964:/usr/include/c++/5/bits/basic_string.h ****       size_type
1965:/usr/include/c++/5/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
1966:/usr/include/c++/5/bits/basic_string.h **** 
1967:/usr/include/c++/5/bits/basic_string.h ****       /**
1968:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a string.
1969:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
1970:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
1971:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1972:/usr/include/c++/5/bits/basic_string.h ****        *
1973:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
1974:/usr/include/c++/5/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
1975:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
1976:/usr/include/c++/5/bits/basic_string.h ****       */
1977:/usr/include/c++/5/bits/basic_string.h ****       size_type
1978:/usr/include/c++/5/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
GAS LISTING /tmp/cc2K2nX4.s 			page 467


1979:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
1980:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
1981:/usr/include/c++/5/bits/basic_string.h **** 
1982:/usr/include/c++/5/bits/basic_string.h ****       /**
1983:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
1984:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
1985:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
1986:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
1987:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
1988:/usr/include/c++/5/bits/basic_string.h ****        *
1989:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
1990:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
1991:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
1992:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
1993:/usr/include/c++/5/bits/basic_string.h ****       */
1994:/usr/include/c++/5/bits/basic_string.h ****       size_type
1995:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
1996:/usr/include/c++/5/bits/basic_string.h **** 
1997:/usr/include/c++/5/bits/basic_string.h ****       /**
1998:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C string.
1999:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
2000:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2001:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2002:/usr/include/c++/5/bits/basic_string.h ****        *
2003:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2004:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2005:/usr/include/c++/5/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2006:/usr/include/c++/5/bits/basic_string.h ****       */
2007:/usr/include/c++/5/bits/basic_string.h ****       size_type
2008:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2009:/usr/include/c++/5/bits/basic_string.h ****       {
2010:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2011:/usr/include/c++/5/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2012:/usr/include/c++/5/bits/basic_string.h ****       }
2013:/usr/include/c++/5/bits/basic_string.h **** 
2014:/usr/include/c++/5/bits/basic_string.h ****       /**
2015:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
2016:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2017:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2018:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2019:/usr/include/c++/5/bits/basic_string.h ****        *
2020:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2021:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2022:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2023:/usr/include/c++/5/bits/basic_string.h ****       */
2024:/usr/include/c++/5/bits/basic_string.h ****       size_type
2025:/usr/include/c++/5/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2026:/usr/include/c++/5/bits/basic_string.h **** 
2027:/usr/include/c++/5/bits/basic_string.h ****       /**
2028:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2029:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2030:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2031:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2032:/usr/include/c++/5/bits/basic_string.h ****        *
2033:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2034:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2035:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
GAS LISTING /tmp/cc2K2nX4.s 			page 468


2036:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2037:/usr/include/c++/5/bits/basic_string.h ****       */
2038:/usr/include/c++/5/bits/basic_string.h ****       size_type
2039:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2040:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2041:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2042:/usr/include/c++/5/bits/basic_string.h **** 
2043:/usr/include/c++/5/bits/basic_string.h ****       /**
2044:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2045:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2046:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2047:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2048:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2049:/usr/include/c++/5/bits/basic_string.h ****        *
2050:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2051:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2052:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2053:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2054:/usr/include/c++/5/bits/basic_string.h ****       */
2055:/usr/include/c++/5/bits/basic_string.h ****       size_type
2056:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
2057:/usr/include/c++/5/bits/basic_string.h **** 
2058:/usr/include/c++/5/bits/basic_string.h ****       /**
2059:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2060:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2061:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2062:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2063:/usr/include/c++/5/bits/basic_string.h ****        *
2064:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2065:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2066:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2067:/usr/include/c++/5/bits/basic_string.h ****       */
2068:/usr/include/c++/5/bits/basic_string.h ****       size_type
2069:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2070:/usr/include/c++/5/bits/basic_string.h ****       {
2071:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2072:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2073:/usr/include/c++/5/bits/basic_string.h ****       }
2074:/usr/include/c++/5/bits/basic_string.h **** 
2075:/usr/include/c++/5/bits/basic_string.h ****       /**
2076:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
2077:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2078:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2079:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2080:/usr/include/c++/5/bits/basic_string.h ****        *
2081:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2082:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2083:/usr/include/c++/5/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2084:/usr/include/c++/5/bits/basic_string.h ****        *
2085:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2086:/usr/include/c++/5/bits/basic_string.h ****       */
2087:/usr/include/c++/5/bits/basic_string.h ****       size_type
2088:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2089:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__c, __pos); }
2090:/usr/include/c++/5/bits/basic_string.h **** 
2091:/usr/include/c++/5/bits/basic_string.h ****       /**
2092:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
GAS LISTING /tmp/cc2K2nX4.s 			page 469


2093:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2094:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2095:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2096:/usr/include/c++/5/bits/basic_string.h ****        *
2097:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2098:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2099:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2100:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2101:/usr/include/c++/5/bits/basic_string.h ****       */
2102:/usr/include/c++/5/bits/basic_string.h ****       size_type
2103:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2104:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2105:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2106:/usr/include/c++/5/bits/basic_string.h **** 
2107:/usr/include/c++/5/bits/basic_string.h ****       /**
2108:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2109:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2110:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2111:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2112:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2113:/usr/include/c++/5/bits/basic_string.h ****        *
2114:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2115:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2116:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2117:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2118:/usr/include/c++/5/bits/basic_string.h ****       */
2119:/usr/include/c++/5/bits/basic_string.h ****       size_type
2120:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
2121:/usr/include/c++/5/bits/basic_string.h **** 
2122:/usr/include/c++/5/bits/basic_string.h ****       /**
2123:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2124:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2125:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2126:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2127:/usr/include/c++/5/bits/basic_string.h ****        *
2128:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2129:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2130:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2131:/usr/include/c++/5/bits/basic_string.h ****       */
2132:/usr/include/c++/5/bits/basic_string.h ****       size_type
2133:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2134:/usr/include/c++/5/bits/basic_string.h ****       {
2135:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2136:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2137:/usr/include/c++/5/bits/basic_string.h ****       }
2138:/usr/include/c++/5/bits/basic_string.h **** 
2139:/usr/include/c++/5/bits/basic_string.h ****       /**
2140:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
2141:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
2142:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2143:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2144:/usr/include/c++/5/bits/basic_string.h ****        *
2145:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2146:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2147:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2148:/usr/include/c++/5/bits/basic_string.h ****        *
2149:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
GAS LISTING /tmp/cc2K2nX4.s 			page 470


2150:/usr/include/c++/5/bits/basic_string.h ****       */
2151:/usr/include/c++/5/bits/basic_string.h ****       size_type
2152:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2153:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2154:/usr/include/c++/5/bits/basic_string.h **** 
2155:/usr/include/c++/5/bits/basic_string.h ****       /**
2156:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2157:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2158:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2159:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2160:/usr/include/c++/5/bits/basic_string.h ****        *
2161:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2162:/usr/include/c++/5/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2163:/usr/include/c++/5/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2164:/usr/include/c++/5/bits/basic_string.h ****       */
2165:/usr/include/c++/5/bits/basic_string.h ****       size_type
2166:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2167:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2168:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2169:/usr/include/c++/5/bits/basic_string.h **** 
2170:/usr/include/c++/5/bits/basic_string.h ****       /**
2171:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2172:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2173:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2174:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2175:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2176:/usr/include/c++/5/bits/basic_string.h ****        *
2177:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2178:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2179:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2180:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2181:/usr/include/c++/5/bits/basic_string.h ****       */
2182:/usr/include/c++/5/bits/basic_string.h ****       size_type
2183:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2184:/usr/include/c++/5/bits/basic_string.h **** 			size_type __n) const;
2185:/usr/include/c++/5/bits/basic_string.h **** 
2186:/usr/include/c++/5/bits/basic_string.h ****       /**
2187:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2188:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2189:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2190:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2191:/usr/include/c++/5/bits/basic_string.h ****        *
2192:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2193:/usr/include/c++/5/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2194:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2195:/usr/include/c++/5/bits/basic_string.h ****       */
2196:/usr/include/c++/5/bits/basic_string.h ****       size_type
2197:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2198:/usr/include/c++/5/bits/basic_string.h ****       {
2199:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2200:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2201:/usr/include/c++/5/bits/basic_string.h ****       }
2202:/usr/include/c++/5/bits/basic_string.h **** 
2203:/usr/include/c++/5/bits/basic_string.h ****       /**
2204:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a different character.
2205:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
2206:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
GAS LISTING /tmp/cc2K2nX4.s 			page 471


2207:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
2208:/usr/include/c++/5/bits/basic_string.h ****        *
2209:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2210:/usr/include/c++/5/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2211:/usr/include/c++/5/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2212:/usr/include/c++/5/bits/basic_string.h ****       */
2213:/usr/include/c++/5/bits/basic_string.h ****       size_type
2214:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2215:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2216:/usr/include/c++/5/bits/basic_string.h **** 
2217:/usr/include/c++/5/bits/basic_string.h ****       /**
2218:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2219:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2220:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2221:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2222:/usr/include/c++/5/bits/basic_string.h ****        *
2223:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2224:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2225:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2226:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2227:/usr/include/c++/5/bits/basic_string.h ****       */
2228:/usr/include/c++/5/bits/basic_string.h ****       size_type
2229:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2230:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
2231:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2232:/usr/include/c++/5/bits/basic_string.h **** 
2233:/usr/include/c++/5/bits/basic_string.h ****       /**
2234:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2235:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2236:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2237:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2238:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2239:/usr/include/c++/5/bits/basic_string.h ****        *
2240:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2241:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2242:/usr/include/c++/5/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2243:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
2244:/usr/include/c++/5/bits/basic_string.h ****       */
2245:/usr/include/c++/5/bits/basic_string.h ****       size_type
2246:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2247:/usr/include/c++/5/bits/basic_string.h **** 		       size_type __n) const;
2248:/usr/include/c++/5/bits/basic_string.h ****       /**
2249:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2250:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2251:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2252:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2253:/usr/include/c++/5/bits/basic_string.h ****        *
2254:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2255:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2256:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2257:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
2258:/usr/include/c++/5/bits/basic_string.h ****       */
2259:/usr/include/c++/5/bits/basic_string.h ****       size_type
2260:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2261:/usr/include/c++/5/bits/basic_string.h ****       {
2262:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2263:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
GAS LISTING /tmp/cc2K2nX4.s 			page 472


2264:/usr/include/c++/5/bits/basic_string.h ****       }
2265:/usr/include/c++/5/bits/basic_string.h **** 
2266:/usr/include/c++/5/bits/basic_string.h ****       /**
2267:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2268:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
2269:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2270:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
2271:/usr/include/c++/5/bits/basic_string.h ****        *
2272:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2273:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2274:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
2275:/usr/include/c++/5/bits/basic_string.h ****       */
2276:/usr/include/c++/5/bits/basic_string.h ****       size_type
2277:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2278:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
2279:/usr/include/c++/5/bits/basic_string.h **** 
2280:/usr/include/c++/5/bits/basic_string.h ****       /**
2281:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Get a substring.
2282:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2283:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2284:/usr/include/c++/5/bits/basic_string.h ****        *  @return  The new string.
2285:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2286:/usr/include/c++/5/bits/basic_string.h ****        *
2287:/usr/include/c++/5/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2288:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2289:/usr/include/c++/5/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2290:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2291:/usr/include/c++/5/bits/basic_string.h ****       */
2292:/usr/include/c++/5/bits/basic_string.h ****       basic_string
2293:/usr/include/c++/5/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2294:/usr/include/c++/5/bits/basic_string.h ****       { return basic_string(*this,
2295:/usr/include/c++/5/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2296:/usr/include/c++/5/bits/basic_string.h **** 
2297:/usr/include/c++/5/bits/basic_string.h ****       /**
2298:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a string.
2299:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2300:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2301:/usr/include/c++/5/bits/basic_string.h ****        *
2302:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2303:/usr/include/c++/5/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2304:/usr/include/c++/5/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2305:/usr/include/c++/5/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2306:/usr/include/c++/5/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2307:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2308:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2309:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2310:/usr/include/c++/5/bits/basic_string.h ****       */
2311:/usr/include/c++/5/bits/basic_string.h ****       int
2312:/usr/include/c++/5/bits/basic_string.h ****       compare(const basic_string& __str) const
2313:/usr/include/c++/5/bits/basic_string.h ****       {
2314:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
2315:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __osize = __str.size();
2316:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2317:/usr/include/c++/5/bits/basic_string.h **** 
2318:/usr/include/c++/5/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2319:/usr/include/c++/5/bits/basic_string.h **** 	if (!__r)
2320:/usr/include/c++/5/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
GAS LISTING /tmp/cc2K2nX4.s 			page 473


2321:/usr/include/c++/5/bits/basic_string.h **** 	return __r;
2322:/usr/include/c++/5/bits/basic_string.h ****       }
2323:/usr/include/c++/5/bits/basic_string.h **** 
2324:/usr/include/c++/5/bits/basic_string.h ****       /**
2325:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2326:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2327:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2328:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2329:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2330:/usr/include/c++/5/bits/basic_string.h ****        *
2331:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2332:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2333:/usr/include/c++/5/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2334:/usr/include/c++/5/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2335:/usr/include/c++/5/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2336:/usr/include/c++/5/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2337:/usr/include/c++/5/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2338:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling
2339:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2340:/usr/include/c++/5/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2341:/usr/include/c++/5/bits/basic_string.h ****        *  the shorter one is ordered first.
2342:/usr/include/c++/5/bits/basic_string.h ****       */
2343:/usr/include/c++/5/bits/basic_string.h ****       int
2344:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2345:/usr/include/c++/5/bits/basic_string.h **** 
2346:/usr/include/c++/5/bits/basic_string.h ****       /**
2347:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2348:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2349:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2350:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
2351:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2352:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2353:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2354:/usr/include/c++/5/bits/basic_string.h ****        *
2355:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2356:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2357:/usr/include/c++/5/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2358:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2359:/usr/include/c++/5/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2360:/usr/include/c++/5/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2361:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2362:/usr/include/c++/5/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2363:/usr/include/c++/5/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2364:/usr/include/c++/5/bits/basic_string.h ****        *  calling
2365:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2366:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2367:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2368:/usr/include/c++/5/bits/basic_string.h ****       */
2369:/usr/include/c++/5/bits/basic_string.h ****       int
2370:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2371:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
2372:/usr/include/c++/5/bits/basic_string.h **** 
2373:/usr/include/c++/5/bits/basic_string.h ****       /**
2374:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a C string.
2375:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
2376:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2377:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 474


2378:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2379:/usr/include/c++/5/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2380:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2381:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2382:/usr/include/c++/5/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2383:/usr/include/c++/5/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2384:/usr/include/c++/5/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2385:/usr/include/c++/5/bits/basic_string.h ****        *  ordered first.
2386:/usr/include/c++/5/bits/basic_string.h ****       */
2387:/usr/include/c++/5/bits/basic_string.h ****       int
2388:/usr/include/c++/5/bits/basic_string.h ****       compare(const _CharT* __s) const;
2389:/usr/include/c++/5/bits/basic_string.h **** 
2390:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2391:/usr/include/c++/5/bits/basic_string.h ****       // 5 String::compare specification questionable
2392:/usr/include/c++/5/bits/basic_string.h ****       /**
2393:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2394:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2395:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2396:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
2397:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2398:/usr/include/c++/5/bits/basic_string.h ****        *
2399:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2400:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
2401:/usr/include/c++/5/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
2402:/usr/include/c++/5/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
2403:/usr/include/c++/5/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
2404:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
2405:/usr/include/c++/5/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
2406:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two string by calling
2407:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
2408:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2409:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
2410:/usr/include/c++/5/bits/basic_string.h ****       */
2411:/usr/include/c++/5/bits/basic_string.h ****       int
2412:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
2413:/usr/include/c++/5/bits/basic_string.h **** 
2414:/usr/include/c++/5/bits/basic_string.h ****       /**
2415:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
2416:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2417:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2418:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  character %array to compare against.
2419:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
2420:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2421:/usr/include/c++/5/bits/basic_string.h ****        *
2422:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2423:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
2424:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
2425:/usr/include/c++/5/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
2426:/usr/include/c++/5/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
2427:/usr/include/c++/5/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
2428:/usr/include/c++/5/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
2429:/usr/include/c++/5/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
2430:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two strings by calling
2431:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
2432:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2433:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
2434:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 475


2435:/usr/include/c++/5/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
2436:/usr/include/c++/5/bits/basic_string.h ****        *  no special meaning.
2437:/usr/include/c++/5/bits/basic_string.h ****       */
2438:/usr/include/c++/5/bits/basic_string.h ****       int
2439:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
2440:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2) const;
2441:/usr/include/c++/5/bits/basic_string.h ****   };
2442:/usr/include/c++/5/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
2443:/usr/include/c++/5/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
2444:/usr/include/c++/5/bits/basic_string.h ****   // Reference-counted COW string implentation
2445:/usr/include/c++/5/bits/basic_string.h **** 
2446:/usr/include/c++/5/bits/basic_string.h ****   /**
2447:/usr/include/c++/5/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
2448:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
2449:/usr/include/c++/5/bits/basic_string.h ****    *
2450:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup strings
2451:/usr/include/c++/5/bits/basic_string.h ****    *  @ingroup sequences
2452:/usr/include/c++/5/bits/basic_string.h ****    *
2453:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _CharT  Type of character
2454:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
2455:/usr/include/c++/5/bits/basic_string.h ****    *                   char_traits<_CharT>.
2456:/usr/include/c++/5/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
2457:/usr/include/c++/5/bits/basic_string.h ****    *
2458:/usr/include/c++/5/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
2459:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
2460:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
2461:/usr/include/c++/5/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
2462:/usr/include/c++/5/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
2463:/usr/include/c++/5/bits/basic_string.h ****    *
2464:/usr/include/c++/5/bits/basic_string.h ****    *  @doctodo
2465:/usr/include/c++/5/bits/basic_string.h ****    *
2466:/usr/include/c++/5/bits/basic_string.h ****    *
2467:/usr/include/c++/5/bits/basic_string.h ****    *  Documentation?  What's that?
2468:/usr/include/c++/5/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
2469:/usr/include/c++/5/bits/basic_string.h ****    *
2470:/usr/include/c++/5/bits/basic_string.h ****    *  A string looks like this:
2471:/usr/include/c++/5/bits/basic_string.h ****    *
2472:/usr/include/c++/5/bits/basic_string.h ****    *  @code
2473:/usr/include/c++/5/bits/basic_string.h ****    *                                        [_Rep]
2474:/usr/include/c++/5/bits/basic_string.h ****    *                                        _M_length
2475:/usr/include/c++/5/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
2476:/usr/include/c++/5/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
2477:/usr/include/c++/5/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
2478:/usr/include/c++/5/bits/basic_string.h ****    *  @endcode
2479:/usr/include/c++/5/bits/basic_string.h ****    *
2480:/usr/include/c++/5/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
2481:/usr/include/c++/5/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
2482:/usr/include/c++/5/bits/basic_string.h ****    *  pointer to the header.
2483:/usr/include/c++/5/bits/basic_string.h ****    *
2484:/usr/include/c++/5/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
2485:/usr/include/c++/5/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
2486:/usr/include/c++/5/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
2487:/usr/include/c++/5/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
2488:/usr/include/c++/5/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
2489:/usr/include/c++/5/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
2490:/usr/include/c++/5/bits/basic_string.h ****    *  object at the front.
2491:/usr/include/c++/5/bits/basic_string.h ****    *
GAS LISTING /tmp/cc2K2nX4.s 			page 476


2492:/usr/include/c++/5/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
2493:/usr/include/c++/5/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
2494:/usr/include/c++/5/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
2495:/usr/include/c++/5/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
2496:/usr/include/c++/5/bits/basic_string.h ****    *  string length.)
2497:/usr/include/c++/5/bits/basic_string.h ****    *
2498:/usr/include/c++/5/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
2499:/usr/include/c++/5/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
2500:/usr/include/c++/5/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
2501:/usr/include/c++/5/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
2502:/usr/include/c++/5/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
2503:/usr/include/c++/5/bits/basic_string.h ****    *
2504:/usr/include/c++/5/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
2505:/usr/include/c++/5/bits/basic_string.h ****    *  for a C++ string implementation.
2506:/usr/include/c++/5/bits/basic_string.h ****   */
2507:/usr/include/c++/5/bits/basic_string.h ****   // 21.3  Template class basic_string
2508:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
2509:/usr/include/c++/5/bits/basic_string.h ****     class basic_string
2510:/usr/include/c++/5/bits/basic_string.h ****     {
2511:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
2512:/usr/include/c++/5/bits/basic_string.h **** 
2513:/usr/include/c++/5/bits/basic_string.h ****       // Types:
2514:/usr/include/c++/5/bits/basic_string.h ****     public:
2515:/usr/include/c++/5/bits/basic_string.h ****       typedef _Traits					    traits_type;
2516:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
2517:/usr/include/c++/5/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
2518:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
2519:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
2520:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
2521:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
2522:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
2523:/usr/include/c++/5/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
2524:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
2525:/usr/include/c++/5/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
2526:/usr/include/c++/5/bits/basic_string.h ****                                                             const_iterator;
2527:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
2528:/usr/include/c++/5/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
2529:/usr/include/c++/5/bits/basic_string.h **** 
2530:/usr/include/c++/5/bits/basic_string.h ****     private:
2531:/usr/include/c++/5/bits/basic_string.h ****       // _Rep: string representation
2532:/usr/include/c++/5/bits/basic_string.h ****       //   Invariants:
2533:/usr/include/c++/5/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
2534:/usr/include/c++/5/bits/basic_string.h ****       //      must be kept null-terminated.
2535:/usr/include/c++/5/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
2536:/usr/include/c++/5/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
2537:/usr/include/c++/5/bits/basic_string.h ****       //   3. _M_refcount has three states:
2538:/usr/include/c++/5/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
2539:/usr/include/c++/5/bits/basic_string.h ****       //       0: one reference, non-const.
2540:/usr/include/c++/5/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
2541:/usr/include/c++/5/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
2542:/usr/include/c++/5/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
2543:/usr/include/c++/5/bits/basic_string.h ****       //      empty string representation needs no constructor.
2544:/usr/include/c++/5/bits/basic_string.h **** 
2545:/usr/include/c++/5/bits/basic_string.h ****       struct _Rep_base
2546:/usr/include/c++/5/bits/basic_string.h ****       {
2547:/usr/include/c++/5/bits/basic_string.h **** 	size_type		_M_length;
2548:/usr/include/c++/5/bits/basic_string.h **** 	size_type		_M_capacity;
GAS LISTING /tmp/cc2K2nX4.s 			page 477


2549:/usr/include/c++/5/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
2550:/usr/include/c++/5/bits/basic_string.h ****       };
2551:/usr/include/c++/5/bits/basic_string.h **** 
2552:/usr/include/c++/5/bits/basic_string.h ****       struct _Rep : _Rep_base
2553:/usr/include/c++/5/bits/basic_string.h ****       {
2554:/usr/include/c++/5/bits/basic_string.h **** 	// Types:
2555:/usr/include/c++/5/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
2556:/usr/include/c++/5/bits/basic_string.h **** 
2557:/usr/include/c++/5/bits/basic_string.h **** 	// (Public) Data members:
2558:/usr/include/c++/5/bits/basic_string.h **** 
2559:/usr/include/c++/5/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
2560:/usr/include/c++/5/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
2561:/usr/include/c++/5/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
2562:/usr/include/c++/5/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
2563:/usr/include/c++/5/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
2564:/usr/include/c++/5/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
2565:/usr/include/c++/5/bits/basic_string.h **** 	// look like this:
2566:/usr/include/c++/5/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
2567:/usr/include/c++/5/bits/basic_string.h **** 	// Solving for m:
2568:/usr/include/c++/5/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
2569:/usr/include/c++/5/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
2570:/usr/include/c++/5/bits/basic_string.h **** 	static const size_type	_S_max_size;
2571:/usr/include/c++/5/bits/basic_string.h **** 	static const _CharT	_S_terminal;
2572:/usr/include/c++/5/bits/basic_string.h **** 
2573:/usr/include/c++/5/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
2574:/usr/include/c++/5/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
2575:/usr/include/c++/5/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
2576:/usr/include/c++/5/bits/basic_string.h **** 
2577:/usr/include/c++/5/bits/basic_string.h ****         static _Rep&
2578:/usr/include/c++/5/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
2579:/usr/include/c++/5/bits/basic_string.h ****         { 
2580:/usr/include/c++/5/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
2581:/usr/include/c++/5/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
2582:/usr/include/c++/5/bits/basic_string.h **** 	  // be reasonably safe in this case.
2583:/usr/include/c++/5/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
2584:/usr/include/c++/5/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
2585:/usr/include/c++/5/bits/basic_string.h **** 	}
2586:/usr/include/c++/5/bits/basic_string.h **** 
2587:/usr/include/c++/5/bits/basic_string.h ****         bool
2588:/usr/include/c++/5/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
2589:/usr/include/c++/5/bits/basic_string.h ****         { return this->_M_refcount < 0; }
2590:/usr/include/c++/5/bits/basic_string.h **** 
2591:/usr/include/c++/5/bits/basic_string.h ****         bool
2592:/usr/include/c++/5/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
2593:/usr/include/c++/5/bits/basic_string.h ****         { return this->_M_refcount > 0; }
2594:/usr/include/c++/5/bits/basic_string.h **** 
2595:/usr/include/c++/5/bits/basic_string.h ****         void
2596:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
2597:/usr/include/c++/5/bits/basic_string.h ****         { this->_M_refcount = -1; }
2598:/usr/include/c++/5/bits/basic_string.h **** 
2599:/usr/include/c++/5/bits/basic_string.h ****         void
2600:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
2601:/usr/include/c++/5/bits/basic_string.h ****         { this->_M_refcount = 0; }
2602:/usr/include/c++/5/bits/basic_string.h **** 
2603:/usr/include/c++/5/bits/basic_string.h **** 	void
2604:/usr/include/c++/5/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
2605:/usr/include/c++/5/bits/basic_string.h **** 	{
GAS LISTING /tmp/cc2K2nX4.s 			page 478


2606:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2607:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2608:/usr/include/c++/5/bits/basic_string.h **** #endif
2609:/usr/include/c++/5/bits/basic_string.h **** 	    {
2610:/usr/include/c++/5/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
2611:/usr/include/c++/5/bits/basic_string.h **** 	      this->_M_length = __n;
2612:/usr/include/c++/5/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
2613:/usr/include/c++/5/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
2614:/usr/include/c++/5/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
2615:/usr/include/c++/5/bits/basic_string.h **** 	    }
2616:/usr/include/c++/5/bits/basic_string.h **** 	}
2617:/usr/include/c++/5/bits/basic_string.h **** 
2618:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2619:/usr/include/c++/5/bits/basic_string.h **** 	_M_refdata() throw()
2620:/usr/include/c++/5/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
2621:/usr/include/c++/5/bits/basic_string.h **** 
2622:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2623:/usr/include/c++/5/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
2624:/usr/include/c++/5/bits/basic_string.h **** 	{
2625:/usr/include/c++/5/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
2626:/usr/include/c++/5/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
2627:/usr/include/c++/5/bits/basic_string.h **** 	}
2628:/usr/include/c++/5/bits/basic_string.h **** 
2629:/usr/include/c++/5/bits/basic_string.h **** 	// Create & Destroy
2630:/usr/include/c++/5/bits/basic_string.h **** 	static _Rep*
2631:/usr/include/c++/5/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
2632:/usr/include/c++/5/bits/basic_string.h **** 
2633:/usr/include/c++/5/bits/basic_string.h **** 	void
2634:/usr/include/c++/5/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
2635:/usr/include/c++/5/bits/basic_string.h **** 	{
2636:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2637:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2638:/usr/include/c++/5/bits/basic_string.h **** #endif
2639:/usr/include/c++/5/bits/basic_string.h **** 	    {
2640:/usr/include/c++/5/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
2641:/usr/include/c++/5/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
2642:/usr/include/c++/5/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
2643:/usr/include/c++/5/bits/basic_string.h **** 							 -1) <= 0)
2644:/usr/include/c++/5/bits/basic_string.h **** 		{
2645:/usr/include/c++/5/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
2646:/usr/include/c++/5/bits/basic_string.h **** 		  _M_destroy(__a);
2647:/usr/include/c++/5/bits/basic_string.h **** 		}
2648:/usr/include/c++/5/bits/basic_string.h **** 	    }
2649:/usr/include/c++/5/bits/basic_string.h **** 	}  // XXX MT
2650:/usr/include/c++/5/bits/basic_string.h **** 
2651:/usr/include/c++/5/bits/basic_string.h **** 	void
2652:/usr/include/c++/5/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
2653:/usr/include/c++/5/bits/basic_string.h **** 
2654:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2655:/usr/include/c++/5/bits/basic_string.h **** 	_M_refcopy() throw()
2656:/usr/include/c++/5/bits/basic_string.h **** 	{
2657:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2658:/usr/include/c++/5/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
2659:/usr/include/c++/5/bits/basic_string.h **** #endif
2660:/usr/include/c++/5/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
2661:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_refdata();
2662:/usr/include/c++/5/bits/basic_string.h **** 	}  // XXX MT
GAS LISTING /tmp/cc2K2nX4.s 			page 479


2663:/usr/include/c++/5/bits/basic_string.h **** 
2664:/usr/include/c++/5/bits/basic_string.h **** 	_CharT*
2665:/usr/include/c++/5/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
2666:/usr/include/c++/5/bits/basic_string.h ****       };
2667:/usr/include/c++/5/bits/basic_string.h **** 
2668:/usr/include/c++/5/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
2669:/usr/include/c++/5/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
2670:/usr/include/c++/5/bits/basic_string.h ****       {
2671:/usr/include/c++/5/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
2672:/usr/include/c++/5/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
2673:/usr/include/c++/5/bits/basic_string.h **** 
2674:/usr/include/c++/5/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
2675:/usr/include/c++/5/bits/basic_string.h ****       };
2676:/usr/include/c++/5/bits/basic_string.h **** 
2677:/usr/include/c++/5/bits/basic_string.h ****     public:
2678:/usr/include/c++/5/bits/basic_string.h ****       // Data Members (public):
2679:/usr/include/c++/5/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
2680:/usr/include/c++/5/bits/basic_string.h ****       // size that the allocator can hold.
2681:/usr/include/c++/5/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
2682:/usr/include/c++/5/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
2683:/usr/include/c++/5/bits/basic_string.h **** 
2684:/usr/include/c++/5/bits/basic_string.h ****     private:
2685:/usr/include/c++/5/bits/basic_string.h ****       // Data Members (private):
2686:/usr/include/c++/5/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
2687:/usr/include/c++/5/bits/basic_string.h **** 
2688:/usr/include/c++/5/bits/basic_string.h ****       _CharT*
2689:/usr/include/c++/5/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
2690:/usr/include/c++/5/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
2691:/usr/include/c++/5/bits/basic_string.h **** 
2692:/usr/include/c++/5/bits/basic_string.h ****       _CharT*
2693:/usr/include/c++/5/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
2694:/usr/include/c++/5/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
2695:/usr/include/c++/5/bits/basic_string.h **** 
2696:/usr/include/c++/5/bits/basic_string.h ****       _Rep*
2697:/usr/include/c++/5/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
2698:/usr/include/c++/5/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
2699:/usr/include/c++/5/bits/basic_string.h **** 
2700:/usr/include/c++/5/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
2701:/usr/include/c++/5/bits/basic_string.h ****       // but they do not call _M_leak.
2702:/usr/include/c++/5/bits/basic_string.h ****       iterator
2703:/usr/include/c++/5/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
2704:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data()); }
2705:/usr/include/c++/5/bits/basic_string.h **** 
2706:/usr/include/c++/5/bits/basic_string.h ****       iterator
2707:/usr/include/c++/5/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
2708:/usr/include/c++/5/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
2709:/usr/include/c++/5/bits/basic_string.h **** 
2710:/usr/include/c++/5/bits/basic_string.h ****       void
2711:/usr/include/c++/5/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
2712:/usr/include/c++/5/bits/basic_string.h ****       {
2713:/usr/include/c++/5/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
2714:/usr/include/c++/5/bits/basic_string.h **** 	  _M_leak_hard();
2715:/usr/include/c++/5/bits/basic_string.h ****       }
2716:/usr/include/c++/5/bits/basic_string.h **** 
2717:/usr/include/c++/5/bits/basic_string.h ****       size_type
2718:/usr/include/c++/5/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
2719:/usr/include/c++/5/bits/basic_string.h ****       {
GAS LISTING /tmp/cc2K2nX4.s 			page 480


2720:/usr/include/c++/5/bits/basic_string.h **** 	if (__pos > this->size())
2721:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
2722:/usr/include/c++/5/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
2723:/usr/include/c++/5/bits/basic_string.h **** 				   __s, __pos, this->size());
2724:/usr/include/c++/5/bits/basic_string.h **** 	return __pos;
2725:/usr/include/c++/5/bits/basic_string.h ****       }
2726:/usr/include/c++/5/bits/basic_string.h **** 
2727:/usr/include/c++/5/bits/basic_string.h ****       void
2728:/usr/include/c++/5/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
2729:/usr/include/c++/5/bits/basic_string.h ****       {
2730:/usr/include/c++/5/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
2731:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
2732:/usr/include/c++/5/bits/basic_string.h ****       }
2733:/usr/include/c++/5/bits/basic_string.h **** 
2734:/usr/include/c++/5/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
2735:/usr/include/c++/5/bits/basic_string.h ****       size_type
2736:/usr/include/c++/5/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
2737:/usr/include/c++/5/bits/basic_string.h ****       {
2738:/usr/include/c++/5/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
2739:/usr/include/c++/5/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
2740:/usr/include/c++/5/bits/basic_string.h ****       }
2741:/usr/include/c++/5/bits/basic_string.h **** 
2742:/usr/include/c++/5/bits/basic_string.h ****       // True if _Rep and source do not overlap.
2743:/usr/include/c++/5/bits/basic_string.h ****       bool
2744:/usr/include/c++/5/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
2745:/usr/include/c++/5/bits/basic_string.h ****       {
2746:/usr/include/c++/5/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
2747:/usr/include/c++/5/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
2748:/usr/include/c++/5/bits/basic_string.h ****       }
2749:/usr/include/c++/5/bits/basic_string.h **** 
2750:/usr/include/c++/5/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
2751:/usr/include/c++/5/bits/basic_string.h ****       // traits_type::copy/move/assign.
2752:/usr/include/c++/5/bits/basic_string.h ****       static void
2753:/usr/include/c++/5/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2754:/usr/include/c++/5/bits/basic_string.h ****       {
2755:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2756:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2757:/usr/include/c++/5/bits/basic_string.h **** 	else
2758:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
2759:/usr/include/c++/5/bits/basic_string.h ****       }
2760:/usr/include/c++/5/bits/basic_string.h **** 
2761:/usr/include/c++/5/bits/basic_string.h ****       static void
2762:/usr/include/c++/5/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
2763:/usr/include/c++/5/bits/basic_string.h ****       {
2764:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2765:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
2766:/usr/include/c++/5/bits/basic_string.h **** 	else
2767:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
2768:/usr/include/c++/5/bits/basic_string.h ****       }
2769:/usr/include/c++/5/bits/basic_string.h **** 
2770:/usr/include/c++/5/bits/basic_string.h ****       static void
2771:/usr/include/c++/5/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
2772:/usr/include/c++/5/bits/basic_string.h ****       {
2773:/usr/include/c++/5/bits/basic_string.h **** 	if (__n == 1)
2774:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
2775:/usr/include/c++/5/bits/basic_string.h **** 	else
2776:/usr/include/c++/5/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
GAS LISTING /tmp/cc2K2nX4.s 			page 481


2777:/usr/include/c++/5/bits/basic_string.h ****       }
2778:/usr/include/c++/5/bits/basic_string.h **** 
2779:/usr/include/c++/5/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
2780:/usr/include/c++/5/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
2781:/usr/include/c++/5/bits/basic_string.h ****       template<class _Iterator>
2782:/usr/include/c++/5/bits/basic_string.h ****         static void
2783:/usr/include/c++/5/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
2784:/usr/include/c++/5/bits/basic_string.h ****         {
2785:/usr/include/c++/5/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, ++__p)
2786:/usr/include/c++/5/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
2787:/usr/include/c++/5/bits/basic_string.h **** 	}
2788:/usr/include/c++/5/bits/basic_string.h **** 
2789:/usr/include/c++/5/bits/basic_string.h ****       static void
2790:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
2791:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2792:/usr/include/c++/5/bits/basic_string.h **** 
2793:/usr/include/c++/5/bits/basic_string.h ****       static void
2794:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
2795:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2796:/usr/include/c++/5/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
2797:/usr/include/c++/5/bits/basic_string.h **** 
2798:/usr/include/c++/5/bits/basic_string.h ****       static void
2799:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
2800:/usr/include/c++/5/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2801:/usr/include/c++/5/bits/basic_string.h **** 
2802:/usr/include/c++/5/bits/basic_string.h ****       static void
2803:/usr/include/c++/5/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
2804:/usr/include/c++/5/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2805:/usr/include/c++/5/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
2806:/usr/include/c++/5/bits/basic_string.h **** 
2807:/usr/include/c++/5/bits/basic_string.h ****       static int
2808:/usr/include/c++/5/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
2809:/usr/include/c++/5/bits/basic_string.h ****       {
2810:/usr/include/c++/5/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
2811:/usr/include/c++/5/bits/basic_string.h **** 
2812:/usr/include/c++/5/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
2813:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
2814:/usr/include/c++/5/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
2815:/usr/include/c++/5/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
2816:/usr/include/c++/5/bits/basic_string.h **** 	else
2817:/usr/include/c++/5/bits/basic_string.h **** 	  return int(__d);
2818:/usr/include/c++/5/bits/basic_string.h ****       }
2819:/usr/include/c++/5/bits/basic_string.h **** 
2820:/usr/include/c++/5/bits/basic_string.h ****       void
2821:/usr/include/c++/5/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
2822:/usr/include/c++/5/bits/basic_string.h **** 
2823:/usr/include/c++/5/bits/basic_string.h ****       void
2824:/usr/include/c++/5/bits/basic_string.h ****       _M_leak_hard();
2825:/usr/include/c++/5/bits/basic_string.h **** 
2826:/usr/include/c++/5/bits/basic_string.h ****       static _Rep&
2827:/usr/include/c++/5/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
2828:/usr/include/c++/5/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
2829:/usr/include/c++/5/bits/basic_string.h **** 
2830:/usr/include/c++/5/bits/basic_string.h ****     public:
2831:/usr/include/c++/5/bits/basic_string.h ****       // Construct/copy/destroy:
2832:/usr/include/c++/5/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
2833:/usr/include/c++/5/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
GAS LISTING /tmp/cc2K2nX4.s 			page 482


2834:/usr/include/c++/5/bits/basic_string.h **** 
2835:/usr/include/c++/5/bits/basic_string.h ****       /**
2836:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
2837:/usr/include/c++/5/bits/basic_string.h ****        */
2838:/usr/include/c++/5/bits/basic_string.h ****       basic_string()
2839:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2840:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
2841:/usr/include/c++/5/bits/basic_string.h **** #else
2842:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
2843:/usr/include/c++/5/bits/basic_string.h **** #endif
2844:/usr/include/c++/5/bits/basic_string.h **** 
2845:/usr/include/c++/5/bits/basic_string.h ****       /**
2846:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
2847:/usr/include/c++/5/bits/basic_string.h ****        */
2848:/usr/include/c++/5/bits/basic_string.h ****       explicit
2849:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _Alloc& __a);
2850:/usr/include/c++/5/bits/basic_string.h **** 
2851:/usr/include/c++/5/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
2852:/usr/include/c++/5/bits/basic_string.h ****       /**
2853:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
2854:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2855:/usr/include/c++/5/bits/basic_string.h ****        */
2856:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str);
2857:/usr/include/c++/5/bits/basic_string.h ****       /**
2858:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
2859:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2860:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
2861:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy (default remainder).
2862:/usr/include/c++/5/bits/basic_string.h ****        */
2863:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
2864:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n = npos);
2865:/usr/include/c++/5/bits/basic_string.h ****       /**
2866:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
2867:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2868:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
2869:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
2870:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use.
2871:/usr/include/c++/5/bits/basic_string.h ****        */
2872:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
2873:/usr/include/c++/5/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
2874:/usr/include/c++/5/bits/basic_string.h **** 
2875:/usr/include/c++/5/bits/basic_string.h ****       /**
2876:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
2877:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source character %array.
2878:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
2879:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2880:/usr/include/c++/5/bits/basic_string.h ****        *
2881:/usr/include/c++/5/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
2882:/usr/include/c++/5/bits/basic_string.h ****        *  has no special meaning.
2883:/usr/include/c++/5/bits/basic_string.h ****        */
2884:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
2885:/usr/include/c++/5/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
2886:/usr/include/c++/5/bits/basic_string.h ****       /**
2887:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
2888:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source C string.
2889:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2890:/usr/include/c++/5/bits/basic_string.h ****        */
GAS LISTING /tmp/cc2K2nX4.s 			page 483


2891:/usr/include/c++/5/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
2892:/usr/include/c++/5/bits/basic_string.h ****       /**
2893:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
2894:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters.
2895:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to use.
2896:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2897:/usr/include/c++/5/bits/basic_string.h ****        */
2898:/usr/include/c++/5/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
2899:/usr/include/c++/5/bits/basic_string.h **** 
2900:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
2901:/usr/include/c++/5/bits/basic_string.h ****       /**
2902:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move construct string.
2903:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2904:/usr/include/c++/5/bits/basic_string.h ****        *
2905:/usr/include/c++/5/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
2906:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
2907:/usr/include/c++/5/bits/basic_string.h ****        **/
2908:/usr/include/c++/5/bits/basic_string.h ****       basic_string(basic_string&& __str)
2909:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2910:/usr/include/c++/5/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
2911:/usr/include/c++/5/bits/basic_string.h **** #endif
2912:/usr/include/c++/5/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
2913:/usr/include/c++/5/bits/basic_string.h ****       {
2914:/usr/include/c++/5/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
2915:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
2916:/usr/include/c++/5/bits/basic_string.h **** #else
2917:/usr/include/c++/5/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
2918:/usr/include/c++/5/bits/basic_string.h **** #endif
2919:/usr/include/c++/5/bits/basic_string.h ****       }
2920:/usr/include/c++/5/bits/basic_string.h **** 
2921:/usr/include/c++/5/bits/basic_string.h ****       /**
2922:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
2923:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
2924:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2925:/usr/include/c++/5/bits/basic_string.h ****        */
2926:/usr/include/c++/5/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
2927:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
2928:/usr/include/c++/5/bits/basic_string.h **** 
2929:/usr/include/c++/5/bits/basic_string.h ****       /**
2930:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
2931:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __beg  Start of range.
2932:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __end  End of range.
2933:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
2934:/usr/include/c++/5/bits/basic_string.h ****        */
2935:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
2936:/usr/include/c++/5/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
2937:/usr/include/c++/5/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
2938:/usr/include/c++/5/bits/basic_string.h **** 
2939:/usr/include/c++/5/bits/basic_string.h ****       /**
2940:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Destroy the string instance.
2941:/usr/include/c++/5/bits/basic_string.h ****        */
2942:/usr/include/c++/5/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
2943:/usr/include/c++/5/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
2944:/usr/include/c++/5/bits/basic_string.h **** 
2945:/usr/include/c++/5/bits/basic_string.h ****       /**
2946:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
2947:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
GAS LISTING /tmp/cc2K2nX4.s 			page 484


2948:/usr/include/c++/5/bits/basic_string.h ****        */
2949:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2950:/usr/include/c++/5/bits/basic_string.h ****       operator=(const basic_string& __str) 
2951:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str); }
2952:/usr/include/c++/5/bits/basic_string.h **** 
2953:/usr/include/c++/5/bits/basic_string.h ****       /**
2954:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
2955:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
2956:/usr/include/c++/5/bits/basic_string.h ****        */
2957:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2958:/usr/include/c++/5/bits/basic_string.h ****       operator=(const _CharT* __s) 
2959:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__s); }
2960:/usr/include/c++/5/bits/basic_string.h **** 
2961:/usr/include/c++/5/bits/basic_string.h ****       /**
2962:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
2963:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Source character.
2964:/usr/include/c++/5/bits/basic_string.h ****        *
2965:/usr/include/c++/5/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
2966:/usr/include/c++/5/bits/basic_string.h ****        *  (*this)[0] == @a c.
2967:/usr/include/c++/5/bits/basic_string.h ****        */
2968:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2969:/usr/include/c++/5/bits/basic_string.h ****       operator=(_CharT __c) 
2970:/usr/include/c++/5/bits/basic_string.h ****       { 
2971:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(1, __c); 
2972:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
2973:/usr/include/c++/5/bits/basic_string.h ****       }
2974:/usr/include/c++/5/bits/basic_string.h **** 
2975:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
2976:/usr/include/c++/5/bits/basic_string.h ****       /**
2977:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
2978:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string.
2979:/usr/include/c++/5/bits/basic_string.h ****        *
2980:/usr/include/c++/5/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
2981:/usr/include/c++/5/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
2982:/usr/include/c++/5/bits/basic_string.h ****        **/
2983:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
2984:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2985:/usr/include/c++/5/bits/basic_string.h ****       operator=(basic_string&& __str)
2986:/usr/include/c++/5/bits/basic_string.h ****       {
2987:/usr/include/c++/5/bits/basic_string.h **** 	// NB: DR 1204.
2988:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
2989:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
2990:/usr/include/c++/5/bits/basic_string.h ****       }
2991:/usr/include/c++/5/bits/basic_string.h **** 
2992:/usr/include/c++/5/bits/basic_string.h ****       /**
2993:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
2994:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
2995:/usr/include/c++/5/bits/basic_string.h ****        */
2996:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
2997:/usr/include/c++/5/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
2998:/usr/include/c++/5/bits/basic_string.h ****       {
2999:/usr/include/c++/5/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3000:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3001:/usr/include/c++/5/bits/basic_string.h ****       }
3002:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3003:/usr/include/c++/5/bits/basic_string.h **** 
3004:/usr/include/c++/5/bits/basic_string.h ****       // Iterators:
GAS LISTING /tmp/cc2K2nX4.s 			page 485


3005:/usr/include/c++/5/bits/basic_string.h ****       /**
3006:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3007:/usr/include/c++/5/bits/basic_string.h ****        *  the %string.  Unshares the string.
3008:/usr/include/c++/5/bits/basic_string.h ****        */
3009:/usr/include/c++/5/bits/basic_string.h ****       iterator
3010:/usr/include/c++/5/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3011:/usr/include/c++/5/bits/basic_string.h ****       {
3012:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3013:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data());
3014:/usr/include/c++/5/bits/basic_string.h ****       }
3015:/usr/include/c++/5/bits/basic_string.h **** 
3016:/usr/include/c++/5/bits/basic_string.h ****       /**
3017:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3018:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
3019:/usr/include/c++/5/bits/basic_string.h ****        */
3020:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3021:/usr/include/c++/5/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3022:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3023:/usr/include/c++/5/bits/basic_string.h **** 
3024:/usr/include/c++/5/bits/basic_string.h ****       /**
3025:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3026:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3027:/usr/include/c++/5/bits/basic_string.h ****        */
3028:/usr/include/c++/5/bits/basic_string.h ****       iterator
3029:/usr/include/c++/5/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3030:/usr/include/c++/5/bits/basic_string.h ****       {
3031:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3032:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3033:/usr/include/c++/5/bits/basic_string.h ****       }
3034:/usr/include/c++/5/bits/basic_string.h **** 
3035:/usr/include/c++/5/bits/basic_string.h ****       /**
3036:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3037:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
3038:/usr/include/c++/5/bits/basic_string.h ****        */
3039:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3040:/usr/include/c++/5/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3041:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3042:/usr/include/c++/5/bits/basic_string.h **** 
3043:/usr/include/c++/5/bits/basic_string.h ****       /**
3044:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3045:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3046:/usr/include/c++/5/bits/basic_string.h ****        *  order.  Unshares the string.
3047:/usr/include/c++/5/bits/basic_string.h ****        */
3048:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
3049:/usr/include/c++/5/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3050:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3051:/usr/include/c++/5/bits/basic_string.h **** 
3052:/usr/include/c++/5/bits/basic_string.h ****       /**
3053:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3054:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3055:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
3056:/usr/include/c++/5/bits/basic_string.h ****        */
3057:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3058:/usr/include/c++/5/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3059:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3060:/usr/include/c++/5/bits/basic_string.h **** 
3061:/usr/include/c++/5/bits/basic_string.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 486


3062:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3063:/usr/include/c++/5/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3064:/usr/include/c++/5/bits/basic_string.h ****        *  element order.  Unshares the string.
3065:/usr/include/c++/5/bits/basic_string.h ****        */
3066:/usr/include/c++/5/bits/basic_string.h ****       reverse_iterator
3067:/usr/include/c++/5/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3068:/usr/include/c++/5/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3069:/usr/include/c++/5/bits/basic_string.h **** 
3070:/usr/include/c++/5/bits/basic_string.h ****       /**
3071:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3072:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3073:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
3074:/usr/include/c++/5/bits/basic_string.h ****        */
3075:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3076:/usr/include/c++/5/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3077:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3078:/usr/include/c++/5/bits/basic_string.h **** 
3079:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3080:/usr/include/c++/5/bits/basic_string.h ****       /**
3081:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3082:/usr/include/c++/5/bits/basic_string.h ****        *  character in the %string.
3083:/usr/include/c++/5/bits/basic_string.h ****        */
3084:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3085:/usr/include/c++/5/bits/basic_string.h ****       cbegin() const noexcept
3086:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3087:/usr/include/c++/5/bits/basic_string.h **** 
3088:/usr/include/c++/5/bits/basic_string.h ****       /**
3089:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3090:/usr/include/c++/5/bits/basic_string.h ****        *  last character in the %string.
3091:/usr/include/c++/5/bits/basic_string.h ****        */
3092:/usr/include/c++/5/bits/basic_string.h ****       const_iterator
3093:/usr/include/c++/5/bits/basic_string.h ****       cend() const noexcept
3094:/usr/include/c++/5/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3095:/usr/include/c++/5/bits/basic_string.h **** 
3096:/usr/include/c++/5/bits/basic_string.h ****       /**
3097:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3098:/usr/include/c++/5/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3099:/usr/include/c++/5/bits/basic_string.h ****        *  reverse element order.
3100:/usr/include/c++/5/bits/basic_string.h ****        */
3101:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3102:/usr/include/c++/5/bits/basic_string.h ****       crbegin() const noexcept
3103:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3104:/usr/include/c++/5/bits/basic_string.h **** 
3105:/usr/include/c++/5/bits/basic_string.h ****       /**
3106:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3107:/usr/include/c++/5/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3108:/usr/include/c++/5/bits/basic_string.h ****        *  is done in reverse element order.
3109:/usr/include/c++/5/bits/basic_string.h ****        */
3110:/usr/include/c++/5/bits/basic_string.h ****       const_reverse_iterator
3111:/usr/include/c++/5/bits/basic_string.h ****       crend() const noexcept
3112:/usr/include/c++/5/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3113:/usr/include/c++/5/bits/basic_string.h **** #endif
3114:/usr/include/c++/5/bits/basic_string.h **** 
3115:/usr/include/c++/5/bits/basic_string.h ****     public:
3116:/usr/include/c++/5/bits/basic_string.h ****       // Capacity:
3117:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3118:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
GAS LISTING /tmp/cc2K2nX4.s 			page 487


3119:/usr/include/c++/5/bits/basic_string.h ****       size_type
3120:/usr/include/c++/5/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3121:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3122:/usr/include/c++/5/bits/basic_string.h **** 
3123:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3124:/usr/include/c++/5/bits/basic_string.h ****       ///  null-termination.
3125:/usr/include/c++/5/bits/basic_string.h ****       size_type
3126:/usr/include/c++/5/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3127:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3128:/usr/include/c++/5/bits/basic_string.h **** 
3129:/usr/include/c++/5/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3130:/usr/include/c++/5/bits/basic_string.h ****       size_type
3131:/usr/include/c++/5/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3132:/usr/include/c++/5/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3133:/usr/include/c++/5/bits/basic_string.h **** 
3134:/usr/include/c++/5/bits/basic_string.h ****       /**
3135:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3136:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3137:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3138:/usr/include/c++/5/bits/basic_string.h ****        *
3139:/usr/include/c++/5/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3140:/usr/include/c++/5/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3141:/usr/include/c++/5/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3142:/usr/include/c++/5/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3143:/usr/include/c++/5/bits/basic_string.h ****        */
3144:/usr/include/c++/5/bits/basic_string.h ****       void
3145:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3146:/usr/include/c++/5/bits/basic_string.h **** 
3147:/usr/include/c++/5/bits/basic_string.h ****       /**
3148:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3149:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3150:/usr/include/c++/5/bits/basic_string.h ****        *
3151:/usr/include/c++/5/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3152:/usr/include/c++/5/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3153:/usr/include/c++/5/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3154:/usr/include/c++/5/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3155:/usr/include/c++/5/bits/basic_string.h ****        *  setting them to 0.
3156:/usr/include/c++/5/bits/basic_string.h ****        */
3157:/usr/include/c++/5/bits/basic_string.h ****       void
3158:/usr/include/c++/5/bits/basic_string.h ****       resize(size_type __n)
3159:/usr/include/c++/5/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3160:/usr/include/c++/5/bits/basic_string.h **** 
3161:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3162:/usr/include/c++/5/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3163:/usr/include/c++/5/bits/basic_string.h ****       void
3164:/usr/include/c++/5/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3165:/usr/include/c++/5/bits/basic_string.h ****       {
3166:/usr/include/c++/5/bits/basic_string.h **** #if __cpp_exceptions
3167:/usr/include/c++/5/bits/basic_string.h **** 	if (capacity() > size())
3168:/usr/include/c++/5/bits/basic_string.h **** 	  {
3169:/usr/include/c++/5/bits/basic_string.h **** 	    try
3170:/usr/include/c++/5/bits/basic_string.h **** 	      { reserve(0); }
3171:/usr/include/c++/5/bits/basic_string.h **** 	    catch(...)
3172:/usr/include/c++/5/bits/basic_string.h **** 	      { }
3173:/usr/include/c++/5/bits/basic_string.h **** 	  }
3174:/usr/include/c++/5/bits/basic_string.h **** #endif
3175:/usr/include/c++/5/bits/basic_string.h ****       }
GAS LISTING /tmp/cc2K2nX4.s 			page 488


3176:/usr/include/c++/5/bits/basic_string.h **** #endif
3177:/usr/include/c++/5/bits/basic_string.h **** 
3178:/usr/include/c++/5/bits/basic_string.h ****       /**
3179:/usr/include/c++/5/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3180:/usr/include/c++/5/bits/basic_string.h ****        *  before needing to allocate more memory.
3181:/usr/include/c++/5/bits/basic_string.h ****        */
3182:/usr/include/c++/5/bits/basic_string.h ****       size_type
3183:/usr/include/c++/5/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3184:/usr/include/c++/5/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3185:/usr/include/c++/5/bits/basic_string.h **** 
3186:/usr/include/c++/5/bits/basic_string.h ****       /**
3187:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3188:/usr/include/c++/5/bits/basic_string.h ****        *          characters.
3189:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3190:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3191:/usr/include/c++/5/bits/basic_string.h ****        *
3192:/usr/include/c++/5/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3193:/usr/include/c++/5/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3194:/usr/include/c++/5/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3195:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3196:/usr/include/c++/5/bits/basic_string.h ****        *
3197:/usr/include/c++/5/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3198:/usr/include/c++/5/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3199:/usr/include/c++/5/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3200:/usr/include/c++/5/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3201:/usr/include/c++/5/bits/basic_string.h ****        *  data.
3202:/usr/include/c++/5/bits/basic_string.h ****        */
3203:/usr/include/c++/5/bits/basic_string.h ****       void
3204:/usr/include/c++/5/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3205:/usr/include/c++/5/bits/basic_string.h **** 
3206:/usr/include/c++/5/bits/basic_string.h ****       /**
3207:/usr/include/c++/5/bits/basic_string.h ****        *  Erases the string, making it empty.
3208:/usr/include/c++/5/bits/basic_string.h ****        */
3209:/usr/include/c++/5/bits/basic_string.h ****       // PR 56166: this should not throw.
3210:/usr/include/c++/5/bits/basic_string.h ****       void
3211:/usr/include/c++/5/bits/basic_string.h ****       clear()
3212:/usr/include/c++/5/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
3213:/usr/include/c++/5/bits/basic_string.h **** 
3214:/usr/include/c++/5/bits/basic_string.h ****       /**
3215:/usr/include/c++/5/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
3216:/usr/include/c++/5/bits/basic_string.h ****        *  <code>*this == ""</code>.
3217:/usr/include/c++/5/bits/basic_string.h ****        */
3218:/usr/include/c++/5/bits/basic_string.h ****       bool
3219:/usr/include/c++/5/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
3220:/usr/include/c++/5/bits/basic_string.h ****       { return this->size() == 0; }
3221:/usr/include/c++/5/bits/basic_string.h **** 
3222:/usr/include/c++/5/bits/basic_string.h ****       // Element access:
3223:/usr/include/c++/5/bits/basic_string.h ****       /**
3224:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3225:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3226:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
3227:/usr/include/c++/5/bits/basic_string.h ****        *
3228:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3229:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3230:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3231:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)
3232:/usr/include/c++/5/bits/basic_string.h ****        */
GAS LISTING /tmp/cc2K2nX4.s 			page 489


3233:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3234:/usr/include/c++/5/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
3235:/usr/include/c++/5/bits/basic_string.h ****       {
3236:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
3237:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
3238:/usr/include/c++/5/bits/basic_string.h ****       }
3239:/usr/include/c++/5/bits/basic_string.h **** 
3240:/usr/include/c++/5/bits/basic_string.h ****       /**
3241:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3242:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3243:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3244:/usr/include/c++/5/bits/basic_string.h ****        *
3245:/usr/include/c++/5/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3246:/usr/include/c++/5/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3247:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3248:/usr/include/c++/5/bits/basic_string.h ****        *  see at().)  Unshares the string.
3249:/usr/include/c++/5/bits/basic_string.h ****        */
3250:/usr/include/c++/5/bits/basic_string.h ****       reference
3251:/usr/include/c++/5/bits/basic_string.h ****       operator[](size_type __pos)
3252:/usr/include/c++/5/bits/basic_string.h ****       {
3253:/usr/include/c++/5/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
3254:/usr/include/c++/5/bits/basic_string.h **** 	// and in C++11 mode.
3255:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_ASSERT(__pos <= size());
3256:/usr/include/c++/5/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
3257:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
3258:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3259:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__pos];
3260:/usr/include/c++/5/bits/basic_string.h ****       }
3261:/usr/include/c++/5/bits/basic_string.h **** 
3262:/usr/include/c++/5/bits/basic_string.h ****       /**
3263:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3264:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
3265:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
3266:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3267:/usr/include/c++/5/bits/basic_string.h ****        *
3268:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3269:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3270:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.
3271:/usr/include/c++/5/bits/basic_string.h ****        */
3272:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3273:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n) const
3274:/usr/include/c++/5/bits/basic_string.h ****       {
3275:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= this->size())
3276:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3277:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3278:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
3279:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
3280:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
3281:/usr/include/c++/5/bits/basic_string.h ****       }
3282:/usr/include/c++/5/bits/basic_string.h **** 
3283:/usr/include/c++/5/bits/basic_string.h ****       /**
3284:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3285:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n The index of the character to access.
3286:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3287:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3288:/usr/include/c++/5/bits/basic_string.h ****        *
3289:/usr/include/c++/5/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
GAS LISTING /tmp/cc2K2nX4.s 			page 490


3290:/usr/include/c++/5/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3291:/usr/include/c++/5/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
3292:/usr/include/c++/5/bits/basic_string.h ****        *  unsharing the string.
3293:/usr/include/c++/5/bits/basic_string.h ****        */
3294:/usr/include/c++/5/bits/basic_string.h ****       reference
3295:/usr/include/c++/5/bits/basic_string.h ****       at(size_type __n)
3296:/usr/include/c++/5/bits/basic_string.h ****       {
3297:/usr/include/c++/5/bits/basic_string.h **** 	if (__n >= size())
3298:/usr/include/c++/5/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3299:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3300:/usr/include/c++/5/bits/basic_string.h **** 				       "(which is %zu)"),
3301:/usr/include/c++/5/bits/basic_string.h **** 				   __n, this->size());
3302:/usr/include/c++/5/bits/basic_string.h **** 	_M_leak();
3303:/usr/include/c++/5/bits/basic_string.h **** 	return _M_data()[__n];
3304:/usr/include/c++/5/bits/basic_string.h ****       }
3305:/usr/include/c++/5/bits/basic_string.h **** 
3306:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3307:/usr/include/c++/5/bits/basic_string.h ****       /**
3308:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
3309:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3310:/usr/include/c++/5/bits/basic_string.h ****        */
3311:/usr/include/c++/5/bits/basic_string.h ****       reference
3312:/usr/include/c++/5/bits/basic_string.h ****       front()
3313:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
3314:/usr/include/c++/5/bits/basic_string.h **** 
3315:/usr/include/c++/5/bits/basic_string.h ****       /**
3316:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
3317:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3318:/usr/include/c++/5/bits/basic_string.h ****        */
3319:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3320:/usr/include/c++/5/bits/basic_string.h ****       front() const _GLIBCXX_NOEXCEPT
3321:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](0); }
3322:/usr/include/c++/5/bits/basic_string.h **** 
3323:/usr/include/c++/5/bits/basic_string.h ****       /**
3324:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
3325:/usr/include/c++/5/bits/basic_string.h ****        *  element of the %string.
3326:/usr/include/c++/5/bits/basic_string.h ****        */
3327:/usr/include/c++/5/bits/basic_string.h ****       reference
3328:/usr/include/c++/5/bits/basic_string.h ****       back()
3329:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
3330:/usr/include/c++/5/bits/basic_string.h **** 
3331:/usr/include/c++/5/bits/basic_string.h ****       /**
3332:/usr/include/c++/5/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
3333:/usr/include/c++/5/bits/basic_string.h ****        *  last element of the %string.
3334:/usr/include/c++/5/bits/basic_string.h ****        */
3335:/usr/include/c++/5/bits/basic_string.h ****       const_reference
3336:/usr/include/c++/5/bits/basic_string.h ****       back() const _GLIBCXX_NOEXCEPT
3337:/usr/include/c++/5/bits/basic_string.h ****       { return operator[](this->size() - 1); }
3338:/usr/include/c++/5/bits/basic_string.h **** #endif
3339:/usr/include/c++/5/bits/basic_string.h **** 
3340:/usr/include/c++/5/bits/basic_string.h ****       // Modifiers:
3341:/usr/include/c++/5/bits/basic_string.h ****       /**
3342:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
3343:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3344:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3345:/usr/include/c++/5/bits/basic_string.h ****        */
3346:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
GAS LISTING /tmp/cc2K2nX4.s 			page 491


3347:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const basic_string& __str)
3348:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__str); }
3349:/usr/include/c++/5/bits/basic_string.h **** 
3350:/usr/include/c++/5/bits/basic_string.h ****       /**
3351:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
3352:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3353:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3354:/usr/include/c++/5/bits/basic_string.h ****        */
3355:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3356:/usr/include/c++/5/bits/basic_string.h ****       operator+=(const _CharT* __s)
3357:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__s); }
3358:/usr/include/c++/5/bits/basic_string.h **** 
3359:/usr/include/c++/5/bits/basic_string.h ****       /**
3360:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a character.
3361:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to append.
3362:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3363:/usr/include/c++/5/bits/basic_string.h ****        */
3364:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3365:/usr/include/c++/5/bits/basic_string.h ****       operator+=(_CharT __c)
3366:/usr/include/c++/5/bits/basic_string.h ****       { 
3367:/usr/include/c++/5/bits/basic_string.h **** 	this->push_back(__c);
3368:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3369:/usr/include/c++/5/bits/basic_string.h ****       }
3370:/usr/include/c++/5/bits/basic_string.h **** 
3371:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3372:/usr/include/c++/5/bits/basic_string.h ****       /**
3373:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3374:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
3375:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3376:/usr/include/c++/5/bits/basic_string.h ****        */
3377:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3378:/usr/include/c++/5/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
3379:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
3380:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3381:/usr/include/c++/5/bits/basic_string.h **** 
3382:/usr/include/c++/5/bits/basic_string.h ****       /**
3383:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a string to this string.
3384:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3385:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3386:/usr/include/c++/5/bits/basic_string.h ****        */
3387:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3388:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str);
3389:/usr/include/c++/5/bits/basic_string.h **** 
3390:/usr/include/c++/5/bits/basic_string.h ****       /**
3391:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a substring.
3392:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to append.
3393:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
3394:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3395:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3396:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
3397:/usr/include/c++/5/bits/basic_string.h ****        *
3398:/usr/include/c++/5/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
3399:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
3400:/usr/include/c++/5/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
3401:/usr/include/c++/5/bits/basic_string.h ****        *  remainder of @a __str is appended.
3402:/usr/include/c++/5/bits/basic_string.h ****        */
3403:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
GAS LISTING /tmp/cc2K2nX4.s 			page 492


3404:/usr/include/c++/5/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n);
3405:/usr/include/c++/5/bits/basic_string.h **** 
3406:/usr/include/c++/5/bits/basic_string.h ****       /**
3407:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C substring.
3408:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3409:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3410:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3411:/usr/include/c++/5/bits/basic_string.h ****        */
3412:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3413:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
3414:/usr/include/c++/5/bits/basic_string.h **** 
3415:/usr/include/c++/5/bits/basic_string.h ****       /**
3416:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a C string.
3417:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to append.
3418:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3419:/usr/include/c++/5/bits/basic_string.h ****        */
3420:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3421:/usr/include/c++/5/bits/basic_string.h ****       append(const _CharT* __s)
3422:/usr/include/c++/5/bits/basic_string.h ****       {
3423:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3424:/usr/include/c++/5/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
3425:/usr/include/c++/5/bits/basic_string.h ****       }
3426:/usr/include/c++/5/bits/basic_string.h **** 
3427:/usr/include/c++/5/bits/basic_string.h ****       /**
3428:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append multiple characters.
3429:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to append.
3430:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
3431:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3432:/usr/include/c++/5/bits/basic_string.h ****        *
3433:/usr/include/c++/5/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
3434:/usr/include/c++/5/bits/basic_string.h ****        */
3435:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3436:/usr/include/c++/5/bits/basic_string.h ****       append(size_type __n, _CharT __c);
3437:/usr/include/c++/5/bits/basic_string.h **** 
3438:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3439:/usr/include/c++/5/bits/basic_string.h ****       /**
3440:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
3441:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
3442:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3443:/usr/include/c++/5/bits/basic_string.h ****        */
3444:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3445:/usr/include/c++/5/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
3446:/usr/include/c++/5/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
3447:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3448:/usr/include/c++/5/bits/basic_string.h **** 
3449:/usr/include/c++/5/bits/basic_string.h ****       /**
3450:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a range of characters.
3451:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3452:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3453:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3454:/usr/include/c++/5/bits/basic_string.h ****        *
3455:/usr/include/c++/5/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
3456:/usr/include/c++/5/bits/basic_string.h ****        */
3457:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3458:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
3459:/usr/include/c++/5/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
3460:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
GAS LISTING /tmp/cc2K2nX4.s 			page 493


3461:/usr/include/c++/5/bits/basic_string.h **** 
3462:/usr/include/c++/5/bits/basic_string.h ****       /**
3463:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Append a single character.
3464:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to append.
3465:/usr/include/c++/5/bits/basic_string.h ****        */
3466:/usr/include/c++/5/bits/basic_string.h ****       void
3467:/usr/include/c++/5/bits/basic_string.h ****       push_back(_CharT __c)
3468:/usr/include/c++/5/bits/basic_string.h ****       { 
3469:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
3470:/usr/include/c++/5/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
3471:/usr/include/c++/5/bits/basic_string.h **** 	  this->reserve(__len);
3472:/usr/include/c++/5/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
3473:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
3474:/usr/include/c++/5/bits/basic_string.h ****       }
3475:/usr/include/c++/5/bits/basic_string.h **** 
3476:/usr/include/c++/5/bits/basic_string.h ****       /**
3477:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3478:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
3479:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3480:/usr/include/c++/5/bits/basic_string.h ****        */
3481:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3482:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str);
3483:/usr/include/c++/5/bits/basic_string.h **** 
3484:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3485:/usr/include/c++/5/bits/basic_string.h ****       /**
3486:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
3487:/usr/include/c++/5/bits/basic_string.h ****        *  @param  __str  Source string to use.
3488:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3489:/usr/include/c++/5/bits/basic_string.h ****        *
3490:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
3491:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3492:/usr/include/c++/5/bits/basic_string.h ****        */
3493:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
3494:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3495:/usr/include/c++/5/bits/basic_string.h ****       assign(basic_string&& __str)
3496:/usr/include/c++/5/bits/basic_string.h ****       {
3497:/usr/include/c++/5/bits/basic_string.h **** 	this->swap(__str);
3498:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3499:/usr/include/c++/5/bits/basic_string.h ****       }
3500:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3501:/usr/include/c++/5/bits/basic_string.h **** 
3502:/usr/include/c++/5/bits/basic_string.h ****       /**
3503:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
3504:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to use.
3505:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
3506:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3507:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3508:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
3509:/usr/include/c++/5/bits/basic_string.h ****        *
3510:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
3511:/usr/include/c++/5/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
3512:/usr/include/c++/5/bits/basic_string.h ****        *  is larger than the number of available characters in @a
3513:/usr/include/c++/5/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
3514:/usr/include/c++/5/bits/basic_string.h ****        */
3515:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3516:/usr/include/c++/5/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n)
3517:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__str._M_data()
GAS LISTING /tmp/cc2K2nX4.s 			page 494


3518:/usr/include/c++/5/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
3519:/usr/include/c++/5/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
3520:/usr/include/c++/5/bits/basic_string.h **** 
3521:/usr/include/c++/5/bits/basic_string.h ****       /**
3522:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a C substring.
3523:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
3524:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to use.
3525:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3526:/usr/include/c++/5/bits/basic_string.h ****        *
3527:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
3528:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
3529:/usr/include/c++/5/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
3530:/usr/include/c++/5/bits/basic_string.h ****        */
3531:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3532:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
3533:/usr/include/c++/5/bits/basic_string.h **** 
3534:/usr/include/c++/5/bits/basic_string.h ****       /**
3535:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
3536:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to use.
3537:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3538:/usr/include/c++/5/bits/basic_string.h ****        *
3539:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
3540:/usr/include/c++/5/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
3541:/usr/include/c++/5/bits/basic_string.h ****        *  function returns.
3542:/usr/include/c++/5/bits/basic_string.h ****        */
3543:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3544:/usr/include/c++/5/bits/basic_string.h ****       assign(const _CharT* __s)
3545:/usr/include/c++/5/bits/basic_string.h ****       {
3546:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3547:/usr/include/c++/5/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
3548:/usr/include/c++/5/bits/basic_string.h ****       }
3549:/usr/include/c++/5/bits/basic_string.h **** 
3550:/usr/include/c++/5/bits/basic_string.h ****       /**
3551:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
3552:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
3553:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to use.
3554:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3555:/usr/include/c++/5/bits/basic_string.h ****        *
3556:/usr/include/c++/5/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
3557:/usr/include/c++/5/bits/basic_string.h ****        *  character @a __c.
3558:/usr/include/c++/5/bits/basic_string.h ****        */
3559:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3560:/usr/include/c++/5/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
3561:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
3562:/usr/include/c++/5/bits/basic_string.h **** 
3563:/usr/include/c++/5/bits/basic_string.h ****       /**
3564:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
3565:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
3566:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
3567:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3568:/usr/include/c++/5/bits/basic_string.h ****        *
3569:/usr/include/c++/5/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
3570:/usr/include/c++/5/bits/basic_string.h ****       */
3571:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3572:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
3573:/usr/include/c++/5/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
3574:/usr/include/c++/5/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
GAS LISTING /tmp/cc2K2nX4.s 			page 495


3575:/usr/include/c++/5/bits/basic_string.h **** 
3576:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3577:/usr/include/c++/5/bits/basic_string.h ****       /**
3578:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
3579:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
3580:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3581:/usr/include/c++/5/bits/basic_string.h ****        */
3582:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3583:/usr/include/c++/5/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
3584:/usr/include/c++/5/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
3585:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3586:/usr/include/c++/5/bits/basic_string.h **** 
3587:/usr/include/c++/5/bits/basic_string.h ****       /**
3588:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3589:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3590:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
3591:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3592:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3593:/usr/include/c++/5/bits/basic_string.h ****        *
3594:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
3595:/usr/include/c++/5/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
3596:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3597:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3598:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3599:/usr/include/c++/5/bits/basic_string.h ****       */
3600:/usr/include/c++/5/bits/basic_string.h ****       void
3601:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
3602:/usr/include/c++/5/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
3603:/usr/include/c++/5/bits/basic_string.h **** 
3604:/usr/include/c++/5/bits/basic_string.h ****       /**
3605:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a range of characters.
3606:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3607:/usr/include/c++/5/bits/basic_string.h ****        *  @param __beg  Start of range.
3608:/usr/include/c++/5/bits/basic_string.h ****        *  @param __end  End of range.
3609:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3610:/usr/include/c++/5/bits/basic_string.h ****        *
3611:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
3612:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3613:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3614:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3615:/usr/include/c++/5/bits/basic_string.h ****       */
3616:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
3617:/usr/include/c++/5/bits/basic_string.h ****         void
3618:/usr/include/c++/5/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
3619:/usr/include/c++/5/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
3620:/usr/include/c++/5/bits/basic_string.h **** 
3621:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3622:/usr/include/c++/5/bits/basic_string.h ****       /**
3623:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
3624:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
3625:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
3626:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3627:/usr/include/c++/5/bits/basic_string.h ****        */
3628:/usr/include/c++/5/bits/basic_string.h ****       void
3629:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
3630:/usr/include/c++/5/bits/basic_string.h ****       {
3631:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
GAS LISTING /tmp/cc2K2nX4.s 			page 496


3632:/usr/include/c++/5/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
3633:/usr/include/c++/5/bits/basic_string.h ****       }
3634:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3635:/usr/include/c++/5/bits/basic_string.h **** 
3636:/usr/include/c++/5/bits/basic_string.h ****       /**
3637:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert value of a string.
3638:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3639:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
3640:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3641:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3642:/usr/include/c++/5/bits/basic_string.h ****        *
3643:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
3644:/usr/include/c++/5/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
3645:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3646:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3647:/usr/include/c++/5/bits/basic_string.h ****       */
3648:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3649:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
3650:/usr/include/c++/5/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
3651:/usr/include/c++/5/bits/basic_string.h **** 
3652:/usr/include/c++/5/bits/basic_string.h ****       /**
3653:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a substring.
3654:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
3655:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  The string to insert.
3656:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
3657:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
3658:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3659:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3660:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
3661:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
3662:/usr/include/c++/5/bits/basic_string.h ****        *
3663:/usr/include/c++/5/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
3664:/usr/include/c++/5/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
3665:/usr/include/c++/5/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
3666:/usr/include/c++/5/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
3667:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
3668:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
3669:/usr/include/c++/5/bits/basic_string.h ****       */
3670:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3671:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
3672:/usr/include/c++/5/bits/basic_string.h **** 	     size_type __pos2, size_type __n)
3673:/usr/include/c++/5/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
3674:/usr/include/c++/5/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
3675:/usr/include/c++/5/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
3676:/usr/include/c++/5/bits/basic_string.h **** 
3677:/usr/include/c++/5/bits/basic_string.h ****       /**
3678:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C substring.
3679:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3680:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
3681:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
3682:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3683:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3684:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3685:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3686:/usr/include/c++/5/bits/basic_string.h ****        *
3687:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
3688:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
GAS LISTING /tmp/cc2K2nX4.s 			page 497


3689:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
3690:/usr/include/c++/5/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
3691:/usr/include/c++/5/bits/basic_string.h ****        *  doesn't change if an error is thrown.
3692:/usr/include/c++/5/bits/basic_string.h ****       */
3693:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3694:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
3695:/usr/include/c++/5/bits/basic_string.h **** 
3696:/usr/include/c++/5/bits/basic_string.h ****       /**
3697:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert a C string.
3698:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
3699:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  The C string to insert.
3700:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3701:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3702:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3703:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3704:/usr/include/c++/5/bits/basic_string.h ****        *
3705:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
3706:/usr/include/c++/5/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
3707:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
3708:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
3709:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3710:/usr/include/c++/5/bits/basic_string.h ****       */
3711:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3712:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
3713:/usr/include/c++/5/bits/basic_string.h ****       {
3714:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3715:/usr/include/c++/5/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
3716:/usr/include/c++/5/bits/basic_string.h ****       }
3717:/usr/include/c++/5/bits/basic_string.h **** 
3718:/usr/include/c++/5/bits/basic_string.h ****       /**
3719:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert multiple characters.
3720:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
3721:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert
3722:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3723:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3724:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3725:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
3726:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3727:/usr/include/c++/5/bits/basic_string.h ****        *
3728:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
3729:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
3730:/usr/include/c++/5/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
3731:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3732:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3733:/usr/include/c++/5/bits/basic_string.h ****       */
3734:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3735:/usr/include/c++/5/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
3736:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
3737:/usr/include/c++/5/bits/basic_string.h **** 			      size_type(0), __n, __c); }
3738:/usr/include/c++/5/bits/basic_string.h **** 
3739:/usr/include/c++/5/bits/basic_string.h ****       /**
3740:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Insert one character.
3741:/usr/include/c++/5/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
3742:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  The character to insert.
3743:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
3744:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3745:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 498


3746:/usr/include/c++/5/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
3747:/usr/include/c++/5/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
3748:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
3749:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3750:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3751:/usr/include/c++/5/bits/basic_string.h ****       */
3752:/usr/include/c++/5/bits/basic_string.h ****       iterator
3753:/usr/include/c++/5/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
3754:/usr/include/c++/5/bits/basic_string.h ****       {
3755:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
3756:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
3757:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
3758:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3759:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3760:/usr/include/c++/5/bits/basic_string.h ****       }
3761:/usr/include/c++/5/bits/basic_string.h **** 
3762:/usr/include/c++/5/bits/basic_string.h ****       /**
3763:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove characters.
3764:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
3765:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
3766:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3767:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3768:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3769:/usr/include/c++/5/bits/basic_string.h ****        *
3770:/usr/include/c++/5/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
3771:/usr/include/c++/5/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
3772:/usr/include/c++/5/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
3773:/usr/include/c++/5/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
3774:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
3775:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3776:/usr/include/c++/5/bits/basic_string.h ****       */
3777:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3778:/usr/include/c++/5/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
3779:/usr/include/c++/5/bits/basic_string.h ****       { 
3780:/usr/include/c++/5/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
3781:/usr/include/c++/5/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
3782:/usr/include/c++/5/bits/basic_string.h **** 	return *this;
3783:/usr/include/c++/5/bits/basic_string.h ****       }
3784:/usr/include/c++/5/bits/basic_string.h **** 
3785:/usr/include/c++/5/bits/basic_string.h ****       /**
3786:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove one character.
3787:/usr/include/c++/5/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
3788:/usr/include/c++/5/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
3789:/usr/include/c++/5/bits/basic_string.h ****        *
3790:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
3791:/usr/include/c++/5/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
3792:/usr/include/c++/5/bits/basic_string.h ****       */
3793:/usr/include/c++/5/bits/basic_string.h ****       iterator
3794:/usr/include/c++/5/bits/basic_string.h ****       erase(iterator __position)
3795:/usr/include/c++/5/bits/basic_string.h ****       {
3796:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
3797:/usr/include/c++/5/bits/basic_string.h **** 				 && __position < _M_iend());
3798:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
3799:/usr/include/c++/5/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
3800:/usr/include/c++/5/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
3801:/usr/include/c++/5/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
3802:/usr/include/c++/5/bits/basic_string.h ****       }
GAS LISTING /tmp/cc2K2nX4.s 			page 499


3803:/usr/include/c++/5/bits/basic_string.h **** 
3804:/usr/include/c++/5/bits/basic_string.h ****       /**
3805:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove a range of characters.
3806:/usr/include/c++/5/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
3807:/usr/include/c++/5/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
3808:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
3809:/usr/include/c++/5/bits/basic_string.h ****        *
3810:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
3811:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
3812:/usr/include/c++/5/bits/basic_string.h ****       */
3813:/usr/include/c++/5/bits/basic_string.h ****       iterator
3814:/usr/include/c++/5/bits/basic_string.h ****       erase(iterator __first, iterator __last);
3815:/usr/include/c++/5/bits/basic_string.h ****  
3816:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
3817:/usr/include/c++/5/bits/basic_string.h ****       /**
3818:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Remove the last character.
3819:/usr/include/c++/5/bits/basic_string.h ****        *
3820:/usr/include/c++/5/bits/basic_string.h ****        *  The string must be non-empty.
3821:/usr/include/c++/5/bits/basic_string.h ****        */
3822:/usr/include/c++/5/bits/basic_string.h ****       void
3823:/usr/include/c++/5/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
3824:/usr/include/c++/5/bits/basic_string.h ****       { erase(size()-1, 1); }
3825:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
3826:/usr/include/c++/5/bits/basic_string.h **** 
3827:/usr/include/c++/5/bits/basic_string.h ****       /**
3828:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3829:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3830:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
3831:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
3832:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3833:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
3834:/usr/include/c++/5/bits/basic_string.h ****        *  string.
3835:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3836:/usr/include/c++/5/bits/basic_string.h ****        *
3837:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
3838:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
3839:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
3840:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
3841:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
3842:/usr/include/c++/5/bits/basic_string.h ****        *  error is thrown.
3843:/usr/include/c++/5/bits/basic_string.h ****       */
3844:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3845:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
3846:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
3847:/usr/include/c++/5/bits/basic_string.h **** 
3848:/usr/include/c++/5/bits/basic_string.h ****       /**
3849:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
3850:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
3851:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3852:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to insert.
3853:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
3854:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
3855:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3856:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
3857:/usr/include/c++/5/bits/basic_string.h ****        *  __str.size().
3858:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3859:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 500


3860:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
3861:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
3862:/usr/include/c++/5/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
3863:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
3864:/usr/include/c++/5/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
3865:/usr/include/c++/5/bits/basic_string.h ****       */
3866:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3867:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
3868:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2)
3869:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
3870:/usr/include/c++/5/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
3871:/usr/include/c++/5/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
3872:/usr/include/c++/5/bits/basic_string.h **** 
3873:/usr/include/c++/5/bits/basic_string.h ****       /**
3874:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
3875:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3876:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3877:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
3878:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
3879:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3880:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
3881:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3882:/usr/include/c++/5/bits/basic_string.h ****        *
3883:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
3884:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
3885:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
3886:/usr/include/c++/5/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
3887:/usr/include/c++/5/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
3888:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
3889:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
3890:/usr/include/c++/5/bits/basic_string.h ****       */
3891:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3892:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
3893:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2);
3894:/usr/include/c++/5/bits/basic_string.h **** 
3895:/usr/include/c++/5/bits/basic_string.h ****       /**
3896:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
3897:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3898:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3899:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to insert.
3900:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3901:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
3902:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3903:/usr/include/c++/5/bits/basic_string.h ****        *
3904:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
3905:/usr/include/c++/5/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
3906:/usr/include/c++/5/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
3907:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
3908:/usr/include/c++/5/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
3909:/usr/include/c++/5/bits/basic_string.h ****        *  change if an error is thrown.
3910:/usr/include/c++/5/bits/basic_string.h ****       */
3911:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3912:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
3913:/usr/include/c++/5/bits/basic_string.h ****       {
3914:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3915:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
3916:/usr/include/c++/5/bits/basic_string.h ****       }
GAS LISTING /tmp/cc2K2nX4.s 			page 501


3917:/usr/include/c++/5/bits/basic_string.h **** 
3918:/usr/include/c++/5/bits/basic_string.h ****       /**
3919:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
3920:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
3921:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
3922:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
3923:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
3924:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3925:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
3926:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3927:/usr/include/c++/5/bits/basic_string.h ****        *
3928:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
3929:/usr/include/c++/5/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
3930:/usr/include/c++/5/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
3931:/usr/include/c++/5/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
3932:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
3933:/usr/include/c++/5/bits/basic_string.h ****        *  is thrown.
3934:/usr/include/c++/5/bits/basic_string.h ****       */
3935:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3936:/usr/include/c++/5/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
3937:/usr/include/c++/5/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
3938:/usr/include/c++/5/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
3939:/usr/include/c++/5/bits/basic_string.h **** 
3940:/usr/include/c++/5/bits/basic_string.h ****       /**
3941:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
3942:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3943:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3944:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String value to insert.
3945:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3946:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3947:/usr/include/c++/5/bits/basic_string.h ****        *
3948:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3949:/usr/include/c++/5/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
3950:/usr/include/c++/5/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
3951:/usr/include/c++/5/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
3952:/usr/include/c++/5/bits/basic_string.h ****       */
3953:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3954:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
3955:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
3956:/usr/include/c++/5/bits/basic_string.h **** 
3957:/usr/include/c++/5/bits/basic_string.h ****       /**
3958:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
3959:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3960:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3961:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
3962:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
3963:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3964:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3965:/usr/include/c++/5/bits/basic_string.h ****        *
3966:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3967:/usr/include/c++/5/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
3968:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
3969:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
3970:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
3971:/usr/include/c++/5/bits/basic_string.h ****       */
3972:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3973:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
GAS LISTING /tmp/cc2K2nX4.s 			page 502


3974:/usr/include/c++/5/bits/basic_string.h ****       {
3975:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
3976:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
3977:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
3978:/usr/include/c++/5/bits/basic_string.h ****       }
3979:/usr/include/c++/5/bits/basic_string.h **** 
3980:/usr/include/c++/5/bits/basic_string.h ****       /**
3981:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
3982:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
3983:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
3984:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string value to insert.
3985:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
3986:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
3987:/usr/include/c++/5/bits/basic_string.h ****        *
3988:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
3989:/usr/include/c++/5/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
3990:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
3991:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
3992:/usr/include/c++/5/bits/basic_string.h ****       */
3993:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
3994:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
3995:/usr/include/c++/5/bits/basic_string.h ****       {
3996:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
3997:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
3998:/usr/include/c++/5/bits/basic_string.h ****       }
3999:/usr/include/c++/5/bits/basic_string.h **** 
4000:/usr/include/c++/5/bits/basic_string.h ****       /**
4001:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4002:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4003:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4004:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4005:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to insert.
4006:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
4007:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4008:/usr/include/c++/5/bits/basic_string.h ****        *
4009:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4010:/usr/include/c++/5/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4011:/usr/include/c++/5/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4012:/usr/include/c++/5/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4013:/usr/include/c++/5/bits/basic_string.h ****       */
4014:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4015:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4016:/usr/include/c++/5/bits/basic_string.h ****       {
4017:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4018:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4019:/usr/include/c++/5/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4020:/usr/include/c++/5/bits/basic_string.h ****       }
4021:/usr/include/c++/5/bits/basic_string.h **** 
4022:/usr/include/c++/5/bits/basic_string.h ****       /**
4023:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4024:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4025:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4026:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4027:/usr/include/c++/5/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4028:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
4029:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4030:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 503


4031:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4032:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4033:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4034:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4035:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
4036:/usr/include/c++/5/bits/basic_string.h ****       */
4037:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
4038:/usr/include/c++/5/bits/basic_string.h ****         basic_string&
4039:/usr/include/c++/5/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4040:/usr/include/c++/5/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4041:/usr/include/c++/5/bits/basic_string.h ****         {
4042:/usr/include/c++/5/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4043:/usr/include/c++/5/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4044:/usr/include/c++/5/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4045:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4046:/usr/include/c++/5/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4047:/usr/include/c++/5/bits/basic_string.h **** 	}
4048:/usr/include/c++/5/bits/basic_string.h **** 
4049:/usr/include/c++/5/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4050:/usr/include/c++/5/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4051:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4052:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4053:/usr/include/c++/5/bits/basic_string.h ****       {
4054:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4055:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4056:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4057:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4058:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4059:/usr/include/c++/5/bits/basic_string.h ****       }
4060:/usr/include/c++/5/bits/basic_string.h **** 
4061:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4062:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4063:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4064:/usr/include/c++/5/bits/basic_string.h ****       {
4065:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4066:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4067:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4068:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4069:/usr/include/c++/5/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4070:/usr/include/c++/5/bits/basic_string.h ****       }
4071:/usr/include/c++/5/bits/basic_string.h **** 
4072:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4073:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4074:/usr/include/c++/5/bits/basic_string.h ****       {
4075:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4076:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4077:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4078:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4079:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4080:/usr/include/c++/5/bits/basic_string.h ****       }
4081:/usr/include/c++/5/bits/basic_string.h **** 
4082:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4083:/usr/include/c++/5/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4084:/usr/include/c++/5/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
4085:/usr/include/c++/5/bits/basic_string.h ****       {
4086:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4087:/usr/include/c++/5/bits/basic_string.h **** 				 && __i2 <= _M_iend());
GAS LISTING /tmp/cc2K2nX4.s 			page 504


4088:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4089:/usr/include/c++/5/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4090:/usr/include/c++/5/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4091:/usr/include/c++/5/bits/basic_string.h ****       }
4092:/usr/include/c++/5/bits/basic_string.h ****       
4093:/usr/include/c++/5/bits/basic_string.h **** #if __cplusplus >= 201103L
4094:/usr/include/c++/5/bits/basic_string.h ****       /**
4095:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
4096:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4097:/usr/include/c++/5/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4098:/usr/include/c++/5/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4099:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Reference to this string.
4100:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4101:/usr/include/c++/5/bits/basic_string.h ****        *
4102:/usr/include/c++/5/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4103:/usr/include/c++/5/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4104:/usr/include/c++/5/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4105:/usr/include/c++/5/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4106:/usr/include/c++/5/bits/basic_string.h ****        *  thrown.
4107:/usr/include/c++/5/bits/basic_string.h ****       */
4108:/usr/include/c++/5/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
4109:/usr/include/c++/5/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
4110:/usr/include/c++/5/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
4111:/usr/include/c++/5/bits/basic_string.h **** #endif // C++11
4112:/usr/include/c++/5/bits/basic_string.h **** 
4113:/usr/include/c++/5/bits/basic_string.h ****     private:
4114:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
4115:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
4116:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
4117:/usr/include/c++/5/bits/basic_string.h **** 			    _Integer __val, __true_type)
4118:/usr/include/c++/5/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
4119:/usr/include/c++/5/bits/basic_string.h **** 
4120:/usr/include/c++/5/bits/basic_string.h ****       template<class _InputIterator>
4121:/usr/include/c++/5/bits/basic_string.h **** 	basic_string&
4122:/usr/include/c++/5/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
4123:/usr/include/c++/5/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
4124:/usr/include/c++/5/bits/basic_string.h **** 
4125:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4126:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
4127:/usr/include/c++/5/bits/basic_string.h **** 		     _CharT __c);
4128:/usr/include/c++/5/bits/basic_string.h **** 
4129:/usr/include/c++/5/bits/basic_string.h ****       basic_string&
4130:/usr/include/c++/5/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
4131:/usr/include/c++/5/bits/basic_string.h **** 		      size_type __n2);
4132:/usr/include/c++/5/bits/basic_string.h **** 
4133:/usr/include/c++/5/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
4134:/usr/include/c++/5/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
4135:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4136:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4137:/usr/include/c++/5/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
4138:/usr/include/c++/5/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
4139:/usr/include/c++/5/bits/basic_string.h **** 	{
4140:/usr/include/c++/5/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
4141:/usr/include/c++/5/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
4142:/usr/include/c++/5/bits/basic_string.h **** 	}
4143:/usr/include/c++/5/bits/basic_string.h **** 
4144:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
GAS LISTING /tmp/cc2K2nX4.s 			page 505


4145:/usr/include/c++/5/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
4146:/usr/include/c++/5/bits/basic_string.h ****       template<class _Integer>
4147:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4148:/usr/include/c++/5/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
4149:/usr/include/c++/5/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
4150:/usr/include/c++/5/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
4151:/usr/include/c++/5/bits/basic_string.h **** 				    __end, __a); }
4152:/usr/include/c++/5/bits/basic_string.h **** 
4153:/usr/include/c++/5/bits/basic_string.h ****       static _CharT*
4154:/usr/include/c++/5/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
4155:/usr/include/c++/5/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
4156:/usr/include/c++/5/bits/basic_string.h **** 
4157:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4158:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4159:/usr/include/c++/5/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
4160:/usr/include/c++/5/bits/basic_string.h **** 	{
4161:/usr/include/c++/5/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
4162:/usr/include/c++/5/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
4163:/usr/include/c++/5/bits/basic_string.h ****         }
4164:/usr/include/c++/5/bits/basic_string.h **** 
4165:/usr/include/c++/5/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
4166:/usr/include/c++/5/bits/basic_string.h ****       template<class _InIterator>
4167:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4168:/usr/include/c++/5/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
4169:/usr/include/c++/5/bits/basic_string.h **** 		      input_iterator_tag);
4170:/usr/include/c++/5/bits/basic_string.h **** 
4171:/usr/include/c++/5/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
4172:/usr/include/c++/5/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
4173:/usr/include/c++/5/bits/basic_string.h ****       template<class _FwdIterator>
4174:/usr/include/c++/5/bits/basic_string.h ****         static _CharT*
4175:/usr/include/c++/5/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
4176:/usr/include/c++/5/bits/basic_string.h **** 		     forward_iterator_tag);
4177:/usr/include/c++/5/bits/basic_string.h **** 
4178:/usr/include/c++/5/bits/basic_string.h ****       static _CharT*
4179:/usr/include/c++/5/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
4180:/usr/include/c++/5/bits/basic_string.h **** 
4181:/usr/include/c++/5/bits/basic_string.h ****     public:
4182:/usr/include/c++/5/bits/basic_string.h **** 
4183:/usr/include/c++/5/bits/basic_string.h ****       /**
4184:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Copy substring into C string.
4185:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to copy value into.
4186:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
4187:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
4188:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Number of characters actually copied
4189:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4190:/usr/include/c++/5/bits/basic_string.h ****        *
4191:/usr/include/c++/5/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
4192:/usr/include/c++/5/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
4193:/usr/include/c++/5/bits/basic_string.h ****        *  out_of_range is thrown.
4194:/usr/include/c++/5/bits/basic_string.h ****       */
4195:/usr/include/c++/5/bits/basic_string.h ****       size_type
4196:/usr/include/c++/5/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
4197:/usr/include/c++/5/bits/basic_string.h **** 
4198:/usr/include/c++/5/bits/basic_string.h ****       /**
4199:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Swap contents with another string.
4200:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String to swap with.
4201:/usr/include/c++/5/bits/basic_string.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 506


4202:/usr/include/c++/5/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
4203:/usr/include/c++/5/bits/basic_string.h ****        *  time.
4204:/usr/include/c++/5/bits/basic_string.h ****       */
4205:/usr/include/c++/5/bits/basic_string.h ****       // PR 58265, this should be noexcept.
4206:/usr/include/c++/5/bits/basic_string.h ****       void
4207:/usr/include/c++/5/bits/basic_string.h ****       swap(basic_string& __s);
4208:/usr/include/c++/5/bits/basic_string.h **** 
4209:/usr/include/c++/5/bits/basic_string.h ****       // String operations:
4210:/usr/include/c++/5/bits/basic_string.h ****       /**
4211:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
4212:/usr/include/c++/5/bits/basic_string.h ****        *
4213:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4214:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
4215:/usr/include/c++/5/bits/basic_string.h ****       */
4216:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
4217:/usr/include/c++/5/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
4218:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
4219:/usr/include/c++/5/bits/basic_string.h **** 
4220:/usr/include/c++/5/bits/basic_string.h ****       /**
4221:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
4222:/usr/include/c++/5/bits/basic_string.h ****        *
4223:/usr/include/c++/5/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
4224:/usr/include/c++/5/bits/basic_string.h ****        *  happen.
4225:/usr/include/c++/5/bits/basic_string.h ****       */
4226:/usr/include/c++/5/bits/basic_string.h ****       const _CharT*
4227:/usr/include/c++/5/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
4228:/usr/include/c++/5/bits/basic_string.h ****       { return _M_data(); }
4229:/usr/include/c++/5/bits/basic_string.h **** 
4230:/usr/include/c++/5/bits/basic_string.h ****       /**
4231:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
4232:/usr/include/c++/5/bits/basic_string.h ****       */
4233:/usr/include/c++/5/bits/basic_string.h ****       allocator_type
4234:/usr/include/c++/5/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
4235:/usr/include/c++/5/bits/basic_string.h ****       { return _M_dataplus; }
4236:/usr/include/c++/5/bits/basic_string.h **** 
4237:/usr/include/c++/5/bits/basic_string.h ****       /**
4238:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C substring.
4239:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4240:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4241:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
4242:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4243:/usr/include/c++/5/bits/basic_string.h ****        *
4244:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
4245:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4246:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4247:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4248:/usr/include/c++/5/bits/basic_string.h ****       */
4249:/usr/include/c++/5/bits/basic_string.h ****       size_type
4250:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const;
4251:/usr/include/c++/5/bits/basic_string.h **** 
4252:/usr/include/c++/5/bits/basic_string.h ****       /**
4253:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a string.
4254:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
4255:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4256:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4257:/usr/include/c++/5/bits/basic_string.h ****        *
4258:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
GAS LISTING /tmp/cc2K2nX4.s 			page 507


4259:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
4260:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns npos.
4261:/usr/include/c++/5/bits/basic_string.h ****       */
4262:/usr/include/c++/5/bits/basic_string.h ****       size_type
4263:/usr/include/c++/5/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
4264:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4265:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
4266:/usr/include/c++/5/bits/basic_string.h **** 
4267:/usr/include/c++/5/bits/basic_string.h ****       /**
4268:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a C string.
4269:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4270:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4271:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
4272:/usr/include/c++/5/bits/basic_string.h ****        *
4273:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
4274:/usr/include/c++/5/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
4275:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4276:/usr/include/c++/5/bits/basic_string.h ****       */
4277:/usr/include/c++/5/bits/basic_string.h ****       size_type
4278:/usr/include/c++/5/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const
4279:/usr/include/c++/5/bits/basic_string.h ****       {
4280:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4281:/usr/include/c++/5/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
4282:/usr/include/c++/5/bits/basic_string.h ****       }
4283:/usr/include/c++/5/bits/basic_string.h **** 
4284:/usr/include/c++/5/bits/basic_string.h ****       /**
4285:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
4286:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4287:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4288:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4289:/usr/include/c++/5/bits/basic_string.h ****        *
4290:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
4291:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4292:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4293:/usr/include/c++/5/bits/basic_string.h ****       */
4294:/usr/include/c++/5/bits/basic_string.h ****       size_type
4295:/usr/include/c++/5/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
4296:/usr/include/c++/5/bits/basic_string.h **** 
4297:/usr/include/c++/5/bits/basic_string.h ****       /**
4298:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a string.
4299:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to locate.
4300:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4301:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4302:/usr/include/c++/5/bits/basic_string.h ****        *
4303:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
4304:/usr/include/c++/5/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
4305:/usr/include/c++/5/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
4306:/usr/include/c++/5/bits/basic_string.h ****       */
4307:/usr/include/c++/5/bits/basic_string.h ****       size_type
4308:/usr/include/c++/5/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
4309:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4310:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
4311:/usr/include/c++/5/bits/basic_string.h **** 
4312:/usr/include/c++/5/bits/basic_string.h ****       /**
4313:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
4314:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4315:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
GAS LISTING /tmp/cc2K2nX4.s 			page 508


4316:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4317:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
4318:/usr/include/c++/5/bits/basic_string.h ****        *
4319:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
4320:/usr/include/c++/5/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
4321:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
4322:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4323:/usr/include/c++/5/bits/basic_string.h ****       */
4324:/usr/include/c++/5/bits/basic_string.h ****       size_type
4325:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const;
4326:/usr/include/c++/5/bits/basic_string.h **** 
4327:/usr/include/c++/5/bits/basic_string.h ****       /**
4328:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a C string.
4329:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to locate.
4330:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
4331:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
4332:/usr/include/c++/5/bits/basic_string.h ****        *
4333:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
4334:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
4335:/usr/include/c++/5/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
4336:/usr/include/c++/5/bits/basic_string.h ****       */
4337:/usr/include/c++/5/bits/basic_string.h ****       size_type
4338:/usr/include/c++/5/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
4339:/usr/include/c++/5/bits/basic_string.h ****       {
4340:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4341:/usr/include/c++/5/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
4342:/usr/include/c++/5/bits/basic_string.h ****       }
4343:/usr/include/c++/5/bits/basic_string.h **** 
4344:/usr/include/c++/5/bits/basic_string.h ****       /**
4345:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
4346:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4347:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4348:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4349:/usr/include/c++/5/bits/basic_string.h ****        *
4350:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4351:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4352:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4353:/usr/include/c++/5/bits/basic_string.h ****       */
4354:/usr/include/c++/5/bits/basic_string.h ****       size_type
4355:/usr/include/c++/5/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
4356:/usr/include/c++/5/bits/basic_string.h **** 
4357:/usr/include/c++/5/bits/basic_string.h ****       /**
4358:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of string.
4359:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
4360:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4361:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4362:/usr/include/c++/5/bits/basic_string.h ****        *
4363:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4364:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4365:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4366:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4367:/usr/include/c++/5/bits/basic_string.h ****       */
4368:/usr/include/c++/5/bits/basic_string.h ****       size_type
4369:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
4370:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4371:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
4372:/usr/include/c++/5/bits/basic_string.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 509


4373:/usr/include/c++/5/bits/basic_string.h ****       /**
4374:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
4375:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4376:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4377:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4378:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4379:/usr/include/c++/5/bits/basic_string.h ****        *
4380:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4381:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4382:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4383:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4384:/usr/include/c++/5/bits/basic_string.h ****       */
4385:/usr/include/c++/5/bits/basic_string.h ****       size_type
4386:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
4387:/usr/include/c++/5/bits/basic_string.h **** 
4388:/usr/include/c++/5/bits/basic_string.h ****       /**
4389:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
4390:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
4391:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4392:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4393:/usr/include/c++/5/bits/basic_string.h ****        *
4394:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
4395:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4396:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4397:/usr/include/c++/5/bits/basic_string.h ****       */
4398:/usr/include/c++/5/bits/basic_string.h ****       size_type
4399:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
4400:/usr/include/c++/5/bits/basic_string.h ****       {
4401:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4402:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
4403:/usr/include/c++/5/bits/basic_string.h ****       }
4404:/usr/include/c++/5/bits/basic_string.h **** 
4405:/usr/include/c++/5/bits/basic_string.h ****       /**
4406:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character.
4407:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4408:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4409:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4410:/usr/include/c++/5/bits/basic_string.h ****        *
4411:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
4412:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
4413:/usr/include/c++/5/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
4414:/usr/include/c++/5/bits/basic_string.h ****        *
4415:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
4416:/usr/include/c++/5/bits/basic_string.h ****       */
4417:/usr/include/c++/5/bits/basic_string.h ****       size_type
4418:/usr/include/c++/5/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
4419:/usr/include/c++/5/bits/basic_string.h ****       { return this->find(__c, __pos); }
4420:/usr/include/c++/5/bits/basic_string.h **** 
4421:/usr/include/c++/5/bits/basic_string.h ****       /**
4422:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
4423:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
4424:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4425:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4426:/usr/include/c++/5/bits/basic_string.h ****        *
4427:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4428:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
4429:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
GAS LISTING /tmp/cc2K2nX4.s 			page 510


4430:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4431:/usr/include/c++/5/bits/basic_string.h ****       */
4432:/usr/include/c++/5/bits/basic_string.h ****       size_type
4433:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
4434:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4435:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
4436:/usr/include/c++/5/bits/basic_string.h **** 
4437:/usr/include/c++/5/bits/basic_string.h ****       /**
4438:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
4439:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4440:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4441:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
4442:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4443:/usr/include/c++/5/bits/basic_string.h ****        *
4444:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4445:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
4446:/usr/include/c++/5/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
4447:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4448:/usr/include/c++/5/bits/basic_string.h ****       */
4449:/usr/include/c++/5/bits/basic_string.h ****       size_type
4450:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
4451:/usr/include/c++/5/bits/basic_string.h **** 
4452:/usr/include/c++/5/bits/basic_string.h ****       /**
4453:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
4454:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
4455:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4456:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4457:/usr/include/c++/5/bits/basic_string.h ****        *
4458:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
4459:/usr/include/c++/5/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
4460:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4461:/usr/include/c++/5/bits/basic_string.h ****       */
4462:/usr/include/c++/5/bits/basic_string.h ****       size_type
4463:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
4464:/usr/include/c++/5/bits/basic_string.h ****       {
4465:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4466:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
4467:/usr/include/c++/5/bits/basic_string.h ****       }
4468:/usr/include/c++/5/bits/basic_string.h **** 
4469:/usr/include/c++/5/bits/basic_string.h ****       /**
4470:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character.
4471:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to locate.
4472:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4473:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4474:/usr/include/c++/5/bits/basic_string.h ****        *
4475:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
4476:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4477:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4478:/usr/include/c++/5/bits/basic_string.h ****        *
4479:/usr/include/c++/5/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
4480:/usr/include/c++/5/bits/basic_string.h ****       */
4481:/usr/include/c++/5/bits/basic_string.h ****       size_type
4482:/usr/include/c++/5/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
4483:/usr/include/c++/5/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
4484:/usr/include/c++/5/bits/basic_string.h **** 
4485:/usr/include/c++/5/bits/basic_string.h ****       /**
4486:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
GAS LISTING /tmp/cc2K2nX4.s 			page 511


4487:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4488:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4489:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4490:/usr/include/c++/5/bits/basic_string.h ****        *
4491:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
4492:/usr/include/c++/5/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
4493:/usr/include/c++/5/bits/basic_string.h ****        *  was found.  If not found, returns npos.
4494:/usr/include/c++/5/bits/basic_string.h ****       */
4495:/usr/include/c++/5/bits/basic_string.h ****       size_type
4496:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
4497:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4498:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
4499:/usr/include/c++/5/bits/basic_string.h **** 
4500:/usr/include/c++/5/bits/basic_string.h ****       /**
4501:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
4502:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4503:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
4504:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
4505:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4506:/usr/include/c++/5/bits/basic_string.h ****        *
4507:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4508:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
4509:/usr/include/c++/5/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
4510:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4511:/usr/include/c++/5/bits/basic_string.h ****       */
4512:/usr/include/c++/5/bits/basic_string.h ****       size_type
4513:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
4514:/usr/include/c++/5/bits/basic_string.h **** 			size_type __n) const;
4515:/usr/include/c++/5/bits/basic_string.h **** 
4516:/usr/include/c++/5/bits/basic_string.h ****       /**
4517:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
4518:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4519:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4520:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4521:/usr/include/c++/5/bits/basic_string.h ****        *
4522:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
4523:/usr/include/c++/5/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
4524:/usr/include/c++/5/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
4525:/usr/include/c++/5/bits/basic_string.h ****       */
4526:/usr/include/c++/5/bits/basic_string.h ****       size_type
4527:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
4528:/usr/include/c++/5/bits/basic_string.h ****       {
4529:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4530:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
4531:/usr/include/c++/5/bits/basic_string.h ****       }
4532:/usr/include/c++/5/bits/basic_string.h **** 
4533:/usr/include/c++/5/bits/basic_string.h ****       /**
4534:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find position of a different character.
4535:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
4536:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
4537:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of first occurrence.
4538:/usr/include/c++/5/bits/basic_string.h ****        *
4539:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
4540:/usr/include/c++/5/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
4541:/usr/include/c++/5/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
4542:/usr/include/c++/5/bits/basic_string.h ****       */
4543:/usr/include/c++/5/bits/basic_string.h ****       size_type
GAS LISTING /tmp/cc2K2nX4.s 			page 512


4544:/usr/include/c++/5/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
4545:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4546:/usr/include/c++/5/bits/basic_string.h **** 
4547:/usr/include/c++/5/bits/basic_string.h ****       /**
4548:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
4549:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
4550:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4551:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4552:/usr/include/c++/5/bits/basic_string.h ****        *
4553:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4554:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
4555:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4556:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4557:/usr/include/c++/5/bits/basic_string.h ****       */
4558:/usr/include/c++/5/bits/basic_string.h ****       size_type
4559:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
4560:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT
4561:/usr/include/c++/5/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
4562:/usr/include/c++/5/bits/basic_string.h **** 
4563:/usr/include/c++/5/bits/basic_string.h ****       /**
4564:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
4565:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4566:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
4567:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
4568:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4569:/usr/include/c++/5/bits/basic_string.h ****        *
4570:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
4571:/usr/include/c++/5/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
4572:/usr/include/c++/5/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
4573:/usr/include/c++/5/bits/basic_string.h ****        *  returns npos.
4574:/usr/include/c++/5/bits/basic_string.h ****       */
4575:/usr/include/c++/5/bits/basic_string.h ****       size_type
4576:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
4577:/usr/include/c++/5/bits/basic_string.h **** 		       size_type __n) const;
4578:/usr/include/c++/5/bits/basic_string.h ****       /**
4579:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
4580:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
4581:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4582:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
4583:/usr/include/c++/5/bits/basic_string.h ****        *
4584:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
4585:/usr/include/c++/5/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
4586:/usr/include/c++/5/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
4587:/usr/include/c++/5/bits/basic_string.h ****        *  npos.
4588:/usr/include/c++/5/bits/basic_string.h ****       */
4589:/usr/include/c++/5/bits/basic_string.h ****       size_type
4590:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
4591:/usr/include/c++/5/bits/basic_string.h ****       {
4592:/usr/include/c++/5/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4593:/usr/include/c++/5/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
4594:/usr/include/c++/5/bits/basic_string.h ****       }
4595:/usr/include/c++/5/bits/basic_string.h **** 
4596:/usr/include/c++/5/bits/basic_string.h ****       /**
4597:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Find last position of a different character.
4598:/usr/include/c++/5/bits/basic_string.h ****        *  @param __c  Character to avoid.
4599:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
4600:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Index of last occurrence.
GAS LISTING /tmp/cc2K2nX4.s 			page 513


4601:/usr/include/c++/5/bits/basic_string.h ****        *
4602:/usr/include/c++/5/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
4603:/usr/include/c++/5/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
4604:/usr/include/c++/5/bits/basic_string.h ****        *  found.  If not found, returns npos.
4605:/usr/include/c++/5/bits/basic_string.h ****       */
4606:/usr/include/c++/5/bits/basic_string.h ****       size_type
4607:/usr/include/c++/5/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
4608:/usr/include/c++/5/bits/basic_string.h **** 	_GLIBCXX_NOEXCEPT;
4609:/usr/include/c++/5/bits/basic_string.h **** 
4610:/usr/include/c++/5/bits/basic_string.h ****       /**
4611:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Get a substring.
4612:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
4613:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
4614:/usr/include/c++/5/bits/basic_string.h ****        *  @return  The new string.
4615:/usr/include/c++/5/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
4616:/usr/include/c++/5/bits/basic_string.h ****        *
4617:/usr/include/c++/5/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
4618:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
4619:/usr/include/c++/5/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
4620:/usr/include/c++/5/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
4621:/usr/include/c++/5/bits/basic_string.h ****       */
4622:/usr/include/c++/5/bits/basic_string.h ****       basic_string
4623:/usr/include/c++/5/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
4624:/usr/include/c++/5/bits/basic_string.h ****       { return basic_string(*this,
4625:/usr/include/c++/5/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
4626:/usr/include/c++/5/bits/basic_string.h **** 
4627:/usr/include/c++/5/bits/basic_string.h ****       /**
4628:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a string.
4629:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4630:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4631:/usr/include/c++/5/bits/basic_string.h ****        *
4632:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
4633:/usr/include/c++/5/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
4634:/usr/include/c++/5/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
4635:/usr/include/c++/5/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
4636:/usr/include/c++/5/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
4637:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
4638:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4639:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4640:/usr/include/c++/5/bits/basic_string.h ****       */
4641:/usr/include/c++/5/bits/basic_string.h ****       int
4642:/usr/include/c++/5/bits/basic_string.h ****       compare(const basic_string& __str) const
4643:/usr/include/c++/5/bits/basic_string.h ****       {
4644:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __size = this->size();
4645:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __osize = __str.size();
4646:/usr/include/c++/5/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
4647:/usr/include/c++/5/bits/basic_string.h **** 
4648:/usr/include/c++/5/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
4649:/usr/include/c++/5/bits/basic_string.h **** 	if (!__r)
4650:/usr/include/c++/5/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
4651:/usr/include/c++/5/bits/basic_string.h **** 	return __r;
4652:/usr/include/c++/5/bits/basic_string.h ****       }
4653:/usr/include/c++/5/bits/basic_string.h **** 
4654:/usr/include/c++/5/bits/basic_string.h ****       /**
4655:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a string.
4656:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4657:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
GAS LISTING /tmp/cc2K2nX4.s 			page 514


4658:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4659:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4660:/usr/include/c++/5/bits/basic_string.h ****        *
4661:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
4662:/usr/include/c++/5/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
4663:/usr/include/c++/5/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
4664:/usr/include/c++/5/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
4665:/usr/include/c++/5/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
4666:/usr/include/c++/5/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
4667:/usr/include/c++/5/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
4668:/usr/include/c++/5/bits/basic_string.h ****        *  strings by calling
4669:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
4670:/usr/include/c++/5/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
4671:/usr/include/c++/5/bits/basic_string.h ****        *  the shorter one is ordered first.
4672:/usr/include/c++/5/bits/basic_string.h ****       */
4673:/usr/include/c++/5/bits/basic_string.h ****       int
4674:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
4675:/usr/include/c++/5/bits/basic_string.h **** 
4676:/usr/include/c++/5/bits/basic_string.h ****       /**
4677:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
4678:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
4679:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4680:/usr/include/c++/5/bits/basic_string.h ****        *  @param __str  String to compare against.
4681:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
4682:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
4683:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4684:/usr/include/c++/5/bits/basic_string.h ****        *
4685:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4686:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
4687:/usr/include/c++/5/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
4688:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
4689:/usr/include/c++/5/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
4690:/usr/include/c++/5/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
4691:/usr/include/c++/5/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
4692:/usr/include/c++/5/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
4693:/usr/include/c++/5/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
4694:/usr/include/c++/5/bits/basic_string.h ****        *  calling
4695:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
4696:/usr/include/c++/5/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
4697:/usr/include/c++/5/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
4698:/usr/include/c++/5/bits/basic_string.h ****       */
4699:/usr/include/c++/5/bits/basic_string.h ****       int
4700:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
4701:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __pos2, size_type __n2) const;
4702:/usr/include/c++/5/bits/basic_string.h **** 
4703:/usr/include/c++/5/bits/basic_string.h ****       /**
4704:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare to a C string.
4705:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
4706:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4707:/usr/include/c++/5/bits/basic_string.h ****        *
4708:/usr/include/c++/5/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
4709:/usr/include/c++/5/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
4710:/usr/include/c++/5/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
4711:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
4712:/usr/include/c++/5/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
4713:/usr/include/c++/5/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
4714:/usr/include/c++/5/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
GAS LISTING /tmp/cc2K2nX4.s 			page 515


4715:/usr/include/c++/5/bits/basic_string.h ****        *  ordered first.
4716:/usr/include/c++/5/bits/basic_string.h ****       */
4717:/usr/include/c++/5/bits/basic_string.h ****       int
4718:/usr/include/c++/5/bits/basic_string.h ****       compare(const _CharT* __s) const;
4719:/usr/include/c++/5/bits/basic_string.h **** 
4720:/usr/include/c++/5/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
4721:/usr/include/c++/5/bits/basic_string.h ****       // 5 String::compare specification questionable
4722:/usr/include/c++/5/bits/basic_string.h ****       /**
4723:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
4724:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4725:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4726:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  C string to compare against.
4727:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4728:/usr/include/c++/5/bits/basic_string.h ****        *
4729:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4730:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
4731:/usr/include/c++/5/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
4732:/usr/include/c++/5/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
4733:/usr/include/c++/5/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
4734:/usr/include/c++/5/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
4735:/usr/include/c++/5/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
4736:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two string by calling
4737:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
4738:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4739:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
4740:/usr/include/c++/5/bits/basic_string.h ****       */
4741:/usr/include/c++/5/bits/basic_string.h ****       int
4742:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
4743:/usr/include/c++/5/bits/basic_string.h **** 
4744:/usr/include/c++/5/bits/basic_string.h ****       /**
4745:/usr/include/c++/5/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
4746:/usr/include/c++/5/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
4747:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
4748:/usr/include/c++/5/bits/basic_string.h ****        *  @param __s  character %array to compare against.
4749:/usr/include/c++/5/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
4750:/usr/include/c++/5/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
4751:/usr/include/c++/5/bits/basic_string.h ****        *
4752:/usr/include/c++/5/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
4753:/usr/include/c++/5/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
4754:/usr/include/c++/5/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
4755:/usr/include/c++/5/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
4756:/usr/include/c++/5/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
4757:/usr/include/c++/5/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
4758:/usr/include/c++/5/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
4759:/usr/include/c++/5/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
4760:/usr/include/c++/5/bits/basic_string.h ****        *  function then compares the two strings by calling
4761:/usr/include/c++/5/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
4762:/usr/include/c++/5/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
4763:/usr/include/c++/5/bits/basic_string.h ****        *  one is ordered first.
4764:/usr/include/c++/5/bits/basic_string.h ****        *
4765:/usr/include/c++/5/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
4766:/usr/include/c++/5/bits/basic_string.h ****        *  no special meaning.
4767:/usr/include/c++/5/bits/basic_string.h ****       */
4768:/usr/include/c++/5/bits/basic_string.h ****       int
4769:/usr/include/c++/5/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
4770:/usr/include/c++/5/bits/basic_string.h **** 	      size_type __n2) const;
4771:/usr/include/c++/5/bits/basic_string.h ****   };
GAS LISTING /tmp/cc2K2nX4.s 			page 516


4772:/usr/include/c++/5/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
4773:/usr/include/c++/5/bits/basic_string.h **** 
4774:/usr/include/c++/5/bits/basic_string.h ****   // operator+
4775:/usr/include/c++/5/bits/basic_string.h ****   /**
4776:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate two strings.
4777:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4778:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4779:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4780:/usr/include/c++/5/bits/basic_string.h ****    */
4781:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4782:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
4783:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
4784:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
4785:/usr/include/c++/5/bits/basic_string.h ****     {
4786:/usr/include/c++/5/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
4787:/usr/include/c++/5/bits/basic_string.h ****       __str.append(__rhs);
4788:/usr/include/c++/5/bits/basic_string.h ****       return __str;
4789:/usr/include/c++/5/bits/basic_string.h ****     }
4790:/usr/include/c++/5/bits/basic_string.h **** 
4791:/usr/include/c++/5/bits/basic_string.h ****   /**
4792:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
4793:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4794:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4795:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
4796:/usr/include/c++/5/bits/basic_string.h ****    */
4797:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4798:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4799:/usr/include/c++/5/bits/basic_string.h ****     operator+(const _CharT* __lhs,
4800:/usr/include/c++/5/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
4801:/usr/include/c++/5/bits/basic_string.h **** 
4802:/usr/include/c++/5/bits/basic_string.h ****   /**
4803:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate character and string.
4804:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4805:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4806:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4807:/usr/include/c++/5/bits/basic_string.h ****    */
4808:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4809:/usr/include/c++/5/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
4810:/usr/include/c++/5/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
4811:/usr/include/c++/5/bits/basic_string.h **** 
4812:/usr/include/c++/5/bits/basic_string.h ****   /**
4813:/usr/include/c++/5/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
4814:/usr/include/c++/5/bits/basic_string.h ****    *  @param __lhs  First string.
4815:/usr/include/c++/5/bits/basic_string.h ****    *  @param __rhs  Last string.
4816:/usr/include/c++/5/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
4817:/usr/include/c++/5/bits/basic_string.h ****    */
4818:/usr/include/c++/5/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
4819:/usr/include/c++/5/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
4820:/usr/include/c++/5/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 15040              		.loc 14 4820 0
 15041              		.cfi_startproc
 15042              		.cfi_personality 0x3,__gxx_personality_v0
 15043              		.cfi_lsda 0x3,.LLSDA7271
 15044 0000 55       		pushq	%rbp
 15045              		.cfi_def_cfa_offset 16
 15046              		.cfi_offset 6, -16
 15047 0001 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 517


 15048              		.cfi_def_cfa_register 6
 15049 0004 53       		pushq	%rbx
 15050 0005 4883EC38 		subq	$56, %rsp
 15051              		.cfi_offset 3, -24
 15052 0009 48897DD8 		movq	%rdi, -40(%rbp)
 15053 000d 488975D0 		movq	%rsi, -48(%rbp)
 15054 0011 488955C8 		movq	%rdx, -56(%rbp)
 15055              		.loc 14 4820 0
 15056 0015 64488B04 		movq	%fs:40, %rax
 15056      25280000 
 15056      00
 15057 001e 488945E8 		movq	%rax, -24(%rbp)
 15058 0022 31C0     		xorl	%eax, %eax
4821:/usr/include/c++/5/bits/basic_string.h **** 	      const _CharT* __rhs)
4822:/usr/include/c++/5/bits/basic_string.h ****     {
4823:/usr/include/c++/5/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
 15059              		.loc 14 4823 0
 15060 0024 488B55D0 		movq	-48(%rbp), %rdx
 15061 0028 488B45D8 		movq	-40(%rbp), %rax
 15062 002c 4889D6   		movq	%rdx, %rsi
 15063 002f 4889C7   		movq	%rax, %rdi
 15064              	.LEHB172:
 15065 0032 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
 15065      00
 15066              	.LEHE172:
4824:/usr/include/c++/5/bits/basic_string.h ****       __str.append(__rhs);
 15067              		.loc 14 4824 0
 15068 0037 488B55C8 		movq	-56(%rbp), %rdx
 15069 003b 488B45D8 		movq	-40(%rbp), %rax
 15070 003f 4889D6   		movq	%rdx, %rsi
 15071 0042 4889C7   		movq	%rax, %rdi
 15072              	.LEHB173:
 15073 0045 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc
 15073      00
 15074              	.LEHE173:
4825:/usr/include/c++/5/bits/basic_string.h ****       return __str;
 15075              		.loc 14 4825 0
 15076 004a EB1A     		jmp	.L1261
 15077              	.L1260:
 15078 004c 4889C3   		movq	%rax, %rbx
 15079 004f 488B45D8 		movq	-40(%rbp), %rax
 15080 0053 4889C7   		movq	%rax, %rdi
 15081 0056 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
 15081      00
 15082 005b 4889D8   		movq	%rbx, %rax
 15083 005e 4889C7   		movq	%rax, %rdi
 15084              	.LEHB174:
 15085 0061 E8000000 		call	_Unwind_Resume
 15085      00
 15086              	.LEHE174:
 15087              	.L1261:
4826:/usr/include/c++/5/bits/basic_string.h ****     }
 15088              		.loc 14 4826 0
 15089 0066 488B45D8 		movq	-40(%rbp), %rax
 15090 006a 488B4DE8 		movq	-24(%rbp), %rcx
 15091 006e 6448330C 		xorq	%fs:40, %rcx
 15091      25280000 
GAS LISTING /tmp/cc2K2nX4.s 			page 518


 15091      00
 15092 0077 7405     		je	.L1259
 15093 0079 E8000000 		call	__stack_chk_fail
 15093      00
 15094              	.L1259:
 15095 007e 4883C438 		addq	$56, %rsp
 15096 0082 5B       		popq	%rbx
 15097 0083 5D       		popq	%rbp
 15098              		.cfi_def_cfa 7, 8
 15099 0084 C3       		ret
 15100              		.cfi_endproc
 15101              	.LFE7271:
 15102              		.section	.gcc_except_table
 15103              	.LLSDA7271:
 15104 0420 FF       		.byte	0xff
 15105 0421 FF       		.byte	0xff
 15106 0422 01       		.byte	0x1
 15107 0423 0C       		.uleb128 .LLSDACSE7271-.LLSDACSB7271
 15108              	.LLSDACSB7271:
 15109 0424 32       		.uleb128 .LEHB172-.LFB7271
 15110 0425 05       		.uleb128 .LEHE172-.LEHB172
 15111 0426 00       		.uleb128 0
 15112 0427 00       		.uleb128 0
 15113 0428 45       		.uleb128 .LEHB173-.LFB7271
 15114 0429 05       		.uleb128 .LEHE173-.LEHB173
 15115 042a 4C       		.uleb128 .L1260-.LFB7271
 15116 042b 00       		.uleb128 0
 15117 042c 61       		.uleb128 .LEHB174-.LFB7271
 15118 042d 05       		.uleb128 .LEHE174-.LEHB174
 15119 042e 00       		.uleb128 0
 15120 042f 00       		.uleb128 0
 15121              	.LLSDACSE7271:
 15122              		.section	.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_,"axG
 15124              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EEC2Ev,"axG",@progbits,_ZNSt6vectorI10vector_varSaIS
 15125              		.align 2
 15126              		.weak	_ZNSt6vectorI10vector_varSaIS0_EEC2Ev
 15128              	_ZNSt6vectorI10vector_varSaIS0_EEC2Ev:
 15129              	.LFB7316:
 15130              		.file 15 "/usr/include/c++/5/bits/stl_vector.h"
   1:/usr/include/c++/5/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_vector.h **** 
   3:/usr/include/c++/5/bits/stl_vector.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_vector.h **** //
   5:/usr/include/c++/5/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_vector.h **** 
  11:/usr/include/c++/5/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_vector.h **** 
  16:/usr/include/c++/5/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
GAS LISTING /tmp/cc2K2nX4.s 			page 519


  19:/usr/include/c++/5/bits/stl_vector.h **** 
  20:/usr/include/c++/5/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_vector.h **** 
  25:/usr/include/c++/5/bits/stl_vector.h **** /*
  26:/usr/include/c++/5/bits/stl_vector.h ****  *
  27:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_vector.h ****  *
  30:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_vector.h ****  *
  38:/usr/include/c++/5/bits/stl_vector.h ****  *
  39:/usr/include/c++/5/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/5/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_vector.h ****  *
  42:/usr/include/c++/5/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_vector.h ****  */
  50:/usr/include/c++/5/bits/stl_vector.h **** 
  51:/usr/include/c++/5/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/5/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/stl_vector.h ****  */
  55:/usr/include/c++/5/bits/stl_vector.h **** 
  56:/usr/include/c++/5/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/5/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/5/bits/stl_vector.h **** 
  59:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/5/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/5/bits/stl_vector.h **** #endif
  65:/usr/include/c++/5/bits/stl_vector.h **** 
  66:/usr/include/c++/5/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/5/bits/stl_vector.h **** {
  68:/usr/include/c++/5/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/5/bits/stl_vector.h **** 
  70:/usr/include/c++/5/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/5/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/5/bits/stl_vector.h ****     {
  74:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/5/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
GAS LISTING /tmp/cc2K2nX4.s 			page 520


  76:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/5/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/5/bits/stl_vector.h **** 
  79:/usr/include/c++/5/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/5/bits/stl_vector.h ****       {
  82:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/5/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/5/bits/stl_vector.h **** 
  86:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  88:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/5/bits/stl_vector.h **** 
  90:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
  91:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  92:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/5/bits/stl_vector.h **** 
  94:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/5/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
  96:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_start(), _M_finish(), _M_end_of_storage()
  98:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/5/bits/stl_vector.h **** #endif
 100:/usr/include/c++/5/bits/stl_vector.h **** 
 101:/usr/include/c++/5/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
 102:/usr/include/c++/5/bits/stl_vector.h **** 	{
 103:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/5/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/5/bits/stl_vector.h **** 	}
 107:/usr/include/c++/5/bits/stl_vector.h ****       };
 108:/usr/include/c++/5/bits/stl_vector.h ****       
 109:/usr/include/c++/5/bits/stl_vector.h ****     public:
 110:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/5/bits/stl_vector.h **** 
 112:/usr/include/c++/5/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/5/bits/stl_vector.h **** 
 116:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/5/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/5/bits/stl_vector.h **** 
 120:/usr/include/c++/5/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/5/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/5/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/5/bits/stl_vector.h **** 
 124:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/5/bits/stl_vector.h **** 
 127:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 128:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/5/bits/stl_vector.h **** 
 130:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
GAS LISTING /tmp/cc2K2nX4.s 			page 521


 133:/usr/include/c++/5/bits/stl_vector.h **** 
 134:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/5/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/5/bits/stl_vector.h **** 
 138:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 140:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/5/bits/stl_vector.h **** 
 142:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x) noexcept
 143:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/5/bits/stl_vector.h **** 
 146:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/5/bits/stl_vector.h ****       {
 149:/usr/include/c++/5/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/5/bits/stl_vector.h **** 	else
 152:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/5/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/5/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/5/bits/stl_vector.h ****       }
 157:/usr/include/c++/5/bits/stl_vector.h **** #endif
 158:/usr/include/c++/5/bits/stl_vector.h **** 
 159:/usr/include/c++/5/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 160:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/5/bits/stl_vector.h **** 
 163:/usr/include/c++/5/bits/stl_vector.h ****     public:
 164:/usr/include/c++/5/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/5/bits/stl_vector.h **** 
 166:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/5/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/5/bits/stl_vector.h ****       {
 169:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 170:/usr/include/c++/5/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 171:/usr/include/c++/5/bits/stl_vector.h ****       }
 172:/usr/include/c++/5/bits/stl_vector.h **** 
 173:/usr/include/c++/5/bits/stl_vector.h ****       void
 174:/usr/include/c++/5/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 175:/usr/include/c++/5/bits/stl_vector.h ****       {
 176:/usr/include/c++/5/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 177:/usr/include/c++/5/bits/stl_vector.h **** 	if (__p)
 178:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 179:/usr/include/c++/5/bits/stl_vector.h ****       }
 180:/usr/include/c++/5/bits/stl_vector.h **** 
 181:/usr/include/c++/5/bits/stl_vector.h ****     private:
 182:/usr/include/c++/5/bits/stl_vector.h ****       void
 183:/usr/include/c++/5/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 184:/usr/include/c++/5/bits/stl_vector.h ****       {
 185:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 186:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 187:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 188:/usr/include/c++/5/bits/stl_vector.h ****       }
 189:/usr/include/c++/5/bits/stl_vector.h ****     };
GAS LISTING /tmp/cc2K2nX4.s 			page 522


 190:/usr/include/c++/5/bits/stl_vector.h **** 
 191:/usr/include/c++/5/bits/stl_vector.h **** 
 192:/usr/include/c++/5/bits/stl_vector.h ****   /**
 193:/usr/include/c++/5/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 194:/usr/include/c++/5/bits/stl_vector.h ****    *  individual elements in any order.
 195:/usr/include/c++/5/bits/stl_vector.h ****    *
 196:/usr/include/c++/5/bits/stl_vector.h ****    *  @ingroup sequences
 197:/usr/include/c++/5/bits/stl_vector.h ****    *
 198:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 199:/usr/include/c++/5/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 200:/usr/include/c++/5/bits/stl_vector.h ****    *
 201:/usr/include/c++/5/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 202:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 203:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 204:/usr/include/c++/5/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 205:/usr/include/c++/5/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 206:/usr/include/c++/5/bits/stl_vector.h ****    *
 207:/usr/include/c++/5/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 208:/usr/include/c++/5/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 209:/usr/include/c++/5/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 210:/usr/include/c++/5/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 211:/usr/include/c++/5/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 212:/usr/include/c++/5/bits/stl_vector.h ****   */
 213:/usr/include/c++/5/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 214:/usr/include/c++/5/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 215:/usr/include/c++/5/bits/stl_vector.h ****     {
 216:/usr/include/c++/5/bits/stl_vector.h ****       // Concept requirements.
 217:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 218:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 219:/usr/include/c++/5/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 220:/usr/include/c++/5/bits/stl_vector.h ****       
 221:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 222:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 223:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 224:/usr/include/c++/5/bits/stl_vector.h **** 
 225:/usr/include/c++/5/bits/stl_vector.h ****     public:
 226:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Tp					 value_type;
 227:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 228:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 229:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 230:/usr/include/c++/5/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 231:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 232:/usr/include/c++/5/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 233:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator;
 234:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 235:/usr/include/c++/5/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 236:/usr/include/c++/5/bits/stl_vector.h ****       typedef size_t					 size_type;
 237:/usr/include/c++/5/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 238:/usr/include/c++/5/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 239:/usr/include/c++/5/bits/stl_vector.h **** 
 240:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 241:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_allocate;
 242:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_deallocate;
 243:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_impl;
 244:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 245:/usr/include/c++/5/bits/stl_vector.h **** 
 246:/usr/include/c++/5/bits/stl_vector.h ****     public:
GAS LISTING /tmp/cc2K2nX4.s 			page 523


 247:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 248:/usr/include/c++/5/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 249:/usr/include/c++/5/bits/stl_vector.h **** 
 250:/usr/include/c++/5/bits/stl_vector.h ****       /**
 251:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 252:/usr/include/c++/5/bits/stl_vector.h ****        */
 253:/usr/include/c++/5/bits/stl_vector.h ****       vector()
 15131              		.loc 15 253 0
 15132              		.cfi_startproc
 15133              		.cfi_personality 0x3,__gxx_personality_v0
 15134              		.cfi_lsda 0x3,.LLSDA7316
 15135 0000 55       		pushq	%rbp
 15136              		.cfi_def_cfa_offset 16
 15137              		.cfi_offset 6, -16
 15138 0001 4889E5   		movq	%rsp, %rbp
 15139              		.cfi_def_cfa_register 6
 15140 0004 4883EC10 		subq	$16, %rsp
 15141 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15142              	.LBB91:
 254:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 255:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(is_nothrow_default_constructible<_Alloc>::value)
 256:/usr/include/c++/5/bits/stl_vector.h **** #endif
 257:/usr/include/c++/5/bits/stl_vector.h ****       : _Base() { }
 15143              		.loc 15 257 0
 15144 000c 488B45F8 		movq	-8(%rbp), %rax
 15145 0010 4889C7   		movq	%rax, %rdi
 15146 0013 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev
 15146      00
 15147              	.LBE91:
 15148 0018 90       		nop
 15149 0019 C9       		leave
 15150              		.cfi_def_cfa 7, 8
 15151 001a C3       		ret
 15152              		.cfi_endproc
 15153              	.LFE7316:
 15154              		.section	.gcc_except_table
 15155              	.LLSDA7316:
 15156 0430 FF       		.byte	0xff
 15157 0431 FF       		.byte	0xff
 15158 0432 01       		.byte	0x1
 15159 0433 00       		.uleb128 .LLSDACSE7316-.LLSDACSB7316
 15160              	.LLSDACSB7316:
 15161              	.LLSDACSE7316:
 15162              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EEC2Ev,"axG",@progbits,_ZNSt6vectorI10vector_varSaIS
 15164              		.weak	_ZNSt6vectorI10vector_varSaIS0_EEC1Ev
 15165              		.set	_ZNSt6vectorI10vector_varSaIS0_EEC1Ev,_ZNSt6vectorI10vector_varSaIS0_EEC2Ev
 15166              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EED2Ev,"axG",@progbits,_ZNSt6vectorI10vector_varSaIS
 15167              		.align 2
 15168              		.weak	_ZNSt6vectorI10vector_varSaIS0_EED2Ev
 15170              	_ZNSt6vectorI10vector_varSaIS0_EED2Ev:
 15171              	.LFB7319:
 258:/usr/include/c++/5/bits/stl_vector.h **** 
 259:/usr/include/c++/5/bits/stl_vector.h ****       /**
 260:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 261:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 262:/usr/include/c++/5/bits/stl_vector.h ****        */
 263:/usr/include/c++/5/bits/stl_vector.h ****       explicit
GAS LISTING /tmp/cc2K2nX4.s 			page 524


 264:/usr/include/c++/5/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 265:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a) { }
 266:/usr/include/c++/5/bits/stl_vector.h **** 
 267:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 268:/usr/include/c++/5/bits/stl_vector.h ****       /**
 269:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 270:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 271:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 272:/usr/include/c++/5/bits/stl_vector.h ****        *
 273:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 274:/usr/include/c++/5/bits/stl_vector.h ****        *  constructed elements.
 275:/usr/include/c++/5/bits/stl_vector.h ****        */
 276:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 277:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 278:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 279:/usr/include/c++/5/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 280:/usr/include/c++/5/bits/stl_vector.h **** 
 281:/usr/include/c++/5/bits/stl_vector.h ****       /**
 282:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 283:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 284:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 285:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 286:/usr/include/c++/5/bits/stl_vector.h ****        *
 287:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 288:/usr/include/c++/5/bits/stl_vector.h ****        */
 289:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 290:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 291:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 292:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 293:/usr/include/c++/5/bits/stl_vector.h **** #else
 294:/usr/include/c++/5/bits/stl_vector.h ****       /**
 295:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 296:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 297:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 298:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 299:/usr/include/c++/5/bits/stl_vector.h ****        *
 300:/usr/include/c++/5/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 301:/usr/include/c++/5/bits/stl_vector.h ****        */
 302:/usr/include/c++/5/bits/stl_vector.h ****       explicit
 303:/usr/include/c++/5/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 304:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 305:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__n, __a)
 306:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 307:/usr/include/c++/5/bits/stl_vector.h **** #endif
 308:/usr/include/c++/5/bits/stl_vector.h **** 
 309:/usr/include/c++/5/bits/stl_vector.h ****       /**
 310:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 311:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 312:/usr/include/c++/5/bits/stl_vector.h ****        *
 313:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 314:/usr/include/c++/5/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 315:/usr/include/c++/5/bits/stl_vector.h ****        *  but any extra memory in
 316:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 317:/usr/include/c++/5/bits/stl_vector.h ****        */
 318:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x)
 319:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(),
 320:/usr/include/c++/5/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
GAS LISTING /tmp/cc2K2nX4.s 			page 525


 321:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 322:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 323:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 324:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 325:/usr/include/c++/5/bits/stl_vector.h ****       }
 326:/usr/include/c++/5/bits/stl_vector.h **** 
 327:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 328:/usr/include/c++/5/bits/stl_vector.h ****       /**
 329:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 330:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 331:/usr/include/c++/5/bits/stl_vector.h ****        *
 332:/usr/include/c++/5/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 333:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 334:/usr/include/c++/5/bits/stl_vector.h ****        */
 335:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 336:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 337:/usr/include/c++/5/bits/stl_vector.h **** 
 338:/usr/include/c++/5/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 339:/usr/include/c++/5/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 340:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 341:/usr/include/c++/5/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 342:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 343:/usr/include/c++/5/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 344:/usr/include/c++/5/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 345:/usr/include/c++/5/bits/stl_vector.h ****       }
 346:/usr/include/c++/5/bits/stl_vector.h **** 
 347:/usr/include/c++/5/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 348:/usr/include/c++/5/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 349:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_always_equal())
 350:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 351:/usr/include/c++/5/bits/stl_vector.h ****       {
 352:/usr/include/c++/5/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 353:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 354:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 355:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 356:/usr/include/c++/5/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 357:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 358:/usr/include/c++/5/bits/stl_vector.h **** 	    __rv.clear();
 359:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 360:/usr/include/c++/5/bits/stl_vector.h ****       }
 361:/usr/include/c++/5/bits/stl_vector.h **** 
 362:/usr/include/c++/5/bits/stl_vector.h ****       /**
 363:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 364:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 365:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 366:/usr/include/c++/5/bits/stl_vector.h ****        *
 367:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 368:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a __l.
 369:/usr/include/c++/5/bits/stl_vector.h ****        *
 370:/usr/include/c++/5/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 371:/usr/include/c++/5/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 372:/usr/include/c++/5/bits/stl_vector.h ****        */
 373:/usr/include/c++/5/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 374:/usr/include/c++/5/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 375:/usr/include/c++/5/bits/stl_vector.h ****       : _Base(__a)
 376:/usr/include/c++/5/bits/stl_vector.h ****       {
 377:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
GAS LISTING /tmp/cc2K2nX4.s 			page 526


 378:/usr/include/c++/5/bits/stl_vector.h **** 			    random_access_iterator_tag());
 379:/usr/include/c++/5/bits/stl_vector.h ****       }
 380:/usr/include/c++/5/bits/stl_vector.h **** #endif
 381:/usr/include/c++/5/bits/stl_vector.h **** 
 382:/usr/include/c++/5/bits/stl_vector.h ****       /**
 383:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 384:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 385:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 386:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __a  An allocator.
 387:/usr/include/c++/5/bits/stl_vector.h ****        *
 388:/usr/include/c++/5/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 389:/usr/include/c++/5/bits/stl_vector.h ****        *  [first,last).
 390:/usr/include/c++/5/bits/stl_vector.h ****        *
 391:/usr/include/c++/5/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 392:/usr/include/c++/5/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 393:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 394:/usr/include/c++/5/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 395:/usr/include/c++/5/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 396:/usr/include/c++/5/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 397:/usr/include/c++/5/bits/stl_vector.h ****        */
 398:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 399:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 400:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 401:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 402:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 403:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 404:/usr/include/c++/5/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 405:/usr/include/c++/5/bits/stl_vector.h **** #else
 406:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 407:/usr/include/c++/5/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 408:/usr/include/c++/5/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 409:/usr/include/c++/5/bits/stl_vector.h **** 	: _Base(__a)
 410:/usr/include/c++/5/bits/stl_vector.h ****         {
 411:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 412:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 413:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 414:/usr/include/c++/5/bits/stl_vector.h **** 	}
 415:/usr/include/c++/5/bits/stl_vector.h **** #endif
 416:/usr/include/c++/5/bits/stl_vector.h **** 
 417:/usr/include/c++/5/bits/stl_vector.h ****       /**
 418:/usr/include/c++/5/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 419:/usr/include/c++/5/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 420:/usr/include/c++/5/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 421:/usr/include/c++/5/bits/stl_vector.h ****        *  responsibility.
 422:/usr/include/c++/5/bits/stl_vector.h ****        */
 423:/usr/include/c++/5/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 15172              		.loc 15 423 0
 15173              		.cfi_startproc
 15174              		.cfi_personality 0x3,__gxx_personality_v0
 15175              		.cfi_lsda 0x3,.LLSDA7319
 15176 0000 55       		pushq	%rbp
 15177              		.cfi_def_cfa_offset 16
 15178              		.cfi_offset 6, -16
 15179 0001 4889E5   		movq	%rsp, %rbp
 15180              		.cfi_def_cfa_register 6
 15181 0004 4883EC10 		subq	$16, %rsp
 15182 0008 48897DF8 		movq	%rdi, -8(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 527


 15183              	.LBB92:
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 425:/usr/include/c++/5/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 15184              		.loc 15 425 0
 15185 000c 488B45F8 		movq	-8(%rbp), %rax
 15186 0010 4889C7   		movq	%rax, %rdi
 15187 0013 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 15187      00
 15188 0018 4889C2   		movq	%rax, %rdx
 424:/usr/include/c++/5/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 15189              		.loc 15 424 0
 15190 001b 488B45F8 		movq	-8(%rbp), %rax
 15191 001f 488B4808 		movq	8(%rax), %rcx
 15192 0023 488B45F8 		movq	-8(%rbp), %rax
 15193 0027 488B00   		movq	(%rax), %rax
 15194 002a 4889CE   		movq	%rcx, %rsi
 15195 002d 4889C7   		movq	%rax, %rdi
 15196 0030 E8000000 		call	_ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E
 15196      00
 15197              		.loc 15 425 0
 15198 0035 488B45F8 		movq	-8(%rbp), %rax
 15199 0039 4889C7   		movq	%rax, %rdi
 15200 003c E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev
 15200      00
 15201              	.LBE92:
 15202 0041 90       		nop
 15203 0042 C9       		leave
 15204              		.cfi_def_cfa 7, 8
 15205 0043 C3       		ret
 15206              		.cfi_endproc
 15207              	.LFE7319:
 15208              		.section	.gcc_except_table
 15209              	.LLSDA7319:
 15210 0434 FF       		.byte	0xff
 15211 0435 FF       		.byte	0xff
 15212 0436 01       		.byte	0x1
 15213 0437 00       		.uleb128 .LLSDACSE7319-.LLSDACSB7319
 15214              	.LLSDACSB7319:
 15215              	.LLSDACSE7319:
 15216              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EED2Ev,"axG",@progbits,_ZNSt6vectorI10vector_varSaIS
 15218              		.weak	_ZNSt6vectorI10vector_varSaIS0_EED1Ev
 15219              		.set	_ZNSt6vectorI10vector_varSaIS0_EED1Ev,_ZNSt6vectorI10vector_varSaIS0_EED2Ev
 15220              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EEixEm,"axG",@progbits,_ZNSt6vectorI10vector_varSaIS
 15221              		.align 2
 15222              		.weak	_ZNSt6vectorI10vector_varSaIS0_EEixEm
 15224              	_ZNSt6vectorI10vector_varSaIS0_EEixEm:
 15225              	.LFB7323:
 426:/usr/include/c++/5/bits/stl_vector.h **** 
 427:/usr/include/c++/5/bits/stl_vector.h ****       /**
 428:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 429:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 430:/usr/include/c++/5/bits/stl_vector.h ****        *
 431:/usr/include/c++/5/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 432:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 433:/usr/include/c++/5/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 434:/usr/include/c++/5/bits/stl_vector.h ****        */
 435:/usr/include/c++/5/bits/stl_vector.h ****       vector&
GAS LISTING /tmp/cc2K2nX4.s 			page 528


 436:/usr/include/c++/5/bits/stl_vector.h ****       operator=(const vector& __x);
 437:/usr/include/c++/5/bits/stl_vector.h **** 
 438:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 439:/usr/include/c++/5/bits/stl_vector.h ****       /**
 440:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 441:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 442:/usr/include/c++/5/bits/stl_vector.h ****        *
 443:/usr/include/c++/5/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 444:/usr/include/c++/5/bits/stl_vector.h ****        *  if the allocators permit it).
 445:/usr/include/c++/5/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 446:/usr/include/c++/5/bits/stl_vector.h ****        */
 447:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 448:/usr/include/c++/5/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 449:/usr/include/c++/5/bits/stl_vector.h ****       {
 450:/usr/include/c++/5/bits/stl_vector.h ****         constexpr bool __move_storage =
 451:/usr/include/c++/5/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 452:/usr/include/c++/5/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 453:/usr/include/c++/5/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 454:/usr/include/c++/5/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 455:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 456:/usr/include/c++/5/bits/stl_vector.h ****       }
 457:/usr/include/c++/5/bits/stl_vector.h **** 
 458:/usr/include/c++/5/bits/stl_vector.h ****       /**
 459:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 460:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 461:/usr/include/c++/5/bits/stl_vector.h ****        *
 462:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 463:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 464:/usr/include/c++/5/bits/stl_vector.h ****        *
 465:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 466:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 467:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 468:/usr/include/c++/5/bits/stl_vector.h ****        */
 469:/usr/include/c++/5/bits/stl_vector.h ****       vector&
 470:/usr/include/c++/5/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 471:/usr/include/c++/5/bits/stl_vector.h ****       {
 472:/usr/include/c++/5/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 473:/usr/include/c++/5/bits/stl_vector.h **** 	return *this;
 474:/usr/include/c++/5/bits/stl_vector.h ****       }
 475:/usr/include/c++/5/bits/stl_vector.h **** #endif
 476:/usr/include/c++/5/bits/stl_vector.h **** 
 477:/usr/include/c++/5/bits/stl_vector.h ****       /**
 478:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 479:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 480:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 481:/usr/include/c++/5/bits/stl_vector.h ****        *
 482:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 483:/usr/include/c++/5/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 484:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 485:/usr/include/c++/5/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 486:/usr/include/c++/5/bits/stl_vector.h ****        */
 487:/usr/include/c++/5/bits/stl_vector.h ****       void
 488:/usr/include/c++/5/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 489:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 490:/usr/include/c++/5/bits/stl_vector.h **** 
 491:/usr/include/c++/5/bits/stl_vector.h ****       /**
 492:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
GAS LISTING /tmp/cc2K2nX4.s 			page 529


 493:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 494:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 495:/usr/include/c++/5/bits/stl_vector.h ****        *
 496:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 497:/usr/include/c++/5/bits/stl_vector.h ****        *  range [__first,__last).
 498:/usr/include/c++/5/bits/stl_vector.h ****        *
 499:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 500:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 501:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 502:/usr/include/c++/5/bits/stl_vector.h ****        */
 503:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 504:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
 505:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 506:/usr/include/c++/5/bits/stl_vector.h ****         void
 507:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 508:/usr/include/c++/5/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 509:/usr/include/c++/5/bits/stl_vector.h **** #else
 510:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
 511:/usr/include/c++/5/bits/stl_vector.h ****         void
 512:/usr/include/c++/5/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 513:/usr/include/c++/5/bits/stl_vector.h ****         {
 514:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 515:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 516:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 517:/usr/include/c++/5/bits/stl_vector.h **** 	}
 518:/usr/include/c++/5/bits/stl_vector.h **** #endif
 519:/usr/include/c++/5/bits/stl_vector.h **** 
 520:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 521:/usr/include/c++/5/bits/stl_vector.h ****       /**
 522:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 523:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 524:/usr/include/c++/5/bits/stl_vector.h ****        *
 525:/usr/include/c++/5/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 526:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer list @a __l.
 527:/usr/include/c++/5/bits/stl_vector.h ****        *
 528:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 529:/usr/include/c++/5/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 530:/usr/include/c++/5/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 531:/usr/include/c++/5/bits/stl_vector.h ****        */
 532:/usr/include/c++/5/bits/stl_vector.h ****       void
 533:/usr/include/c++/5/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 534:/usr/include/c++/5/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 535:/usr/include/c++/5/bits/stl_vector.h **** #endif
 536:/usr/include/c++/5/bits/stl_vector.h **** 
 537:/usr/include/c++/5/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 538:/usr/include/c++/5/bits/stl_vector.h ****       using _Base::get_allocator;
 539:/usr/include/c++/5/bits/stl_vector.h **** 
 540:/usr/include/c++/5/bits/stl_vector.h ****       // iterators
 541:/usr/include/c++/5/bits/stl_vector.h ****       /**
 542:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 543:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/5/bits/stl_vector.h ****        */
 546:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 547:/usr/include/c++/5/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/5/bits/stl_vector.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 530


 550:/usr/include/c++/5/bits/stl_vector.h ****       /**
 551:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 552:/usr/include/c++/5/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/5/bits/stl_vector.h ****        */
 555:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 556:/usr/include/c++/5/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 558:/usr/include/c++/5/bits/stl_vector.h **** 
 559:/usr/include/c++/5/bits/stl_vector.h ****       /**
 560:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 561:/usr/include/c++/5/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 562:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 563:/usr/include/c++/5/bits/stl_vector.h ****        */
 564:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 565:/usr/include/c++/5/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/5/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/5/bits/stl_vector.h **** 
 568:/usr/include/c++/5/bits/stl_vector.h ****       /**
 569:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 570:/usr/include/c++/5/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 571:/usr/include/c++/5/bits/stl_vector.h ****        *  ordinary element order.
 572:/usr/include/c++/5/bits/stl_vector.h ****        */
 573:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 574:/usr/include/c++/5/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 575:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 576:/usr/include/c++/5/bits/stl_vector.h **** 
 577:/usr/include/c++/5/bits/stl_vector.h ****       /**
 578:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 579:/usr/include/c++/5/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 580:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 581:/usr/include/c++/5/bits/stl_vector.h ****        */
 582:/usr/include/c++/5/bits/stl_vector.h ****       reverse_iterator
 583:/usr/include/c++/5/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 584:/usr/include/c++/5/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 585:/usr/include/c++/5/bits/stl_vector.h **** 
 586:/usr/include/c++/5/bits/stl_vector.h ****       /**
 587:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 588:/usr/include/c++/5/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 589:/usr/include/c++/5/bits/stl_vector.h ****        *  reverse element order.
 590:/usr/include/c++/5/bits/stl_vector.h ****        */
 591:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 592:/usr/include/c++/5/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 593:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 594:/usr/include/c++/5/bits/stl_vector.h **** 
 595:/usr/include/c++/5/bits/stl_vector.h ****       /**
 596:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 597:/usr/include/c++/5/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 598:/usr/include/c++/5/bits/stl_vector.h ****        *  in reverse element order.
 599:/usr/include/c++/5/bits/stl_vector.h ****        */
 600:/usr/include/c++/5/bits/stl_vector.h ****       reverse_iterator
 601:/usr/include/c++/5/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 602:/usr/include/c++/5/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 603:/usr/include/c++/5/bits/stl_vector.h **** 
 604:/usr/include/c++/5/bits/stl_vector.h ****       /**
 605:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 606:/usr/include/c++/5/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
GAS LISTING /tmp/cc2K2nX4.s 			page 531


 607:/usr/include/c++/5/bits/stl_vector.h ****        *  is done in reverse element order.
 608:/usr/include/c++/5/bits/stl_vector.h ****        */
 609:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 610:/usr/include/c++/5/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 611:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 612:/usr/include/c++/5/bits/stl_vector.h **** 
 613:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 614:/usr/include/c++/5/bits/stl_vector.h ****       /**
 615:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 616:/usr/include/c++/5/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 617:/usr/include/c++/5/bits/stl_vector.h ****        *  element order.
 618:/usr/include/c++/5/bits/stl_vector.h ****        */
 619:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 620:/usr/include/c++/5/bits/stl_vector.h ****       cbegin() const noexcept
 621:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 622:/usr/include/c++/5/bits/stl_vector.h **** 
 623:/usr/include/c++/5/bits/stl_vector.h ****       /**
 624:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 625:/usr/include/c++/5/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 626:/usr/include/c++/5/bits/stl_vector.h ****        *  ordinary element order.
 627:/usr/include/c++/5/bits/stl_vector.h ****        */
 628:/usr/include/c++/5/bits/stl_vector.h ****       const_iterator
 629:/usr/include/c++/5/bits/stl_vector.h ****       cend() const noexcept
 630:/usr/include/c++/5/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 631:/usr/include/c++/5/bits/stl_vector.h **** 
 632:/usr/include/c++/5/bits/stl_vector.h ****       /**
 633:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:/usr/include/c++/5/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 635:/usr/include/c++/5/bits/stl_vector.h ****        *  reverse element order.
 636:/usr/include/c++/5/bits/stl_vector.h ****        */
 637:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 638:/usr/include/c++/5/bits/stl_vector.h ****       crbegin() const noexcept
 639:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 640:/usr/include/c++/5/bits/stl_vector.h **** 
 641:/usr/include/c++/5/bits/stl_vector.h ****       /**
 642:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 643:/usr/include/c++/5/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 644:/usr/include/c++/5/bits/stl_vector.h ****        *  is done in reverse element order.
 645:/usr/include/c++/5/bits/stl_vector.h ****        */
 646:/usr/include/c++/5/bits/stl_vector.h ****       const_reverse_iterator
 647:/usr/include/c++/5/bits/stl_vector.h ****       crend() const noexcept
 648:/usr/include/c++/5/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 649:/usr/include/c++/5/bits/stl_vector.h **** #endif
 650:/usr/include/c++/5/bits/stl_vector.h **** 
 651:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.2] capacity
 652:/usr/include/c++/5/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 653:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 654:/usr/include/c++/5/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 655:/usr/include/c++/5/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 656:/usr/include/c++/5/bits/stl_vector.h **** 
 657:/usr/include/c++/5/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 658:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 659:/usr/include/c++/5/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 660:/usr/include/c++/5/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 661:/usr/include/c++/5/bits/stl_vector.h **** 
 662:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 663:/usr/include/c++/5/bits/stl_vector.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 532


 664:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 665:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 666:/usr/include/c++/5/bits/stl_vector.h ****        *
 667:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 668:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 669:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 670:/usr/include/c++/5/bits/stl_vector.h ****        *  default constructed elements are appended.
 671:/usr/include/c++/5/bits/stl_vector.h ****        */
 672:/usr/include/c++/5/bits/stl_vector.h ****       void
 673:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size)
 674:/usr/include/c++/5/bits/stl_vector.h ****       {
 675:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 676:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 677:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 678:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 679:/usr/include/c++/5/bits/stl_vector.h ****       }
 680:/usr/include/c++/5/bits/stl_vector.h **** 
 681:/usr/include/c++/5/bits/stl_vector.h ****       /**
 682:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 683:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 684:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 685:/usr/include/c++/5/bits/stl_vector.h ****        *
 686:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 687:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 688:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 689:/usr/include/c++/5/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 690:/usr/include/c++/5/bits/stl_vector.h ****        *  given data.
 691:/usr/include/c++/5/bits/stl_vector.h ****        */
 692:/usr/include/c++/5/bits/stl_vector.h ****       void
 693:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 694:/usr/include/c++/5/bits/stl_vector.h ****       {
 695:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 696:/usr/include/c++/5/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 697:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 698:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 699:/usr/include/c++/5/bits/stl_vector.h ****       }
 700:/usr/include/c++/5/bits/stl_vector.h **** #else
 701:/usr/include/c++/5/bits/stl_vector.h ****       /**
 702:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 703:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 704:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 705:/usr/include/c++/5/bits/stl_vector.h ****        *
 706:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 707:/usr/include/c++/5/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 708:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 709:/usr/include/c++/5/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 710:/usr/include/c++/5/bits/stl_vector.h ****        *  given data.
 711:/usr/include/c++/5/bits/stl_vector.h ****        */
 712:/usr/include/c++/5/bits/stl_vector.h ****       void
 713:/usr/include/c++/5/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 714:/usr/include/c++/5/bits/stl_vector.h ****       {
 715:/usr/include/c++/5/bits/stl_vector.h **** 	if (__new_size > size())
 716:/usr/include/c++/5/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 717:/usr/include/c++/5/bits/stl_vector.h **** 	else if (__new_size < size())
 718:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 719:/usr/include/c++/5/bits/stl_vector.h ****       }
 720:/usr/include/c++/5/bits/stl_vector.h **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 533


 721:/usr/include/c++/5/bits/stl_vector.h **** 
 722:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 723:/usr/include/c++/5/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 724:/usr/include/c++/5/bits/stl_vector.h ****       void
 725:/usr/include/c++/5/bits/stl_vector.h ****       shrink_to_fit()
 726:/usr/include/c++/5/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 727:/usr/include/c++/5/bits/stl_vector.h **** #endif
 728:/usr/include/c++/5/bits/stl_vector.h **** 
 729:/usr/include/c++/5/bits/stl_vector.h ****       /**
 730:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 731:/usr/include/c++/5/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 732:/usr/include/c++/5/bits/stl_vector.h ****        */
 733:/usr/include/c++/5/bits/stl_vector.h ****       size_type
 734:/usr/include/c++/5/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 735:/usr/include/c++/5/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 736:/usr/include/c++/5/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 737:/usr/include/c++/5/bits/stl_vector.h **** 
 738:/usr/include/c++/5/bits/stl_vector.h ****       /**
 739:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 740:/usr/include/c++/5/bits/stl_vector.h ****        *  equal end().)
 741:/usr/include/c++/5/bits/stl_vector.h ****        */
 742:/usr/include/c++/5/bits/stl_vector.h ****       bool
 743:/usr/include/c++/5/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 744:/usr/include/c++/5/bits/stl_vector.h ****       { return begin() == end(); }
 745:/usr/include/c++/5/bits/stl_vector.h **** 
 746:/usr/include/c++/5/bits/stl_vector.h ****       /**
 747:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 748:/usr/include/c++/5/bits/stl_vector.h ****        *          elements.
 749:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 750:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 751:/usr/include/c++/5/bits/stl_vector.h ****        *
 752:/usr/include/c++/5/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 753:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 754:/usr/include/c++/5/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 755:/usr/include/c++/5/bits/stl_vector.h ****        *  thrown.
 756:/usr/include/c++/5/bits/stl_vector.h ****        *
 757:/usr/include/c++/5/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 758:/usr/include/c++/5/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 759:/usr/include/c++/5/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 760:/usr/include/c++/5/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 761:/usr/include/c++/5/bits/stl_vector.h ****        *  and copying of %vector data.
 762:/usr/include/c++/5/bits/stl_vector.h ****        */
 763:/usr/include/c++/5/bits/stl_vector.h ****       void
 764:/usr/include/c++/5/bits/stl_vector.h ****       reserve(size_type __n);
 765:/usr/include/c++/5/bits/stl_vector.h **** 
 766:/usr/include/c++/5/bits/stl_vector.h ****       // element access
 767:/usr/include/c++/5/bits/stl_vector.h ****       /**
 768:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 769:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 770:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 771:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 772:/usr/include/c++/5/bits/stl_vector.h ****        *
 773:/usr/include/c++/5/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 774:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 775:/usr/include/c++/5/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 776:/usr/include/c++/5/bits/stl_vector.h ****        *  see at().)
 777:/usr/include/c++/5/bits/stl_vector.h ****        */
GAS LISTING /tmp/cc2K2nX4.s 			page 534


 778:/usr/include/c++/5/bits/stl_vector.h ****       reference
 779:/usr/include/c++/5/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 15226              		.loc 15 779 0
 15227              		.cfi_startproc
 15228 0000 55       		pushq	%rbp
 15229              		.cfi_def_cfa_offset 16
 15230              		.cfi_offset 6, -16
 15231 0001 4889E5   		movq	%rsp, %rbp
 15232              		.cfi_def_cfa_register 6
 15233 0004 48897DF8 		movq	%rdi, -8(%rbp)
 15234 0008 488975F0 		movq	%rsi, -16(%rbp)
 780:/usr/include/c++/5/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 15235              		.loc 15 780 0
 15236 000c 488B45F8 		movq	-8(%rbp), %rax
 15237 0010 488B00   		movq	(%rax), %rax
 15238 0013 488B55F0 		movq	-16(%rbp), %rdx
 15239 0017 48C1E205 		salq	$5, %rdx
 15240 001b 4801D0   		addq	%rdx, %rax
 15241 001e 5D       		popq	%rbp
 15242              		.cfi_def_cfa 7, 8
 15243 001f C3       		ret
 15244              		.cfi_endproc
 15245              	.LFE7323:
 15247              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_,"axG",@progbits,_ZNSt6vectorI10ve
 15248              		.align 2
 15249              		.weak	_ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_
 15251              	_ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_:
 15252              	.LFB7332:
 781:/usr/include/c++/5/bits/stl_vector.h **** 
 782:/usr/include/c++/5/bits/stl_vector.h ****       /**
 783:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 784:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 785:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 786:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 787:/usr/include/c++/5/bits/stl_vector.h ****        *
 788:/usr/include/c++/5/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 789:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 790:/usr/include/c++/5/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 791:/usr/include/c++/5/bits/stl_vector.h ****        *  see at().)
 792:/usr/include/c++/5/bits/stl_vector.h ****        */
 793:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 794:/usr/include/c++/5/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 795:/usr/include/c++/5/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 796:/usr/include/c++/5/bits/stl_vector.h **** 
 797:/usr/include/c++/5/bits/stl_vector.h ****     protected:
 798:/usr/include/c++/5/bits/stl_vector.h ****       /// Safety check used only from at().
 799:/usr/include/c++/5/bits/stl_vector.h ****       void
 800:/usr/include/c++/5/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 801:/usr/include/c++/5/bits/stl_vector.h ****       {
 802:/usr/include/c++/5/bits/stl_vector.h **** 	if (__n >= this->size())
 803:/usr/include/c++/5/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 804:/usr/include/c++/5/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
 805:/usr/include/c++/5/bits/stl_vector.h **** 				       "(which is %zu)"),
 806:/usr/include/c++/5/bits/stl_vector.h **** 				   __n, this->size());
 807:/usr/include/c++/5/bits/stl_vector.h ****       }
 808:/usr/include/c++/5/bits/stl_vector.h **** 
 809:/usr/include/c++/5/bits/stl_vector.h ****     public:
GAS LISTING /tmp/cc2K2nX4.s 			page 535


 810:/usr/include/c++/5/bits/stl_vector.h ****       /**
 811:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 812:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 813:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 814:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 815:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 816:/usr/include/c++/5/bits/stl_vector.h ****        *
 817:/usr/include/c++/5/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 818:/usr/include/c++/5/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 819:/usr/include/c++/5/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 820:/usr/include/c++/5/bits/stl_vector.h ****        */
 821:/usr/include/c++/5/bits/stl_vector.h ****       reference
 822:/usr/include/c++/5/bits/stl_vector.h ****       at(size_type __n)
 823:/usr/include/c++/5/bits/stl_vector.h ****       {
 824:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_check(__n);
 825:/usr/include/c++/5/bits/stl_vector.h **** 	return (*this)[__n]; 
 826:/usr/include/c++/5/bits/stl_vector.h ****       }
 827:/usr/include/c++/5/bits/stl_vector.h **** 
 828:/usr/include/c++/5/bits/stl_vector.h ****       /**
 829:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 830:/usr/include/c++/5/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 831:/usr/include/c++/5/bits/stl_vector.h ****        *  accessed.
 832:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 833:/usr/include/c++/5/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 834:/usr/include/c++/5/bits/stl_vector.h ****        *
 835:/usr/include/c++/5/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 836:/usr/include/c++/5/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 837:/usr/include/c++/5/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 838:/usr/include/c++/5/bits/stl_vector.h ****        */
 839:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 840:/usr/include/c++/5/bits/stl_vector.h ****       at(size_type __n) const
 841:/usr/include/c++/5/bits/stl_vector.h ****       {
 842:/usr/include/c++/5/bits/stl_vector.h **** 	_M_range_check(__n);
 843:/usr/include/c++/5/bits/stl_vector.h **** 	return (*this)[__n];
 844:/usr/include/c++/5/bits/stl_vector.h ****       }
 845:/usr/include/c++/5/bits/stl_vector.h **** 
 846:/usr/include/c++/5/bits/stl_vector.h ****       /**
 847:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 848:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 849:/usr/include/c++/5/bits/stl_vector.h ****        */
 850:/usr/include/c++/5/bits/stl_vector.h ****       reference
 851:/usr/include/c++/5/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
 852:/usr/include/c++/5/bits/stl_vector.h ****       { return *begin(); }
 853:/usr/include/c++/5/bits/stl_vector.h **** 
 854:/usr/include/c++/5/bits/stl_vector.h ****       /**
 855:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 856:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 857:/usr/include/c++/5/bits/stl_vector.h ****        */
 858:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 859:/usr/include/c++/5/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
 860:/usr/include/c++/5/bits/stl_vector.h ****       { return *begin(); }
 861:/usr/include/c++/5/bits/stl_vector.h **** 
 862:/usr/include/c++/5/bits/stl_vector.h ****       /**
 863:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 864:/usr/include/c++/5/bits/stl_vector.h ****        *  element of the %vector.
 865:/usr/include/c++/5/bits/stl_vector.h ****        */
 866:/usr/include/c++/5/bits/stl_vector.h ****       reference
GAS LISTING /tmp/cc2K2nX4.s 			page 536


 867:/usr/include/c++/5/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/5/bits/stl_vector.h ****       { return *(end() - 1); }
 869:/usr/include/c++/5/bits/stl_vector.h ****       
 870:/usr/include/c++/5/bits/stl_vector.h ****       /**
 871:/usr/include/c++/5/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 872:/usr/include/c++/5/bits/stl_vector.h ****        *  last element of the %vector.
 873:/usr/include/c++/5/bits/stl_vector.h ****        */
 874:/usr/include/c++/5/bits/stl_vector.h ****       const_reference
 875:/usr/include/c++/5/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
 876:/usr/include/c++/5/bits/stl_vector.h ****       { return *(end() - 1); }
 877:/usr/include/c++/5/bits/stl_vector.h **** 
 878:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 879:/usr/include/c++/5/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 880:/usr/include/c++/5/bits/stl_vector.h ****       // data access
 881:/usr/include/c++/5/bits/stl_vector.h ****       /**
 882:/usr/include/c++/5/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 883:/usr/include/c++/5/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 884:/usr/include/c++/5/bits/stl_vector.h ****        */
 885:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 886:/usr/include/c++/5/bits/stl_vector.h ****       _Tp*
 887:/usr/include/c++/5/bits/stl_vector.h **** #else
 888:/usr/include/c++/5/bits/stl_vector.h ****       pointer
 889:/usr/include/c++/5/bits/stl_vector.h **** #endif
 890:/usr/include/c++/5/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 891:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 892:/usr/include/c++/5/bits/stl_vector.h **** 
 893:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 894:/usr/include/c++/5/bits/stl_vector.h ****       const _Tp*
 895:/usr/include/c++/5/bits/stl_vector.h **** #else
 896:/usr/include/c++/5/bits/stl_vector.h ****       const_pointer
 897:/usr/include/c++/5/bits/stl_vector.h **** #endif
 898:/usr/include/c++/5/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 899:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
 900:/usr/include/c++/5/bits/stl_vector.h **** 
 901:/usr/include/c++/5/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 902:/usr/include/c++/5/bits/stl_vector.h ****       /**
 903:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 904:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 905:/usr/include/c++/5/bits/stl_vector.h ****        *
 906:/usr/include/c++/5/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 907:/usr/include/c++/5/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 908:/usr/include/c++/5/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 909:/usr/include/c++/5/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 910:/usr/include/c++/5/bits/stl_vector.h ****        *  available.
 911:/usr/include/c++/5/bits/stl_vector.h ****        */
 912:/usr/include/c++/5/bits/stl_vector.h ****       void
 913:/usr/include/c++/5/bits/stl_vector.h ****       push_back(const value_type& __x)
 15253              		.loc 15 913 0
 15254              		.cfi_startproc
 15255 0000 55       		pushq	%rbp
 15256              		.cfi_def_cfa_offset 16
 15257              		.cfi_offset 6, -16
 15258 0001 4889E5   		movq	%rsp, %rbp
 15259              		.cfi_def_cfa_register 6
 15260 0004 4883EC10 		subq	$16, %rsp
 15261 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15262 000c 488975F0 		movq	%rsi, -16(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 537


 914:/usr/include/c++/5/bits/stl_vector.h ****       {
 915:/usr/include/c++/5/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 15263              		.loc 15 915 0
 15264 0010 488B45F8 		movq	-8(%rbp), %rax
 15265 0014 488B5008 		movq	8(%rax), %rdx
 15266 0018 488B45F8 		movq	-8(%rbp), %rax
 15267 001c 488B4010 		movq	16(%rax), %rax
 15268 0020 4839C2   		cmpq	%rax, %rdx
 15269 0023 7431     		je	.L1267
 916:/usr/include/c++/5/bits/stl_vector.h **** 	  {
 917:/usr/include/c++/5/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 15270              		.loc 15 917 0
 15271 0025 488B45F8 		movq	-8(%rbp), %rax
 15272 0029 488B4808 		movq	8(%rax), %rcx
 15273 002d 488B45F8 		movq	-8(%rbp), %rax
 15274 0031 488B55F0 		movq	-16(%rbp), %rdx
 15275 0035 4889CE   		movq	%rcx, %rsi
 15276 0038 4889C7   		movq	%rax, %rdi
 15277 003b E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_
 15277      00
 918:/usr/include/c++/5/bits/stl_vector.h **** 	                             __x);
 919:/usr/include/c++/5/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 15278              		.loc 15 919 0
 15279 0040 488B45F8 		movq	-8(%rbp), %rax
 15280 0044 488B4008 		movq	8(%rax), %rax
 15281 0048 488D5020 		leaq	32(%rax), %rdx
 15282 004c 488B45F8 		movq	-8(%rbp), %rax
 15283 0050 48895008 		movq	%rdx, 8(%rax)
 920:/usr/include/c++/5/bits/stl_vector.h **** 	  }
 921:/usr/include/c++/5/bits/stl_vector.h **** 	else
 922:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 923:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 924:/usr/include/c++/5/bits/stl_vector.h **** #else
 925:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 926:/usr/include/c++/5/bits/stl_vector.h **** #endif
 927:/usr/include/c++/5/bits/stl_vector.h ****       }
 15284              		.loc 15 927 0
 15285 0054 EB13     		jmp	.L1269
 15286              	.L1267:
 923:/usr/include/c++/5/bits/stl_vector.h **** #else
 15287              		.loc 15 923 0
 15288 0056 488B55F0 		movq	-16(%rbp), %rdx
 15289 005a 488B45F8 		movq	-8(%rbp), %rax
 15290 005e 4889D6   		movq	%rdx, %rsi
 15291 0061 4889C7   		movq	%rax, %rdi
 15292 0064 E8000000 		call	_ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_
 15292      00
 15293              	.L1269:
 15294              		.loc 15 927 0
 15295 0069 90       		nop
 15296 006a C9       		leave
 15297              		.cfi_def_cfa 7, 8
 15298 006b C3       		ret
 15299              		.cfi_endproc
 15300              	.LFE7332:
 15302              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_
 15303              		.align 2
GAS LISTING /tmp/cc2K2nX4.s 			page 538


 15304              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev
 15306              	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev:
 15307              	.LFB7417:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 15308              		.loc 15 79 0
 15309              		.cfi_startproc
 15310 0000 55       		pushq	%rbp
 15311              		.cfi_def_cfa_offset 16
 15312              		.cfi_offset 6, -16
 15313 0001 4889E5   		movq	%rsp, %rbp
 15314              		.cfi_def_cfa_register 6
 15315 0004 4883EC10 		subq	$16, %rsp
 15316 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15317              	.LBB93:
  79:/usr/include/c++/5/bits/stl_vector.h ****       : public _Tp_alloc_type
 15318              		.loc 15 79 0
 15319 000c 488B45F8 		movq	-8(%rbp), %rax
 15320 0010 4889C7   		movq	%rax, %rdi
 15321 0013 E8000000 		call	_ZNSaI10vector_varED2Ev
 15321      00
 15322              	.LBE93:
 15323 0018 90       		nop
 15324 0019 C9       		leave
 15325              		.cfi_def_cfa 7, 8
 15326 001a C3       		ret
 15327              		.cfi_endproc
 15328              	.LFE7417:
 15330              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD1Ev
 15331              		.set	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseI10vector_varSa
 15332              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseI10
 15333              		.align 2
 15334              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev
 15336              	_ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev:
 15337              	.LFB7419:
 124:/usr/include/c++/5/bits/stl_vector.h ****       : _M_impl() { }
 15338              		.loc 15 124 0
 15339              		.cfi_startproc
 15340 0000 55       		pushq	%rbp
 15341              		.cfi_def_cfa_offset 16
 15342              		.cfi_offset 6, -16
 15343 0001 4889E5   		movq	%rsp, %rbp
 15344              		.cfi_def_cfa_register 6
 15345 0004 4883EC10 		subq	$16, %rsp
 15346 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15347              	.LBB94:
 125:/usr/include/c++/5/bits/stl_vector.h **** 
 15348              		.loc 15 125 0
 15349 000c 488B45F8 		movq	-8(%rbp), %rax
 15350 0010 4889C7   		movq	%rax, %rdi
 15351 0013 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC1Ev
 15351      00
 15352              	.LBE94:
 15353 0018 90       		nop
 15354 0019 C9       		leave
 15355              		.cfi_def_cfa 7, 8
 15356 001a C3       		ret
 15357              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 539


 15358              	.LFE7419:
 15360              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EEC1Ev
 15361              		.set	_ZNSt12_Vector_baseI10vector_varSaIS0_EEC1Ev,_ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev
 15362              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseI10
 15363              		.align 2
 15364              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev
 15366              	_ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev:
 15367              	.LFB7422:
 159:/usr/include/c++/5/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 15368              		.loc 15 159 0
 15369              		.cfi_startproc
 15370              		.cfi_personality 0x3,__gxx_personality_v0
 15371              		.cfi_lsda 0x3,.LLSDA7422
 15372 0000 55       		pushq	%rbp
 15373              		.cfi_def_cfa_offset 16
 15374              		.cfi_offset 6, -16
 15375 0001 4889E5   		movq	%rsp, %rbp
 15376              		.cfi_def_cfa_register 6
 15377 0004 4883EC10 		subq	$16, %rsp
 15378 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15379              	.LBB95:
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 15380              		.loc 15 161 0
 15381 000c 488B45F8 		movq	-8(%rbp), %rax
 15382 0010 488B4010 		movq	16(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 15383              		.loc 15 160 0
 15384 0014 4889C2   		movq	%rax, %rdx
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 15385              		.loc 15 161 0
 15386 0017 488B45F8 		movq	-8(%rbp), %rax
 15387 001b 488B00   		movq	(%rax), %rax
 160:/usr/include/c++/5/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 15388              		.loc 15 160 0
 15389 001e 4829C2   		subq	%rax, %rdx
 15390 0021 4889D0   		movq	%rdx, %rax
 15391 0024 48C1F805 		sarq	$5, %rax
 15392 0028 4889C2   		movq	%rax, %rdx
 15393 002b 488B45F8 		movq	-8(%rbp), %rax
 15394 002f 488B08   		movq	(%rax), %rcx
 15395 0032 488B45F8 		movq	-8(%rbp), %rax
 15396 0036 4889CE   		movq	%rcx, %rsi
 15397 0039 4889C7   		movq	%rax, %rdi
 15398 003c E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m
 15398      00
 161:/usr/include/c++/5/bits/stl_vector.h **** 
 15399              		.loc 15 161 0
 15400 0041 488B45F8 		movq	-8(%rbp), %rax
 15401 0045 4889C7   		movq	%rax, %rdi
 15402 0048 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD1Ev
 15402      00
 15403              	.LBE95:
 15404 004d 90       		nop
 15405 004e C9       		leave
 15406              		.cfi_def_cfa 7, 8
 15407 004f C3       		ret
 15408              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 540


 15409              	.LFE7422:
 15410              		.section	.gcc_except_table
 15411              	.LLSDA7422:
 15412 0438 FF       		.byte	0xff
 15413 0439 FF       		.byte	0xff
 15414 043a 01       		.byte	0x1
 15415 043b 00       		.uleb128 .LLSDACSE7422-.LLSDACSB7422
 15416              	.LLSDACSB7422:
 15417              	.LLSDACSE7422:
 15418              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseI10
 15420              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EED1Ev
 15421              		.set	_ZNSt12_Vector_baseI10vector_varSaIS0_EED1Ev,_ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev
 15422              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZN
 15423              		.align 2
 15424              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 15426              	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv:
 15427              	.LFB7424:
 113:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 15428              		.loc 15 113 0
 15429              		.cfi_startproc
 15430 0000 55       		pushq	%rbp
 15431              		.cfi_def_cfa_offset 16
 15432              		.cfi_offset 6, -16
 15433 0001 4889E5   		movq	%rsp, %rbp
 15434              		.cfi_def_cfa_register 6
 15435 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/5/bits/stl_vector.h **** 
 15436              		.loc 15 114 0
 15437 0008 488B45F8 		movq	-8(%rbp), %rax
 15438 000c 5D       		popq	%rbp
 15439              		.cfi_def_cfa 7, 8
 15440 000d C3       		ret
 15441              		.cfi_endproc
 15442              	.LFE7424:
 15444              		.section	.text._ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIP10vect
 15445              		.weak	_ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E
 15447              	_ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E:
 15448              	.LFB7425:
 15449              		.file 16 "/usr/include/c++/5/bits/stl_construct.h"
   1:/usr/include/c++/5/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_construct.h **** 
   3:/usr/include/c++/5/bits/stl_construct.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_construct.h **** //
   5:/usr/include/c++/5/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_construct.h **** 
  11:/usr/include/c++/5/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_construct.h **** 
  16:/usr/include/c++/5/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
GAS LISTING /tmp/cc2K2nX4.s 			page 541


  19:/usr/include/c++/5/bits/stl_construct.h **** 
  20:/usr/include/c++/5/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_construct.h **** 
  25:/usr/include/c++/5/bits/stl_construct.h **** /*
  26:/usr/include/c++/5/bits/stl_construct.h ****  *
  27:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_construct.h ****  *
  30:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_construct.h ****  *
  38:/usr/include/c++/5/bits/stl_construct.h ****  *
  39:/usr/include/c++/5/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/5/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_construct.h ****  *
  42:/usr/include/c++/5/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_construct.h ****  */
  50:/usr/include/c++/5/bits/stl_construct.h **** 
  51:/usr/include/c++/5/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/5/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/5/bits/stl_construct.h ****  */
  55:/usr/include/c++/5/bits/stl_construct.h **** 
  56:/usr/include/c++/5/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/5/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/5/bits/stl_construct.h **** 
  59:/usr/include/c++/5/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/5/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/5/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/5/bits/stl_construct.h **** 
  63:/usr/include/c++/5/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/5/bits/stl_construct.h **** {
  65:/usr/include/c++/5/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/5/bits/stl_construct.h **** 
  67:/usr/include/c++/5/bits/stl_construct.h ****   /**
  68:/usr/include/c++/5/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/5/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/5/bits/stl_construct.h ****    */
  71:/usr/include/c++/5/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/5/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
GAS LISTING /tmp/cc2K2nX4.s 			page 542


  76:/usr/include/c++/5/bits/stl_construct.h **** #else
  77:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/5/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/5/bits/stl_construct.h ****     {
  81:/usr/include/c++/5/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/5/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/5/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/5/bits/stl_construct.h ****     }
  85:/usr/include/c++/5/bits/stl_construct.h **** #endif
  86:/usr/include/c++/5/bits/stl_construct.h **** 
  87:/usr/include/c++/5/bits/stl_construct.h ****   /**
  88:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/5/bits/stl_construct.h ****    */
  90:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/5/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/5/bits/stl_construct.h **** 
  95:/usr/include/c++/5/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/5/bits/stl_construct.h ****     {
  98:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/5/bits/stl_construct.h ****         static void
 100:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/5/bits/stl_construct.h **** 	{
 102:/usr/include/c++/5/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/5/bits/stl_construct.h **** 	}
 105:/usr/include/c++/5/bits/stl_construct.h ****     };
 106:/usr/include/c++/5/bits/stl_construct.h **** 
 107:/usr/include/c++/5/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/5/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/5/bits/stl_construct.h ****     {
 110:/usr/include/c++/5/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/5/bits/stl_construct.h ****         static void
 112:/usr/include/c++/5/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/5/bits/stl_construct.h ****     };
 114:/usr/include/c++/5/bits/stl_construct.h **** 
 115:/usr/include/c++/5/bits/stl_construct.h ****   /**
 116:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/5/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/5/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/5/bits/stl_construct.h ****    */
 120:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/5/bits/stl_construct.h ****     {
 124:/usr/include/c++/5/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/5/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/5/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/5/bits/stl_construct.h ****     }
 129:/usr/include/c++/5/bits/stl_construct.h **** 
 130:/usr/include/c++/5/bits/stl_construct.h ****   /**
 131:/usr/include/c++/5/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/5/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
GAS LISTING /tmp/cc2K2nX4.s 			page 543


 133:/usr/include/c++/5/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/5/bits/stl_construct.h ****    */
 135:/usr/include/c++/5/bits/stl_construct.h **** 
 136:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/5/bits/stl_construct.h ****     void
 138:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/5/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/5/bits/stl_construct.h ****     {
 141:/usr/include/c++/5/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/5/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/5/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/5/bits/stl_construct.h ****     }
 145:/usr/include/c++/5/bits/stl_construct.h **** 
 146:/usr/include/c++/5/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/5/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/5/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 15450              		.loc 16 148 0
 15451              		.cfi_startproc
 15452 0000 55       		pushq	%rbp
 15453              		.cfi_def_cfa_offset 16
 15454              		.cfi_offset 6, -16
 15455 0001 4889E5   		movq	%rsp, %rbp
 15456              		.cfi_def_cfa_register 6
 15457 0004 4883EC20 		subq	$32, %rsp
 15458 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15459 000c 488975F0 		movq	%rsi, -16(%rbp)
 15460 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/5/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/5/bits/stl_construct.h ****     {
 151:/usr/include/c++/5/bits/stl_construct.h ****       _Destroy(__first, __last);
 15461              		.loc 16 151 0
 15462 0014 488B55F0 		movq	-16(%rbp), %rdx
 15463 0018 488B45F8 		movq	-8(%rbp), %rax
 15464 001c 4889D6   		movq	%rdx, %rsi
 15465 001f 4889C7   		movq	%rax, %rdi
 15466 0022 E8000000 		call	_ZSt8_DestroyIP10vector_varEvT_S2_
 15466      00
 152:/usr/include/c++/5/bits/stl_construct.h ****     }
 15467              		.loc 16 152 0
 15468 0027 90       		nop
 15469 0028 C9       		leave
 15470              		.cfi_def_cfa 7, 8
 15471 0029 C3       		ret
 15472              		.cfi_endproc
 15473              	.LFE7425:
 15475              		.section	.text._ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE,"axG",@progbits,_Z
 15476              		.weak	_ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE
 15478              	_ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE:
 15479              	.LFB7432:
 15480              		.file 17 "/usr/include/c++/5/bits/move.h"
   1:/usr/include/c++/5/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/5/bits/move.h **** 
   3:/usr/include/c++/5/bits/move.h **** // Copyright (C) 2007-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/move.h **** //
   5:/usr/include/c++/5/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/move.h **** // terms of the GNU General Public License as published by the
GAS LISTING /tmp/cc2K2nX4.s 			page 544


   8:/usr/include/c++/5/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/move.h **** // any later version.
  10:/usr/include/c++/5/bits/move.h **** 
  11:/usr/include/c++/5/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/move.h **** 
  16:/usr/include/c++/5/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/move.h **** 
  20:/usr/include/c++/5/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/move.h **** 
  25:/usr/include/c++/5/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/5/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/5/bits/move.h ****  */
  29:/usr/include/c++/5/bits/move.h **** 
  30:/usr/include/c++/5/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/5/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/5/bits/move.h **** 
  33:/usr/include/c++/5/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/5/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/5/bits/move.h **** 
  36:/usr/include/c++/5/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/5/bits/move.h **** {
  38:/usr/include/c++/5/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/5/bits/move.h **** 
  40:/usr/include/c++/5/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/5/bits/move.h ****   /**
  42:/usr/include/c++/5/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/5/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/5/bits/move.h ****    */
  45:/usr/include/c++/5/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/5/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/5/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/5/bits/move.h ****     {
  49:/usr/include/c++/5/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/5/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  51:/usr/include/c++/5/bits/move.h ****     }
  52:/usr/include/c++/5/bits/move.h **** 
  53:/usr/include/c++/5/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  54:/usr/include/c++/5/bits/move.h **** } // namespace
  55:/usr/include/c++/5/bits/move.h **** 
  56:/usr/include/c++/5/bits/move.h **** #if __cplusplus >= 201103L
  57:/usr/include/c++/5/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/include/c++/5/bits/move.h **** 
  59:/usr/include/c++/5/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/5/bits/move.h **** {
  61:/usr/include/c++/5/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/5/bits/move.h **** 
  63:/usr/include/c++/5/bits/move.h ****   /**
  64:/usr/include/c++/5/bits/move.h ****    *  @addtogroup utilities
GAS LISTING /tmp/cc2K2nX4.s 			page 545


  65:/usr/include/c++/5/bits/move.h ****    *  @{
  66:/usr/include/c++/5/bits/move.h ****    */
  67:/usr/include/c++/5/bits/move.h **** 
  68:/usr/include/c++/5/bits/move.h ****   /**
  69:/usr/include/c++/5/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/include/c++/5/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/include/c++/5/bits/move.h ****    *
  72:/usr/include/c++/5/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/include/c++/5/bits/move.h ****    */
  74:/usr/include/c++/5/bits/move.h ****   template<typename _Tp>
  75:/usr/include/c++/5/bits/move.h ****     constexpr _Tp&&
  76:/usr/include/c++/5/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 15481              		.loc 17 76 0
 15482              		.cfi_startproc
 15483 0000 55       		pushq	%rbp
 15484              		.cfi_def_cfa_offset 16
 15485              		.cfi_offset 6, -16
 15486 0001 4889E5   		movq	%rsp, %rbp
 15487              		.cfi_def_cfa_register 6
 15488 0004 48897DF8 		movq	%rdi, -8(%rbp)
  77:/usr/include/c++/5/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 15489              		.loc 17 77 0
 15490 0008 488B45F8 		movq	-8(%rbp), %rax
 15491 000c 5D       		popq	%rbp
 15492              		.cfi_def_cfa 7, 8
 15493 000d C3       		ret
 15494              		.cfi_endproc
 15495              	.LFE7432:
 15497              		.section	.text._ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_,"axG
 15498              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_
 15500              	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_:
 15501              	.LFB7431:
 15502              		.file 18 "/usr/include/c++/5/bits/alloc_traits.h"
   1:/usr/include/c++/5/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/5/bits/alloc_traits.h **** 
   3:/usr/include/c++/5/bits/alloc_traits.h **** // Copyright (C) 2011-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/alloc_traits.h **** //
   5:/usr/include/c++/5/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/alloc_traits.h **** // any later version.
  10:/usr/include/c++/5/bits/alloc_traits.h **** 
  11:/usr/include/c++/5/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/alloc_traits.h **** 
  16:/usr/include/c++/5/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/alloc_traits.h **** 
  20:/usr/include/c++/5/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/alloc_traits.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 546


  25:/usr/include/c++/5/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/c++/5/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/5/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/c++/5/bits/alloc_traits.h ****  */
  29:/usr/include/c++/5/bits/alloc_traits.h **** 
  30:/usr/include/c++/5/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/c++/5/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/c++/5/bits/alloc_traits.h **** 
  33:/usr/include/c++/5/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/usr/include/c++/5/bits/alloc_traits.h **** 
  35:/usr/include/c++/5/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/usr/include/c++/5/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/usr/include/c++/5/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/usr/include/c++/5/bits/alloc_traits.h **** 
  39:/usr/include/c++/5/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  40:/usr/include/c++/5/bits/alloc_traits.h **** {
  41:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/c++/5/bits/alloc_traits.h **** 
  43:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  44:/usr/include/c++/5/bits/alloc_traits.h ****     class __alloctr_rebind_helper
  45:/usr/include/c++/5/bits/alloc_traits.h ****     {
  46:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp2>
  47:/usr/include/c++/5/bits/alloc_traits.h **** 	static constexpr true_type
  48:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_chk(typename _Alloc2::template rebind<_Tp2>::other*);
  49:/usr/include/c++/5/bits/alloc_traits.h **** 
  50:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename, typename>
  51:/usr/include/c++/5/bits/alloc_traits.h **** 	static constexpr false_type
  52:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_chk(...);
  53:/usr/include/c++/5/bits/alloc_traits.h **** 
  54:/usr/include/c++/5/bits/alloc_traits.h ****     public:
  55:/usr/include/c++/5/bits/alloc_traits.h ****       using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
  56:/usr/include/c++/5/bits/alloc_traits.h ****     };
  57:/usr/include/c++/5/bits/alloc_traits.h **** 
  58:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
  59:/usr/include/c++/5/bits/alloc_traits.h **** 	   bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
  60:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind;
  61:/usr/include/c++/5/bits/alloc_traits.h **** 
  62:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  63:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind<_Alloc, _Tp, true>
  64:/usr/include/c++/5/bits/alloc_traits.h ****     {
  65:/usr/include/c++/5/bits/alloc_traits.h ****       typedef typename _Alloc::template rebind<_Tp>::other __type;
  66:/usr/include/c++/5/bits/alloc_traits.h ****     };
  67:/usr/include/c++/5/bits/alloc_traits.h **** 
  68:/usr/include/c++/5/bits/alloc_traits.h ****   template<template<typename, typename...> class _Alloc, typename _Tp,
  69:/usr/include/c++/5/bits/alloc_traits.h **** 	   typename _Up, typename... _Args>
  70:/usr/include/c++/5/bits/alloc_traits.h ****     struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
  71:/usr/include/c++/5/bits/alloc_traits.h ****     {
  72:/usr/include/c++/5/bits/alloc_traits.h ****       typedef _Alloc<_Tp, _Args...> __type;
  73:/usr/include/c++/5/bits/alloc_traits.h ****     };
  74:/usr/include/c++/5/bits/alloc_traits.h **** 
  75:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp>
  76:/usr/include/c++/5/bits/alloc_traits.h ****     using __alloc_rebind = typename __alloctr_rebind<_Alloc, _Tp>::__type;
  77:/usr/include/c++/5/bits/alloc_traits.h **** 
  78:/usr/include/c++/5/bits/alloc_traits.h ****   /**
  79:/usr/include/c++/5/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/usr/include/c++/5/bits/alloc_traits.h ****    * @ingroup allocators
  81:/usr/include/c++/5/bits/alloc_traits.h ****   */
GAS LISTING /tmp/cc2K2nX4.s 			page 547


  82:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/usr/include/c++/5/bits/alloc_traits.h ****     struct allocator_traits
  84:/usr/include/c++/5/bits/alloc_traits.h ****     {
  85:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator type
  86:/usr/include/c++/5/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocated type
  88:/usr/include/c++/5/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/usr/include/c++/5/bits/alloc_traits.h **** 
  90:/usr/include/c++/5/bits/alloc_traits.h **** #define _GLIBCXX_ALLOC_TR_NESTED_TYPE(_NTYPE, _ALT) \
  91:/usr/include/c++/5/bits/alloc_traits.h ****   private: \
  92:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Tp> \
  93:/usr/include/c++/5/bits/alloc_traits.h ****     static typename _Tp::_NTYPE _S_##_NTYPE##_helper(_Tp*); \
  94:/usr/include/c++/5/bits/alloc_traits.h ****   static _ALT _S_##_NTYPE##_helper(...); \
  95:/usr/include/c++/5/bits/alloc_traits.h ****     typedef decltype(_S_##_NTYPE##_helper((_Alloc*)0)) __##_NTYPE; \
  96:/usr/include/c++/5/bits/alloc_traits.h ****   public:
  97:/usr/include/c++/5/bits/alloc_traits.h **** 
  98:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(pointer, value_type*)
  99:/usr/include/c++/5/bits/alloc_traits.h **** 
 100:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 101:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
 102:/usr/include/c++/5/bits/alloc_traits.h ****        *
 103:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 104:/usr/include/c++/5/bits/alloc_traits.h ****       */
 105:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __pointer pointer;
 106:/usr/include/c++/5/bits/alloc_traits.h **** 
 107:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_pointer,
 108:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<const value_type>)
 109:/usr/include/c++/5/bits/alloc_traits.h **** 
 110:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 111:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 112:/usr/include/c++/5/bits/alloc_traits.h ****        *
 113:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 114:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 115:/usr/include/c++/5/bits/alloc_traits.h ****       */
 116:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __const_pointer const_pointer;
 117:/usr/include/c++/5/bits/alloc_traits.h **** 
 118:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(void_pointer,
 119:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<void>)
 120:/usr/include/c++/5/bits/alloc_traits.h **** 
 121:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 122:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 123:/usr/include/c++/5/bits/alloc_traits.h ****        *
 124:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 125:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 126:/usr/include/c++/5/bits/alloc_traits.h ****       */
 127:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __void_pointer void_pointer;
 128:/usr/include/c++/5/bits/alloc_traits.h **** 
 129:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_void_pointer,
 130:/usr/include/c++/5/bits/alloc_traits.h ****   typename pointer_traits<pointer>::template rebind<const void>)
 131:/usr/include/c++/5/bits/alloc_traits.h **** 
 132:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 133:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 134:/usr/include/c++/5/bits/alloc_traits.h ****        *
 135:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 136:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 137:/usr/include/c++/5/bits/alloc_traits.h ****       */
 138:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __const_void_pointer const_void_pointer;
GAS LISTING /tmp/cc2K2nX4.s 			page 548


 139:/usr/include/c++/5/bits/alloc_traits.h **** 
 140:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(difference_type,
 141:/usr/include/c++/5/bits/alloc_traits.h **** 			      typename pointer_traits<pointer>::difference_type)
 142:/usr/include/c++/5/bits/alloc_traits.h **** 
 143:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 144:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 145:/usr/include/c++/5/bits/alloc_traits.h ****        *
 146:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 147:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 148:/usr/include/c++/5/bits/alloc_traits.h ****       */
 149:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __difference_type difference_type;
 150:/usr/include/c++/5/bits/alloc_traits.h **** 
 151:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(size_type,
 152:/usr/include/c++/5/bits/alloc_traits.h **** 			      typename make_unsigned<difference_type>::type)
 153:/usr/include/c++/5/bits/alloc_traits.h **** 
 154:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 155:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   The allocator's size type
 156:/usr/include/c++/5/bits/alloc_traits.h ****        *
 157:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 158:/usr/include/c++/5/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 159:/usr/include/c++/5/bits/alloc_traits.h ****       */
 160:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __size_type size_type;
 161:/usr/include/c++/5/bits/alloc_traits.h **** 
 162:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_copy_assignment,
 163:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 164:/usr/include/c++/5/bits/alloc_traits.h **** 
 165:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 166:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 167:/usr/include/c++/5/bits/alloc_traits.h ****        *
 168:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 169:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 170:/usr/include/c++/5/bits/alloc_traits.h ****       */
 171:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_copy_assignment
 172:/usr/include/c++/5/bits/alloc_traits.h **** 	propagate_on_container_copy_assignment;
 173:/usr/include/c++/5/bits/alloc_traits.h **** 
 174:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_move_assignment,
 175:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 176:/usr/include/c++/5/bits/alloc_traits.h **** 
 177:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 178:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 179:/usr/include/c++/5/bits/alloc_traits.h ****        *
 180:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 181:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 182:/usr/include/c++/5/bits/alloc_traits.h ****       */
 183:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_move_assignment
 184:/usr/include/c++/5/bits/alloc_traits.h **** 	propagate_on_container_move_assignment;
 185:/usr/include/c++/5/bits/alloc_traits.h **** 
 186:/usr/include/c++/5/bits/alloc_traits.h **** _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,
 187:/usr/include/c++/5/bits/alloc_traits.h **** 			      false_type)
 188:/usr/include/c++/5/bits/alloc_traits.h **** 
 189:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 190:/usr/include/c++/5/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 191:/usr/include/c++/5/bits/alloc_traits.h ****        *
 192:/usr/include/c++/5/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 193:/usr/include/c++/5/bits/alloc_traits.h ****        * otherwise @c false_type
 194:/usr/include/c++/5/bits/alloc_traits.h ****       */
 195:/usr/include/c++/5/bits/alloc_traits.h ****       typedef __propagate_on_container_swap propagate_on_container_swap;
GAS LISTING /tmp/cc2K2nX4.s 			page 549


 196:/usr/include/c++/5/bits/alloc_traits.h **** 
 197:/usr/include/c++/5/bits/alloc_traits.h **** #undef _GLIBCXX_ALLOC_TR_NESTED_TYPE
 198:/usr/include/c++/5/bits/alloc_traits.h **** 
 199:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 200:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
 201:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 202:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 203:/usr/include/c++/5/bits/alloc_traits.h **** 
 204:/usr/include/c++/5/bits/alloc_traits.h ****     private:
 205:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 206:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __allocate_helper
 207:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 208:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3,
 209:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc3*>()->allocate(
 210:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<size_type>(),
 211:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<const_void_pointer>()))>
 212:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 213:/usr/include/c++/5/bits/alloc_traits.h **** 
 214:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 215:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 216:/usr/include/c++/5/bits/alloc_traits.h **** 
 217:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 218:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 219:/usr/include/c++/5/bits/alloc_traits.h **** 
 220:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_allocate = typename __allocate_helper<_Alloc2>::type;
 222:/usr/include/c++/5/bits/alloc_traits.h **** 
 223:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 224:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_allocate<_Alloc2>>>
 225:/usr/include/c++/5/bits/alloc_traits.h **** 	static pointer
 226:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 227:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 228:/usr/include/c++/5/bits/alloc_traits.h **** 
 229:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2, typename _UnusedHint,
 230:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_allocate<_Alloc2>>>>
 231:/usr/include/c++/5/bits/alloc_traits.h **** 	static pointer
 232:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 233:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 234:/usr/include/c++/5/bits/alloc_traits.h **** 
 235:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 236:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __construct_helper
 237:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 238:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 239:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 240:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 241:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 242:/usr/include/c++/5/bits/alloc_traits.h **** 
 243:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 244:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 245:/usr/include/c++/5/bits/alloc_traits.h **** 
 246:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 247:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 248:/usr/include/c++/5/bits/alloc_traits.h **** 
 249:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_construct
 251:/usr/include/c++/5/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 252:/usr/include/c++/5/bits/alloc_traits.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 550


 253:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 254:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 255:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 256:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 257:/usr/include/c++/5/bits/alloc_traits.h **** 
 258:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 259:/usr/include/c++/5/bits/alloc_traits.h **** 	static
 260:/usr/include/c++/5/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 261:/usr/include/c++/5/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 262:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 263:/usr/include/c++/5/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 264:/usr/include/c++/5/bits/alloc_traits.h **** 
 265:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 266:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __destroy_helper
 267:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 268:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 269:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->destroy(
 270:/usr/include/c++/5/bits/alloc_traits.h **** 		  std::declval<_Tp*>()))>
 271:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 272:/usr/include/c++/5/bits/alloc_traits.h **** 
 273:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 274:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 275:/usr/include/c++/5/bits/alloc_traits.h **** 
 276:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 277:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 278:/usr/include/c++/5/bits/alloc_traits.h **** 
 279:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 280:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_destroy = typename __destroy_helper<_Tp>::type;
 281:/usr/include/c++/5/bits/alloc_traits.h **** 
 282:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 283:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__has_destroy<_Tp>>
 284:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_destroy(_Alloc& __a, _Tp* __p)
 285:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 286:/usr/include/c++/5/bits/alloc_traits.h **** 
 287:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 288:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Require<__not_<__has_destroy<_Tp>>>
 289:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_destroy(_Alloc&, _Tp* __p)
 290:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 291:/usr/include/c++/5/bits/alloc_traits.h **** 
 292:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __maxsize_helper
 294:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 295:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3,
 296:/usr/include/c++/5/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc3*>()->max_size())>
 297:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 298:/usr/include/c++/5/bits/alloc_traits.h **** 
 299:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 300:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 301:/usr/include/c++/5/bits/alloc_traits.h **** 
 302:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc2>(0));
 303:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 304:/usr/include/c++/5/bits/alloc_traits.h **** 
 305:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 306:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_max_size = typename __maxsize_helper<_Alloc2>::type;
 307:/usr/include/c++/5/bits/alloc_traits.h **** 
 308:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 309:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_max_size<_Alloc2>>>
GAS LISTING /tmp/cc2K2nX4.s 			page 551


 310:/usr/include/c++/5/bits/alloc_traits.h **** 	static size_type
 311:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 312:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 313:/usr/include/c++/5/bits/alloc_traits.h **** 
 314:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 315:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 316:/usr/include/c++/5/bits/alloc_traits.h **** 	static size_type
 317:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 318:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __gnu_cxx::__numeric_traits<size_type>::__max; }
 319:/usr/include/c++/5/bits/alloc_traits.h **** 
 320:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 321:/usr/include/c++/5/bits/alloc_traits.h **** 	struct __select_helper
 322:/usr/include/c++/5/bits/alloc_traits.h **** 	{
 323:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename _Alloc3, typename
 324:/usr/include/c++/5/bits/alloc_traits.h **** 	    = decltype(std::declval<_Alloc3*>()
 325:/usr/include/c++/5/bits/alloc_traits.h **** 		->select_on_container_copy_construction())>
 326:/usr/include/c++/5/bits/alloc_traits.h **** 	    static true_type __test(int);
 327:/usr/include/c++/5/bits/alloc_traits.h **** 
 328:/usr/include/c++/5/bits/alloc_traits.h **** 	  template<typename>
 329:/usr/include/c++/5/bits/alloc_traits.h **** 	    static false_type __test(...);
 330:/usr/include/c++/5/bits/alloc_traits.h **** 
 331:/usr/include/c++/5/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc2>(0));
 332:/usr/include/c++/5/bits/alloc_traits.h **** 	};
 333:/usr/include/c++/5/bits/alloc_traits.h **** 
 334:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2>
 335:/usr/include/c++/5/bits/alloc_traits.h **** 	using __has_soccc = typename __select_helper<_Alloc2>::type;
 336:/usr/include/c++/5/bits/alloc_traits.h **** 
 337:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 338:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__has_soccc<_Alloc2>>>
 339:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Alloc2
 340:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 341:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 342:/usr/include/c++/5/bits/alloc_traits.h **** 
 343:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Alloc2,
 344:/usr/include/c++/5/bits/alloc_traits.h **** 	       typename = _Require<__not_<__has_soccc<_Alloc2>>>>
 345:/usr/include/c++/5/bits/alloc_traits.h **** 	static _Alloc2
 346:/usr/include/c++/5/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 347:/usr/include/c++/5/bits/alloc_traits.h **** 	{ return __a; }
 348:/usr/include/c++/5/bits/alloc_traits.h **** 
 349:/usr/include/c++/5/bits/alloc_traits.h ****     public:
 350:/usr/include/c++/5/bits/alloc_traits.h **** 
 351:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 352:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 353:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 354:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 355:/usr/include/c++/5/bits/alloc_traits.h ****        *
 356:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 357:/usr/include/c++/5/bits/alloc_traits.h ****       */
 358:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 359:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 360:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 361:/usr/include/c++/5/bits/alloc_traits.h **** 
 362:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 363:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 364:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 366:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
GAS LISTING /tmp/cc2K2nX4.s 			page 552


 367:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 368:/usr/include/c++/5/bits/alloc_traits.h ****        *          of type @c value_type
 369:/usr/include/c++/5/bits/alloc_traits.h ****        *
 370:/usr/include/c++/5/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 371:/usr/include/c++/5/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 372:/usr/include/c++/5/bits/alloc_traits.h ****       */
 373:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 374:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 375:/usr/include/c++/5/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint); }
 376:/usr/include/c++/5/bits/alloc_traits.h **** 
 377:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 378:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 379:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 380:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 381:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 382:/usr/include/c++/5/bits/alloc_traits.h ****        *
 383:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 384:/usr/include/c++/5/bits/alloc_traits.h ****       */
 385:/usr/include/c++/5/bits/alloc_traits.h ****       static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 386:/usr/include/c++/5/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 387:/usr/include/c++/5/bits/alloc_traits.h **** 
 388:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 389:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 390:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 391:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 392:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 393:/usr/include/c++/5/bits/alloc_traits.h ****        *
 394:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 395:/usr/include/c++/5/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 396:/usr/include/c++/5/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 397:/usr/include/c++/5/bits/alloc_traits.h ****        *  arguments @a __args...
 398:/usr/include/c++/5/bits/alloc_traits.h ****       */
 399:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 400:/usr/include/c++/5/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 401:/usr/include/c++/5/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 402:/usr/include/c++/5/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 403:/usr/include/c++/5/bits/alloc_traits.h **** 
 404:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 405:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 406:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 407:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 408:/usr/include/c++/5/bits/alloc_traits.h ****        *
 409:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 410:/usr/include/c++/5/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 411:/usr/include/c++/5/bits/alloc_traits.h ****       */
 412:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Tp>
 413:/usr/include/c++/5/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 414:/usr/include/c++/5/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p); }
 415:/usr/include/c++/5/bits/alloc_traits.h **** 
 416:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 417:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 418:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 419:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 420:/usr/include/c++/5/bits/alloc_traits.h ****        *
 421:/usr/include/c++/5/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 422:/usr/include/c++/5/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 423:/usr/include/c++/5/bits/alloc_traits.h ****       */
GAS LISTING /tmp/cc2K2nX4.s 			page 553


 424:/usr/include/c++/5/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 425:/usr/include/c++/5/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 426:/usr/include/c++/5/bits/alloc_traits.h **** 
 427:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 428:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 429:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 430:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 431:/usr/include/c++/5/bits/alloc_traits.h ****        *
 432:/usr/include/c++/5/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 433:/usr/include/c++/5/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 434:/usr/include/c++/5/bits/alloc_traits.h ****       */
 435:/usr/include/c++/5/bits/alloc_traits.h ****       static _Alloc
 436:/usr/include/c++/5/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 437:/usr/include/c++/5/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 438:/usr/include/c++/5/bits/alloc_traits.h ****     };
 439:/usr/include/c++/5/bits/alloc_traits.h **** 
 440:/usr/include/c++/5/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 441:/usr/include/c++/5/bits/alloc_traits.h ****   template<typename _Tp>
 442:/usr/include/c++/5/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 443:/usr/include/c++/5/bits/alloc_traits.h ****     {
 444:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator type
 445:/usr/include/c++/5/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 446:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocated type
 447:/usr/include/c++/5/bits/alloc_traits.h ****       using value_type = _Tp;
 448:/usr/include/c++/5/bits/alloc_traits.h **** 
 449:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's pointer type.
 450:/usr/include/c++/5/bits/alloc_traits.h ****       using pointer = _Tp*;
 451:/usr/include/c++/5/bits/alloc_traits.h **** 
 452:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 453:/usr/include/c++/5/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 454:/usr/include/c++/5/bits/alloc_traits.h **** 
 455:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 456:/usr/include/c++/5/bits/alloc_traits.h ****       using void_pointer = void*;
 457:/usr/include/c++/5/bits/alloc_traits.h **** 
 458:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 459:/usr/include/c++/5/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 460:/usr/include/c++/5/bits/alloc_traits.h **** 
 461:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's difference type
 462:/usr/include/c++/5/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 463:/usr/include/c++/5/bits/alloc_traits.h **** 
 464:/usr/include/c++/5/bits/alloc_traits.h ****       /// The allocator's size type
 465:/usr/include/c++/5/bits/alloc_traits.h ****       using size_type = std::size_t;
 466:/usr/include/c++/5/bits/alloc_traits.h **** 
 467:/usr/include/c++/5/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 468:/usr/include/c++/5/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 469:/usr/include/c++/5/bits/alloc_traits.h **** 
 470:/usr/include/c++/5/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 471:/usr/include/c++/5/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 472:/usr/include/c++/5/bits/alloc_traits.h **** 
 473:/usr/include/c++/5/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 474:/usr/include/c++/5/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 475:/usr/include/c++/5/bits/alloc_traits.h **** 
 476:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Up>
 477:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 478:/usr/include/c++/5/bits/alloc_traits.h **** 
 479:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Up>
 480:/usr/include/c++/5/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
GAS LISTING /tmp/cc2K2nX4.s 			page 554


 481:/usr/include/c++/5/bits/alloc_traits.h **** 
 482:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 483:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 484:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 485:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 486:/usr/include/c++/5/bits/alloc_traits.h ****        *
 487:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 488:/usr/include/c++/5/bits/alloc_traits.h ****       */
 489:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 490:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 491:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 492:/usr/include/c++/5/bits/alloc_traits.h **** 
 493:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 494:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 495:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 496:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 497:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 498:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 499:/usr/include/c++/5/bits/alloc_traits.h ****        *          of type @c value_type
 500:/usr/include/c++/5/bits/alloc_traits.h ****        *
 501:/usr/include/c++/5/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 502:/usr/include/c++/5/bits/alloc_traits.h ****       */
 503:/usr/include/c++/5/bits/alloc_traits.h ****       static pointer
 504:/usr/include/c++/5/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 505:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 506:/usr/include/c++/5/bits/alloc_traits.h **** 
 507:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 508:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 509:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 510:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 511:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 512:/usr/include/c++/5/bits/alloc_traits.h ****        *
 513:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 514:/usr/include/c++/5/bits/alloc_traits.h ****       */
 515:/usr/include/c++/5/bits/alloc_traits.h ****       static void
 516:/usr/include/c++/5/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 517:/usr/include/c++/5/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 518:/usr/include/c++/5/bits/alloc_traits.h **** 
 519:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 520:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 521:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 522:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 523:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 524:/usr/include/c++/5/bits/alloc_traits.h ****        *
 525:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 526:/usr/include/c++/5/bits/alloc_traits.h ****       */
 527:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 528:/usr/include/c++/5/bits/alloc_traits.h **** 	static void
 529:/usr/include/c++/5/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 15503              		.loc 18 529 0
 15504              		.cfi_startproc
 15505 0000 55       		pushq	%rbp
 15506              		.cfi_def_cfa_offset 16
 15507              		.cfi_offset 6, -16
 15508 0001 4889E5   		movq	%rsp, %rbp
 15509              		.cfi_def_cfa_register 6
 15510 0004 4883EC20 		subq	$32, %rsp
GAS LISTING /tmp/cc2K2nX4.s 			page 555


 15511 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15512 000c 488975F0 		movq	%rsi, -16(%rbp)
 15513 0010 488955E8 		movq	%rdx, -24(%rbp)
 530:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 15514              		.loc 18 530 0
 15515 0014 488B45E8 		movq	-24(%rbp), %rax
 15516 0018 4889C7   		movq	%rax, %rdi
 15517 001b E8000000 		call	_ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE
 15517      00
 15518 0020 4889C2   		movq	%rax, %rdx
 15519 0023 488B4DF0 		movq	-16(%rbp), %rcx
 15520 0027 488B45F8 		movq	-8(%rbp), %rax
 15521 002b 4889CE   		movq	%rcx, %rsi
 15522 002e 4889C7   		movq	%rax, %rdi
 15523 0031 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_
 15523      00
 15524 0036 90       		nop
 15525 0037 C9       		leave
 15526              		.cfi_def_cfa 7, 8
 15527 0038 C3       		ret
 15528              		.cfi_endproc
 15529              	.LFE7431:
 15531              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_IRKS0_EEEvRS1_PT_DpOT0_
 15532              		.set	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_IRKS0_EEEvRS1_PT_DpOT0_,_ZNSt16allocat
 15533              		.section	.rodata
 15534              	.LC27:
 15535 00d0 76656374 		.string	"vector::_M_emplace_back_aux"
 15535      6F723A3A 
 15535      5F4D5F65 
 15535      6D706C61 
 15535      63655F62 
 15536              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_,"axG",@progb
 15537              		.align 2
 15538              		.weak	_ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_
 15540              	_ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_:
 15541              	.LFB7433:
 15542              		.file 19 "/usr/include/c++/5/bits/vector.tcc"
   1:/usr/include/c++/5/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/5/bits/vector.tcc **** 
   3:/usr/include/c++/5/bits/vector.tcc **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/vector.tcc **** //
   5:/usr/include/c++/5/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/5/bits/vector.tcc **** 
  11:/usr/include/c++/5/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/vector.tcc **** 
  16:/usr/include/c++/5/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/vector.tcc **** 
  20:/usr/include/c++/5/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
GAS LISTING /tmp/cc2K2nX4.s 			page 556


  21:/usr/include/c++/5/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/vector.tcc **** 
  25:/usr/include/c++/5/bits/vector.tcc **** /*
  26:/usr/include/c++/5/bits/vector.tcc ****  *
  27:/usr/include/c++/5/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/vector.tcc ****  *
  30:/usr/include/c++/5/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/vector.tcc ****  *
  38:/usr/include/c++/5/bits/vector.tcc ****  *
  39:/usr/include/c++/5/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/5/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/vector.tcc ****  *
  42:/usr/include/c++/5/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/5/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/vector.tcc ****  */
  50:/usr/include/c++/5/bits/vector.tcc **** 
  51:/usr/include/c++/5/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/5/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/5/bits/vector.tcc ****  */
  55:/usr/include/c++/5/bits/vector.tcc **** 
  56:/usr/include/c++/5/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/5/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/5/bits/vector.tcc **** 
  59:/usr/include/c++/5/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/5/bits/vector.tcc **** {
  61:/usr/include/c++/5/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/5/bits/vector.tcc **** 
  63:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/5/bits/vector.tcc ****     void
  65:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/5/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/5/bits/vector.tcc ****     {
  68:/usr/include/c++/5/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/5/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/5/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/5/bits/vector.tcc **** 	{
  72:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/5/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/5/bits/vector.tcc **** 			_M_get_Tp_allocator());
GAS LISTING /tmp/cc2K2nX4.s 			page 557


  78:/usr/include/c++/5/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/5/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/5/bits/vector.tcc **** 	}
  85:/usr/include/c++/5/bits/vector.tcc ****     }
  86:/usr/include/c++/5/bits/vector.tcc **** 
  87:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/5/bits/vector.tcc ****       void
  91:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  92:/usr/include/c++/5/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  93:/usr/include/c++/5/bits/vector.tcc ****       {
  94:/usr/include/c++/5/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:/usr/include/c++/5/bits/vector.tcc **** 	  {
  96:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:/usr/include/c++/5/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:/usr/include/c++/5/bits/vector.tcc **** 	  }
 100:/usr/include/c++/5/bits/vector.tcc **** 	else
 101:/usr/include/c++/5/bits/vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:/usr/include/c++/5/bits/vector.tcc ****       }
 103:/usr/include/c++/5/bits/vector.tcc **** #endif
 104:/usr/include/c++/5/bits/vector.tcc **** 
 105:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 108:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 109:/usr/include/c++/5/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 110:/usr/include/c++/5/bits/vector.tcc **** #else
 111:/usr/include/c++/5/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 112:/usr/include/c++/5/bits/vector.tcc **** #endif
 113:/usr/include/c++/5/bits/vector.tcc ****     {
 114:/usr/include/c++/5/bits/vector.tcc ****       const size_type __n = __position - begin();
 115:/usr/include/c++/5/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 116:/usr/include/c++/5/bits/vector.tcc **** 	  && __position == end())
 117:/usr/include/c++/5/bits/vector.tcc **** 	{
 118:/usr/include/c++/5/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 119:/usr/include/c++/5/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 120:/usr/include/c++/5/bits/vector.tcc **** 	}
 121:/usr/include/c++/5/bits/vector.tcc ****       else
 122:/usr/include/c++/5/bits/vector.tcc **** 	{
 123:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 124:/usr/include/c++/5/bits/vector.tcc **** 	  const auto __pos = begin() + (__position - cbegin());
 125:/usr/include/c++/5/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 126:/usr/include/c++/5/bits/vector.tcc **** 	    {
 127:/usr/include/c++/5/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 128:/usr/include/c++/5/bits/vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy));
 129:/usr/include/c++/5/bits/vector.tcc **** 	    }
 130:/usr/include/c++/5/bits/vector.tcc **** 	  else
 131:/usr/include/c++/5/bits/vector.tcc **** 	    _M_insert_aux(__pos, __x);
 132:/usr/include/c++/5/bits/vector.tcc **** #else
 133:/usr/include/c++/5/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 134:/usr/include/c++/5/bits/vector.tcc **** #endif
GAS LISTING /tmp/cc2K2nX4.s 			page 558


 135:/usr/include/c++/5/bits/vector.tcc **** 	}
 136:/usr/include/c++/5/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 137:/usr/include/c++/5/bits/vector.tcc ****     }
 138:/usr/include/c++/5/bits/vector.tcc **** 
 139:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 140:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 141:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 142:/usr/include/c++/5/bits/vector.tcc ****     _M_erase(iterator __position)
 143:/usr/include/c++/5/bits/vector.tcc ****     {
 144:/usr/include/c++/5/bits/vector.tcc ****       if (__position + 1 != end())
 145:/usr/include/c++/5/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 146:/usr/include/c++/5/bits/vector.tcc ****       --this->_M_impl._M_finish;
 147:/usr/include/c++/5/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 148:/usr/include/c++/5/bits/vector.tcc ****       return __position;
 149:/usr/include/c++/5/bits/vector.tcc ****     }
 150:/usr/include/c++/5/bits/vector.tcc **** 
 151:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 152:/usr/include/c++/5/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 153:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 154:/usr/include/c++/5/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 155:/usr/include/c++/5/bits/vector.tcc ****     {
 156:/usr/include/c++/5/bits/vector.tcc ****       if (__first != __last)
 157:/usr/include/c++/5/bits/vector.tcc **** 	{
 158:/usr/include/c++/5/bits/vector.tcc **** 	  if (__last != end())
 159:/usr/include/c++/5/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 160:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 161:/usr/include/c++/5/bits/vector.tcc **** 	}
 162:/usr/include/c++/5/bits/vector.tcc ****       return __first;
 163:/usr/include/c++/5/bits/vector.tcc ****     }
 164:/usr/include/c++/5/bits/vector.tcc **** 
 165:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 166:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 167:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 168:/usr/include/c++/5/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 169:/usr/include/c++/5/bits/vector.tcc ****     {
 170:/usr/include/c++/5/bits/vector.tcc ****       if (&__x != this)
 171:/usr/include/c++/5/bits/vector.tcc **** 	{
 172:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 173:/usr/include/c++/5/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 174:/usr/include/c++/5/bits/vector.tcc **** 	    {
 175:/usr/include/c++/5/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 176:/usr/include/c++/5/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 177:/usr/include/c++/5/bits/vector.tcc **** 	        {
 178:/usr/include/c++/5/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 179:/usr/include/c++/5/bits/vector.tcc **** 		  this->clear();
 180:/usr/include/c++/5/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 181:/usr/include/c++/5/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 182:/usr/include/c++/5/bits/vector.tcc **** 				- this->_M_impl._M_start);
 183:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 184:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 185:/usr/include/c++/5/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 186:/usr/include/c++/5/bits/vector.tcc **** 		}
 187:/usr/include/c++/5/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 188:/usr/include/c++/5/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 189:/usr/include/c++/5/bits/vector.tcc **** 	    }
 190:/usr/include/c++/5/bits/vector.tcc **** #endif
 191:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
GAS LISTING /tmp/cc2K2nX4.s 			page 559


 192:/usr/include/c++/5/bits/vector.tcc **** 	  if (__xlen > capacity())
 193:/usr/include/c++/5/bits/vector.tcc **** 	    {
 194:/usr/include/c++/5/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 195:/usr/include/c++/5/bits/vector.tcc **** 						   __x.end());
 196:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 197:/usr/include/c++/5/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 198:/usr/include/c++/5/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 199:/usr/include/c++/5/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 200:/usr/include/c++/5/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 201:/usr/include/c++/5/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 202:/usr/include/c++/5/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 203:/usr/include/c++/5/bits/vector.tcc **** 	    }
 204:/usr/include/c++/5/bits/vector.tcc **** 	  else if (size() >= __xlen)
 205:/usr/include/c++/5/bits/vector.tcc **** 	    {
 206:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 207:/usr/include/c++/5/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 208:/usr/include/c++/5/bits/vector.tcc **** 	    }
 209:/usr/include/c++/5/bits/vector.tcc **** 	  else
 210:/usr/include/c++/5/bits/vector.tcc **** 	    {
 211:/usr/include/c++/5/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 212:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_start);
 213:/usr/include/c++/5/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 214:/usr/include/c++/5/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 215:/usr/include/c++/5/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 216:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 217:/usr/include/c++/5/bits/vector.tcc **** 	    }
 218:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 219:/usr/include/c++/5/bits/vector.tcc **** 	}
 220:/usr/include/c++/5/bits/vector.tcc ****       return *this;
 221:/usr/include/c++/5/bits/vector.tcc ****     }
 222:/usr/include/c++/5/bits/vector.tcc **** 
 223:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 224:/usr/include/c++/5/bits/vector.tcc ****     void
 225:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 226:/usr/include/c++/5/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 227:/usr/include/c++/5/bits/vector.tcc ****     {
 228:/usr/include/c++/5/bits/vector.tcc ****       if (__n > capacity())
 229:/usr/include/c++/5/bits/vector.tcc **** 	{
 230:/usr/include/c++/5/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 231:/usr/include/c++/5/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 232:/usr/include/c++/5/bits/vector.tcc **** 	}
 233:/usr/include/c++/5/bits/vector.tcc ****       else if (__n > size())
 234:/usr/include/c++/5/bits/vector.tcc **** 	{
 235:/usr/include/c++/5/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 236:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 237:/usr/include/c++/5/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 238:/usr/include/c++/5/bits/vector.tcc **** 					  __n - size(), __val,
 239:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 240:/usr/include/c++/5/bits/vector.tcc **** 	}
 241:/usr/include/c++/5/bits/vector.tcc ****       else
 242:/usr/include/c++/5/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 243:/usr/include/c++/5/bits/vector.tcc ****     }
 244:/usr/include/c++/5/bits/vector.tcc **** 
 245:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 246:/usr/include/c++/5/bits/vector.tcc ****     template<typename _InputIterator>
 247:/usr/include/c++/5/bits/vector.tcc ****       void
 248:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
GAS LISTING /tmp/cc2K2nX4.s 			page 560


 249:/usr/include/c++/5/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 250:/usr/include/c++/5/bits/vector.tcc **** 		    std::input_iterator_tag)
 251:/usr/include/c++/5/bits/vector.tcc ****       {
 252:/usr/include/c++/5/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 253:/usr/include/c++/5/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 254:/usr/include/c++/5/bits/vector.tcc **** 	     ++__cur, ++__first)
 255:/usr/include/c++/5/bits/vector.tcc **** 	  *__cur = *__first;
 256:/usr/include/c++/5/bits/vector.tcc **** 	if (__first == __last)
 257:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 258:/usr/include/c++/5/bits/vector.tcc **** 	else
 259:/usr/include/c++/5/bits/vector.tcc **** 	  insert(end(), __first, __last);
 260:/usr/include/c++/5/bits/vector.tcc ****       }
 261:/usr/include/c++/5/bits/vector.tcc **** 
 262:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 263:/usr/include/c++/5/bits/vector.tcc ****     template<typename _ForwardIterator>
 264:/usr/include/c++/5/bits/vector.tcc ****       void
 265:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 266:/usr/include/c++/5/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 267:/usr/include/c++/5/bits/vector.tcc **** 		    std::forward_iterator_tag)
 268:/usr/include/c++/5/bits/vector.tcc ****       {
 269:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 270:/usr/include/c++/5/bits/vector.tcc **** 
 271:/usr/include/c++/5/bits/vector.tcc **** 	if (__len > capacity())
 272:/usr/include/c++/5/bits/vector.tcc **** 	  {
 273:/usr/include/c++/5/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 274:/usr/include/c++/5/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 275:/usr/include/c++/5/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 276:/usr/include/c++/5/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 277:/usr/include/c++/5/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 278:/usr/include/c++/5/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 279:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 280:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 281:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 282:/usr/include/c++/5/bits/vector.tcc **** 	  }
 283:/usr/include/c++/5/bits/vector.tcc **** 	else if (size() >= __len)
 284:/usr/include/c++/5/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 285:/usr/include/c++/5/bits/vector.tcc **** 	else
 286:/usr/include/c++/5/bits/vector.tcc **** 	  {
 287:/usr/include/c++/5/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 288:/usr/include/c++/5/bits/vector.tcc **** 	    std::advance(__mid, size());
 289:/usr/include/c++/5/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 290:/usr/include/c++/5/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 291:/usr/include/c++/5/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 292:/usr/include/c++/5/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 293:/usr/include/c++/5/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 294:/usr/include/c++/5/bits/vector.tcc **** 	  }
 295:/usr/include/c++/5/bits/vector.tcc ****       }
 296:/usr/include/c++/5/bits/vector.tcc **** 
 297:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 298:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 299:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 300:/usr/include/c++/5/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 301:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 302:/usr/include/c++/5/bits/vector.tcc ****       emplace(const_iterator __position, _Args&&... __args)
 303:/usr/include/c++/5/bits/vector.tcc ****       {
 304:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __n = __position - begin();
 305:/usr/include/c++/5/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
GAS LISTING /tmp/cc2K2nX4.s 			page 561


 306:/usr/include/c++/5/bits/vector.tcc **** 	    && __position == end())
 307:/usr/include/c++/5/bits/vector.tcc **** 	  {
 308:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 309:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 310:/usr/include/c++/5/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 311:/usr/include/c++/5/bits/vector.tcc **** 	  }
 312:/usr/include/c++/5/bits/vector.tcc **** 	else
 313:/usr/include/c++/5/bits/vector.tcc **** 	  _M_insert_aux(begin() + (__position - cbegin()),
 314:/usr/include/c++/5/bits/vector.tcc **** 			std::forward<_Args>(__args)...);
 315:/usr/include/c++/5/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 316:/usr/include/c++/5/bits/vector.tcc ****       }
 317:/usr/include/c++/5/bits/vector.tcc **** 
 318:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 319:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 320:/usr/include/c++/5/bits/vector.tcc ****       void
 321:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 322:/usr/include/c++/5/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 323:/usr/include/c++/5/bits/vector.tcc **** #else
 324:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 325:/usr/include/c++/5/bits/vector.tcc ****     void
 326:/usr/include/c++/5/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 327:/usr/include/c++/5/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 328:/usr/include/c++/5/bits/vector.tcc **** #endif
 329:/usr/include/c++/5/bits/vector.tcc ****     {
 330:/usr/include/c++/5/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 331:/usr/include/c++/5/bits/vector.tcc **** 	{
 332:/usr/include/c++/5/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 333:/usr/include/c++/5/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 334:/usr/include/c++/5/bits/vector.tcc **** 				                   - 1)));
 335:/usr/include/c++/5/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 336:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus < 201103L
 337:/usr/include/c++/5/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 338:/usr/include/c++/5/bits/vector.tcc **** #endif
 339:/usr/include/c++/5/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 340:/usr/include/c++/5/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 341:/usr/include/c++/5/bits/vector.tcc **** 				  this->_M_impl._M_finish - 1);
 342:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus < 201103L
 343:/usr/include/c++/5/bits/vector.tcc **** 	  *__position = __x_copy;
 344:/usr/include/c++/5/bits/vector.tcc **** #else
 345:/usr/include/c++/5/bits/vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 346:/usr/include/c++/5/bits/vector.tcc **** #endif
 347:/usr/include/c++/5/bits/vector.tcc **** 	}
 348:/usr/include/c++/5/bits/vector.tcc ****       else
 349:/usr/include/c++/5/bits/vector.tcc **** 	{
 350:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __len =
 351:/usr/include/c++/5/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 352:/usr/include/c++/5/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 353:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 354:/usr/include/c++/5/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 355:/usr/include/c++/5/bits/vector.tcc **** 	  __try
 356:/usr/include/c++/5/bits/vector.tcc **** 	    {
 357:/usr/include/c++/5/bits/vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 358:/usr/include/c++/5/bits/vector.tcc **** 	      // case, where the moves could alter a new element belonging
 359:/usr/include/c++/5/bits/vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 360:/usr/include/c++/5/bits/vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 361:/usr/include/c++/5/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl,
 362:/usr/include/c++/5/bits/vector.tcc **** 		                       __new_start + __elems_before,
GAS LISTING /tmp/cc2K2nX4.s 			page 562


 363:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 364:/usr/include/c++/5/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 365:/usr/include/c++/5/bits/vector.tcc **** #else
 366:/usr/include/c++/5/bits/vector.tcc **** 	                               __x);
 367:/usr/include/c++/5/bits/vector.tcc **** #endif
 368:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish = pointer();
 369:/usr/include/c++/5/bits/vector.tcc **** 
 370:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish
 371:/usr/include/c++/5/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 372:/usr/include/c++/5/bits/vector.tcc **** 		(this->_M_impl._M_start, __position.base(),
 373:/usr/include/c++/5/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 374:/usr/include/c++/5/bits/vector.tcc **** 
 375:/usr/include/c++/5/bits/vector.tcc **** 	      ++__new_finish;
 376:/usr/include/c++/5/bits/vector.tcc **** 
 377:/usr/include/c++/5/bits/vector.tcc **** 	      __new_finish
 378:/usr/include/c++/5/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 379:/usr/include/c++/5/bits/vector.tcc **** 		(__position.base(), this->_M_impl._M_finish,
 380:/usr/include/c++/5/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 381:/usr/include/c++/5/bits/vector.tcc **** 	    }
 382:/usr/include/c++/5/bits/vector.tcc ****           __catch(...)
 383:/usr/include/c++/5/bits/vector.tcc **** 	    {
 384:/usr/include/c++/5/bits/vector.tcc **** 	      if (!__new_finish)
 385:/usr/include/c++/5/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 386:/usr/include/c++/5/bits/vector.tcc **** 		                       __new_start + __elems_before);
 387:/usr/include/c++/5/bits/vector.tcc **** 	      else
 388:/usr/include/c++/5/bits/vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 389:/usr/include/c++/5/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 390:/usr/include/c++/5/bits/vector.tcc **** 	      __throw_exception_again;
 391:/usr/include/c++/5/bits/vector.tcc **** 	    }
 392:/usr/include/c++/5/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 393:/usr/include/c++/5/bits/vector.tcc **** 			_M_get_Tp_allocator());
 394:/usr/include/c++/5/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 395:/usr/include/c++/5/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 396:/usr/include/c++/5/bits/vector.tcc **** 			- this->_M_impl._M_start);
 397:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 398:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 399:/usr/include/c++/5/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 400:/usr/include/c++/5/bits/vector.tcc **** 	}
 401:/usr/include/c++/5/bits/vector.tcc ****     }
 402:/usr/include/c++/5/bits/vector.tcc **** 
 403:/usr/include/c++/5/bits/vector.tcc **** #if __cplusplus >= 201103L
 404:/usr/include/c++/5/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 405:/usr/include/c++/5/bits/vector.tcc ****     template<typename... _Args>
 406:/usr/include/c++/5/bits/vector.tcc ****       void
 407:/usr/include/c++/5/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 15543              		.loc 19 407 0
 15544              		.cfi_startproc
 15545              		.cfi_personality 0x3,__gxx_personality_v0
 15546              		.cfi_lsda 0x3,.LLSDA7433
 15547 0000 55       		pushq	%rbp
 15548              		.cfi_def_cfa_offset 16
 15549              		.cfi_offset 6, -16
 15550 0001 4889E5   		movq	%rsp, %rbp
 15551              		.cfi_def_cfa_register 6
 15552 0004 53       		pushq	%rbx
 15553 0005 4883EC38 		subq	$56, %rsp
 15554              		.cfi_offset 3, -24
GAS LISTING /tmp/cc2K2nX4.s 			page 563


 15555 0009 48897DC8 		movq	%rdi, -56(%rbp)
 15556 000d 488975C0 		movq	%rsi, -64(%rbp)
 408:/usr/include/c++/5/bits/vector.tcc ****       _M_emplace_back_aux(_Args&&... __args)
 409:/usr/include/c++/5/bits/vector.tcc ****       {
 410:/usr/include/c++/5/bits/vector.tcc **** 	const size_type __len =
 411:/usr/include/c++/5/bits/vector.tcc **** 	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 15557              		.loc 19 411 0
 15558 0011 488B45C8 		movq	-56(%rbp), %rax
 15559 0015 BA000000 		movl	$.LC27, %edx
 15559      00
 15560 001a BE010000 		movl	$1, %esi
 15560      00
 15561 001f 4889C7   		movq	%rax, %rdi
 15562              	.LEHB175:
 15563 0022 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc
 15563      00
 15564 0027 488945E0 		movq	%rax, -32(%rbp)
 412:/usr/include/c++/5/bits/vector.tcc **** 	pointer __new_start(this->_M_allocate(__len));
 15565              		.loc 19 412 0
 15566 002b 488B45C8 		movq	-56(%rbp), %rax
 15567 002f 488B55E0 		movq	-32(%rbp), %rdx
 15568 0033 4889D6   		movq	%rdx, %rsi
 15569 0036 4889C7   		movq	%rax, %rdi
 15570 0039 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm
 15570      00
 15571              	.LEHE175:
 15572 003e 488945E8 		movq	%rax, -24(%rbp)
 413:/usr/include/c++/5/bits/vector.tcc **** 	pointer __new_finish(__new_start);
 15573              		.loc 19 413 0
 15574 0042 488B45E8 		movq	-24(%rbp), %rax
 15575 0046 488945D8 		movq	%rax, -40(%rbp)
 414:/usr/include/c++/5/bits/vector.tcc **** 	__try
 415:/usr/include/c++/5/bits/vector.tcc **** 	  {
 416:/usr/include/c++/5/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
 417:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 15576              		.loc 19 417 0
 15577 004a 488B45C0 		movq	-64(%rbp), %rax
 15578 004e 4889C7   		movq	%rax, %rdi
 15579 0051 E8000000 		call	_ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE
 15579      00
 15580 0056 4889C3   		movq	%rax, %rbx
 416:/usr/include/c++/5/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 15581              		.loc 19 416 0
 15582 0059 488B45C8 		movq	-56(%rbp), %rax
 15583 005d 4889C7   		movq	%rax, %rdi
 15584 0060 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 15584      00
 15585 0065 48C1E005 		salq	$5, %rax
 15586 0069 4889C2   		movq	%rax, %rdx
 15587 006c 488B45E8 		movq	-24(%rbp), %rax
 15588 0070 488D0C02 		leaq	(%rdx,%rax), %rcx
 15589 0074 488B45C8 		movq	-56(%rbp), %rax
 15590 0078 4889DA   		movq	%rbx, %rdx
 15591 007b 4889CE   		movq	%rcx, %rsi
 15592 007e 4889C7   		movq	%rax, %rdi
 15593 0081 E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_
 15593      00
GAS LISTING /tmp/cc2K2nX4.s 			page 564


 418:/usr/include/c++/5/bits/vector.tcc **** 	    __new_finish = pointer();
 15594              		.loc 19 418 0
 15595 0086 48C745D8 		movq	$0, -40(%rbp)
 15595      00000000 
 419:/usr/include/c++/5/bits/vector.tcc **** 
 420:/usr/include/c++/5/bits/vector.tcc **** 	    __new_finish
 421:/usr/include/c++/5/bits/vector.tcc **** 	      = std::__uninitialized_move_if_noexcept_a
 422:/usr/include/c++/5/bits/vector.tcc **** 	      (this->_M_impl._M_start, this->_M_impl._M_finish,
 423:/usr/include/c++/5/bits/vector.tcc **** 	       __new_start, _M_get_Tp_allocator());
 15596              		.loc 19 423 0
 15597 008e 488B45C8 		movq	-56(%rbp), %rax
 15598 0092 4889C7   		movq	%rax, %rdi
 15599 0095 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 15599      00
 15600 009a 4889C1   		movq	%rax, %rcx
 422:/usr/include/c++/5/bits/vector.tcc **** 	       __new_start, _M_get_Tp_allocator());
 15601              		.loc 19 422 0
 15602 009d 488B45C8 		movq	-56(%rbp), %rax
 15603 00a1 488B7008 		movq	8(%rax), %rsi
 15604 00a5 488B45C8 		movq	-56(%rbp), %rax
 15605 00a9 488B00   		movq	(%rax), %rax
 420:/usr/include/c++/5/bits/vector.tcc **** 	      = std::__uninitialized_move_if_noexcept_a
 15606              		.loc 19 420 0
 15607 00ac 488B55E8 		movq	-24(%rbp), %rdx
 15608 00b0 4889C7   		movq	%rax, %rdi
 15609              	.LEHB176:
 15610 00b3 E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_
 15610      00
 15611              	.LEHE176:
 15612 00b8 488945D8 		movq	%rax, -40(%rbp)
 424:/usr/include/c++/5/bits/vector.tcc **** 
 425:/usr/include/c++/5/bits/vector.tcc **** 	    ++__new_finish;
 15613              		.loc 19 425 0
 15614 00bc 488345D8 		addq	$32, -40(%rbp)
 15614      20
 426:/usr/include/c++/5/bits/vector.tcc **** 	  }
 427:/usr/include/c++/5/bits/vector.tcc **** 	__catch(...)
 428:/usr/include/c++/5/bits/vector.tcc **** 	  {
 429:/usr/include/c++/5/bits/vector.tcc **** 	    if (!__new_finish)
 430:/usr/include/c++/5/bits/vector.tcc **** 	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 431:/usr/include/c++/5/bits/vector.tcc **** 	    else
 432:/usr/include/c++/5/bits/vector.tcc **** 	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 433:/usr/include/c++/5/bits/vector.tcc **** 	    _M_deallocate(__new_start, __len);
 434:/usr/include/c++/5/bits/vector.tcc **** 	    __throw_exception_again;
 435:/usr/include/c++/5/bits/vector.tcc **** 	  }
 436:/usr/include/c++/5/bits/vector.tcc **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 437:/usr/include/c++/5/bits/vector.tcc **** 		      _M_get_Tp_allocator());
 15615              		.loc 19 437 0
 15616 00c1 488B45C8 		movq	-56(%rbp), %rax
 15617 00c5 4889C7   		movq	%rax, %rdi
 15618 00c8 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 15618      00
 15619 00cd 4889C2   		movq	%rax, %rdx
 436:/usr/include/c++/5/bits/vector.tcc **** 		      _M_get_Tp_allocator());
 15620              		.loc 19 436 0
 15621 00d0 488B45C8 		movq	-56(%rbp), %rax
 15622 00d4 488B4808 		movq	8(%rax), %rcx
GAS LISTING /tmp/cc2K2nX4.s 			page 565


 15623 00d8 488B45C8 		movq	-56(%rbp), %rax
 15624 00dc 488B00   		movq	(%rax), %rax
 15625 00df 4889CE   		movq	%rcx, %rsi
 15626 00e2 4889C7   		movq	%rax, %rdi
 15627              	.LEHB177:
 15628 00e5 E8000000 		call	_ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E
 15628      00
 438:/usr/include/c++/5/bits/vector.tcc **** 	_M_deallocate(this->_M_impl._M_start,
 439:/usr/include/c++/5/bits/vector.tcc **** 		      this->_M_impl._M_end_of_storage
 440:/usr/include/c++/5/bits/vector.tcc **** 		      - this->_M_impl._M_start);
 15629              		.loc 19 440 0
 15630 00ea 488B45C8 		movq	-56(%rbp), %rax
 15631 00ee 488B4010 		movq	16(%rax), %rax
 438:/usr/include/c++/5/bits/vector.tcc **** 	_M_deallocate(this->_M_impl._M_start,
 15632              		.loc 19 438 0
 15633 00f2 4889C2   		movq	%rax, %rdx
 15634              		.loc 19 440 0
 15635 00f5 488B45C8 		movq	-56(%rbp), %rax
 15636 00f9 488B00   		movq	(%rax), %rax
 438:/usr/include/c++/5/bits/vector.tcc **** 	_M_deallocate(this->_M_impl._M_start,
 15637              		.loc 19 438 0
 15638 00fc 4829C2   		subq	%rax, %rdx
 15639 00ff 4889D0   		movq	%rdx, %rax
 15640 0102 48C1F805 		sarq	$5, %rax
 15641 0106 4889C2   		movq	%rax, %rdx
 15642 0109 488B45C8 		movq	-56(%rbp), %rax
 15643 010d 488B08   		movq	(%rax), %rcx
 15644 0110 488B45C8 		movq	-56(%rbp), %rax
 15645 0114 4889CE   		movq	%rcx, %rsi
 15646 0117 4889C7   		movq	%rax, %rdi
 15647 011a E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m
 15647      00
 15648              	.LEHE177:
 441:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_start = __new_start;
 15649              		.loc 19 441 0
 15650 011f 488B45C8 		movq	-56(%rbp), %rax
 15651 0123 488B55E8 		movq	-24(%rbp), %rdx
 15652 0127 488910   		movq	%rdx, (%rax)
 442:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_finish = __new_finish;
 15653              		.loc 19 442 0
 15654 012a 488B45C8 		movq	-56(%rbp), %rax
 15655 012e 488B55D8 		movq	-40(%rbp), %rdx
 15656 0132 48895008 		movq	%rdx, 8(%rax)
 443:/usr/include/c++/5/bits/vector.tcc **** 	this->_M_impl._M_end_of_storage = __new_start + __len;
 15657              		.loc 19 443 0
 15658 0136 488B45E0 		movq	-32(%rbp), %rax
 15659 013a 48C1E005 		salq	$5, %rax
 15660 013e 4889C2   		movq	%rax, %rdx
 15661 0141 488B45E8 		movq	-24(%rbp), %rax
 15662 0145 4801C2   		addq	%rax, %rdx
 15663 0148 488B45C8 		movq	-56(%rbp), %rax
 15664 014c 48895010 		movq	%rdx, 16(%rax)
 444:/usr/include/c++/5/bits/vector.tcc ****       }
 15665              		.loc 19 444 0
 15666 0150 E98B0000 		jmp	.L1286
 15666      00
 15667              	.L1284:
GAS LISTING /tmp/cc2K2nX4.s 			page 566


 427:/usr/include/c++/5/bits/vector.tcc **** 	  {
 15668              		.loc 19 427 0
 15669 0155 4889C7   		movq	%rax, %rdi
 15670 0158 E8000000 		call	__cxa_begin_catch
 15670      00
 429:/usr/include/c++/5/bits/vector.tcc **** 	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 15671              		.loc 19 429 0
 15672 015d 48837DD8 		cmpq	$0, -40(%rbp)
 15672      00
 15673 0162 752B     		jne	.L1281
 430:/usr/include/c++/5/bits/vector.tcc **** 	    else
 15674              		.loc 19 430 0
 15675 0164 488B45C8 		movq	-56(%rbp), %rax
 15676 0168 4889C7   		movq	%rax, %rdi
 15677 016b E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 15677      00
 15678 0170 48C1E005 		salq	$5, %rax
 15679 0174 4889C2   		movq	%rax, %rdx
 15680 0177 488B45E8 		movq	-24(%rbp), %rax
 15681 017b 4801C2   		addq	%rax, %rdx
 15682 017e 488B45C8 		movq	-56(%rbp), %rax
 15683 0182 4889D6   		movq	%rdx, %rsi
 15684 0185 4889C7   		movq	%rax, %rdi
 15685              	.LEHB178:
 15686 0188 E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_
 15686      00
 15687 018d EB22     		jmp	.L1282
 15688              	.L1281:
 432:/usr/include/c++/5/bits/vector.tcc **** 	    _M_deallocate(__new_start, __len);
 15689              		.loc 19 432 0
 15690 018f 488B45C8 		movq	-56(%rbp), %rax
 15691 0193 4889C7   		movq	%rax, %rdi
 15692 0196 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 15692      00
 15693 019b 4889C2   		movq	%rax, %rdx
 15694 019e 488B4DD8 		movq	-40(%rbp), %rcx
 15695 01a2 488B45E8 		movq	-24(%rbp), %rax
 15696 01a6 4889CE   		movq	%rcx, %rsi
 15697 01a9 4889C7   		movq	%rax, %rdi
 15698 01ac E8000000 		call	_ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E
 15698      00
 15699              	.L1282:
 433:/usr/include/c++/5/bits/vector.tcc **** 	    __throw_exception_again;
 15700              		.loc 19 433 0
 15701 01b1 488B45C8 		movq	-56(%rbp), %rax
 15702 01b5 488B55E0 		movq	-32(%rbp), %rdx
 15703 01b9 488B4DE8 		movq	-24(%rbp), %rcx
 15704 01bd 4889CE   		movq	%rcx, %rsi
 15705 01c0 4889C7   		movq	%rax, %rdi
 15706 01c3 E8000000 		call	_ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m
 15706      00
 434:/usr/include/c++/5/bits/vector.tcc **** 	  }
 15707              		.loc 19 434 0
 15708 01c8 E8000000 		call	__cxa_rethrow
 15708      00
 15709              	.LEHE178:
 15710              	.L1285:
GAS LISTING /tmp/cc2K2nX4.s 			page 567


 15711 01cd 4889C3   		movq	%rax, %rbx
 427:/usr/include/c++/5/bits/vector.tcc **** 	  {
 15712              		.loc 19 427 0
 15713 01d0 E8000000 		call	__cxa_end_catch
 15713      00
 15714 01d5 4889D8   		movq	%rbx, %rax
 15715 01d8 4889C7   		movq	%rax, %rdi
 15716              	.LEHB179:
 15717 01db E8000000 		call	_Unwind_Resume
 15717      00
 15718              	.LEHE179:
 15719              	.L1286:
 15720              		.loc 19 444 0
 15721 01e0 4883C438 		addq	$56, %rsp
 15722 01e4 5B       		popq	%rbx
 15723 01e5 5D       		popq	%rbp
 15724              		.cfi_def_cfa 7, 8
 15725 01e6 C3       		ret
 15726              		.cfi_endproc
 15727              	.LFE7433:
 15728              		.section	.gcc_except_table
 15729              		.align 4
 15730              	.LLSDA7433:
 15731 043c FF       		.byte	0xff
 15732 043d 03       		.byte	0x3
 15733 043e 25       		.uleb128 .LLSDATT7433-.LLSDATTD7433
 15734              	.LLSDATTD7433:
 15735 043f 01       		.byte	0x1
 15736 0440 1A       		.uleb128 .LLSDACSE7433-.LLSDACSB7433
 15737              	.LLSDACSB7433:
 15738 0441 22       		.uleb128 .LEHB175-.LFB7433
 15739 0442 1C       		.uleb128 .LEHE175-.LEHB175
 15740 0443 00       		.uleb128 0
 15741 0444 00       		.uleb128 0
 15742 0445 B301     		.uleb128 .LEHB176-.LFB7433
 15743 0447 05       		.uleb128 .LEHE176-.LEHB176
 15744 0448 D502     		.uleb128 .L1284-.LFB7433
 15745 044a 01       		.uleb128 0x1
 15746 044b E501     		.uleb128 .LEHB177-.LFB7433
 15747 044d 3A       		.uleb128 .LEHE177-.LEHB177
 15748 044e 00       		.uleb128 0
 15749 044f 00       		.uleb128 0
 15750 0450 8803     		.uleb128 .LEHB178-.LFB7433
 15751 0452 45       		.uleb128 .LEHE178-.LEHB178
 15752 0453 CD03     		.uleb128 .L1285-.LFB7433
 15753 0455 00       		.uleb128 0
 15754 0456 DB03     		.uleb128 .LEHB179-.LFB7433
 15755 0458 05       		.uleb128 .LEHE179-.LEHB179
 15756 0459 00       		.uleb128 0
 15757 045a 00       		.uleb128 0
 15758              	.LLSDACSE7433:
 15759 045b 01       		.byte	0x1
 15760 045c 00       		.byte	0
 15761 045d 000000   		.align 4
 15762 0460 00000000 		.long	0
 15763              	
 15764              	.LLSDATT7433:
GAS LISTING /tmp/cc2K2nX4.s 			page 568


 15765              		.section	.text._ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_,"axG",@progb
 15767              		.weak	_ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_
 15768              		.set	_ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_,_ZNSt6vectorI10vector_
 15769              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_
 15770              		.align 2
 15771              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev
 15773              	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev:
 15774              	.LFB7470:
  86:/usr/include/c++/5/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 15775              		.loc 15 86 0
 15776              		.cfi_startproc
 15777 0000 55       		pushq	%rbp
 15778              		.cfi_def_cfa_offset 16
 15779              		.cfi_offset 6, -16
 15780 0001 4889E5   		movq	%rsp, %rbp
 15781              		.cfi_def_cfa_register 6
 15782 0004 4883EC10 		subq	$16, %rsp
 15783 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15784              	.LBB96:
  87:/usr/include/c++/5/bits/stl_vector.h **** 	{ }
 15785              		.loc 15 87 0
 15786 000c 488B45F8 		movq	-8(%rbp), %rax
 15787 0010 4889C7   		movq	%rax, %rdi
 15788 0013 E8000000 		call	_ZNSaI10vector_varEC2Ev
 15788      00
 15789 0018 488B45F8 		movq	-8(%rbp), %rax
 15790 001c 48C70000 		movq	$0, (%rax)
 15790      000000
 15791 0023 488B45F8 		movq	-8(%rbp), %rax
 15792 0027 48C74008 		movq	$0, 8(%rax)
 15792      00000000 
 15793 002f 488B45F8 		movq	-8(%rbp), %rax
 15794 0033 48C74010 		movq	$0, 16(%rax)
 15794      00000000 
 15795              	.LBE96:
  88:/usr/include/c++/5/bits/stl_vector.h **** 
 15796              		.loc 15 88 0
 15797 003b 90       		nop
 15798 003c C9       		leave
 15799              		.cfi_def_cfa 7, 8
 15800 003d C3       		ret
 15801              		.cfi_endproc
 15802              	.LFE7470:
 15804              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC1Ev
 15805              		.set	_ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC1Ev,_ZNSt12_Vector_baseI10vector_varSa
 15806              		.section	.text._ZNSaI10vector_varED2Ev,"axG",@progbits,_ZNSaI10vector_varED5Ev,comdat
 15807              		.align 2
 15808              		.weak	_ZNSaI10vector_varED2Ev
 15810              	_ZNSaI10vector_varED2Ev:
 15811              	.LFB7473:
 15812              		.file 20 "/usr/include/c++/5/bits/allocator.h"
   1:/usr/include/c++/5/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/5/bits/allocator.h **** 
   3:/usr/include/c++/5/bits/allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/allocator.h **** //
   5:/usr/include/c++/5/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
GAS LISTING /tmp/cc2K2nX4.s 			page 569


   7:/usr/include/c++/5/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/allocator.h **** // any later version.
  10:/usr/include/c++/5/bits/allocator.h **** 
  11:/usr/include/c++/5/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/allocator.h **** 
  16:/usr/include/c++/5/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/allocator.h **** 
  20:/usr/include/c++/5/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/allocator.h **** 
  25:/usr/include/c++/5/bits/allocator.h **** /*
  26:/usr/include/c++/5/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/5/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/5/bits/allocator.h ****  *
  29:/usr/include/c++/5/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/5/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/5/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/5/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/5/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/5/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/5/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/5/bits/allocator.h ****  */
  37:/usr/include/c++/5/bits/allocator.h **** 
  38:/usr/include/c++/5/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/5/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/5/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/5/bits/allocator.h ****  */
  42:/usr/include/c++/5/bits/allocator.h **** 
  43:/usr/include/c++/5/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/5/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/5/bits/allocator.h **** 
  46:/usr/include/c++/5/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/5/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/5/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/5/bits/allocator.h **** #endif
  51:/usr/include/c++/5/bits/allocator.h **** 
  52:/usr/include/c++/5/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/5/bits/allocator.h **** {
  54:/usr/include/c++/5/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/5/bits/allocator.h **** 
  56:/usr/include/c++/5/bits/allocator.h ****   /**
  57:/usr/include/c++/5/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/5/bits/allocator.h ****    *  @{
  59:/usr/include/c++/5/bits/allocator.h ****    */
  60:/usr/include/c++/5/bits/allocator.h **** 
  61:/usr/include/c++/5/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/5/bits/allocator.h ****   template<>
  63:/usr/include/c++/5/bits/allocator.h ****     class allocator<void>
GAS LISTING /tmp/cc2K2nX4.s 			page 570


  64:/usr/include/c++/5/bits/allocator.h ****     {
  65:/usr/include/c++/5/bits/allocator.h ****     public:
  66:/usr/include/c++/5/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/5/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/5/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/5/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/5/bits/allocator.h **** 
  72:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/5/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/5/bits/allocator.h **** 
  76:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/5/bits/allocator.h **** #endif
  81:/usr/include/c++/5/bits/allocator.h ****     };
  82:/usr/include/c++/5/bits/allocator.h **** 
  83:/usr/include/c++/5/bits/allocator.h ****   /**
  84:/usr/include/c++/5/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/5/bits/allocator.h ****    *
  86:/usr/include/c++/5/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
  87:/usr/include/c++/5/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/5/bits/allocator.h ****    *
  89:/usr/include/c++/5/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/5/bits/allocator.h ****    */
  91:/usr/include/c++/5/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/5/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/5/bits/allocator.h ****     {
  94:/usr/include/c++/5/bits/allocator.h ****    public:
  95:/usr/include/c++/5/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/5/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/5/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/5/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/5/bits/allocator.h **** 
 103:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/5/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/5/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/5/bits/allocator.h **** 
 107:/usr/include/c++/5/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/5/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/5/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/5/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/5/bits/allocator.h **** #endif
 112:/usr/include/c++/5/bits/allocator.h **** 
 113:/usr/include/c++/5/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/5/bits/allocator.h **** 
 115:/usr/include/c++/5/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/5/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/5/bits/allocator.h **** 
 118:/usr/include/c++/5/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/5/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/5/bits/allocator.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 571


 121:/usr/include/c++/5/bits/allocator.h ****       ~allocator() throw() { }
 15813              		.loc 20 121 0
 15814              		.cfi_startproc
 15815 0000 55       		pushq	%rbp
 15816              		.cfi_def_cfa_offset 16
 15817              		.cfi_offset 6, -16
 15818 0001 4889E5   		movq	%rsp, %rbp
 15819              		.cfi_def_cfa_register 6
 15820 0004 4883EC10 		subq	$16, %rsp
 15821 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15822              	.LBB97:
 15823              		.loc 20 121 0
 15824 000c 488B45F8 		movq	-8(%rbp), %rax
 15825 0010 4889C7   		movq	%rax, %rdi
 15826 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev
 15826      00
 15827              	.LBE97:
 15828 0018 90       		nop
 15829 0019 C9       		leave
 15830              		.cfi_def_cfa 7, 8
 15831 001a C3       		ret
 15832              		.cfi_endproc
 15833              	.LFE7473:
 15835              		.weak	_ZNSaI10vector_varED1Ev
 15836              		.set	_ZNSaI10vector_varED1Ev,_ZNSaI10vector_varED2Ev
 15837              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m,"axG",@progbits,_ZNSt
 15838              		.align 2
 15839              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m
 15841              	_ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m:
 15842              	.LFB7475:
 174:/usr/include/c++/5/bits/stl_vector.h ****       {
 15843              		.loc 15 174 0
 15844              		.cfi_startproc
 15845 0000 55       		pushq	%rbp
 15846              		.cfi_def_cfa_offset 16
 15847              		.cfi_offset 6, -16
 15848 0001 4889E5   		movq	%rsp, %rbp
 15849              		.cfi_def_cfa_register 6
 15850 0004 4883EC20 		subq	$32, %rsp
 15851 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15852 000c 488975F0 		movq	%rsi, -16(%rbp)
 15853 0010 488955E8 		movq	%rdx, -24(%rbp)
 177:/usr/include/c++/5/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 15854              		.loc 15 177 0
 15855 0014 48837DF0 		cmpq	$0, -16(%rbp)
 15855      00
 15856 0019 7417     		je	.L1291
 178:/usr/include/c++/5/bits/stl_vector.h ****       }
 15857              		.loc 15 178 0
 15858 001b 488B45F8 		movq	-8(%rbp), %rax
 15859 001f 488B55E8 		movq	-24(%rbp), %rdx
 15860 0023 488B4DF0 		movq	-16(%rbp), %rcx
 15861 0027 4889CE   		movq	%rcx, %rsi
 15862 002a 4889C7   		movq	%rax, %rdi
 15863 002d E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m
 15863      00
 15864              	.L1291:
GAS LISTING /tmp/cc2K2nX4.s 			page 572


 179:/usr/include/c++/5/bits/stl_vector.h **** 
 15865              		.loc 15 179 0
 15866 0032 90       		nop
 15867 0033 C9       		leave
 15868              		.cfi_def_cfa 7, 8
 15869 0034 C3       		ret
 15870              		.cfi_endproc
 15871              	.LFE7475:
 15873              		.section	.text._ZSt8_DestroyIP10vector_varEvT_S2_,"axG",@progbits,_ZSt8_DestroyIP10vector_varEvT_S
 15874              		.weak	_ZSt8_DestroyIP10vector_varEvT_S2_
 15876              	_ZSt8_DestroyIP10vector_varEvT_S2_:
 15877              	.LFB7476:
 122:/usr/include/c++/5/bits/stl_construct.h ****     {
 15878              		.loc 16 122 0
 15879              		.cfi_startproc
 15880 0000 55       		pushq	%rbp
 15881              		.cfi_def_cfa_offset 16
 15882              		.cfi_offset 6, -16
 15883 0001 4889E5   		movq	%rsp, %rbp
 15884              		.cfi_def_cfa_register 6
 15885 0004 4883EC10 		subq	$16, %rsp
 15886 0008 48897DF8 		movq	%rdi, -8(%rbp)
 15887 000c 488975F0 		movq	%rsi, -16(%rbp)
 126:/usr/include/c++/5/bits/stl_construct.h **** 	__destroy(__first, __last);
 15888              		.loc 16 126 0
 15889 0010 488B55F0 		movq	-16(%rbp), %rdx
 15890 0014 488B45F8 		movq	-8(%rbp), %rax
 15891 0018 4889D6   		movq	%rdx, %rsi
 15892 001b 4889C7   		movq	%rax, %rdi
 15893 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_
 15893      00
 128:/usr/include/c++/5/bits/stl_construct.h **** 
 15894              		.loc 16 128 0
 15895 0023 90       		nop
 15896 0024 C9       		leave
 15897              		.cfi_def_cfa 7, 8
 15898 0025 C3       		ret
 15899              		.cfi_endproc
 15900              	.LFE7476:
 15902              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_,"axG",@
 15903              		.align 2
 15904              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_
 15906              	_ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_:
 15907              	.LFB7480:
 15908              		.file 21 "/usr/include/c++/5/ext/new_allocator.h"
   1:/usr/include/c++/5/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/5/ext/new_allocator.h **** 
   3:/usr/include/c++/5/ext/new_allocator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/ext/new_allocator.h **** //
   5:/usr/include/c++/5/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/5/ext/new_allocator.h **** 
  11:/usr/include/c++/5/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
GAS LISTING /tmp/cc2K2nX4.s 			page 573


  13:/usr/include/c++/5/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/ext/new_allocator.h **** 
  16:/usr/include/c++/5/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/ext/new_allocator.h **** 
  20:/usr/include/c++/5/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/ext/new_allocator.h **** 
  25:/usr/include/c++/5/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/5/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/5/ext/new_allocator.h ****  */
  28:/usr/include/c++/5/ext/new_allocator.h **** 
  29:/usr/include/c++/5/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/5/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/5/ext/new_allocator.h **** 
  32:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/5/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/5/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/5/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/5/ext/new_allocator.h **** #endif
  39:/usr/include/c++/5/ext/new_allocator.h **** 
  40:/usr/include/c++/5/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/5/ext/new_allocator.h **** {
  42:/usr/include/c++/5/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/5/ext/new_allocator.h **** 
  44:/usr/include/c++/5/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/5/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/5/ext/new_allocator.h **** 
  47:/usr/include/c++/5/ext/new_allocator.h ****   /**
  48:/usr/include/c++/5/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/5/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/5/ext/new_allocator.h ****    *
  51:/usr/include/c++/5/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/5/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/5/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/5/ext/new_allocator.h ****    *
  55:/usr/include/c++/5/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/5/ext/new_allocator.h ****    */
  57:/usr/include/c++/5/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/5/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/5/ext/new_allocator.h ****     {
  60:/usr/include/c++/5/ext/new_allocator.h ****     public:
  61:/usr/include/c++/5/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/5/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/5/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/5/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/5/ext/new_allocator.h **** 
  69:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
GAS LISTING /tmp/cc2K2nX4.s 			page 574


  70:/usr/include/c++/5/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/5/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/5/ext/new_allocator.h **** 
  73:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/5/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/5/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/5/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/5/ext/new_allocator.h **** #endif
  78:/usr/include/c++/5/ext/new_allocator.h **** 
  79:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/5/ext/new_allocator.h **** 
  81:/usr/include/c++/5/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/5/ext/new_allocator.h **** 
  83:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/5/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/5/ext/new_allocator.h **** 
  86:/usr/include/c++/5/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/5/ext/new_allocator.h **** 
  88:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/5/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/5/ext/new_allocator.h **** 
  92:/usr/include/c++/5/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/5/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/5/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/5/ext/new_allocator.h **** 
  96:/usr/include/c++/5/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/5/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/5/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/5/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/5/ext/new_allocator.h ****       { 
 101:/usr/include/c++/5/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/5/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/5/ext/new_allocator.h **** 
 104:/usr/include/c++/5/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/5/ext/new_allocator.h ****       }
 106:/usr/include/c++/5/ext/new_allocator.h **** 
 107:/usr/include/c++/5/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/5/ext/new_allocator.h ****       void
 109:/usr/include/c++/5/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 110:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 111:/usr/include/c++/5/ext/new_allocator.h **** 
 112:/usr/include/c++/5/ext/new_allocator.h ****       size_type
 113:/usr/include/c++/5/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:/usr/include/c++/5/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:/usr/include/c++/5/ext/new_allocator.h **** 
 116:/usr/include/c++/5/ext/new_allocator.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 118:/usr/include/c++/5/ext/new_allocator.h ****         void
 119:/usr/include/c++/5/ext/new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 15909              		.loc 21 119 0
 15910              		.cfi_startproc
 15911 0000 55       		pushq	%rbp
 15912              		.cfi_def_cfa_offset 16
 15913              		.cfi_offset 6, -16
 15914 0001 4889E5   		movq	%rsp, %rbp
 15915              		.cfi_def_cfa_register 6
GAS LISTING /tmp/cc2K2nX4.s 			page 575


 15916 0004 53       		pushq	%rbx
 15917 0005 4883EC28 		subq	$40, %rsp
 15918              		.cfi_offset 3, -24
 15919 0009 48897DE8 		movq	%rdi, -24(%rbp)
 15920 000d 488975E0 		movq	%rsi, -32(%rbp)
 15921 0011 488955D8 		movq	%rdx, -40(%rbp)
 120:/usr/include/c++/5/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 15922              		.loc 21 120 0
 15923 0015 488B45D8 		movq	-40(%rbp), %rax
 15924 0019 4889C7   		movq	%rax, %rdi
 15925 001c E8000000 		call	_ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE
 15925      00
 15926 0021 4889C3   		movq	%rax, %rbx
 15927 0024 488B45E0 		movq	-32(%rbp), %rax
 15928 0028 4889C6   		movq	%rax, %rsi
 15929 002b BF200000 		movl	$32, %edi
 15929      00
 15930 0030 E8000000 		call	_ZnwmPv
 15930      00
 15931 0035 4885C0   		testq	%rax, %rax
 15932 0038 740B     		je	.L1296
 15933              		.loc 21 120 0 is_stmt 0 discriminator 1
 15934 003a 4889DE   		movq	%rbx, %rsi
 15935 003d 4889C7   		movq	%rax, %rdi
 15936 0040 E8000000 		call	_ZN10vector_varC1ERKS_
 15936      00
 15937              	.L1296:
 15938              		.loc 21 120 0
 15939 0045 90       		nop
 15940 0046 4883C428 		addq	$40, %rsp
 15941 004a 5B       		popq	%rbx
 15942 004b 5D       		popq	%rbp
 15943              		.cfi_def_cfa 7, 8
 15944 004c C3       		ret
 15945              		.cfi_endproc
 15946              	.LFE7480:
 15948              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_IRKS1_EEEvPT_DpOT0_
 15949              		.set	_ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_IRKS1_EEEvPT_DpOT0_,_ZN9__gnu_cxx13ne
 15950              		.section	.text._ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vector
 15951              		.align 2
 15952              		.weak	_ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc
 15954              	_ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc:
 15955              	.LFB7481:
 928:/usr/include/c++/5/bits/stl_vector.h **** 
 929:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 930:/usr/include/c++/5/bits/stl_vector.h ****       void
 931:/usr/include/c++/5/bits/stl_vector.h ****       push_back(value_type&& __x)
 932:/usr/include/c++/5/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 933:/usr/include/c++/5/bits/stl_vector.h **** 
 934:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
 935:/usr/include/c++/5/bits/stl_vector.h ****         void
 936:/usr/include/c++/5/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 937:/usr/include/c++/5/bits/stl_vector.h **** #endif
 938:/usr/include/c++/5/bits/stl_vector.h **** 
 939:/usr/include/c++/5/bits/stl_vector.h ****       /**
 940:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Removes last element.
 941:/usr/include/c++/5/bits/stl_vector.h ****        *
GAS LISTING /tmp/cc2K2nX4.s 			page 576


 942:/usr/include/c++/5/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 943:/usr/include/c++/5/bits/stl_vector.h ****        *
 944:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 945:/usr/include/c++/5/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 946:/usr/include/c++/5/bits/stl_vector.h ****        *  called.
 947:/usr/include/c++/5/bits/stl_vector.h ****        */
 948:/usr/include/c++/5/bits/stl_vector.h ****       void
 949:/usr/include/c++/5/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
 950:/usr/include/c++/5/bits/stl_vector.h ****       {
 951:/usr/include/c++/5/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 952:/usr/include/c++/5/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 953:/usr/include/c++/5/bits/stl_vector.h ****       }
 954:/usr/include/c++/5/bits/stl_vector.h **** 
 955:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
 956:/usr/include/c++/5/bits/stl_vector.h ****       /**
 957:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 958:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 959:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __args  Arguments.
 960:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 961:/usr/include/c++/5/bits/stl_vector.h ****        *
 962:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 963:/usr/include/c++/5/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 964:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 965:/usr/include/c++/5/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 966:/usr/include/c++/5/bits/stl_vector.h ****        *  std::list.
 967:/usr/include/c++/5/bits/stl_vector.h ****        */
 968:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
 969:/usr/include/c++/5/bits/stl_vector.h ****         iterator
 970:/usr/include/c++/5/bits/stl_vector.h ****         emplace(const_iterator __position, _Args&&... __args);
 971:/usr/include/c++/5/bits/stl_vector.h **** 
 972:/usr/include/c++/5/bits/stl_vector.h ****       /**
 973:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 974:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
 975:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 976:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 977:/usr/include/c++/5/bits/stl_vector.h ****        *
 978:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 979:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 980:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 981:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
 982:/usr/include/c++/5/bits/stl_vector.h ****        */
 983:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 984:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
 985:/usr/include/c++/5/bits/stl_vector.h **** #else
 986:/usr/include/c++/5/bits/stl_vector.h ****       /**
 987:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 988:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 989:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 990:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 991:/usr/include/c++/5/bits/stl_vector.h ****        *
 992:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 993:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 994:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 995:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
 996:/usr/include/c++/5/bits/stl_vector.h ****        */
 997:/usr/include/c++/5/bits/stl_vector.h ****       iterator
 998:/usr/include/c++/5/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
GAS LISTING /tmp/cc2K2nX4.s 			page 577


 999:/usr/include/c++/5/bits/stl_vector.h **** #endif
1000:/usr/include/c++/5/bits/stl_vector.h **** 
1001:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1002:/usr/include/c++/5/bits/stl_vector.h ****       /**
1003:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1004:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1005:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1006:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1007:/usr/include/c++/5/bits/stl_vector.h ****        *
1008:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1009:/usr/include/c++/5/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1010:/usr/include/c++/5/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1011:/usr/include/c++/5/bits/stl_vector.h ****        *  used the user should consider using std::list.
1012:/usr/include/c++/5/bits/stl_vector.h ****        */
1013:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1014:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1015:/usr/include/c++/5/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
1016:/usr/include/c++/5/bits/stl_vector.h **** 
1017:/usr/include/c++/5/bits/stl_vector.h ****       /**
1018:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1019:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1020:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1021:/usr/include/c++/5/bits/stl_vector.h ****        *
1022:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
1023:/usr/include/c++/5/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1024:/usr/include/c++/5/bits/stl_vector.h ****        *  specified by @a position.
1025:/usr/include/c++/5/bits/stl_vector.h ****        *
1026:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1027:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1028:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1029:/usr/include/c++/5/bits/stl_vector.h ****        */
1030:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1031:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1032:/usr/include/c++/5/bits/stl_vector.h ****       { return this->insert(__position, __l.begin(), __l.end()); }
1033:/usr/include/c++/5/bits/stl_vector.h **** #endif
1034:/usr/include/c++/5/bits/stl_vector.h **** 
1035:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1036:/usr/include/c++/5/bits/stl_vector.h ****       /**
1037:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1038:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1039:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1040:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1041:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1042:/usr/include/c++/5/bits/stl_vector.h ****        *
1043:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1044:/usr/include/c++/5/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1045:/usr/include/c++/5/bits/stl_vector.h ****        *
1046:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1047:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1048:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1049:/usr/include/c++/5/bits/stl_vector.h ****        */
1050:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1051:/usr/include/c++/5/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1052:/usr/include/c++/5/bits/stl_vector.h ****       {
1053:/usr/include/c++/5/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1054:/usr/include/c++/5/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1055:/usr/include/c++/5/bits/stl_vector.h **** 	return begin() + __offset;
GAS LISTING /tmp/cc2K2nX4.s 			page 578


1056:/usr/include/c++/5/bits/stl_vector.h ****       }
1057:/usr/include/c++/5/bits/stl_vector.h **** #else
1058:/usr/include/c++/5/bits/stl_vector.h ****       /**
1059:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1060:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1061:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1062:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1063:/usr/include/c++/5/bits/stl_vector.h ****        *
1064:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1065:/usr/include/c++/5/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1066:/usr/include/c++/5/bits/stl_vector.h ****        *
1067:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1068:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1069:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1070:/usr/include/c++/5/bits/stl_vector.h ****        */
1071:/usr/include/c++/5/bits/stl_vector.h ****       void
1072:/usr/include/c++/5/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1073:/usr/include/c++/5/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1074:/usr/include/c++/5/bits/stl_vector.h **** #endif
1075:/usr/include/c++/5/bits/stl_vector.h **** 
1076:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1077:/usr/include/c++/5/bits/stl_vector.h ****       /**
1078:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1079:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1080:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1081:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1082:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1083:/usr/include/c++/5/bits/stl_vector.h ****        *
1084:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1085:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1086:/usr/include/c++/5/bits/stl_vector.h ****        *  by @a pos.
1087:/usr/include/c++/5/bits/stl_vector.h ****        *
1088:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1089:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1090:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1091:/usr/include/c++/5/bits/stl_vector.h ****        */
1092:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator,
1093:/usr/include/c++/5/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1094:/usr/include/c++/5/bits/stl_vector.h ****         iterator
1095:/usr/include/c++/5/bits/stl_vector.h ****         insert(const_iterator __position, _InputIterator __first,
1096:/usr/include/c++/5/bits/stl_vector.h **** 	       _InputIterator __last)
1097:/usr/include/c++/5/bits/stl_vector.h ****         {
1098:/usr/include/c++/5/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1099:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1100:/usr/include/c++/5/bits/stl_vector.h **** 			     __first, __last, __false_type());
1101:/usr/include/c++/5/bits/stl_vector.h **** 	  return begin() + __offset;
1102:/usr/include/c++/5/bits/stl_vector.h **** 	}
1103:/usr/include/c++/5/bits/stl_vector.h **** #else
1104:/usr/include/c++/5/bits/stl_vector.h ****       /**
1105:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1106:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1107:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1108:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1109:/usr/include/c++/5/bits/stl_vector.h ****        *
1110:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1111:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1112:/usr/include/c++/5/bits/stl_vector.h ****        *  by @a pos.
GAS LISTING /tmp/cc2K2nX4.s 			page 579


1113:/usr/include/c++/5/bits/stl_vector.h ****        *
1114:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1115:/usr/include/c++/5/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1116:/usr/include/c++/5/bits/stl_vector.h ****        *  consider using std::list.
1117:/usr/include/c++/5/bits/stl_vector.h ****        */
1118:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1119:/usr/include/c++/5/bits/stl_vector.h ****         void
1120:/usr/include/c++/5/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1121:/usr/include/c++/5/bits/stl_vector.h **** 	       _InputIterator __last)
1122:/usr/include/c++/5/bits/stl_vector.h ****         {
1123:/usr/include/c++/5/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1124:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1125:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1126:/usr/include/c++/5/bits/stl_vector.h **** 	}
1127:/usr/include/c++/5/bits/stl_vector.h **** #endif
1128:/usr/include/c++/5/bits/stl_vector.h **** 
1129:/usr/include/c++/5/bits/stl_vector.h ****       /**
1130:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1131:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1132:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1133:/usr/include/c++/5/bits/stl_vector.h ****        *
1134:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1135:/usr/include/c++/5/bits/stl_vector.h ****        *  shorten the %vector by one.
1136:/usr/include/c++/5/bits/stl_vector.h ****        *
1137:/usr/include/c++/5/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1138:/usr/include/c++/5/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1139:/usr/include/c++/5/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1140:/usr/include/c++/5/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1141:/usr/include/c++/5/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1142:/usr/include/c++/5/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1143:/usr/include/c++/5/bits/stl_vector.h ****        */
1144:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1145:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1146:/usr/include/c++/5/bits/stl_vector.h ****       erase(const_iterator __position)
1147:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1148:/usr/include/c++/5/bits/stl_vector.h **** #else
1149:/usr/include/c++/5/bits/stl_vector.h ****       erase(iterator __position)
1150:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(__position); }
1151:/usr/include/c++/5/bits/stl_vector.h **** #endif
1152:/usr/include/c++/5/bits/stl_vector.h **** 
1153:/usr/include/c++/5/bits/stl_vector.h ****       /**
1154:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1155:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1156:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1157:/usr/include/c++/5/bits/stl_vector.h ****        *                  erased.
1158:/usr/include/c++/5/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1159:/usr/include/c++/5/bits/stl_vector.h ****        *           prior to erasing (or end()).
1160:/usr/include/c++/5/bits/stl_vector.h ****        *
1161:/usr/include/c++/5/bits/stl_vector.h ****        *  This function will erase the elements in the range
1162:/usr/include/c++/5/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1163:/usr/include/c++/5/bits/stl_vector.h ****        *
1164:/usr/include/c++/5/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1165:/usr/include/c++/5/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1166:/usr/include/c++/5/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1167:/usr/include/c++/5/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1168:/usr/include/c++/5/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1169:/usr/include/c++/5/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
GAS LISTING /tmp/cc2K2nX4.s 			page 580


1170:/usr/include/c++/5/bits/stl_vector.h ****        */
1171:/usr/include/c++/5/bits/stl_vector.h ****       iterator
1172:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1173:/usr/include/c++/5/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1174:/usr/include/c++/5/bits/stl_vector.h ****       {
1175:/usr/include/c++/5/bits/stl_vector.h **** 	const auto __beg = begin();
1176:/usr/include/c++/5/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1177:/usr/include/c++/5/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1178:/usr/include/c++/5/bits/stl_vector.h ****       }
1179:/usr/include/c++/5/bits/stl_vector.h **** #else
1180:/usr/include/c++/5/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1181:/usr/include/c++/5/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1182:/usr/include/c++/5/bits/stl_vector.h **** #endif
1183:/usr/include/c++/5/bits/stl_vector.h **** 
1184:/usr/include/c++/5/bits/stl_vector.h ****       /**
1185:/usr/include/c++/5/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1186:/usr/include/c++/5/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1187:/usr/include/c++/5/bits/stl_vector.h ****        *
1188:/usr/include/c++/5/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1189:/usr/include/c++/5/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1190:/usr/include/c++/5/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1191:/usr/include/c++/5/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1192:/usr/include/c++/5/bits/stl_vector.h ****        */
1193:/usr/include/c++/5/bits/stl_vector.h ****       void
1194:/usr/include/c++/5/bits/stl_vector.h ****       swap(vector& __x)
1195:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1196:/usr/include/c++/5/bits/stl_vector.h ****       noexcept(_Alloc_traits::_S_nothrow_swap())
1197:/usr/include/c++/5/bits/stl_vector.h **** #endif
1198:/usr/include/c++/5/bits/stl_vector.h ****       {
1199:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1200:/usr/include/c++/5/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1201:/usr/include/c++/5/bits/stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1202:/usr/include/c++/5/bits/stl_vector.h ****       }
1203:/usr/include/c++/5/bits/stl_vector.h **** 
1204:/usr/include/c++/5/bits/stl_vector.h ****       /**
1205:/usr/include/c++/5/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1206:/usr/include/c++/5/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1207:/usr/include/c++/5/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1208:/usr/include/c++/5/bits/stl_vector.h ****        *  the user's responsibility.
1209:/usr/include/c++/5/bits/stl_vector.h ****        */
1210:/usr/include/c++/5/bits/stl_vector.h ****       void
1211:/usr/include/c++/5/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1212:/usr/include/c++/5/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1213:/usr/include/c++/5/bits/stl_vector.h **** 
1214:/usr/include/c++/5/bits/stl_vector.h ****     protected:
1215:/usr/include/c++/5/bits/stl_vector.h ****       /**
1216:/usr/include/c++/5/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1217:/usr/include/c++/5/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1218:/usr/include/c++/5/bits/stl_vector.h ****        */
1219:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1220:/usr/include/c++/5/bits/stl_vector.h ****         pointer
1221:/usr/include/c++/5/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1222:/usr/include/c++/5/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1223:/usr/include/c++/5/bits/stl_vector.h ****         {
1224:/usr/include/c++/5/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1225:/usr/include/c++/5/bits/stl_vector.h **** 	  __try
1226:/usr/include/c++/5/bits/stl_vector.h **** 	    {
GAS LISTING /tmp/cc2K2nX4.s 			page 581


1227:/usr/include/c++/5/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1228:/usr/include/c++/5/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1229:/usr/include/c++/5/bits/stl_vector.h **** 	      return __result;
1230:/usr/include/c++/5/bits/stl_vector.h **** 	    }
1231:/usr/include/c++/5/bits/stl_vector.h **** 	  __catch(...)
1232:/usr/include/c++/5/bits/stl_vector.h **** 	    {
1233:/usr/include/c++/5/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1234:/usr/include/c++/5/bits/stl_vector.h **** 	      __throw_exception_again;
1235:/usr/include/c++/5/bits/stl_vector.h **** 	    }
1236:/usr/include/c++/5/bits/stl_vector.h **** 	}
1237:/usr/include/c++/5/bits/stl_vector.h **** 
1238:/usr/include/c++/5/bits/stl_vector.h **** 
1239:/usr/include/c++/5/bits/stl_vector.h ****       // Internal constructor functions follow.
1240:/usr/include/c++/5/bits/stl_vector.h **** 
1241:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1242:/usr/include/c++/5/bits/stl_vector.h **** 
1243:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1244:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1245:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1246:/usr/include/c++/5/bits/stl_vector.h ****         void
1247:/usr/include/c++/5/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1248:/usr/include/c++/5/bits/stl_vector.h ****         {
1249:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1250:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1251:/usr/include/c++/5/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1252:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1253:/usr/include/c++/5/bits/stl_vector.h **** 	}
1254:/usr/include/c++/5/bits/stl_vector.h **** 
1255:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1256:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1257:/usr/include/c++/5/bits/stl_vector.h ****         void
1258:/usr/include/c++/5/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1259:/usr/include/c++/5/bits/stl_vector.h **** 			       __false_type)
1260:/usr/include/c++/5/bits/stl_vector.h ****         {
1261:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1262:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1263:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1264:/usr/include/c++/5/bits/stl_vector.h **** 	}
1265:/usr/include/c++/5/bits/stl_vector.h **** 
1266:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1267:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1268:/usr/include/c++/5/bits/stl_vector.h ****         void
1269:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1270:/usr/include/c++/5/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1271:/usr/include/c++/5/bits/stl_vector.h ****         {
1272:/usr/include/c++/5/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1273:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1274:/usr/include/c++/5/bits/stl_vector.h **** 	    emplace_back(*__first);
1275:/usr/include/c++/5/bits/stl_vector.h **** #else
1276:/usr/include/c++/5/bits/stl_vector.h **** 	    push_back(*__first);
1277:/usr/include/c++/5/bits/stl_vector.h **** #endif
1278:/usr/include/c++/5/bits/stl_vector.h **** 	}
1279:/usr/include/c++/5/bits/stl_vector.h **** 
1280:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1281:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1282:/usr/include/c++/5/bits/stl_vector.h ****         void
1283:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
GAS LISTING /tmp/cc2K2nX4.s 			page 582


1284:/usr/include/c++/5/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1285:/usr/include/c++/5/bits/stl_vector.h ****         {
1286:/usr/include/c++/5/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1287:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1288:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1289:/usr/include/c++/5/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1290:/usr/include/c++/5/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1291:/usr/include/c++/5/bits/stl_vector.h **** 					this->_M_impl._M_start,
1292:/usr/include/c++/5/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1293:/usr/include/c++/5/bits/stl_vector.h **** 	}
1294:/usr/include/c++/5/bits/stl_vector.h **** 
1295:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1296:/usr/include/c++/5/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1297:/usr/include/c++/5/bits/stl_vector.h ****       void
1298:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1299:/usr/include/c++/5/bits/stl_vector.h ****       {
1300:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1301:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1302:/usr/include/c++/5/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1303:/usr/include/c++/5/bits/stl_vector.h ****       }
1304:/usr/include/c++/5/bits/stl_vector.h **** 
1305:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
1306:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1307:/usr/include/c++/5/bits/stl_vector.h ****       void
1308:/usr/include/c++/5/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1309:/usr/include/c++/5/bits/stl_vector.h ****       {
1310:/usr/include/c++/5/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1311:/usr/include/c++/5/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1312:/usr/include/c++/5/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1313:/usr/include/c++/5/bits/stl_vector.h ****       }
1314:/usr/include/c++/5/bits/stl_vector.h **** #endif
1315:/usr/include/c++/5/bits/stl_vector.h **** 
1316:/usr/include/c++/5/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1317:/usr/include/c++/5/bits/stl_vector.h ****       // assignment work for the range versions.
1318:/usr/include/c++/5/bits/stl_vector.h **** 
1319:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1320:/usr/include/c++/5/bits/stl_vector.h **** 
1321:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1322:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1323:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1324:/usr/include/c++/5/bits/stl_vector.h ****         void
1325:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1326:/usr/include/c++/5/bits/stl_vector.h ****         { _M_fill_assign(__n, __val); }
1327:/usr/include/c++/5/bits/stl_vector.h **** 
1328:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1329:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1330:/usr/include/c++/5/bits/stl_vector.h ****         void
1331:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1332:/usr/include/c++/5/bits/stl_vector.h **** 			   __false_type)
1333:/usr/include/c++/5/bits/stl_vector.h ****         {
1334:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1335:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1336:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1337:/usr/include/c++/5/bits/stl_vector.h **** 	}
1338:/usr/include/c++/5/bits/stl_vector.h **** 
1339:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1340:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
GAS LISTING /tmp/cc2K2nX4.s 			page 583


1341:/usr/include/c++/5/bits/stl_vector.h ****         void
1342:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1343:/usr/include/c++/5/bits/stl_vector.h **** 		      std::input_iterator_tag);
1344:/usr/include/c++/5/bits/stl_vector.h **** 
1345:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1346:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1347:/usr/include/c++/5/bits/stl_vector.h ****         void
1348:/usr/include/c++/5/bits/stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1349:/usr/include/c++/5/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1350:/usr/include/c++/5/bits/stl_vector.h **** 
1351:/usr/include/c++/5/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1352:/usr/include/c++/5/bits/stl_vector.h ****       // to be the same thing.
1353:/usr/include/c++/5/bits/stl_vector.h ****       void
1354:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1355:/usr/include/c++/5/bits/stl_vector.h **** 
1356:/usr/include/c++/5/bits/stl_vector.h **** 
1357:/usr/include/c++/5/bits/stl_vector.h ****       // Internal insert functions follow.
1358:/usr/include/c++/5/bits/stl_vector.h **** 
1359:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1360:/usr/include/c++/5/bits/stl_vector.h **** 
1361:/usr/include/c++/5/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1362:/usr/include/c++/5/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1363:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _Integer>
1364:/usr/include/c++/5/bits/stl_vector.h ****         void
1365:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1366:/usr/include/c++/5/bits/stl_vector.h **** 			   __true_type)
1367:/usr/include/c++/5/bits/stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1368:/usr/include/c++/5/bits/stl_vector.h **** 
1369:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1370:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1371:/usr/include/c++/5/bits/stl_vector.h ****         void
1372:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1373:/usr/include/c++/5/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1374:/usr/include/c++/5/bits/stl_vector.h ****         {
1375:/usr/include/c++/5/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1376:/usr/include/c++/5/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1377:/usr/include/c++/5/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1378:/usr/include/c++/5/bits/stl_vector.h **** 	}
1379:/usr/include/c++/5/bits/stl_vector.h **** 
1380:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1381:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _InputIterator>
1382:/usr/include/c++/5/bits/stl_vector.h ****         void
1383:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1384:/usr/include/c++/5/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1385:/usr/include/c++/5/bits/stl_vector.h **** 
1386:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1387:/usr/include/c++/5/bits/stl_vector.h ****       template<typename _ForwardIterator>
1388:/usr/include/c++/5/bits/stl_vector.h ****         void
1389:/usr/include/c++/5/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1390:/usr/include/c++/5/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1391:/usr/include/c++/5/bits/stl_vector.h **** 
1392:/usr/include/c++/5/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1393:/usr/include/c++/5/bits/stl_vector.h ****       // the same thing.
1394:/usr/include/c++/5/bits/stl_vector.h ****       void
1395:/usr/include/c++/5/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1396:/usr/include/c++/5/bits/stl_vector.h **** 
1397:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus >= 201103L
GAS LISTING /tmp/cc2K2nX4.s 			page 584


1398:/usr/include/c++/5/bits/stl_vector.h ****       // Called by resize(n).
1399:/usr/include/c++/5/bits/stl_vector.h ****       void
1400:/usr/include/c++/5/bits/stl_vector.h ****       _M_default_append(size_type __n);
1401:/usr/include/c++/5/bits/stl_vector.h **** 
1402:/usr/include/c++/5/bits/stl_vector.h ****       bool
1403:/usr/include/c++/5/bits/stl_vector.h ****       _M_shrink_to_fit();
1404:/usr/include/c++/5/bits/stl_vector.h **** #endif
1405:/usr/include/c++/5/bits/stl_vector.h **** 
1406:/usr/include/c++/5/bits/stl_vector.h ****       // Called by insert(p,x)
1407:/usr/include/c++/5/bits/stl_vector.h **** #if __cplusplus < 201103L
1408:/usr/include/c++/5/bits/stl_vector.h ****       void
1409:/usr/include/c++/5/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1410:/usr/include/c++/5/bits/stl_vector.h **** #else
1411:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
1412:/usr/include/c++/5/bits/stl_vector.h ****         void
1413:/usr/include/c++/5/bits/stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1414:/usr/include/c++/5/bits/stl_vector.h **** 
1415:/usr/include/c++/5/bits/stl_vector.h ****       template<typename... _Args>
1416:/usr/include/c++/5/bits/stl_vector.h ****         void
1417:/usr/include/c++/5/bits/stl_vector.h ****         _M_emplace_back_aux(_Args&&... __args);
1418:/usr/include/c++/5/bits/stl_vector.h **** #endif
1419:/usr/include/c++/5/bits/stl_vector.h **** 
1420:/usr/include/c++/5/bits/stl_vector.h ****       // Called by the latter.
1421:/usr/include/c++/5/bits/stl_vector.h ****       size_type
1422:/usr/include/c++/5/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 15956              		.loc 15 1422 0 is_stmt 1
 15957              		.cfi_startproc
 15958 0000 55       		pushq	%rbp
 15959              		.cfi_def_cfa_offset 16
 15960              		.cfi_offset 6, -16
 15961 0001 4889E5   		movq	%rsp, %rbp
 15962              		.cfi_def_cfa_register 6
 15963 0004 53       		pushq	%rbx
 15964 0005 4883EC48 		subq	$72, %rsp
 15965              		.cfi_offset 3, -24
 15966 0009 48897DC8 		movq	%rdi, -56(%rbp)
 15967 000d 488975C0 		movq	%rsi, -64(%rbp)
 15968 0011 488955B8 		movq	%rdx, -72(%rbp)
 15969              		.loc 15 1422 0
 15970 0015 64488B04 		movq	%fs:40, %rax
 15970      25280000 
 15970      00
 15971 001e 488945E8 		movq	%rax, -24(%rbp)
 15972 0022 31C0     		xorl	%eax, %eax
1423:/usr/include/c++/5/bits/stl_vector.h ****       {
1424:/usr/include/c++/5/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 15973              		.loc 15 1424 0
 15974 0024 488B45C8 		movq	-56(%rbp), %rax
 15975 0028 4889C7   		movq	%rax, %rdi
 15976 002b E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv
 15976      00
 15977 0030 4889C3   		movq	%rax, %rbx
 15978 0033 488B45C8 		movq	-56(%rbp), %rax
 15979 0037 4889C7   		movq	%rax, %rdi
 15980 003a E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 15980      00
 15981 003f 4829C3   		subq	%rax, %rbx
GAS LISTING /tmp/cc2K2nX4.s 			page 585


 15982 0042 4889DA   		movq	%rbx, %rdx
 15983 0045 488B45C0 		movq	-64(%rbp), %rax
 15984 0049 4839C2   		cmpq	%rax, %rdx
 15985 004c 0F92C0   		setb	%al
 15986 004f 84C0     		testb	%al, %al
 15987 0051 740C     		je	.L1298
1425:/usr/include/c++/5/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 15988              		.loc 15 1425 0
 15989 0053 488B45B8 		movq	-72(%rbp), %rax
 15990 0057 4889C7   		movq	%rax, %rdi
 15991 005a E8000000 		call	_ZSt20__throw_length_errorPKc
 15991      00
 15992              	.L1298:
1426:/usr/include/c++/5/bits/stl_vector.h **** 
1427:/usr/include/c++/5/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 15993              		.loc 15 1427 0
 15994 005f 488B45C8 		movq	-56(%rbp), %rax
 15995 0063 4889C7   		movq	%rax, %rdi
 15996 0066 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 15996      00
 15997 006b 4889C3   		movq	%rax, %rbx
 15998 006e 488B45C8 		movq	-56(%rbp), %rax
 15999 0072 4889C7   		movq	%rax, %rdi
 16000 0075 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 16000      00
 16001 007a 488945D8 		movq	%rax, -40(%rbp)
 16002 007e 488D55C0 		leaq	-64(%rbp), %rdx
 16003 0082 488D45D8 		leaq	-40(%rbp), %rax
 16004 0086 4889D6   		movq	%rdx, %rsi
 16005 0089 4889C7   		movq	%rax, %rdi
 16006 008c E8000000 		call	_ZSt3maxImERKT_S2_S2_
 16006      00
 16007 0091 488B00   		movq	(%rax), %rax
 16008 0094 4801D8   		addq	%rbx, %rax
 16009 0097 488945E0 		movq	%rax, -32(%rbp)
1428:/usr/include/c++/5/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 16010              		.loc 15 1428 0
 16011 009b 488B45C8 		movq	-56(%rbp), %rax
 16012 009f 4889C7   		movq	%rax, %rdi
 16013 00a2 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 16013      00
 16014 00a7 483B45E0 		cmpq	-32(%rbp), %rax
 16015 00ab 7712     		ja	.L1299
 16016              		.loc 15 1428 0 is_stmt 0 discriminator 2
 16017 00ad 488B45C8 		movq	-56(%rbp), %rax
 16018 00b1 4889C7   		movq	%rax, %rdi
 16019 00b4 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv
 16019      00
 16020 00b9 483B45E0 		cmpq	-32(%rbp), %rax
 16021 00bd 730E     		jnb	.L1300
 16022              	.L1299:
 16023              		.loc 15 1428 0 discriminator 3
 16024 00bf 488B45C8 		movq	-56(%rbp), %rax
 16025 00c3 4889C7   		movq	%rax, %rdi
 16026 00c6 E8000000 		call	_ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv
 16026      00
 16027 00cb EB04     		jmp	.L1302
GAS LISTING /tmp/cc2K2nX4.s 			page 586


 16028              	.L1300:
 16029              		.loc 15 1428 0 discriminator 4
 16030 00cd 488B45E0 		movq	-32(%rbp), %rax
 16031              	.L1302:
1429:/usr/include/c++/5/bits/stl_vector.h ****       }
 16032              		.loc 15 1429 0 is_stmt 1 discriminator 7
 16033 00d1 488B4DE8 		movq	-24(%rbp), %rcx
 16034 00d5 6448330C 		xorq	%fs:40, %rcx
 16034      25280000 
 16034      00
 16035 00de 7405     		je	.L1303
 16036              		.loc 15 1429 0 is_stmt 0
 16037 00e0 E8000000 		call	__stack_chk_fail
 16037      00
 16038              	.L1303:
 16039 00e5 4883C448 		addq	$72, %rsp
 16040 00e9 5B       		popq	%rbx
 16041 00ea 5D       		popq	%rbp
 16042              		.cfi_def_cfa 7, 8
 16043 00eb C3       		ret
 16044              		.cfi_endproc
 16045              	.LFE7481:
 16047              		.section	.text._ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vec
 16048              		.align 2
 16049              		.weak	_ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm
 16051              	_ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm:
 16052              	.LFB7482:
 167:/usr/include/c++/5/bits/stl_vector.h ****       {
 16053              		.loc 15 167 0 is_stmt 1
 16054              		.cfi_startproc
 16055 0000 55       		pushq	%rbp
 16056              		.cfi_def_cfa_offset 16
 16057              		.cfi_offset 6, -16
 16058 0001 4889E5   		movq	%rsp, %rbp
 16059              		.cfi_def_cfa_register 6
 16060 0004 4883EC10 		subq	$16, %rsp
 16061 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16062 000c 488975F0 		movq	%rsi, -16(%rbp)
 170:/usr/include/c++/5/bits/stl_vector.h ****       }
 16063              		.loc 15 170 0
 16064 0010 48837DF0 		cmpq	$0, -16(%rbp)
 16064      00
 16065 0015 7415     		je	.L1305
 170:/usr/include/c++/5/bits/stl_vector.h ****       }
 16066              		.loc 15 170 0 is_stmt 0 discriminator 1
 16067 0017 488B45F8 		movq	-8(%rbp), %rax
 16068 001b 488B55F0 		movq	-16(%rbp), %rdx
 16069 001f 4889D6   		movq	%rdx, %rsi
 16070 0022 4889C7   		movq	%rax, %rdi
 16071 0025 E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m
 16071      00
 16072 002a EB05     		jmp	.L1307
 16073              	.L1305:
 170:/usr/include/c++/5/bits/stl_vector.h ****       }
 16074              		.loc 15 170 0 discriminator 2
 16075 002c B8000000 		movl	$0, %eax
 16075      00
GAS LISTING /tmp/cc2K2nX4.s 			page 587


 16076              	.L1307:
 171:/usr/include/c++/5/bits/stl_vector.h **** 
 16077              		.loc 15 171 0 is_stmt 1 discriminator 5
 16078 0031 C9       		leave
 16079              		.cfi_def_cfa 7, 8
 16080 0032 C3       		ret
 16081              		.cfi_endproc
 16082              	.LFE7482:
 16084              		.section	.text._ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorI10vector_va
 16085              		.align 2
 16086              		.weak	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
 16088              	_ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv:
 16089              	.LFB7483:
 654:/usr/include/c++/5/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 16090              		.loc 15 654 0
 16091              		.cfi_startproc
 16092 0000 55       		pushq	%rbp
 16093              		.cfi_def_cfa_offset 16
 16094              		.cfi_offset 6, -16
 16095 0001 4889E5   		movq	%rsp, %rbp
 16096              		.cfi_def_cfa_register 6
 16097 0004 48897DF8 		movq	%rdi, -8(%rbp)
 655:/usr/include/c++/5/bits/stl_vector.h **** 
 16098              		.loc 15 655 0
 16099 0008 488B45F8 		movq	-8(%rbp), %rax
 16100 000c 488B4008 		movq	8(%rax), %rax
 16101 0010 4889C2   		movq	%rax, %rdx
 16102 0013 488B45F8 		movq	-8(%rbp), %rax
 16103 0017 488B00   		movq	(%rax), %rax
 16104 001a 4829C2   		subq	%rax, %rdx
 16105 001d 4889D0   		movq	%rdx, %rax
 16106 0020 48C1F805 		sarq	$5, %rax
 16107 0024 5D       		popq	%rbp
 16108              		.cfi_def_cfa 7, 8
 16109 0025 C3       		ret
 16110              		.cfi_endproc
 16111              	.LFE7483:
 16113              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_,"a
 16114              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_
 16116              	_ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_:
 16117              	.LFB7484:
 16118              		.file 22 "/usr/include/c++/5/bits/stl_uninitialized.h"
   1:/usr/include/c++/5/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/5/bits/stl_uninitialized.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/5/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/5/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_uninitialized.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 588


  16:/usr/include/c++/5/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/5/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/5/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/5/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/5/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/5/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/5/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/5/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/5/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/5/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/5/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/5/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/5/bits/stl_uninitialized.h **** {
  61:/usr/include/c++/5/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  64:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  65:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
  66:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  67:/usr/include/c++/5/bits/stl_uninitialized.h ****         static _ForwardIterator
  68:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  69:/usr/include/c++/5/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  70:/usr/include/c++/5/bits/stl_uninitialized.h ****         {
  71:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  72:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __try
GAS LISTING /tmp/cc2K2nX4.s 			page 589


  73:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
  74:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  75:/usr/include/c++/5/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  76:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      return __cur;
  77:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
  78:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __catch(...)
  79:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
  80:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  81:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  82:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
  83:/usr/include/c++/5/bits/stl_uninitialized.h **** 	}
  84:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
  85:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  86:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<>
  87:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  88:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
  89:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  90:/usr/include/c++/5/bits/stl_uninitialized.h ****         static _ForwardIterator
  91:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  92:/usr/include/c++/5/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  93:/usr/include/c++/5/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  94:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
  95:/usr/include/c++/5/bits/stl_uninitialized.h **** 
  96:/usr/include/c++/5/bits/stl_uninitialized.h ****   /**
  97:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  98:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
  99:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 100:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 101:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 102:/usr/include/c++/5/bits/stl_uninitialized.h ****    *
 103:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 104:/usr/include/c++/5/bits/stl_uninitialized.h ****   */
 105:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline _ForwardIterator
 107:/usr/include/c++/5/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/c++/5/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 109:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 110:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 111:/usr/include/c++/5/bits/stl_uninitialized.h **** 	_ValueType1;
 112:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 113:/usr/include/c++/5/bits/stl_uninitialized.h **** 	_ValueType2;
 114:/usr/include/c++/5/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 115:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = true;
 116:/usr/include/c++/5/bits/stl_uninitialized.h **** #else
 117:/usr/include/c++/5/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 118:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 119:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 120:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 121:/usr/include/c++/5/bits/stl_uninitialized.h **** #endif
 122:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 123:/usr/include/c++/5/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 124:/usr/include/c++/5/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 125:/usr/include/c++/5/bits/stl_uninitialized.h **** 				       && __assignable>::
 126:/usr/include/c++/5/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 127:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 128:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 129:/usr/include/c++/5/bits/stl_uninitialized.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 590


 130:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 131:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 132:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 133:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 134:/usr/include/c++/5/bits/stl_uninitialized.h ****         static void
 135:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 136:/usr/include/c++/5/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 137:/usr/include/c++/5/bits/stl_uninitialized.h ****         {
 138:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 139:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __try
 140:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 141:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 142:/usr/include/c++/5/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 143:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 144:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __catch(...)
 145:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 146:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 147:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 148:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 149:/usr/include/c++/5/bits/stl_uninitialized.h **** 	}
 150:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
 151:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 152:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<>
 153:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 154:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 155:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 156:/usr/include/c++/5/bits/stl_uninitialized.h ****         static void
 157:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 158:/usr/include/c++/5/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 159:/usr/include/c++/5/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 160:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
 161:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 162:/usr/include/c++/5/bits/stl_uninitialized.h ****   /**
 163:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 164:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 165:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 166:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 167:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @return   Nothing.
 168:/usr/include/c++/5/bits/stl_uninitialized.h ****    *
 169:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 170:/usr/include/c++/5/bits/stl_uninitialized.h ****   */
 171:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 172:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline void
 173:/usr/include/c++/5/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 174:/usr/include/c++/5/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 175:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 176:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 177:/usr/include/c++/5/bits/stl_uninitialized.h **** 	_ValueType;
 178:/usr/include/c++/5/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 179:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = true;
 180:/usr/include/c++/5/bits/stl_uninitialized.h **** #else
 181:/usr/include/c++/5/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 182:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 183:/usr/include/c++/5/bits/stl_uninitialized.h **** #endif
 184:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 185:/usr/include/c++/5/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 186:/usr/include/c++/5/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
GAS LISTING /tmp/cc2K2nX4.s 			page 591


 187:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 188:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 189:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 190:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 191:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 192:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 193:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 194:/usr/include/c++/5/bits/stl_uninitialized.h ****         static _ForwardIterator
 195:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 196:/usr/include/c++/5/bits/stl_uninitialized.h **** 			const _Tp& __x)
 197:/usr/include/c++/5/bits/stl_uninitialized.h ****         {
 198:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 199:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __try
 200:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 201:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 202:/usr/include/c++/5/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 203:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      return __cur;
 204:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 205:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __catch(...)
 206:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 207:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 208:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 209:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 210:/usr/include/c++/5/bits/stl_uninitialized.h **** 	}
 211:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
 212:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 213:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<>
 214:/usr/include/c++/5/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 215:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 216:/usr/include/c++/5/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 217:/usr/include/c++/5/bits/stl_uninitialized.h ****         static _ForwardIterator
 218:/usr/include/c++/5/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 219:/usr/include/c++/5/bits/stl_uninitialized.h **** 			const _Tp& __x)
 220:/usr/include/c++/5/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 221:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
 222:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 223:/usr/include/c++/5/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 224:/usr/include/c++/5/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 225:/usr/include/c++/5/bits/stl_uninitialized.h ****   /**
 226:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 227:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 228:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 229:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 230:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  @return   Nothing.
 231:/usr/include/c++/5/bits/stl_uninitialized.h ****    *
 232:/usr/include/c++/5/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 233:/usr/include/c++/5/bits/stl_uninitialized.h ****   */
 234:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 235:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline _ForwardIterator
 236:/usr/include/c++/5/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 237:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 238:/usr/include/c++/5/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 239:/usr/include/c++/5/bits/stl_uninitialized.h **** 	_ValueType;
 240:/usr/include/c++/5/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 241:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = true;
 242:/usr/include/c++/5/bits/stl_uninitialized.h **** #else
 243:/usr/include/c++/5/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
GAS LISTING /tmp/cc2K2nX4.s 			page 592


 244:/usr/include/c++/5/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 245:/usr/include/c++/5/bits/stl_uninitialized.h **** #endif
 246:/usr/include/c++/5/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 247:/usr/include/c++/5/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 248:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 249:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 250:/usr/include/c++/5/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 251:/usr/include/c++/5/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 252:/usr/include/c++/5/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 253:/usr/include/c++/5/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 254:/usr/include/c++/5/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 255:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 256:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 257:/usr/include/c++/5/bits/stl_uninitialized.h **** 	   typename _Allocator>
 258:/usr/include/c++/5/bits/stl_uninitialized.h ****     _ForwardIterator
 259:/usr/include/c++/5/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 260:/usr/include/c++/5/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 261:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 262:/usr/include/c++/5/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 263:/usr/include/c++/5/bits/stl_uninitialized.h ****       __try
 264:/usr/include/c++/5/bits/stl_uninitialized.h **** 	{
 265:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 266:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 267:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 268:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  return __cur;
 269:/usr/include/c++/5/bits/stl_uninitialized.h **** 	}
 270:/usr/include/c++/5/bits/stl_uninitialized.h ****       __catch(...)
 271:/usr/include/c++/5/bits/stl_uninitialized.h **** 	{
 272:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 273:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 274:/usr/include/c++/5/bits/stl_uninitialized.h **** 	}
 275:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 276:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 277:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 278:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline _ForwardIterator
 279:/usr/include/c++/5/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 280:/usr/include/c++/5/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 281:/usr/include/c++/5/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 282:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 283:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 284:/usr/include/c++/5/bits/stl_uninitialized.h **** 	   typename _Allocator>
 285:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline _ForwardIterator
 286:/usr/include/c++/5/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 287:/usr/include/c++/5/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 288:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 289:/usr/include/c++/5/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 290:/usr/include/c++/5/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 291:/usr/include/c++/5/bits/stl_uninitialized.h **** 					 __result, __alloc);
 292:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 293:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 294:/usr/include/c++/5/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 295:/usr/include/c++/5/bits/stl_uninitialized.h **** 	   typename _Allocator>
 296:/usr/include/c++/5/bits/stl_uninitialized.h ****     inline _ForwardIterator
 297:/usr/include/c++/5/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 16119              		.loc 22 297 0
 16120              		.cfi_startproc
 16121 0000 55       		pushq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 593


 16122              		.cfi_def_cfa_offset 16
 16123              		.cfi_offset 6, -16
 16124 0001 4889E5   		movq	%rsp, %rbp
 16125              		.cfi_def_cfa_register 6
 16126 0004 53       		pushq	%rbx
 16127 0005 4883EC28 		subq	$40, %rsp
 16128              		.cfi_offset 3, -24
 16129 0009 48897DE8 		movq	%rdi, -24(%rbp)
 16130 000d 488975E0 		movq	%rsi, -32(%rbp)
 16131 0011 488955D8 		movq	%rdx, -40(%rbp)
 16132 0015 48894DD0 		movq	%rcx, -48(%rbp)
 298:/usr/include/c++/5/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 299:/usr/include/c++/5/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 300:/usr/include/c++/5/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 301:/usr/include/c++/5/bits/stl_uninitialized.h ****     {
 302:/usr/include/c++/5/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 303:/usr/include/c++/5/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 16133              		.loc 22 303 0
 16134 0019 488B45E0 		movq	-32(%rbp), %rax
 16135 001d 4889C7   		movq	%rax, %rdi
 16136 0020 E8000000 		call	_ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_
 16136      00
 16137 0025 4889C3   		movq	%rax, %rbx
 16138 0028 488B45E8 		movq	-24(%rbp), %rax
 16139 002c 4889C7   		movq	%rax, %rdi
 16140 002f E8000000 		call	_ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_
 16140      00
 16141 0034 4889C7   		movq	%rax, %rdi
 304:/usr/include/c++/5/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 16142              		.loc 22 304 0
 16143 0037 488B55D0 		movq	-48(%rbp), %rdx
 16144 003b 488B45D8 		movq	-40(%rbp), %rax
 16145 003f 4889D1   		movq	%rdx, %rcx
 16146 0042 4889C2   		movq	%rax, %rdx
 16147 0045 4889DE   		movq	%rbx, %rsi
 16148 0048 E8000000 		call	_ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaIT1_E
 16148      00
 305:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 16149              		.loc 22 305 0
 16150 004d 4883C428 		addq	$40, %rsp
 16151 0051 5B       		popq	%rbx
 16152 0052 5D       		popq	%rbp
 16153              		.cfi_def_cfa 7, 8
 16154 0053 C3       		ret
 16155              		.cfi_endproc
 16156              	.LFE7484:
 16158              		.section	.text._ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_,"axG",@progbits,_ZN
 16159              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_
 16161              	_ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_:
 16162              	.LFB7485:
 531:/usr/include/c++/5/bits/alloc_traits.h **** 
 532:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 533:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 534:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 535:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 536:/usr/include/c++/5/bits/alloc_traits.h ****        *
 537:/usr/include/c++/5/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
GAS LISTING /tmp/cc2K2nX4.s 			page 594


 538:/usr/include/c++/5/bits/alloc_traits.h ****       */
 539:/usr/include/c++/5/bits/alloc_traits.h ****       template<typename _Up>
 540:/usr/include/c++/5/bits/alloc_traits.h **** 	static void
 541:/usr/include/c++/5/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 16163              		.loc 18 541 0
 16164              		.cfi_startproc
 16165 0000 55       		pushq	%rbp
 16166              		.cfi_def_cfa_offset 16
 16167              		.cfi_offset 6, -16
 16168 0001 4889E5   		movq	%rsp, %rbp
 16169              		.cfi_def_cfa_register 6
 16170 0004 4883EC10 		subq	$16, %rsp
 16171 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16172 000c 488975F0 		movq	%rsi, -16(%rbp)
 542:/usr/include/c++/5/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 16173              		.loc 18 542 0
 16174 0010 488B55F0 		movq	-16(%rbp), %rdx
 16175 0014 488B45F8 		movq	-8(%rbp), %rax
 16176 0018 4889D6   		movq	%rdx, %rsi
 16177 001b 4889C7   		movq	%rax, %rdi
 16178 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_
 16178      00
 16179 0023 90       		nop
 16180 0024 C9       		leave
 16181              		.cfi_def_cfa 7, 8
 16182 0025 C3       		ret
 16183              		.cfi_endproc
 16184              	.LFE7485:
 16186              		.section	.text._ZNSaI10vector_varEC2Ev,"axG",@progbits,_ZNSaI10vector_varEC5Ev,comdat
 16187              		.align 2
 16188              		.weak	_ZNSaI10vector_varEC2Ev
 16190              	_ZNSaI10vector_varEC2Ev:
 16191              	.LFB7512:
 113:/usr/include/c++/5/bits/allocator.h **** 
 16192              		.loc 20 113 0
 16193              		.cfi_startproc
 16194 0000 55       		pushq	%rbp
 16195              		.cfi_def_cfa_offset 16
 16196              		.cfi_offset 6, -16
 16197 0001 4889E5   		movq	%rsp, %rbp
 16198              		.cfi_def_cfa_register 6
 16199 0004 4883EC10 		subq	$16, %rsp
 16200 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16201              	.LBB98:
 113:/usr/include/c++/5/bits/allocator.h **** 
 16202              		.loc 20 113 0
 16203 000c 488B45F8 		movq	-8(%rbp), %rax
 16204 0010 4889C7   		movq	%rax, %rdi
 16205 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev
 16205      00
 16206              	.LBE98:
 16207 0018 90       		nop
 16208 0019 C9       		leave
 16209              		.cfi_def_cfa 7, 8
 16210 001a C3       		ret
 16211              		.cfi_endproc
 16212              	.LFE7512:
GAS LISTING /tmp/cc2K2nX4.s 			page 595


 16214              		.weak	_ZNSaI10vector_varEC1Ev
 16215              		.set	_ZNSaI10vector_varEC1Ev,_ZNSaI10vector_varEC2Ev
 16216              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 16217              		.align 2
 16218              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev
 16220              	_ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev:
 16221              	.LFB7515:
  86:/usr/include/c++/5/ext/new_allocator.h **** 
 16222              		.loc 21 86 0
 16223              		.cfi_startproc
 16224 0000 55       		pushq	%rbp
 16225              		.cfi_def_cfa_offset 16
 16226              		.cfi_offset 6, -16
 16227 0001 4889E5   		movq	%rsp, %rbp
 16228              		.cfi_def_cfa_register 6
 16229 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/5/ext/new_allocator.h **** 
 16230              		.loc 21 86 0
 16231 0008 90       		nop
 16232 0009 5D       		popq	%rbp
 16233              		.cfi_def_cfa 7, 8
 16234 000a C3       		ret
 16235              		.cfi_endproc
 16236              	.LFE7515:
 16238              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varED1Ev
 16239              		.set	_ZN9__gnu_cxx13new_allocatorI10vector_varED1Ev,_ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev
 16240              		.section	.text._ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m,"axG",@progbits,_ZN
 16241              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m
 16243              	_ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m:
 16244              	.LFB7517:
 516:/usr/include/c++/5/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 16245              		.loc 18 516 0
 16246              		.cfi_startproc
 16247 0000 55       		pushq	%rbp
 16248              		.cfi_def_cfa_offset 16
 16249              		.cfi_offset 6, -16
 16250 0001 4889E5   		movq	%rsp, %rbp
 16251              		.cfi_def_cfa_register 6
 16252 0004 4883EC20 		subq	$32, %rsp
 16253 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16254 000c 488975F0 		movq	%rsi, -16(%rbp)
 16255 0010 488955E8 		movq	%rdx, -24(%rbp)
 517:/usr/include/c++/5/bits/alloc_traits.h **** 
 16256              		.loc 18 517 0
 16257 0014 488B55E8 		movq	-24(%rbp), %rdx
 16258 0018 488B4DF0 		movq	-16(%rbp), %rcx
 16259 001c 488B45F8 		movq	-8(%rbp), %rax
 16260 0020 4889CE   		movq	%rcx, %rsi
 16261 0023 4889C7   		movq	%rax, %rdi
 16262 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m
 16262      00
 16263 002b 90       		nop
 16264 002c C9       		leave
 16265              		.cfi_def_cfa 7, 8
 16266 002d C3       		ret
 16267              		.cfi_endproc
 16268              	.LFE7517:
GAS LISTING /tmp/cc2K2nX4.s 			page 596


 16270              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_,"axG",@progbits,_ZNSt12_D
 16271              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_
 16273              	_ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_:
 16274              	.LFB7518:
 100:/usr/include/c++/5/bits/stl_construct.h **** 	{
 16275              		.loc 16 100 0
 16276              		.cfi_startproc
 16277 0000 55       		pushq	%rbp
 16278              		.cfi_def_cfa_offset 16
 16279              		.cfi_offset 6, -16
 16280 0001 4889E5   		movq	%rsp, %rbp
 16281              		.cfi_def_cfa_register 6
 16282 0004 4883EC10 		subq	$16, %rsp
 16283 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16284 000c 488975F0 		movq	%rsi, -16(%rbp)
 16285              	.L1318:
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 16286              		.loc 16 102 0 discriminator 2
 16287 0010 488B45F8 		movq	-8(%rbp), %rax
 16288 0014 483B45F0 		cmpq	-16(%rbp), %rax
 16289 0018 741B     		je	.L1319
 103:/usr/include/c++/5/bits/stl_construct.h **** 	}
 16290              		.loc 16 103 0 discriminator 1
 16291 001a 488B45F8 		movq	-8(%rbp), %rax
 16292 001e 4889C7   		movq	%rax, %rdi
 16293 0021 E8000000 		call	_ZSt11__addressofI10vector_varEPT_RS1_
 16293      00
 16294 0026 4889C7   		movq	%rax, %rdi
 16295 0029 E8000000 		call	_ZSt8_DestroyI10vector_varEvPT_
 16295      00
 102:/usr/include/c++/5/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 16296              		.loc 16 102 0 discriminator 1
 16297 002e 488345F8 		addq	$32, -8(%rbp)
 16297      20
 16298 0033 EBDB     		jmp	.L1318
 16299              	.L1319:
 104:/usr/include/c++/5/bits/stl_construct.h ****     };
 16300              		.loc 16 104 0
 16301 0035 90       		nop
 16302 0036 C9       		leave
 16303              		.cfi_def_cfa 7, 8
 16304 0037 C3       		ret
 16305              		.cfi_endproc
 16306              	.LFE7518:
 16308              		.section	.text._ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorI10vecto
 16309              		.align 2
 16310              		.weak	_ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv
 16312              	_ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv:
 16313              	.LFB7520:
 659:/usr/include/c++/5/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 16314              		.loc 15 659 0
 16315              		.cfi_startproc
 16316 0000 55       		pushq	%rbp
 16317              		.cfi_def_cfa_offset 16
 16318              		.cfi_offset 6, -16
 16319 0001 4889E5   		movq	%rsp, %rbp
 16320              		.cfi_def_cfa_register 6
GAS LISTING /tmp/cc2K2nX4.s 			page 597


 16321 0004 4883EC10 		subq	$16, %rsp
 16322 0008 48897DF8 		movq	%rdi, -8(%rbp)
 660:/usr/include/c++/5/bits/stl_vector.h **** 
 16323              		.loc 15 660 0
 16324 000c 488B45F8 		movq	-8(%rbp), %rax
 16325 0010 4889C7   		movq	%rax, %rdi
 16326 0013 E8000000 		call	_ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 16326      00
 16327 0018 4889C7   		movq	%rax, %rdi
 16328 001b E8000000 		call	_ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_
 16328      00
 16329 0020 C9       		leave
 16330              		.cfi_def_cfa 7, 8
 16331 0021 C3       		ret
 16332              		.cfi_endproc
 16333              	.LFE7520:
 16335              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 16336              		.weak	_ZSt3maxImERKT_S2_S2_
 16338              	_ZSt3maxImERKT_S2_S2_:
 16339              	.LFB7521:
 16340              		.file 23 "/usr/include/c++/5/bits/stl_algobase.h"
   1:/usr/include/c++/5/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_algobase.h **** 
   3:/usr/include/c++/5/bits/stl_algobase.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_algobase.h **** //
   5:/usr/include/c++/5/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_algobase.h **** 
  11:/usr/include/c++/5/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_algobase.h **** 
  16:/usr/include/c++/5/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_algobase.h **** 
  20:/usr/include/c++/5/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_algobase.h **** 
  25:/usr/include/c++/5/bits/stl_algobase.h **** /*
  26:/usr/include/c++/5/bits/stl_algobase.h ****  *
  27:/usr/include/c++/5/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_algobase.h ****  *
  30:/usr/include/c++/5/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/5/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
GAS LISTING /tmp/cc2K2nX4.s 			page 598


  37:/usr/include/c++/5/bits/stl_algobase.h ****  *
  38:/usr/include/c++/5/bits/stl_algobase.h ****  *
  39:/usr/include/c++/5/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/5/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_algobase.h ****  *
  42:/usr/include/c++/5/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_algobase.h ****  */
  50:/usr/include/c++/5/bits/stl_algobase.h **** 
  51:/usr/include/c++/5/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/5/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/5/bits/stl_algobase.h ****  */
  55:/usr/include/c++/5/bits/stl_algobase.h **** 
  56:/usr/include/c++/5/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/5/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/5/bits/stl_algobase.h **** 
  59:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/5/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/5/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/5/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/5/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/5/bits/stl_algobase.h **** 
  73:/usr/include/c++/5/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/5/bits/stl_algobase.h **** {
  75:/usr/include/c++/5/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/5/bits/stl_algobase.h **** 
  77:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/5/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/5/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/5/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/5/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/5/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/5/bits/stl_algobase.h ****     {
  84:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/5/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/5/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/5/bits/stl_algobase.h ****         {
  88:/usr/include/c++/5/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/5/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/5/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/5/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/5/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/5/bits/stl_algobase.h **** 	}
GAS LISTING /tmp/cc2K2nX4.s 			page 599


  94:/usr/include/c++/5/bits/stl_algobase.h ****     };
  95:/usr/include/c++/5/bits/stl_algobase.h **** 
  96:/usr/include/c++/5/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/5/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/5/bits/stl_algobase.h ****     {
  99:/usr/include/c++/5/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/5/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/5/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/5/bits/stl_algobase.h ****         {
 103:/usr/include/c++/5/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/5/bits/stl_algobase.h ****         }
 105:/usr/include/c++/5/bits/stl_algobase.h ****     };
 106:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/5/bits/stl_algobase.h **** 
 108:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/5/bits/stl_algobase.h ****    *
 115:/usr/include/c++/5/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/5/bits/stl_algobase.h ****    *  iterators themselves.
 117:/usr/include/c++/5/bits/stl_algobase.h ****   */
 118:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/5/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/5/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/5/bits/stl_algobase.h ****     {
 122:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/5/bits/stl_algobase.h **** 
 128:/usr/include/c++/5/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/5/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/5/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/5/bits/stl_algobase.h **** 
 134:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/5/bits/stl_algobase.h **** 
 139:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/5/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/5/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/5/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/5/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/5/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/5/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/5/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/5/bits/stl_algobase.h **** #else
 148:/usr/include/c++/5/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/5/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/5/bits/stl_algobase.h ****     }
GAS LISTING /tmp/cc2K2nX4.s 			page 600


 151:/usr/include/c++/5/bits/stl_algobase.h **** 
 152:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/5/bits/stl_algobase.h ****    *
 160:/usr/include/c++/5/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/5/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/5/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/5/bits/stl_algobase.h ****   */
 164:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/5/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/5/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/5/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/5/bits/stl_algobase.h ****     {
 169:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/5/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/5/bits/stl_algobase.h **** 
 176:/usr/include/c++/5/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 177:/usr/include/c++/5/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/5/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/5/bits/stl_algobase.h ****     }
 180:/usr/include/c++/5/bits/stl_algobase.h **** 
 181:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/5/bits/stl_algobase.h ****    *
 188:/usr/include/c++/5/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/5/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/5/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/5/bits/stl_algobase.h ****   */
 192:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 195:/usr/include/c++/5/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/usr/include/c++/5/bits/stl_algobase.h ****     {
 197:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 198:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/usr/include/c++/5/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/usr/include/c++/5/bits/stl_algobase.h ****       if (__b < __a)
 201:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 202:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 203:/usr/include/c++/5/bits/stl_algobase.h ****     }
 204:/usr/include/c++/5/bits/stl_algobase.h **** 
 205:/usr/include/c++/5/bits/stl_algobase.h ****   /**
 206:/usr/include/c++/5/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/usr/include/c++/5/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
GAS LISTING /tmp/cc2K2nX4.s 			page 601


 208:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/usr/include/c++/5/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/usr/include/c++/5/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/usr/include/c++/5/bits/stl_algobase.h ****    *
 212:/usr/include/c++/5/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/usr/include/c++/5/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/usr/include/c++/5/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/usr/include/c++/5/bits/stl_algobase.h ****   */
 216:/usr/include/c++/5/bits/stl_algobase.h ****   template<typename _Tp>
 217:/usr/include/c++/5/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:/usr/include/c++/5/bits/stl_algobase.h ****     inline const _Tp&
 219:/usr/include/c++/5/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 16341              		.loc 23 219 0
 16342              		.cfi_startproc
 16343 0000 55       		pushq	%rbp
 16344              		.cfi_def_cfa_offset 16
 16345              		.cfi_offset 6, -16
 16346 0001 4889E5   		movq	%rsp, %rbp
 16347              		.cfi_def_cfa_register 6
 16348 0004 48897DF8 		movq	%rdi, -8(%rbp)
 16349 0008 488975F0 		movq	%rsi, -16(%rbp)
 220:/usr/include/c++/5/bits/stl_algobase.h ****     {
 221:/usr/include/c++/5/bits/stl_algobase.h ****       // concept requirements
 222:/usr/include/c++/5/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/usr/include/c++/5/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/usr/include/c++/5/bits/stl_algobase.h ****       if (__a < __b)
 16350              		.loc 23 224 0
 16351 000c 488B45F8 		movq	-8(%rbp), %rax
 16352 0010 488B10   		movq	(%rax), %rdx
 16353 0013 488B45F0 		movq	-16(%rbp), %rax
 16354 0017 488B00   		movq	(%rax), %rax
 16355 001a 4839C2   		cmpq	%rax, %rdx
 16356 001d 7306     		jnb	.L1323
 225:/usr/include/c++/5/bits/stl_algobase.h **** 	return __b;
 16357              		.loc 23 225 0
 16358 001f 488B45F0 		movq	-16(%rbp), %rax
 16359 0023 EB04     		jmp	.L1324
 16360              	.L1323:
 226:/usr/include/c++/5/bits/stl_algobase.h ****       return __a;
 16361              		.loc 23 226 0
 16362 0025 488B45F8 		movq	-8(%rbp), %rax
 16363              	.L1324:
 227:/usr/include/c++/5/bits/stl_algobase.h ****     }
 16364              		.loc 23 227 0
 16365 0029 5D       		popq	%rbp
 16366              		.cfi_def_cfa 7, 8
 16367 002a C3       		ret
 16368              		.cfi_endproc
 16369              	.LFE7521:
 16371              		.section	.text._ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m,"axG",@progbits,_ZNSt16all
 16372              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m
 16374              	_ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m:
 16375              	.LFB7522:
 490:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 16376              		.loc 18 490 0
 16377              		.cfi_startproc
 16378 0000 55       		pushq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 602


 16379              		.cfi_def_cfa_offset 16
 16380              		.cfi_offset 6, -16
 16381 0001 4889E5   		movq	%rsp, %rbp
 16382              		.cfi_def_cfa_register 6
 16383 0004 4883EC10 		subq	$16, %rsp
 16384 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16385 000c 488975F0 		movq	%rsi, -16(%rbp)
 491:/usr/include/c++/5/bits/alloc_traits.h **** 
 16386              		.loc 18 491 0
 16387 0010 488B4DF0 		movq	-16(%rbp), %rcx
 16388 0014 488B45F8 		movq	-8(%rbp), %rax
 16389 0018 BA000000 		movl	$0, %edx
 16389      00
 16390 001d 4889CE   		movq	%rcx, %rsi
 16391 0020 4889C7   		movq	%rax, %rdi
 16392 0023 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv
 16392      00
 16393 0028 C9       		leave
 16394              		.cfi_def_cfa 7, 8
 16395 0029 C3       		ret
 16396              		.cfi_endproc
 16397              	.LFE7522:
 16399              		.section	.text._ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_,"a
 16400              		.weak	_ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_
 16402              	_ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_:
 16403              	.LFB7523:
 16404              		.file 24 "/usr/include/c++/5/bits/stl_iterator.h"
   1:/usr/include/c++/5/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/5/bits/stl_iterator.h **** 
   3:/usr/include/c++/5/bits/stl_iterator.h **** // Copyright (C) 2001-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/bits/stl_iterator.h **** //
   5:/usr/include/c++/5/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/5/bits/stl_iterator.h **** 
  11:/usr/include/c++/5/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/5/bits/stl_iterator.h **** 
  16:/usr/include/c++/5/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/bits/stl_iterator.h **** 
  20:/usr/include/c++/5/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/bits/stl_iterator.h **** 
  25:/usr/include/c++/5/bits/stl_iterator.h **** /*
  26:/usr/include/c++/5/bits/stl_iterator.h ****  *
  27:/usr/include/c++/5/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/5/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/5/bits/stl_iterator.h ****  *
  30:/usr/include/c++/5/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
GAS LISTING /tmp/cc2K2nX4.s 			page 603


  31:/usr/include/c++/5/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/5/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/5/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/5/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/5/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/5/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/5/bits/stl_iterator.h ****  *
  38:/usr/include/c++/5/bits/stl_iterator.h ****  *
  39:/usr/include/c++/5/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/5/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/5/bits/stl_iterator.h ****  *
  42:/usr/include/c++/5/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/5/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/5/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/5/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/5/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/5/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/5/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/5/bits/stl_iterator.h ****  */
  50:/usr/include/c++/5/bits/stl_iterator.h **** 
  51:/usr/include/c++/5/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/5/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/5/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/5/bits/stl_iterator.h ****  *
  55:/usr/include/c++/5/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/5/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/5/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/5/bits/stl_iterator.h ****  */
  59:/usr/include/c++/5/bits/stl_iterator.h **** 
  60:/usr/include/c++/5/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/5/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/5/bits/stl_iterator.h **** 
  63:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/5/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/5/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/usr/include/c++/5/bits/stl_iterator.h **** 
  68:/usr/include/c++/5/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  69:/usr/include/c++/5/bits/stl_iterator.h **** {
  70:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  71:/usr/include/c++/5/bits/stl_iterator.h **** 
  72:/usr/include/c++/5/bits/stl_iterator.h ****   /**
  73:/usr/include/c++/5/bits/stl_iterator.h ****    * @addtogroup iterators
  74:/usr/include/c++/5/bits/stl_iterator.h ****    * @{
  75:/usr/include/c++/5/bits/stl_iterator.h ****    */
  76:/usr/include/c++/5/bits/stl_iterator.h **** 
  77:/usr/include/c++/5/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  78:/usr/include/c++/5/bits/stl_iterator.h ****   /**
  79:/usr/include/c++/5/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  80:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  81:/usr/include/c++/5/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  82:/usr/include/c++/5/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  83:/usr/include/c++/5/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  84:/usr/include/c++/5/bits/stl_iterator.h ****    *  @code
  85:/usr/include/c++/5/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  86:/usr/include/c++/5/bits/stl_iterator.h ****    *  @endcode
  87:/usr/include/c++/5/bits/stl_iterator.h ****    *
GAS LISTING /tmp/cc2K2nX4.s 			page 604


  88:/usr/include/c++/5/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  89:/usr/include/c++/5/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  90:/usr/include/c++/5/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  91:/usr/include/c++/5/bits/stl_iterator.h ****    *
  92:/usr/include/c++/5/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  93:/usr/include/c++/5/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  94:/usr/include/c++/5/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  95:/usr/include/c++/5/bits/stl_iterator.h ****   */
  96:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
  97:/usr/include/c++/5/bits/stl_iterator.h ****     class reverse_iterator
  98:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  99:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 100:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 101:/usr/include/c++/5/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 102:/usr/include/c++/5/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 103:/usr/include/c++/5/bits/stl_iterator.h ****     {
 104:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 105:/usr/include/c++/5/bits/stl_iterator.h ****       _Iterator current;
 106:/usr/include/c++/5/bits/stl_iterator.h **** 
 107:/usr/include/c++/5/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 108:/usr/include/c++/5/bits/stl_iterator.h **** 
 109:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 110:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 111:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 112:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 113:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 114:/usr/include/c++/5/bits/stl_iterator.h **** 
 115:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 116:/usr/include/c++/5/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 117:/usr/include/c++/5/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 118:/usr/include/c++/5/bits/stl_iterator.h ****       */
 119:/usr/include/c++/5/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/5/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 121:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 122:/usr/include/c++/5/bits/stl_iterator.h **** 
 123:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 124:/usr/include/c++/5/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 125:/usr/include/c++/5/bits/stl_iterator.h ****       */
 126:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 127:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 128:/usr/include/c++/5/bits/stl_iterator.h **** 
 129:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 130:/usr/include/c++/5/bits/stl_iterator.h ****        *  The copy constructor is normal.
 131:/usr/include/c++/5/bits/stl_iterator.h ****       */
 132:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 133:/usr/include/c++/5/bits/stl_iterator.h ****       : current(__x.current) { }
 134:/usr/include/c++/5/bits/stl_iterator.h **** 
 135:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 136:/usr/include/c++/5/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 137:/usr/include/c++/5/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 138:/usr/include/c++/5/bits/stl_iterator.h ****       */
 139:/usr/include/c++/5/bits/stl_iterator.h ****       template<typename _Iter>
 140:/usr/include/c++/5/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 141:/usr/include/c++/5/bits/stl_iterator.h **** 	: current(__x.base()) { }
 142:/usr/include/c++/5/bits/stl_iterator.h **** 
 143:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 144:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
GAS LISTING /tmp/cc2K2nX4.s 			page 605


 145:/usr/include/c++/5/bits/stl_iterator.h ****       */
 146:/usr/include/c++/5/bits/stl_iterator.h ****       iterator_type
 147:/usr/include/c++/5/bits/stl_iterator.h ****       base() const
 148:/usr/include/c++/5/bits/stl_iterator.h ****       { return current; }
 149:/usr/include/c++/5/bits/stl_iterator.h **** 
 150:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 151:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 152:/usr/include/c++/5/bits/stl_iterator.h ****        *
 153:/usr/include/c++/5/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 154:/usr/include/c++/5/bits/stl_iterator.h ****        *
 155:/usr/include/c++/5/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 156:/usr/include/c++/5/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 157:/usr/include/c++/5/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 158:/usr/include/c++/5/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 159:/usr/include/c++/5/bits/stl_iterator.h ****       */
 160:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 161:/usr/include/c++/5/bits/stl_iterator.h ****       operator*() const
 162:/usr/include/c++/5/bits/stl_iterator.h ****       {
 163:/usr/include/c++/5/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 164:/usr/include/c++/5/bits/stl_iterator.h **** 	return *--__tmp;
 165:/usr/include/c++/5/bits/stl_iterator.h ****       }
 166:/usr/include/c++/5/bits/stl_iterator.h **** 
 167:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 168:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 169:/usr/include/c++/5/bits/stl_iterator.h ****        *
 170:/usr/include/c++/5/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 171:/usr/include/c++/5/bits/stl_iterator.h ****       */
 172:/usr/include/c++/5/bits/stl_iterator.h ****       pointer
 173:/usr/include/c++/5/bits/stl_iterator.h ****       operator->() const
 174:/usr/include/c++/5/bits/stl_iterator.h ****       { return &(operator*()); }
 175:/usr/include/c++/5/bits/stl_iterator.h **** 
 176:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 177:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c *this
 178:/usr/include/c++/5/bits/stl_iterator.h ****        *
 179:/usr/include/c++/5/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 180:/usr/include/c++/5/bits/stl_iterator.h ****       */
 181:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 182:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 183:/usr/include/c++/5/bits/stl_iterator.h ****       {
 184:/usr/include/c++/5/bits/stl_iterator.h **** 	--current;
 185:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 186:/usr/include/c++/5/bits/stl_iterator.h ****       }
 187:/usr/include/c++/5/bits/stl_iterator.h **** 
 188:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 189:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 190:/usr/include/c++/5/bits/stl_iterator.h ****        *
 191:/usr/include/c++/5/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 192:/usr/include/c++/5/bits/stl_iterator.h ****       */
 193:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 194:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 195:/usr/include/c++/5/bits/stl_iterator.h ****       {
 196:/usr/include/c++/5/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 197:/usr/include/c++/5/bits/stl_iterator.h **** 	--current;
 198:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
 199:/usr/include/c++/5/bits/stl_iterator.h ****       }
 200:/usr/include/c++/5/bits/stl_iterator.h **** 
 201:/usr/include/c++/5/bits/stl_iterator.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 606


 202:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  @c *this
 203:/usr/include/c++/5/bits/stl_iterator.h ****        *
 204:/usr/include/c++/5/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 205:/usr/include/c++/5/bits/stl_iterator.h ****       */
 206:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 207:/usr/include/c++/5/bits/stl_iterator.h ****       operator--()
 208:/usr/include/c++/5/bits/stl_iterator.h ****       {
 209:/usr/include/c++/5/bits/stl_iterator.h **** 	++current;
 210:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 211:/usr/include/c++/5/bits/stl_iterator.h ****       }
 212:/usr/include/c++/5/bits/stl_iterator.h **** 
 213:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 214:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 215:/usr/include/c++/5/bits/stl_iterator.h ****        *
 216:/usr/include/c++/5/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 217:/usr/include/c++/5/bits/stl_iterator.h ****       */
 218:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 219:/usr/include/c++/5/bits/stl_iterator.h ****       operator--(int)
 220:/usr/include/c++/5/bits/stl_iterator.h ****       {
 221:/usr/include/c++/5/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 222:/usr/include/c++/5/bits/stl_iterator.h **** 	++current;
 223:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
 224:/usr/include/c++/5/bits/stl_iterator.h ****       }
 225:/usr/include/c++/5/bits/stl_iterator.h **** 
 226:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 227:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 228:/usr/include/c++/5/bits/stl_iterator.h ****        *
 229:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 230:/usr/include/c++/5/bits/stl_iterator.h ****       */
 231:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 232:/usr/include/c++/5/bits/stl_iterator.h ****       operator+(difference_type __n) const
 233:/usr/include/c++/5/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 234:/usr/include/c++/5/bits/stl_iterator.h **** 
 235:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 236:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  *this
 237:/usr/include/c++/5/bits/stl_iterator.h ****        *
 238:/usr/include/c++/5/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 239:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 240:/usr/include/c++/5/bits/stl_iterator.h ****       */
 241:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 242:/usr/include/c++/5/bits/stl_iterator.h ****       operator+=(difference_type __n)
 243:/usr/include/c++/5/bits/stl_iterator.h ****       {
 244:/usr/include/c++/5/bits/stl_iterator.h **** 	current -= __n;
 245:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 246:/usr/include/c++/5/bits/stl_iterator.h ****       }
 247:/usr/include/c++/5/bits/stl_iterator.h **** 
 248:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 249:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/usr/include/c++/5/bits/stl_iterator.h ****        *
 251:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/usr/include/c++/5/bits/stl_iterator.h ****       */
 253:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator
 254:/usr/include/c++/5/bits/stl_iterator.h ****       operator-(difference_type __n) const
 255:/usr/include/c++/5/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 256:/usr/include/c++/5/bits/stl_iterator.h **** 
 257:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 258:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  *this
GAS LISTING /tmp/cc2K2nX4.s 			page 607


 259:/usr/include/c++/5/bits/stl_iterator.h ****        *
 260:/usr/include/c++/5/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 261:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/usr/include/c++/5/bits/stl_iterator.h ****       */
 263:/usr/include/c++/5/bits/stl_iterator.h ****       reverse_iterator&
 264:/usr/include/c++/5/bits/stl_iterator.h ****       operator-=(difference_type __n)
 265:/usr/include/c++/5/bits/stl_iterator.h ****       {
 266:/usr/include/c++/5/bits/stl_iterator.h **** 	current += __n;
 267:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 268:/usr/include/c++/5/bits/stl_iterator.h ****       }
 269:/usr/include/c++/5/bits/stl_iterator.h **** 
 270:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 271:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 272:/usr/include/c++/5/bits/stl_iterator.h ****        *
 273:/usr/include/c++/5/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/usr/include/c++/5/bits/stl_iterator.h ****       */
 275:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 276:/usr/include/c++/5/bits/stl_iterator.h ****       operator[](difference_type __n) const
 277:/usr/include/c++/5/bits/stl_iterator.h ****       { return *(*this + __n); }
 278:/usr/include/c++/5/bits/stl_iterator.h ****     };
 279:/usr/include/c++/5/bits/stl_iterator.h **** 
 280:/usr/include/c++/5/bits/stl_iterator.h ****   //@{
 281:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 282:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 283:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 284:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  A simple bool.
 285:/usr/include/c++/5/bits/stl_iterator.h ****    *
 286:/usr/include/c++/5/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 287:/usr/include/c++/5/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 288:/usr/include/c++/5/bits/stl_iterator.h ****    *
 289:/usr/include/c++/5/bits/stl_iterator.h ****   */
 290:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 291:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 292:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 293:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 294:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 295:/usr/include/c++/5/bits/stl_iterator.h **** 
 296:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 297:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 298:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 299:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 300:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 301:/usr/include/c++/5/bits/stl_iterator.h **** 
 302:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 303:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 304:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 305:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 306:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
 307:/usr/include/c++/5/bits/stl_iterator.h **** 
 308:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 309:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 310:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 311:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 312:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
 313:/usr/include/c++/5/bits/stl_iterator.h **** 
 314:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 315:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
GAS LISTING /tmp/cc2K2nX4.s 			page 608


 316:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 317:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 318:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
 319:/usr/include/c++/5/bits/stl_iterator.h **** 
 320:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 321:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 322:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 323:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 324:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
 325:/usr/include/c++/5/bits/stl_iterator.h **** 
 326:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 327:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 328:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 329:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 330:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 331:/usr/include/c++/5/bits/stl_iterator.h **** 
 332:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 333:/usr/include/c++/5/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 334:/usr/include/c++/5/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 335:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 336:/usr/include/c++/5/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 337:/usr/include/c++/5/bits/stl_iterator.h **** 
 338:/usr/include/c++/5/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 339:/usr/include/c++/5/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 340:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 341:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 342:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 343:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 344:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 345:/usr/include/c++/5/bits/stl_iterator.h **** 
 346:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 347:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 348:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 349:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 350:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 351:/usr/include/c++/5/bits/stl_iterator.h **** 
 352:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 353:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 354:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 355:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 356:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
 357:/usr/include/c++/5/bits/stl_iterator.h **** 
 358:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 359:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 360:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 361:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 362:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
 363:/usr/include/c++/5/bits/stl_iterator.h **** 
 364:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 365:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 366:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 367:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 368:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
 369:/usr/include/c++/5/bits/stl_iterator.h **** 
 370:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 371:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 372:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
GAS LISTING /tmp/cc2K2nX4.s 			page 609


 373:/usr/include/c++/5/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 374:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
 375:/usr/include/c++/5/bits/stl_iterator.h **** 
 376:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 377:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 378:/usr/include/c++/5/bits/stl_iterator.h ****     // DR 685.
 379:/usr/include/c++/5/bits/stl_iterator.h ****     inline auto
 380:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 381:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 382:/usr/include/c++/5/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 383:/usr/include/c++/5/bits/stl_iterator.h **** #else
 384:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 385:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 386:/usr/include/c++/5/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 387:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 388:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 389:/usr/include/c++/5/bits/stl_iterator.h ****   //@}
 390:/usr/include/c++/5/bits/stl_iterator.h **** 
 391:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus > 201103L
 392:/usr/include/c++/5/bits/stl_iterator.h **** #define __cpp_lib_make_reverse_iterator 201402
 393:/usr/include/c++/5/bits/stl_iterator.h **** 
 394:/usr/include/c++/5/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 395:/usr/include/c++/5/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 396:/usr/include/c++/5/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 397:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 398:/usr/include/c++/5/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 399:/usr/include/c++/5/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 400:/usr/include/c++/5/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 401:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 402:/usr/include/c++/5/bits/stl_iterator.h **** 
 403:/usr/include/c++/5/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 404:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 405:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 406:/usr/include/c++/5/bits/stl_iterator.h ****    *
 407:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 408:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 409:/usr/include/c++/5/bits/stl_iterator.h ****    *  push_back.
 410:/usr/include/c++/5/bits/stl_iterator.h ****    *
 411:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 412:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 413:/usr/include/c++/5/bits/stl_iterator.h ****   */
 414:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 415:/usr/include/c++/5/bits/stl_iterator.h ****     class back_insert_iterator
 416:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 417:/usr/include/c++/5/bits/stl_iterator.h ****     {
 418:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 419:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 420:/usr/include/c++/5/bits/stl_iterator.h **** 
 421:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 422:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 423:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 424:/usr/include/c++/5/bits/stl_iterator.h **** 
 425:/usr/include/c++/5/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 426:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 427:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 428:/usr/include/c++/5/bits/stl_iterator.h **** 
 429:/usr/include/c++/5/bits/stl_iterator.h ****       /**
GAS LISTING /tmp/cc2K2nX4.s 			page 610


 430:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 431:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 432:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 433:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 434:/usr/include/c++/5/bits/stl_iterator.h ****        *
 435:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 436:/usr/include/c++/5/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 437:/usr/include/c++/5/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 438:/usr/include/c++/5/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 439:/usr/include/c++/5/bits/stl_iterator.h ****       */
 440:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 441:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 442:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 443:/usr/include/c++/5/bits/stl_iterator.h ****       {
 444:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(__value);
 445:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 446:/usr/include/c++/5/bits/stl_iterator.h ****       }
 447:/usr/include/c++/5/bits/stl_iterator.h **** #else
 448:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 449:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 450:/usr/include/c++/5/bits/stl_iterator.h ****       {
 451:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(__value);
 452:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 453:/usr/include/c++/5/bits/stl_iterator.h ****       }
 454:/usr/include/c++/5/bits/stl_iterator.h **** 
 455:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 456:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 457:/usr/include/c++/5/bits/stl_iterator.h ****       {
 458:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 459:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 460:/usr/include/c++/5/bits/stl_iterator.h ****       }
 461:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 462:/usr/include/c++/5/bits/stl_iterator.h **** 
 463:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 464:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 465:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 466:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 467:/usr/include/c++/5/bits/stl_iterator.h **** 
 468:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 469:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator&
 470:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 471:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 472:/usr/include/c++/5/bits/stl_iterator.h **** 
 473:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 474:/usr/include/c++/5/bits/stl_iterator.h ****       back_insert_iterator
 475:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 476:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 477:/usr/include/c++/5/bits/stl_iterator.h ****     };
 478:/usr/include/c++/5/bits/stl_iterator.h **** 
 479:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 480:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 481:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 482:/usr/include/c++/5/bits/stl_iterator.h ****    *
 483:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 484:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 485:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 486:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
GAS LISTING /tmp/cc2K2nX4.s 			page 611


 487:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 488:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 489:/usr/include/c++/5/bits/stl_iterator.h ****   */
 490:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 491:/usr/include/c++/5/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 492:/usr/include/c++/5/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 493:/usr/include/c++/5/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 494:/usr/include/c++/5/bits/stl_iterator.h **** 
 495:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 496:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 497:/usr/include/c++/5/bits/stl_iterator.h ****    *
 498:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 499:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 500:/usr/include/c++/5/bits/stl_iterator.h ****    *  push_front.
 501:/usr/include/c++/5/bits/stl_iterator.h ****    *
 502:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 503:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 504:/usr/include/c++/5/bits/stl_iterator.h ****   */
 505:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 506:/usr/include/c++/5/bits/stl_iterator.h ****     class front_insert_iterator
 507:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 508:/usr/include/c++/5/bits/stl_iterator.h ****     {
 509:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 510:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 511:/usr/include/c++/5/bits/stl_iterator.h **** 
 512:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 513:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 514:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 515:/usr/include/c++/5/bits/stl_iterator.h **** 
 516:/usr/include/c++/5/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 517:/usr/include/c++/5/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 518:/usr/include/c++/5/bits/stl_iterator.h **** 
 519:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 520:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 521:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 522:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 523:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 524:/usr/include/c++/5/bits/stl_iterator.h ****        *
 525:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 526:/usr/include/c++/5/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 527:/usr/include/c++/5/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 528:/usr/include/c++/5/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 529:/usr/include/c++/5/bits/stl_iterator.h ****       */
 530:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 531:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 532:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 533:/usr/include/c++/5/bits/stl_iterator.h ****       {
 534:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(__value);
 535:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 536:/usr/include/c++/5/bits/stl_iterator.h ****       }
 537:/usr/include/c++/5/bits/stl_iterator.h **** #else
 538:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 539:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 540:/usr/include/c++/5/bits/stl_iterator.h ****       {
 541:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(__value);
 542:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 543:/usr/include/c++/5/bits/stl_iterator.h ****       }
GAS LISTING /tmp/cc2K2nX4.s 			page 612


 544:/usr/include/c++/5/bits/stl_iterator.h **** 
 545:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 546:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 547:/usr/include/c++/5/bits/stl_iterator.h ****       {
 548:/usr/include/c++/5/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 549:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 550:/usr/include/c++/5/bits/stl_iterator.h ****       }
 551:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 552:/usr/include/c++/5/bits/stl_iterator.h **** 
 553:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 554:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 555:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 556:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 557:/usr/include/c++/5/bits/stl_iterator.h **** 
 558:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 559:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator&
 560:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 561:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 562:/usr/include/c++/5/bits/stl_iterator.h **** 
 563:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 564:/usr/include/c++/5/bits/stl_iterator.h ****       front_insert_iterator
 565:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 566:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 567:/usr/include/c++/5/bits/stl_iterator.h ****     };
 568:/usr/include/c++/5/bits/stl_iterator.h **** 
 569:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 570:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 571:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 572:/usr/include/c++/5/bits/stl_iterator.h ****    *
 573:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 574:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 575:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 576:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 577:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 578:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 579:/usr/include/c++/5/bits/stl_iterator.h ****   */
 580:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 581:/usr/include/c++/5/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 582:/usr/include/c++/5/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 583:/usr/include/c++/5/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 584:/usr/include/c++/5/bits/stl_iterator.h **** 
 585:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 586:/usr/include/c++/5/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 587:/usr/include/c++/5/bits/stl_iterator.h ****    *
 588:/usr/include/c++/5/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 589:/usr/include/c++/5/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 590:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 591:/usr/include/c++/5/bits/stl_iterator.h ****    *  position.
 592:/usr/include/c++/5/bits/stl_iterator.h ****    *
 593:/usr/include/c++/5/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 594:/usr/include/c++/5/bits/stl_iterator.h ****    *  %iterator's position.)
 595:/usr/include/c++/5/bits/stl_iterator.h ****    *
 596:/usr/include/c++/5/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 597:/usr/include/c++/5/bits/stl_iterator.h ****    *  save typing.
 598:/usr/include/c++/5/bits/stl_iterator.h ****   */
 599:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container>
 600:/usr/include/c++/5/bits/stl_iterator.h ****     class insert_iterator
GAS LISTING /tmp/cc2K2nX4.s 			page 613


 601:/usr/include/c++/5/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 602:/usr/include/c++/5/bits/stl_iterator.h ****     {
 603:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 604:/usr/include/c++/5/bits/stl_iterator.h ****       _Container* container;
 605:/usr/include/c++/5/bits/stl_iterator.h ****       typename _Container::iterator iter;
 606:/usr/include/c++/5/bits/stl_iterator.h **** 
 607:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 608:/usr/include/c++/5/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 609:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Container          container_type;
 610:/usr/include/c++/5/bits/stl_iterator.h **** 
 611:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 612:/usr/include/c++/5/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 613:/usr/include/c++/5/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 614:/usr/include/c++/5/bits/stl_iterator.h ****       */
 615:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 616:/usr/include/c++/5/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 617:/usr/include/c++/5/bits/stl_iterator.h **** 
 618:/usr/include/c++/5/bits/stl_iterator.h ****       /**
 619:/usr/include/c++/5/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 620:/usr/include/c++/5/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 621:/usr/include/c++/5/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 622:/usr/include/c++/5/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 623:/usr/include/c++/5/bits/stl_iterator.h ****        *
 624:/usr/include/c++/5/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 625:/usr/include/c++/5/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 626:/usr/include/c++/5/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 627:/usr/include/c++/5/bits/stl_iterator.h ****        *
 628:/usr/include/c++/5/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 629:/usr/include/c++/5/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 630:/usr/include/c++/5/bits/stl_iterator.h ****        *  @code
 631:/usr/include/c++/5/bits/stl_iterator.h ****        *     // vector v contains A and Z
 632:/usr/include/c++/5/bits/stl_iterator.h ****        *
 633:/usr/include/c++/5/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 634:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 1;
 635:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 2;
 636:/usr/include/c++/5/bits/stl_iterator.h ****        *     i = 3;
 637:/usr/include/c++/5/bits/stl_iterator.h ****        *
 638:/usr/include/c++/5/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 639:/usr/include/c++/5/bits/stl_iterator.h ****        *  @endcode
 640:/usr/include/c++/5/bits/stl_iterator.h ****       */
 641:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus < 201103L
 642:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 643:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 644:/usr/include/c++/5/bits/stl_iterator.h ****       {
 645:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 646:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 647:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 648:/usr/include/c++/5/bits/stl_iterator.h ****       }
 649:/usr/include/c++/5/bits/stl_iterator.h **** #else
 650:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 651:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 652:/usr/include/c++/5/bits/stl_iterator.h ****       {
 653:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 654:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 655:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 656:/usr/include/c++/5/bits/stl_iterator.h ****       }
 657:/usr/include/c++/5/bits/stl_iterator.h **** 
GAS LISTING /tmp/cc2K2nX4.s 			page 614


 658:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 659:/usr/include/c++/5/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 660:/usr/include/c++/5/bits/stl_iterator.h ****       {
 661:/usr/include/c++/5/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 662:/usr/include/c++/5/bits/stl_iterator.h **** 	++iter;
 663:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 664:/usr/include/c++/5/bits/stl_iterator.h ****       }
 665:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 666:/usr/include/c++/5/bits/stl_iterator.h **** 
 667:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.
 668:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 669:/usr/include/c++/5/bits/stl_iterator.h ****       operator*()
 670:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 671:/usr/include/c++/5/bits/stl_iterator.h **** 
 672:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 673:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 674:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
 675:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 676:/usr/include/c++/5/bits/stl_iterator.h **** 
 677:/usr/include/c++/5/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 678:/usr/include/c++/5/bits/stl_iterator.h ****       insert_iterator&
 679:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
 680:/usr/include/c++/5/bits/stl_iterator.h ****       { return *this; }
 681:/usr/include/c++/5/bits/stl_iterator.h ****     };
 682:/usr/include/c++/5/bits/stl_iterator.h **** 
 683:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 684:/usr/include/c++/5/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 685:/usr/include/c++/5/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 686:/usr/include/c++/5/bits/stl_iterator.h ****    *
 687:/usr/include/c++/5/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 688:/usr/include/c++/5/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 689:/usr/include/c++/5/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 690:/usr/include/c++/5/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 691:/usr/include/c++/5/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 692:/usr/include/c++/5/bits/stl_iterator.h ****    *  types for you.
 693:/usr/include/c++/5/bits/stl_iterator.h ****   */
 694:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 695:/usr/include/c++/5/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 696:/usr/include/c++/5/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 697:/usr/include/c++/5/bits/stl_iterator.h ****     {
 698:/usr/include/c++/5/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 699:/usr/include/c++/5/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 700:/usr/include/c++/5/bits/stl_iterator.h ****     }
 701:/usr/include/c++/5/bits/stl_iterator.h **** 
 702:/usr/include/c++/5/bits/stl_iterator.h ****   // @} group iterators
 703:/usr/include/c++/5/bits/stl_iterator.h **** 
 704:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 705:/usr/include/c++/5/bits/stl_iterator.h **** } // namespace
 706:/usr/include/c++/5/bits/stl_iterator.h **** 
 707:/usr/include/c++/5/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 708:/usr/include/c++/5/bits/stl_iterator.h **** {
 709:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 710:/usr/include/c++/5/bits/stl_iterator.h **** 
 711:/usr/include/c++/5/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 712:/usr/include/c++/5/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 713:/usr/include/c++/5/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 714:/usr/include/c++/5/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
GAS LISTING /tmp/cc2K2nX4.s 			page 615


 715:/usr/include/c++/5/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 716:/usr/include/c++/5/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 717:/usr/include/c++/5/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 718:/usr/include/c++/5/bits/stl_iterator.h ****   using std::iterator_traits;
 719:/usr/include/c++/5/bits/stl_iterator.h ****   using std::iterator;
 720:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 721:/usr/include/c++/5/bits/stl_iterator.h ****     class __normal_iterator
 722:/usr/include/c++/5/bits/stl_iterator.h ****     {
 723:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 724:/usr/include/c++/5/bits/stl_iterator.h ****       _Iterator _M_current;
 725:/usr/include/c++/5/bits/stl_iterator.h **** 
 726:/usr/include/c++/5/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 727:/usr/include/c++/5/bits/stl_iterator.h **** 
 728:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 729:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 730:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 731:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 732:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 733:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 734:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 735:/usr/include/c++/5/bits/stl_iterator.h **** 
 736:/usr/include/c++/5/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 737:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 738:/usr/include/c++/5/bits/stl_iterator.h **** 
 739:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 740:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 741:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 742:/usr/include/c++/5/bits/stl_iterator.h **** 
 743:/usr/include/c++/5/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 744:/usr/include/c++/5/bits/stl_iterator.h ****       template<typename _Iter>
 745:/usr/include/c++/5/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 746:/usr/include/c++/5/bits/stl_iterator.h **** 			  typename __enable_if<
 747:/usr/include/c++/5/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 748:/usr/include/c++/5/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 749:/usr/include/c++/5/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 750:/usr/include/c++/5/bits/stl_iterator.h **** 
 751:/usr/include/c++/5/bits/stl_iterator.h ****       // Forward iterator requirements
 752:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 753:/usr/include/c++/5/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 754:/usr/include/c++/5/bits/stl_iterator.h ****       { return *_M_current; }
 755:/usr/include/c++/5/bits/stl_iterator.h **** 
 756:/usr/include/c++/5/bits/stl_iterator.h ****       pointer
 757:/usr/include/c++/5/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 758:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 759:/usr/include/c++/5/bits/stl_iterator.h **** 
 760:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 761:/usr/include/c++/5/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 762:/usr/include/c++/5/bits/stl_iterator.h ****       {
 763:/usr/include/c++/5/bits/stl_iterator.h **** 	++_M_current;
 764:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 765:/usr/include/c++/5/bits/stl_iterator.h ****       }
 766:/usr/include/c++/5/bits/stl_iterator.h **** 
 767:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 768:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 769:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 770:/usr/include/c++/5/bits/stl_iterator.h **** 
 771:/usr/include/c++/5/bits/stl_iterator.h ****       // Bidirectional iterator requirements
GAS LISTING /tmp/cc2K2nX4.s 			page 616


 772:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 773:/usr/include/c++/5/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 774:/usr/include/c++/5/bits/stl_iterator.h ****       {
 775:/usr/include/c++/5/bits/stl_iterator.h **** 	--_M_current;
 776:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 777:/usr/include/c++/5/bits/stl_iterator.h ****       }
 778:/usr/include/c++/5/bits/stl_iterator.h **** 
 779:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 780:/usr/include/c++/5/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 781:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 782:/usr/include/c++/5/bits/stl_iterator.h **** 
 783:/usr/include/c++/5/bits/stl_iterator.h ****       // Random access iterator requirements
 784:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 785:/usr/include/c++/5/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 786:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current[__n]; }
 787:/usr/include/c++/5/bits/stl_iterator.h **** 
 788:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 789:/usr/include/c++/5/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 790:/usr/include/c++/5/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 791:/usr/include/c++/5/bits/stl_iterator.h **** 
 792:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 793:/usr/include/c++/5/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 794:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 795:/usr/include/c++/5/bits/stl_iterator.h **** 
 796:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator&
 797:/usr/include/c++/5/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 798:/usr/include/c++/5/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 799:/usr/include/c++/5/bits/stl_iterator.h **** 
 800:/usr/include/c++/5/bits/stl_iterator.h ****       __normal_iterator
 801:/usr/include/c++/5/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 802:/usr/include/c++/5/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 803:/usr/include/c++/5/bits/stl_iterator.h **** 
 804:/usr/include/c++/5/bits/stl_iterator.h ****       const _Iterator&
 805:/usr/include/c++/5/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 806:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 807:/usr/include/c++/5/bits/stl_iterator.h ****     };
 808:/usr/include/c++/5/bits/stl_iterator.h **** 
 809:/usr/include/c++/5/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 810:/usr/include/c++/5/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 811:/usr/include/c++/5/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 812:/usr/include/c++/5/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 813:/usr/include/c++/5/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 814:/usr/include/c++/5/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 815:/usr/include/c++/5/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 816:/usr/include/c++/5/bits/stl_iterator.h **** 
 817:/usr/include/c++/5/bits/stl_iterator.h ****   // Forward iterator requirements
 818:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 819:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 820:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 821:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 822:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 823:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 824:/usr/include/c++/5/bits/stl_iterator.h **** 
 825:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 826:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 827:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 828:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
GAS LISTING /tmp/cc2K2nX4.s 			page 617


 829:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 830:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 831:/usr/include/c++/5/bits/stl_iterator.h **** 
 832:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 833:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 834:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 835:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 836:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 837:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 838:/usr/include/c++/5/bits/stl_iterator.h **** 
 839:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 840:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 841:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 842:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 843:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 844:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 845:/usr/include/c++/5/bits/stl_iterator.h **** 
 846:/usr/include/c++/5/bits/stl_iterator.h ****   // Random access iterator requirements
 847:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 848:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 849:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 850:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 851:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 852:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 853:/usr/include/c++/5/bits/stl_iterator.h **** 
 854:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 855:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 856:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 857:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 858:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 859:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 860:/usr/include/c++/5/bits/stl_iterator.h **** 
 861:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 862:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 863:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 864:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 865:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 866:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 867:/usr/include/c++/5/bits/stl_iterator.h **** 
 868:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 869:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 870:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 871:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 872:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 873:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 874:/usr/include/c++/5/bits/stl_iterator.h **** 
 875:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 876:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 877:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 878:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 879:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 880:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 881:/usr/include/c++/5/bits/stl_iterator.h **** 
 882:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 883:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 884:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 885:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
GAS LISTING /tmp/cc2K2nX4.s 			page 618


 886:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 888:/usr/include/c++/5/bits/stl_iterator.h **** 
 889:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 890:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 891:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 892:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 893:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 894:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 895:/usr/include/c++/5/bits/stl_iterator.h **** 
 896:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 897:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
 898:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 899:/usr/include/c++/5/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 900:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 901:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 902:/usr/include/c++/5/bits/stl_iterator.h **** 
 903:/usr/include/c++/5/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 904:/usr/include/c++/5/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 905:/usr/include/c++/5/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 906:/usr/include/c++/5/bits/stl_iterator.h ****   // parameters.
 907:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 908:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 909:/usr/include/c++/5/bits/stl_iterator.h ****     // DR 685.
 910:/usr/include/c++/5/bits/stl_iterator.h ****     inline auto
 911:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 912:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
 913:/usr/include/c++/5/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 914:/usr/include/c++/5/bits/stl_iterator.h **** #else
 915:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 916:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 917:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 918:/usr/include/c++/5/bits/stl_iterator.h **** #endif
 919:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 920:/usr/include/c++/5/bits/stl_iterator.h **** 
 921:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 922:/usr/include/c++/5/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 923:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 924:/usr/include/c++/5/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 925:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 926:/usr/include/c++/5/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 927:/usr/include/c++/5/bits/stl_iterator.h **** 
 928:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 929:/usr/include/c++/5/bits/stl_iterator.h ****     inline __normal_iterator<_Iterator, _Container>
 930:/usr/include/c++/5/bits/stl_iterator.h ****     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
 931:/usr/include/c++/5/bits/stl_iterator.h **** 	      __n, const __normal_iterator<_Iterator, _Container>& __i)
 932:/usr/include/c++/5/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 933:/usr/include/c++/5/bits/stl_iterator.h ****     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
 934:/usr/include/c++/5/bits/stl_iterator.h **** 
 935:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 936:/usr/include/c++/5/bits/stl_iterator.h **** } // namespace
 937:/usr/include/c++/5/bits/stl_iterator.h **** 
 938:/usr/include/c++/5/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 939:/usr/include/c++/5/bits/stl_iterator.h **** 
 940:/usr/include/c++/5/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
 941:/usr/include/c++/5/bits/stl_iterator.h **** {
 942:/usr/include/c++/5/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
GAS LISTING /tmp/cc2K2nX4.s 			page 619


 943:/usr/include/c++/5/bits/stl_iterator.h **** 
 944:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 945:/usr/include/c++/5/bits/stl_iterator.h ****    * @addtogroup iterators
 946:/usr/include/c++/5/bits/stl_iterator.h ****    * @{
 947:/usr/include/c++/5/bits/stl_iterator.h ****    */
 948:/usr/include/c++/5/bits/stl_iterator.h **** 
 949:/usr/include/c++/5/bits/stl_iterator.h ****   // 24.4.3  Move iterators
 950:/usr/include/c++/5/bits/stl_iterator.h ****   /**
 951:/usr/include/c++/5/bits/stl_iterator.h ****    *  Class template move_iterator is an iterator adapter with the same
 952:/usr/include/c++/5/bits/stl_iterator.h ****    *  behavior as the underlying iterator except that its dereference
 953:/usr/include/c++/5/bits/stl_iterator.h ****    *  operator implicitly converts the value returned by the underlying
 954:/usr/include/c++/5/bits/stl_iterator.h ****    *  iterator's dereference operator to an rvalue reference.  Some
 955:/usr/include/c++/5/bits/stl_iterator.h ****    *  generic algorithms can be called with move iterators to replace
 956:/usr/include/c++/5/bits/stl_iterator.h ****    *  copying with moving.
 957:/usr/include/c++/5/bits/stl_iterator.h ****    */
 958:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
 959:/usr/include/c++/5/bits/stl_iterator.h ****     class move_iterator
 960:/usr/include/c++/5/bits/stl_iterator.h ****     {
 961:/usr/include/c++/5/bits/stl_iterator.h ****     protected:
 962:/usr/include/c++/5/bits/stl_iterator.h ****       _Iterator _M_current;
 963:/usr/include/c++/5/bits/stl_iterator.h **** 
 964:/usr/include/c++/5/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 965:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::reference		__base_ref;
 966:/usr/include/c++/5/bits/stl_iterator.h **** 
 967:/usr/include/c++/5/bits/stl_iterator.h ****     public:
 968:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 969:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 970:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 971:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 972:/usr/include/c++/5/bits/stl_iterator.h ****       // NB: DR 680.
 973:/usr/include/c++/5/bits/stl_iterator.h ****       typedef _Iterator					pointer;
 974:/usr/include/c++/5/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 975:/usr/include/c++/5/bits/stl_iterator.h ****       // 2106. move_iterator wrapping iterators returning prvalues
 976:/usr/include/c++/5/bits/stl_iterator.h ****       typedef typename conditional<is_reference<__base_ref>::value,
 977:/usr/include/c++/5/bits/stl_iterator.h **** 			 typename remove_reference<__base_ref>::type&&,
 978:/usr/include/c++/5/bits/stl_iterator.h **** 			 __base_ref>::type		reference;
 979:/usr/include/c++/5/bits/stl_iterator.h **** 
 980:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator()
 981:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current() { }
 982:/usr/include/c++/5/bits/stl_iterator.h **** 
 983:/usr/include/c++/5/bits/stl_iterator.h ****       explicit
 984:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator(iterator_type __i)
 985:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 986:/usr/include/c++/5/bits/stl_iterator.h **** 
 987:/usr/include/c++/5/bits/stl_iterator.h ****       template<typename _Iter>
 988:/usr/include/c++/5/bits/stl_iterator.h **** 	move_iterator(const move_iterator<_Iter>& __i)
 989:/usr/include/c++/5/bits/stl_iterator.h **** 	: _M_current(__i.base()) { }
 990:/usr/include/c++/5/bits/stl_iterator.h **** 
 991:/usr/include/c++/5/bits/stl_iterator.h ****       iterator_type
 992:/usr/include/c++/5/bits/stl_iterator.h ****       base() const
 993:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 994:/usr/include/c++/5/bits/stl_iterator.h **** 
 995:/usr/include/c++/5/bits/stl_iterator.h ****       reference
 996:/usr/include/c++/5/bits/stl_iterator.h ****       operator*() const
 997:/usr/include/c++/5/bits/stl_iterator.h ****       { return static_cast<reference>(*_M_current); }
 998:/usr/include/c++/5/bits/stl_iterator.h **** 
 999:/usr/include/c++/5/bits/stl_iterator.h ****       pointer
GAS LISTING /tmp/cc2K2nX4.s 			page 620


1000:/usr/include/c++/5/bits/stl_iterator.h ****       operator->() const
1001:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
1002:/usr/include/c++/5/bits/stl_iterator.h **** 
1003:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator&
1004:/usr/include/c++/5/bits/stl_iterator.h ****       operator++()
1005:/usr/include/c++/5/bits/stl_iterator.h ****       {
1006:/usr/include/c++/5/bits/stl_iterator.h **** 	++_M_current;
1007:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
1008:/usr/include/c++/5/bits/stl_iterator.h ****       }
1009:/usr/include/c++/5/bits/stl_iterator.h **** 
1010:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator
1011:/usr/include/c++/5/bits/stl_iterator.h ****       operator++(int)
1012:/usr/include/c++/5/bits/stl_iterator.h ****       {
1013:/usr/include/c++/5/bits/stl_iterator.h **** 	move_iterator __tmp = *this;
1014:/usr/include/c++/5/bits/stl_iterator.h **** 	++_M_current;
1015:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
1016:/usr/include/c++/5/bits/stl_iterator.h ****       }
1017:/usr/include/c++/5/bits/stl_iterator.h **** 
1018:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator&
1019:/usr/include/c++/5/bits/stl_iterator.h ****       operator--()
1020:/usr/include/c++/5/bits/stl_iterator.h ****       {
1021:/usr/include/c++/5/bits/stl_iterator.h **** 	--_M_current;
1022:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
1023:/usr/include/c++/5/bits/stl_iterator.h ****       }
1024:/usr/include/c++/5/bits/stl_iterator.h **** 
1025:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator
1026:/usr/include/c++/5/bits/stl_iterator.h ****       operator--(int)
1027:/usr/include/c++/5/bits/stl_iterator.h ****       {
1028:/usr/include/c++/5/bits/stl_iterator.h **** 	move_iterator __tmp = *this;
1029:/usr/include/c++/5/bits/stl_iterator.h **** 	--_M_current;
1030:/usr/include/c++/5/bits/stl_iterator.h **** 	return __tmp;
1031:/usr/include/c++/5/bits/stl_iterator.h ****       }
1032:/usr/include/c++/5/bits/stl_iterator.h **** 
1033:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator
1034:/usr/include/c++/5/bits/stl_iterator.h ****       operator+(difference_type __n) const
1035:/usr/include/c++/5/bits/stl_iterator.h ****       { return move_iterator(_M_current + __n); }
1036:/usr/include/c++/5/bits/stl_iterator.h **** 
1037:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator&
1038:/usr/include/c++/5/bits/stl_iterator.h ****       operator+=(difference_type __n)
1039:/usr/include/c++/5/bits/stl_iterator.h ****       {
1040:/usr/include/c++/5/bits/stl_iterator.h **** 	_M_current += __n;
1041:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
1042:/usr/include/c++/5/bits/stl_iterator.h ****       }
1043:/usr/include/c++/5/bits/stl_iterator.h **** 
1044:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator
1045:/usr/include/c++/5/bits/stl_iterator.h ****       operator-(difference_type __n) const
1046:/usr/include/c++/5/bits/stl_iterator.h ****       { return move_iterator(_M_current - __n); }
1047:/usr/include/c++/5/bits/stl_iterator.h ****     
1048:/usr/include/c++/5/bits/stl_iterator.h ****       move_iterator&
1049:/usr/include/c++/5/bits/stl_iterator.h ****       operator-=(difference_type __n)
1050:/usr/include/c++/5/bits/stl_iterator.h ****       { 
1051:/usr/include/c++/5/bits/stl_iterator.h **** 	_M_current -= __n;
1052:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
1053:/usr/include/c++/5/bits/stl_iterator.h ****       }
1054:/usr/include/c++/5/bits/stl_iterator.h **** 
1055:/usr/include/c++/5/bits/stl_iterator.h ****       reference
1056:/usr/include/c++/5/bits/stl_iterator.h ****       operator[](difference_type __n) const
GAS LISTING /tmp/cc2K2nX4.s 			page 621


1057:/usr/include/c++/5/bits/stl_iterator.h ****       { return std::move(_M_current[__n]); }
1058:/usr/include/c++/5/bits/stl_iterator.h ****     };
1059:/usr/include/c++/5/bits/stl_iterator.h **** 
1060:/usr/include/c++/5/bits/stl_iterator.h ****   // Note: See __normal_iterator operators note from Gaby to understand
1061:/usr/include/c++/5/bits/stl_iterator.h ****   // why there are always 2 versions for most of the move_iterator
1062:/usr/include/c++/5/bits/stl_iterator.h ****   // operators.
1063:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1064:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1065:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const move_iterator<_IteratorL>& __x,
1066:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_IteratorR>& __y)
1067:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
1068:/usr/include/c++/5/bits/stl_iterator.h **** 
1069:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1070:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1071:/usr/include/c++/5/bits/stl_iterator.h ****     operator==(const move_iterator<_Iterator>& __x,
1072:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
1073:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
1074:/usr/include/c++/5/bits/stl_iterator.h **** 
1075:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1076:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1077:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const move_iterator<_IteratorL>& __x,
1078:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_IteratorR>& __y)
1079:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
1080:/usr/include/c++/5/bits/stl_iterator.h **** 
1081:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1082:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1083:/usr/include/c++/5/bits/stl_iterator.h ****     operator!=(const move_iterator<_Iterator>& __x,
1084:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
1085:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x == __y); }
1086:/usr/include/c++/5/bits/stl_iterator.h **** 
1087:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1088:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1089:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const move_iterator<_IteratorL>& __x,
1090:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_IteratorR>& __y)
1091:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
1092:/usr/include/c++/5/bits/stl_iterator.h **** 
1093:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1094:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1095:/usr/include/c++/5/bits/stl_iterator.h ****     operator<(const move_iterator<_Iterator>& __x,
1096:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_Iterator>& __y)
1097:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
1098:/usr/include/c++/5/bits/stl_iterator.h **** 
1099:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1100:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1101:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const move_iterator<_IteratorL>& __x,
1102:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_IteratorR>& __y)
1103:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
1104:/usr/include/c++/5/bits/stl_iterator.h **** 
1105:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1106:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1107:/usr/include/c++/5/bits/stl_iterator.h ****     operator<=(const move_iterator<_Iterator>& __x,
1108:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
1109:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__y < __x); }
1110:/usr/include/c++/5/bits/stl_iterator.h **** 
1111:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1112:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1113:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const move_iterator<_IteratorL>& __x,
GAS LISTING /tmp/cc2K2nX4.s 			page 622


1114:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_IteratorR>& __y)
1115:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
1116:/usr/include/c++/5/bits/stl_iterator.h **** 
1117:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1118:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1119:/usr/include/c++/5/bits/stl_iterator.h ****     operator>(const move_iterator<_Iterator>& __x,
1120:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_Iterator>& __y)
1121:/usr/include/c++/5/bits/stl_iterator.h ****     { return __y < __x; }
1122:/usr/include/c++/5/bits/stl_iterator.h **** 
1123:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1124:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1125:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const move_iterator<_IteratorL>& __x,
1126:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_IteratorR>& __y)
1127:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
1128:/usr/include/c++/5/bits/stl_iterator.h **** 
1129:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1130:/usr/include/c++/5/bits/stl_iterator.h ****     inline bool
1131:/usr/include/c++/5/bits/stl_iterator.h ****     operator>=(const move_iterator<_Iterator>& __x,
1132:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
1133:/usr/include/c++/5/bits/stl_iterator.h ****     { return !(__x < __y); }
1134:/usr/include/c++/5/bits/stl_iterator.h **** 
1135:/usr/include/c++/5/bits/stl_iterator.h ****   // DR 685.
1136:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
1137:/usr/include/c++/5/bits/stl_iterator.h ****     inline auto
1138:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const move_iterator<_IteratorL>& __x,
1139:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_IteratorR>& __y)
1140:/usr/include/c++/5/bits/stl_iterator.h ****     -> decltype(__x.base() - __y.base())
1141:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() - __y.base(); }
1142:/usr/include/c++/5/bits/stl_iterator.h **** 
1143:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1144:/usr/include/c++/5/bits/stl_iterator.h ****     inline auto
1145:/usr/include/c++/5/bits/stl_iterator.h ****     operator-(const move_iterator<_Iterator>& __x,
1146:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_Iterator>& __y)
1147:/usr/include/c++/5/bits/stl_iterator.h ****     -> decltype(__x.base() - __y.base())
1148:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x.base() - __y.base(); }
1149:/usr/include/c++/5/bits/stl_iterator.h **** 
1150:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1151:/usr/include/c++/5/bits/stl_iterator.h ****     inline move_iterator<_Iterator>
1152:/usr/include/c++/5/bits/stl_iterator.h ****     operator+(typename move_iterator<_Iterator>::difference_type __n,
1153:/usr/include/c++/5/bits/stl_iterator.h **** 	      const move_iterator<_Iterator>& __x)
1154:/usr/include/c++/5/bits/stl_iterator.h ****     { return __x + __n; }
1155:/usr/include/c++/5/bits/stl_iterator.h **** 
1156:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator>
1157:/usr/include/c++/5/bits/stl_iterator.h ****     inline move_iterator<_Iterator>
1158:/usr/include/c++/5/bits/stl_iterator.h ****     make_move_iterator(_Iterator __i)
1159:/usr/include/c++/5/bits/stl_iterator.h ****     { return move_iterator<_Iterator>(__i); }
1160:/usr/include/c++/5/bits/stl_iterator.h **** 
1161:/usr/include/c++/5/bits/stl_iterator.h ****   template<typename _Iterator, typename _ReturnType
1162:/usr/include/c++/5/bits/stl_iterator.h ****     = typename conditional<__move_if_noexcept_cond
1163:/usr/include/c++/5/bits/stl_iterator.h ****       <typename iterator_traits<_Iterator>::value_type>::value,
1164:/usr/include/c++/5/bits/stl_iterator.h ****                 _Iterator, move_iterator<_Iterator>>::type>
1165:/usr/include/c++/5/bits/stl_iterator.h ****     inline _ReturnType
1166:/usr/include/c++/5/bits/stl_iterator.h ****     __make_move_if_noexcept_iterator(_Iterator __i)
 16405              		.loc 24 1166 0
 16406              		.cfi_startproc
 16407 0000 55       		pushq	%rbp
 16408              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/cc2K2nX4.s 			page 623


 16409              		.cfi_offset 6, -16
 16410 0001 4889E5   		movq	%rsp, %rbp
 16411              		.cfi_def_cfa_register 6
 16412 0004 4883EC20 		subq	$32, %rsp
 16413 0008 48897DE8 		movq	%rdi, -24(%rbp)
 16414              		.loc 24 1166 0
 16415 000c 64488B04 		movq	%fs:40, %rax
 16415      25280000 
 16415      00
 16416 0015 488945F8 		movq	%rax, -8(%rbp)
 16417 0019 31C0     		xorl	%eax, %eax
1167:/usr/include/c++/5/bits/stl_iterator.h ****     { return _ReturnType(__i); }
 16418              		.loc 24 1167 0
 16419 001b 488B55E8 		movq	-24(%rbp), %rdx
 16420 001f 488D45F0 		leaq	-16(%rbp), %rax
 16421 0023 4889D6   		movq	%rdx, %rsi
 16422 0026 4889C7   		movq	%rax, %rdi
 16423 0029 E8000000 		call	_ZNSt13move_iteratorIP10vector_varEC1ES1_
 16423      00
 16424 002e 488B45F0 		movq	-16(%rbp), %rax
 16425 0032 488B4DF8 		movq	-8(%rbp), %rcx
 16426 0036 6448330C 		xorq	%fs:40, %rcx
 16426      25280000 
 16426      00
 16427 003f 7405     		je	.L1329
 16428 0041 E8000000 		call	__stack_chk_fail
 16428      00
 16429              	.L1329:
 16430 0046 C9       		leave
 16431              		.cfi_def_cfa 7, 8
 16432 0047 C3       		ret
 16433              		.cfi_endproc
 16434              	.LFE7523:
 16436              		.section	.text._ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaI
 16437              		.weak	_ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaIT1_E
 16439              	_ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaIT1_E:
 16440              	.LFB7524:
 279:/usr/include/c++/5/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 16441              		.loc 22 279 0
 16442              		.cfi_startproc
 16443 0000 55       		pushq	%rbp
 16444              		.cfi_def_cfa_offset 16
 16445              		.cfi_offset 6, -16
 16446 0001 4889E5   		movq	%rsp, %rbp
 16447              		.cfi_def_cfa_register 6
 16448 0004 4883EC20 		subq	$32, %rsp
 16449 0008 48897DF0 		movq	%rdi, -16(%rbp)
 16450 000c 488975E0 		movq	%rsi, -32(%rbp)
 16451 0010 488955E8 		movq	%rdx, -24(%rbp)
 16452 0014 48894DF8 		movq	%rcx, -8(%rbp)
 281:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 16453              		.loc 22 281 0
 16454 0018 488B55E8 		movq	-24(%rbp), %rdx
 16455 001c 488B4DE0 		movq	-32(%rbp), %rcx
 16456 0020 488B45F0 		movq	-16(%rbp), %rax
 16457 0024 4889CE   		movq	%rcx, %rsi
 16458 0027 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/cc2K2nX4.s 			page 624


 16459 002a E8000000 		call	_ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_
 16459      00
 16460 002f C9       		leave
 16461              		.cfi_def_cfa 7, 8
 16462 0030 C3       		ret
 16463              		.cfi_endproc
 16464              	.LFE7524:
 16466              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_,"axG",@progbits,_ZN9__
 16467              		.align 2
 16468              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_
 16470              	_ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_:
 16471              	.LFB7525:
 121:/usr/include/c++/5/ext/new_allocator.h **** 
 122:/usr/include/c++/5/ext/new_allocator.h ****       template<typename _Up>
 123:/usr/include/c++/5/ext/new_allocator.h ****         void 
 124:/usr/include/c++/5/ext/new_allocator.h ****         destroy(_Up* __p) { __p->~_Up(); }
 16472              		.loc 21 124 0
 16473              		.cfi_startproc
 16474 0000 55       		pushq	%rbp
 16475              		.cfi_def_cfa_offset 16
 16476              		.cfi_offset 6, -16
 16477 0001 4889E5   		movq	%rsp, %rbp
 16478              		.cfi_def_cfa_register 6
 16479 0004 4883EC10 		subq	$16, %rsp
 16480 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16481 000c 488975F0 		movq	%rsi, -16(%rbp)
 16482              		.loc 21 124 0
 16483 0010 488B45F0 		movq	-16(%rbp), %rax
 16484 0014 488B00   		movq	(%rax), %rax
 16485 0017 488B00   		movq	(%rax), %rax
 16486 001a 488B55F0 		movq	-16(%rbp), %rdx
 16487 001e 4889D7   		movq	%rdx, %rdi
 16488 0021 FFD0     		call	*%rax
 16489 0023 90       		nop
 16490 0024 C9       		leave
 16491              		.cfi_def_cfa 7, 8
 16492 0025 C3       		ret
 16493              		.cfi_endproc
 16494              	.LFE7525:
 16496              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 16497              		.align 2
 16498              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev
 16500              	_ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev:
 16501              	.LFB7542:
  79:/usr/include/c++/5/ext/new_allocator.h **** 
 16502              		.loc 21 79 0
 16503              		.cfi_startproc
 16504 0000 55       		pushq	%rbp
 16505              		.cfi_def_cfa_offset 16
 16506              		.cfi_offset 6, -16
 16507 0001 4889E5   		movq	%rsp, %rbp
 16508              		.cfi_def_cfa_register 6
 16509 0004 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/5/ext/new_allocator.h **** 
 16510              		.loc 21 79 0
 16511 0008 90       		nop
 16512 0009 5D       		popq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 625


 16513              		.cfi_def_cfa 7, 8
 16514 000a C3       		ret
 16515              		.cfi_endproc
 16516              	.LFE7542:
 16518              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varEC1Ev
 16519              		.set	_ZN9__gnu_cxx13new_allocatorI10vector_varEC1Ev,_ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev
 16520              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m,"axG",@progbits,_ZN9__
 16521              		.align 2
 16522              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m
 16524              	_ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m:
 16525              	.LFB7544:
 109:/usr/include/c++/5/ext/new_allocator.h ****       { ::operator delete(__p); }
 16526              		.loc 21 109 0
 16527              		.cfi_startproc
 16528 0000 55       		pushq	%rbp
 16529              		.cfi_def_cfa_offset 16
 16530              		.cfi_offset 6, -16
 16531 0001 4889E5   		movq	%rsp, %rbp
 16532              		.cfi_def_cfa_register 6
 16533 0004 4883EC20 		subq	$32, %rsp
 16534 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16535 000c 488975F0 		movq	%rsi, -16(%rbp)
 16536 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/5/ext/new_allocator.h **** 
 16537              		.loc 21 110 0
 16538 0014 488B45F0 		movq	-16(%rbp), %rax
 16539 0018 4889C7   		movq	%rax, %rdi
 16540 001b E8000000 		call	_ZdlPv
 16540      00
 16541 0020 90       		nop
 16542 0021 C9       		leave
 16543              		.cfi_def_cfa 7, 8
 16544 0022 C3       		ret
 16545              		.cfi_endproc
 16546              	.LFE7544:
 16548              		.section	.text._ZSt11__addressofI10vector_varEPT_RS1_,"axG",@progbits,_ZSt11__addressofI10vector_v
 16549              		.weak	_ZSt11__addressofI10vector_varEPT_RS1_
 16551              	_ZSt11__addressofI10vector_varEPT_RS1_:
 16552              	.LFB7545:
  47:/usr/include/c++/5/bits/move.h ****     {
 16553              		.loc 17 47 0
 16554              		.cfi_startproc
 16555 0000 55       		pushq	%rbp
 16556              		.cfi_def_cfa_offset 16
 16557              		.cfi_offset 6, -16
 16558 0001 4889E5   		movq	%rsp, %rbp
 16559              		.cfi_def_cfa_register 6
 16560 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/5/bits/move.h ****     }
 16561              		.loc 17 50 0
 16562 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/5/bits/move.h **** 
 16563              		.loc 17 51 0
 16564 000c 5D       		popq	%rbp
 16565              		.cfi_def_cfa 7, 8
 16566 000d C3       		ret
 16567              		.cfi_endproc
GAS LISTING /tmp/cc2K2nX4.s 			page 626


 16568              	.LFE7545:
 16570              		.section	.text._ZSt8_DestroyI10vector_varEvPT_,"axG",@progbits,_ZSt8_DestroyI10vector_varEvPT_,com
 16571              		.weak	_ZSt8_DestroyI10vector_varEvPT_
 16573              	_ZSt8_DestroyI10vector_varEvPT_:
 16574              	.LFB7546:
  92:/usr/include/c++/5/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 16575              		.loc 16 92 0
 16576              		.cfi_startproc
 16577 0000 55       		pushq	%rbp
 16578              		.cfi_def_cfa_offset 16
 16579              		.cfi_offset 6, -16
 16580 0001 4889E5   		movq	%rsp, %rbp
 16581              		.cfi_def_cfa_register 6
 16582 0004 4883EC10 		subq	$16, %rsp
 16583 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/5/bits/stl_construct.h **** 
 16584              		.loc 16 93 0
 16585 000c 488B45F8 		movq	-8(%rbp), %rax
 16586 0010 488B00   		movq	(%rax), %rax
 16587 0013 488B00   		movq	(%rax), %rax
 16588 0016 488B55F8 		movq	-8(%rbp), %rdx
 16589 001a 4889D7   		movq	%rdx, %rdi
 16590 001d FFD0     		call	*%rax
 16591 001f 90       		nop
 16592 0020 C9       		leave
 16593              		.cfi_def_cfa 7, 8
 16594 0021 C3       		ret
 16595              		.cfi_endproc
 16596              	.LFE7546:
 16598              		.section	.text._ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_,"axG",@progbits,_ZNSt16all
 16599              		.weak	_ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_
 16601              	_ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_:
 16602              	.LFB7550:
 543:/usr/include/c++/5/bits/alloc_traits.h **** 
 544:/usr/include/c++/5/bits/alloc_traits.h ****       /**
 545:/usr/include/c++/5/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 546:/usr/include/c++/5/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 547:/usr/include/c++/5/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 548:/usr/include/c++/5/bits/alloc_traits.h ****       */
 549:/usr/include/c++/5/bits/alloc_traits.h ****       static size_type
 550:/usr/include/c++/5/bits/alloc_traits.h ****       max_size(const allocator_type& __a) noexcept
 16603              		.loc 18 550 0
 16604              		.cfi_startproc
 16605 0000 55       		pushq	%rbp
 16606              		.cfi_def_cfa_offset 16
 16607              		.cfi_offset 6, -16
 16608 0001 4889E5   		movq	%rsp, %rbp
 16609              		.cfi_def_cfa_register 6
 16610 0004 4883EC10 		subq	$16, %rsp
 16611 0008 48897DF8 		movq	%rdi, -8(%rbp)
 551:/usr/include/c++/5/bits/alloc_traits.h ****       { return __a.max_size(); }
 16612              		.loc 18 551 0
 16613 000c 488B45F8 		movq	-8(%rbp), %rax
 16614 0010 4889C7   		movq	%rax, %rdi
 16615 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv
 16615      00
 16616 0018 C9       		leave
GAS LISTING /tmp/cc2K2nX4.s 			page 627


 16617              		.cfi_def_cfa 7, 8
 16618 0019 C3       		ret
 16619              		.cfi_endproc
 16620              	.LFE7550:
 16622              		.section	.text._ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_Z
 16623              		.align 2
 16624              		.weak	_ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
 16626              	_ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv:
 16627              	.LFB7551:
 117:/usr/include/c++/5/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 16628              		.loc 15 117 0
 16629              		.cfi_startproc
 16630 0000 55       		pushq	%rbp
 16631              		.cfi_def_cfa_offset 16
 16632              		.cfi_offset 6, -16
 16633 0001 4889E5   		movq	%rsp, %rbp
 16634              		.cfi_def_cfa_register 6
 16635 0004 48897DF8 		movq	%rdi, -8(%rbp)
 118:/usr/include/c++/5/bits/stl_vector.h **** 
 16636              		.loc 15 118 0
 16637 0008 488B45F8 		movq	-8(%rbp), %rax
 16638 000c 5D       		popq	%rbp
 16639              		.cfi_def_cfa 7, 8
 16640 000d C3       		ret
 16641              		.cfi_endproc
 16642              	.LFE7551:
 16644              		.section	.text._ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_
 16645              		.align 2
 16646              		.weak	_ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv
 16648              	_ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv:
 16649              	.LFB7552:
  99:/usr/include/c++/5/ext/new_allocator.h ****       { 
 16650              		.loc 21 99 0
 16651              		.cfi_startproc
 16652 0000 55       		pushq	%rbp
 16653              		.cfi_def_cfa_offset 16
 16654              		.cfi_offset 6, -16
 16655 0001 4889E5   		movq	%rsp, %rbp
 16656              		.cfi_def_cfa_register 6
 16657 0004 4883EC20 		subq	$32, %rsp
 16658 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16659 000c 488975F0 		movq	%rsi, -16(%rbp)
 16660 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/5/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 16661              		.loc 21 101 0
 16662 0014 488B45F8 		movq	-8(%rbp), %rax
 16663 0018 4889C7   		movq	%rax, %rdi
 16664 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv
 16664      00
 16665 0020 483B45F0 		cmpq	-16(%rbp), %rax
 16666 0024 0F92C0   		setb	%al
 16667 0027 84C0     		testb	%al, %al
 16668 0029 7405     		je	.L1343
 102:/usr/include/c++/5/ext/new_allocator.h **** 
 16669              		.loc 21 102 0
 16670 002b E8000000 		call	_ZSt17__throw_bad_allocv
 16670      00
GAS LISTING /tmp/cc2K2nX4.s 			page 628


 16671              	.L1343:
 104:/usr/include/c++/5/ext/new_allocator.h ****       }
 16672              		.loc 21 104 0
 16673 0030 488B45F0 		movq	-16(%rbp), %rax
 16674 0034 48C1E005 		salq	$5, %rax
 16675 0038 4889C7   		movq	%rax, %rdi
 16676 003b E8000000 		call	_Znwm
 16676      00
 105:/usr/include/c++/5/ext/new_allocator.h **** 
 16677              		.loc 21 105 0
 16678 0040 C9       		leave
 16679              		.cfi_def_cfa 7, 8
 16680 0041 C3       		ret
 16681              		.cfi_endproc
 16682              	.LFE7552:
 16684              		.section	.text._ZNSt13move_iteratorIP10vector_varEC2ES1_,"axG",@progbits,_ZNSt13move_iteratorIP10v
 16685              		.align 2
 16686              		.weak	_ZNSt13move_iteratorIP10vector_varEC2ES1_
 16688              	_ZNSt13move_iteratorIP10vector_varEC2ES1_:
 16689              	.LFB7554:
 984:/usr/include/c++/5/bits/stl_iterator.h ****       : _M_current(__i) { }
 16690              		.loc 24 984 0
 16691              		.cfi_startproc
 16692 0000 55       		pushq	%rbp
 16693              		.cfi_def_cfa_offset 16
 16694              		.cfi_offset 6, -16
 16695 0001 4889E5   		movq	%rsp, %rbp
 16696              		.cfi_def_cfa_register 6
 16697 0004 48897DF8 		movq	%rdi, -8(%rbp)
 16698 0008 488975F0 		movq	%rsi, -16(%rbp)
 16699              	.LBB99:
 985:/usr/include/c++/5/bits/stl_iterator.h **** 
 16700              		.loc 24 985 0
 16701 000c 488B45F8 		movq	-8(%rbp), %rax
 16702 0010 488B55F0 		movq	-16(%rbp), %rdx
 16703 0014 488910   		movq	%rdx, (%rax)
 16704              	.LBE99:
 16705 0017 90       		nop
 16706 0018 5D       		popq	%rbp
 16707              		.cfi_def_cfa 7, 8
 16708 0019 C3       		ret
 16709              		.cfi_endproc
 16710              	.LFE7554:
 16712              		.weak	_ZNSt13move_iteratorIP10vector_varEC1ES1_
 16713              		.set	_ZNSt13move_iteratorIP10vector_varEC1ES1_,_ZNSt13move_iteratorIP10vector_varEC2ES1_
 16714              		.section	.text._ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_,"axG",@pro
 16715              		.weak	_ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_
 16717              	_ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_:
 16718              	.LFB7556:
 107:/usr/include/c++/5/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 16719              		.loc 22 107 0
 16720              		.cfi_startproc
 16721 0000 55       		pushq	%rbp
 16722              		.cfi_def_cfa_offset 16
 16723              		.cfi_offset 6, -16
 16724 0001 4889E5   		movq	%rsp, %rbp
 16725              		.cfi_def_cfa_register 6
GAS LISTING /tmp/cc2K2nX4.s 			page 629


 16726 0004 4883EC30 		subq	$48, %rsp
 16727 0008 48897DE0 		movq	%rdi, -32(%rbp)
 16728 000c 488975D0 		movq	%rsi, -48(%rbp)
 16729 0010 488955D8 		movq	%rdx, -40(%rbp)
 120:/usr/include/c++/5/bits/stl_uninitialized.h **** #endif
 16730              		.loc 22 120 0
 16731 0014 C645FF01 		movb	$1, -1(%rbp)
 126:/usr/include/c++/5/bits/stl_uninitialized.h ****     }
 16732              		.loc 22 126 0
 16733 0018 488B55D8 		movq	-40(%rbp), %rdx
 16734 001c 488B4DD0 		movq	-48(%rbp), %rcx
 16735 0020 488B45E0 		movq	-32(%rbp), %rax
 16736 0024 4889CE   		movq	%rcx, %rsi
 16737 0027 4889C7   		movq	%rax, %rdi
 16738 002a E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4_EET0_T_S7
 16738      00
 127:/usr/include/c++/5/bits/stl_uninitialized.h **** 
 16739              		.loc 22 127 0
 16740 002f C9       		leave
 16741              		.cfi_def_cfa 7, 8
 16742 0030 C3       		ret
 16743              		.cfi_endproc
 16744              	.LFE7556:
 16746              		.section	.text._ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_c
 16747              		.align 2
 16748              		.weak	_ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv
 16750              	_ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv:
 16751              	.LFB7568:
 113:/usr/include/c++/5/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 16752              		.loc 21 113 0
 16753              		.cfi_startproc
 16754 0000 55       		pushq	%rbp
 16755              		.cfi_def_cfa_offset 16
 16756              		.cfi_offset 6, -16
 16757 0001 4889E5   		movq	%rsp, %rbp
 16758              		.cfi_def_cfa_register 6
 16759 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/5/ext/new_allocator.h **** 
 16760              		.loc 21 114 0
 16761 0008 48B8FFFF 		movabsq	$576460752303423487, %rax
 16761      FFFFFFFF 
 16761      FF07
 16762 0012 5D       		popq	%rbp
 16763              		.cfi_def_cfa 7, 8
 16764 0013 C3       		ret
 16765              		.cfi_endproc
 16766              	.LFE7568:
 16768              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4
 16769              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4_EET0_T_S
 16771              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4_EET0_T_S7_S6_:
 16772              	.LFB7569:
  68:/usr/include/c++/5/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 16773              		.loc 22 68 0
 16774              		.cfi_startproc
 16775              		.cfi_personality 0x3,__gxx_personality_v0
 16776              		.cfi_lsda 0x3,.LLSDA7569
 16777 0000 55       		pushq	%rbp
GAS LISTING /tmp/cc2K2nX4.s 			page 630


 16778              		.cfi_def_cfa_offset 16
 16779              		.cfi_offset 6, -16
 16780 0001 4889E5   		movq	%rsp, %rbp
 16781              		.cfi_def_cfa_register 6
 16782 0004 53       		pushq	%rbx
 16783 0005 4883EC38 		subq	$56, %rsp
 16784              		.cfi_offset 3, -24
 16785 0009 48897DD0 		movq	%rdi, -48(%rbp)
 16786 000d 488975C0 		movq	%rsi, -64(%rbp)
 16787 0011 488955C8 		movq	%rdx, -56(%rbp)
  71:/usr/include/c++/5/bits/stl_uninitialized.h **** 	  __try
 16788              		.loc 22 71 0
 16789 0015 488B45C8 		movq	-56(%rbp), %rax
 16790 0019 488945E8 		movq	%rax, -24(%rbp)
 16791              	.L1352:
  74:/usr/include/c++/5/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 16792              		.loc 22 74 0 discriminator 3
 16793 001d 488D55C0 		leaq	-64(%rbp), %rdx
 16794 0021 488D45D0 		leaq	-48(%rbp), %rax
 16795 0025 4889D6   		movq	%rdx, %rsi
 16796 0028 4889C7   		movq	%rax, %rdi
 16797              	.LEHB180:
 16798 002b E8000000 		call	_ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_
 16798      00
 16799              	.LEHE180:
 16800 0030 84C0     		testb	%al, %al
 16801 0032 7439     		je	.L1351
  75:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      return __cur;
 16802              		.loc 22 75 0 discriminator 2
 16803 0034 488D45D0 		leaq	-48(%rbp), %rax
 16804 0038 4889C7   		movq	%rax, %rdi
 16805 003b E8000000 		call	_ZNKSt13move_iteratorIP10vector_varEdeEv
 16805      00
 16806 0040 4889C3   		movq	%rax, %rbx
 16807 0043 488B45E8 		movq	-24(%rbp), %rax
 16808 0047 4889C7   		movq	%rax, %rdi
 16809 004a E8000000 		call	_ZSt11__addressofI10vector_varEPT_RS1_
 16809      00
 16810 004f 4889DE   		movq	%rbx, %rsi
 16811 0052 4889C7   		movq	%rax, %rdi
 16812 0055 E8000000 		call	_ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_
 16812      00
  74:/usr/include/c++/5/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 16813              		.loc 22 74 0 discriminator 2
 16814 005a 488D45D0 		leaq	-48(%rbp), %rax
 16815 005e 4889C7   		movq	%rax, %rdi
 16816 0061 E8000000 		call	_ZNSt13move_iteratorIP10vector_varEppEv
 16816      00
 16817 0066 488345E8 		addq	$32, -24(%rbp)
 16817      20
 16818 006b EBB0     		jmp	.L1352
 16819              	.L1351:
  76:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 16820              		.loc 22 76 0
 16821 006d 488B45E8 		movq	-24(%rbp), %rax
 16822 0071 EB33     		jmp	.L1358
 16823              	.L1356:
GAS LISTING /tmp/cc2K2nX4.s 			page 631


  78:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 16824              		.loc 22 78 0
 16825 0073 4889C7   		movq	%rax, %rdi
 16826 0076 E8000000 		call	__cxa_begin_catch
 16826      00
  80:/usr/include/c++/5/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 16827              		.loc 22 80 0
 16828 007b 488B55E8 		movq	-24(%rbp), %rdx
 16829 007f 488B45C8 		movq	-56(%rbp), %rax
 16830 0083 4889D6   		movq	%rdx, %rsi
 16831 0086 4889C7   		movq	%rax, %rdi
 16832              	.LEHB181:
 16833 0089 E8000000 		call	_ZSt8_DestroyIP10vector_varEvT_S2_
 16833      00
  81:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    }
 16834              		.loc 22 81 0
 16835 008e E8000000 		call	__cxa_rethrow
 16835      00
 16836              	.LEHE181:
 16837              	.L1357:
 16838 0093 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/5/bits/stl_uninitialized.h **** 	    {
 16839              		.loc 22 78 0
 16840 0096 E8000000 		call	__cxa_end_catch
 16840      00
 16841 009b 4889D8   		movq	%rbx, %rax
 16842 009e 4889C7   		movq	%rax, %rdi
 16843              	.LEHB182:
 16844 00a1 E8000000 		call	_Unwind_Resume
 16844      00
 16845              	.LEHE182:
 16846              	.L1358:
  83:/usr/include/c++/5/bits/stl_uninitialized.h ****     };
 16847              		.loc 22 83 0
 16848 00a6 4883C438 		addq	$56, %rsp
 16849 00aa 5B       		popq	%rbx
 16850 00ab 5D       		popq	%rbp
 16851              		.cfi_def_cfa 7, 8
 16852 00ac C3       		ret
 16853              		.cfi_endproc
 16854              	.LFE7569:
 16855              		.section	.gcc_except_table
 16856              		.align 4
 16857              	.LLSDA7569:
 16858 0464 FF       		.byte	0xff
 16859 0465 03       		.byte	0x3
 16860 0466 19       		.uleb128 .LLSDATT7569-.LLSDATTD7569
 16861              	.LLSDATTD7569:
 16862 0467 01       		.byte	0x1
 16863 0468 0F       		.uleb128 .LLSDACSE7569-.LLSDACSB7569
 16864              	.LLSDACSB7569:
 16865 0469 2B       		.uleb128 .LEHB180-.LFB7569
 16866 046a 05       		.uleb128 .LEHE180-.LEHB180
 16867 046b 73       		.uleb128 .L1356-.LFB7569
 16868 046c 01       		.uleb128 0x1
 16869 046d 8901     		.uleb128 .LEHB181-.LFB7569
 16870 046f 0A       		.uleb128 .LEHE181-.LEHB181
GAS LISTING /tmp/cc2K2nX4.s 			page 632


 16871 0470 9301     		.uleb128 .L1357-.LFB7569
 16872 0472 00       		.uleb128 0
 16873 0473 A101     		.uleb128 .LEHB182-.LFB7569
 16874 0475 05       		.uleb128 .LEHE182-.LEHB182
 16875 0476 00       		.uleb128 0
 16876 0477 00       		.uleb128 0
 16877              	.LLSDACSE7569:
 16878 0478 01       		.byte	0x1
 16879 0479 00       		.byte	0
 16880 047a 0000     		.align 4
 16881 047c 00000000 		.long	0
 16882              	
 16883              	.LLSDATT7569:
 16884              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4
 16886              		.section	.text._ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_,"axG",@progbits,_ZStneIP10vector_v
 16887              		.weak	_ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_
 16889              	_ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_:
 16890              	.LFB7573:
1083:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
 16891              		.loc 24 1083 0
 16892              		.cfi_startproc
 16893 0000 55       		pushq	%rbp
 16894              		.cfi_def_cfa_offset 16
 16895              		.cfi_offset 6, -16
 16896 0001 4889E5   		movq	%rsp, %rbp
 16897              		.cfi_def_cfa_register 6
 16898 0004 4883EC10 		subq	$16, %rsp
 16899 0008 48897DF8 		movq	%rdi, -8(%rbp)
 16900 000c 488975F0 		movq	%rsi, -16(%rbp)
1085:/usr/include/c++/5/bits/stl_iterator.h **** 
 16901              		.loc 24 1085 0
 16902 0010 488B55F0 		movq	-16(%rbp), %rdx
 16903 0014 488B45F8 		movq	-8(%rbp), %rax
 16904 0018 4889D6   		movq	%rdx, %rsi
 16905 001b 4889C7   		movq	%rax, %rdi
 16906 001e E8000000 		call	_ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_
 16906      00
 16907 0023 83F001   		xorl	$1, %eax
 16908 0026 C9       		leave
 16909              		.cfi_def_cfa 7, 8
 16910 0027 C3       		ret
 16911              		.cfi_endproc
 16912              	.LFE7573:
 16914              		.section	.text._ZNSt13move_iteratorIP10vector_varEppEv,"axG",@progbits,_ZNSt13move_iteratorIP10vec
 16915              		.align 2
 16916              		.weak	_ZNSt13move_iteratorIP10vector_varEppEv
 16918              	_ZNSt13move_iteratorIP10vector_varEppEv:
 16919              	.LFB7574:
1004:/usr/include/c++/5/bits/stl_iterator.h ****       {
 16920              		.loc 24 1004 0
 16921              		.cfi_startproc
 16922 0000 55       		pushq	%rbp
 16923              		.cfi_def_cfa_offset 16
 16924              		.cfi_offset 6, -16
 16925 0001 4889E5   		movq	%rsp, %rbp
 16926              		.cfi_def_cfa_register 6
 16927 0004 48897DF8 		movq	%rdi, -8(%rbp)
GAS LISTING /tmp/cc2K2nX4.s 			page 633


1006:/usr/include/c++/5/bits/stl_iterator.h **** 	return *this;
 16928              		.loc 24 1006 0
 16929 0008 488B45F8 		movq	-8(%rbp), %rax
 16930 000c 488B00   		movq	(%rax), %rax
 16931 000f 488D5020 		leaq	32(%rax), %rdx
 16932 0013 488B45F8 		movq	-8(%rbp), %rax
 16933 0017 488910   		movq	%rdx, (%rax)
1007:/usr/include/c++/5/bits/stl_iterator.h ****       }
 16934              		.loc 24 1007 0
 16935 001a 488B45F8 		movq	-8(%rbp), %rax
1008:/usr/include/c++/5/bits/stl_iterator.h **** 
 16936              		.loc 24 1008 0
 16937 001e 5D       		popq	%rbp
 16938              		.cfi_def_cfa 7, 8
 16939 001f C3       		ret
 16940              		.cfi_endproc
 16941              	.LFE7574:
 16943              		.section	.text._ZNKSt13move_iteratorIP10vector_varEdeEv,"axG",@progbits,_ZNKSt13move_iteratorIP10v
 16944              		.align 2
 16945              		.weak	_ZNKSt13move_iteratorIP10vector_varEdeEv
 16947              	_ZNKSt13move_iteratorIP10vector_varEdeEv:
 16948              	.LFB7575:
 996:/usr/include/c++/5/bits/stl_iterator.h ****       { return static_cast<reference>(*_M_current); }
 16949              		.loc 24 996 0
 16950              		.cfi_startproc
 16951 0000 55       		pushq	%rbp
 16952              		.cfi_def_cfa_offset 16
 16953              		.cfi_offset 6, -16
 16954 0001 4889E5   		movq	%rsp, %rbp
 16955              		.cfi_def_cfa_register 6
 16956 0004 48897DF8 		movq	%rdi, -8(%rbp)
 997:/usr/include/c++/5/bits/stl_iterator.h **** 
 16957              		.loc 24 997 0
 16958 0008 488B45F8 		movq	-8(%rbp), %rax
 16959 000c 488B00   		movq	(%rax), %rax
 16960 000f 5D       		popq	%rbp
 16961              		.cfi_def_cfa 7, 8
 16962 0010 C3       		ret
 16963              		.cfi_endproc
 16964              	.LFE7575:
 16966              		.section	.text._ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE,"axG",@progbits,_ZSt
 16967              		.weak	_ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE
 16969              	_ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE:
 16970              	.LFB7577:
  76:/usr/include/c++/5/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 16971              		.loc 17 76 0
 16972              		.cfi_startproc
 16973 0000 55       		pushq	%rbp
 16974              		.cfi_def_cfa_offset 16
 16975              		.cfi_offset 6, -16
 16976 0001 4889E5   		movq	%rsp, %rbp
 16977              		.cfi_def_cfa_register 6
 16978 0004 48897DF8 		movq	%rdi, -8(%rbp)
 16979              		.loc 17 77 0
 16980 0008 488B45F8 		movq	-8(%rbp), %rax
 16981 000c 5D       		popq	%rbp
 16982              		.cfi_def_cfa 7, 8
GAS LISTING /tmp/cc2K2nX4.s 			page 634


 16983 000d C3       		ret
 16984              		.cfi_endproc
 16985              	.LFE7577:
 16987              		.section	.text._ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_,"axG",@progbits,_ZSt10_ConstructI10ve
 16988              		.weak	_ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_
 16990              	_ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_:
 16991              	.LFB7576:
  74:/usr/include/c++/5/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 16992              		.loc 16 74 0
 16993              		.cfi_startproc
 16994 0000 55       		pushq	%rbp
 16995              		.cfi_def_cfa_offset 16
 16996              		.cfi_offset 6, -16
 16997 0001 4889E5   		movq	%rsp, %rbp
 16998              		.cfi_def_cfa_register 6
 16999 0004 53       		pushq	%rbx
 17000 0005 4883EC18 		subq	$24, %rsp
 17001              		.cfi_offset 3, -24
 17002 0009 48897DE8 		movq	%rdi, -24(%rbp)
 17003 000d 488975E0 		movq	%rsi, -32(%rbp)
  75:/usr/include/c++/5/bits/stl_construct.h **** #else
 17004              		.loc 16 75 0
 17005 0011 488B45E0 		movq	-32(%rbp), %rax
 17006 0015 4889C7   		movq	%rax, %rdi
 17007 0018 E8000000 		call	_ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE
 17007      00
 17008 001d 4889C3   		movq	%rax, %rbx
 17009 0020 488B45E8 		movq	-24(%rbp), %rax
 17010 0024 4889C6   		movq	%rax, %rsi
 17011 0027 BF200000 		movl	$32, %edi
 17011      00
 17012 002c E8000000 		call	_ZnwmPv
 17012      00
 17013 0031 4885C0   		testq	%rax, %rax
 17014 0034 740B     		je	.L1370
  75:/usr/include/c++/5/bits/stl_construct.h **** #else
 17015              		.loc 16 75 0 is_stmt 0 discriminator 1
 17016 0036 4889DE   		movq	%rbx, %rsi
 17017 0039 4889C7   		movq	%rax, %rdi
 17018 003c E8000000 		call	_ZN10vector_varC1ERKS_
 17018      00
 17019              	.L1370:
  75:/usr/include/c++/5/bits/stl_construct.h **** #else
 17020              		.loc 16 75 0
 17021 0041 90       		nop
 17022 0042 4883C418 		addq	$24, %rsp
 17023 0046 5B       		popq	%rbx
 17024 0047 5D       		popq	%rbp
 17025              		.cfi_def_cfa 7, 8
 17026 0048 C3       		ret
 17027              		.cfi_endproc
 17028              	.LFE7576:
 17030              		.weak	_ZSt10_ConstructI10vector_varIS0_EEvPT_DpOT0_
 17031              		.set	_ZSt10_ConstructI10vector_varIS0_EEvPT_DpOT0_,_ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_
 17032              		.section	.text._ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_,"axG",@progbits,_ZSteqIP10vector_v
 17033              		.weak	_ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_
 17035              	_ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_:
GAS LISTING /tmp/cc2K2nX4.s 			page 635


 17036              	.LFB7578:
1071:/usr/include/c++/5/bits/stl_iterator.h **** 	       const move_iterator<_Iterator>& __y)
 17037              		.loc 24 1071 0 is_stmt 1
 17038              		.cfi_startproc
 17039 0000 55       		pushq	%rbp
 17040              		.cfi_def_cfa_offset 16
 17041              		.cfi_offset 6, -16
 17042 0001 4889E5   		movq	%rsp, %rbp
 17043              		.cfi_def_cfa_register 6
 17044 0004 53       		pushq	%rbx
 17045 0005 4883EC18 		subq	$24, %rsp
 17046              		.cfi_offset 3, -24
 17047 0009 48897DE8 		movq	%rdi, -24(%rbp)
 17048 000d 488975E0 		movq	%rsi, -32(%rbp)
1073:/usr/include/c++/5/bits/stl_iterator.h **** 
 17049              		.loc 24 1073 0
 17050 0011 488B45E8 		movq	-24(%rbp), %rax
 17051 0015 4889C7   		movq	%rax, %rdi
 17052 0018 E8000000 		call	_ZNKSt13move_iteratorIP10vector_varE4baseEv
 17052      00
 17053 001d 4889C3   		movq	%rax, %rbx
 17054 0020 488B45E0 		movq	-32(%rbp), %rax
 17055 0024 4889C7   		movq	%rax, %rdi
 17056 0027 E8000000 		call	_ZNKSt13move_iteratorIP10vector_varE4baseEv
 17056      00
 17057 002c 4839C3   		cmpq	%rax, %rbx
 17058 002f 0F94C0   		sete	%al
 17059 0032 4883C418 		addq	$24, %rsp
 17060 0036 5B       		popq	%rbx
 17061 0037 5D       		popq	%rbp
 17062              		.cfi_def_cfa 7, 8
 17063 0038 C3       		ret
 17064              		.cfi_endproc
 17065              	.LFE7578:
 17067              		.section	.text._ZNKSt13move_iteratorIP10vector_varE4baseEv,"axG",@progbits,_ZNKSt13move_iteratorIP
 17068              		.align 2
 17069              		.weak	_ZNKSt13move_iteratorIP10vector_varE4baseEv
 17071              	_ZNKSt13move_iteratorIP10vector_varE4baseEv:
 17072              	.LFB7579:
 992:/usr/include/c++/5/bits/stl_iterator.h ****       { return _M_current; }
 17073              		.loc 24 992 0
 17074              		.cfi_startproc
 17075 0000 55       		pushq	%rbp
 17076              		.cfi_def_cfa_offset 16
 17077              		.cfi_offset 6, -16
 17078 0001 4889E5   		movq	%rsp, %rbp
 17079              		.cfi_def_cfa_register 6
 17080 0004 48897DF8 		movq	%rdi, -8(%rbp)
 993:/usr/include/c++/5/bits/stl_iterator.h **** 
 17081              		.loc 24 993 0
 17082 0008 488B45F8 		movq	-8(%rbp), %rax
 17083 000c 488B00   		movq	(%rax), %rax
 17084 000f 5D       		popq	%rbp
 17085              		.cfi_def_cfa 7, 8
 17086 0010 C3       		ret
 17087              		.cfi_endproc
 17088              	.LFE7579:
GAS LISTING /tmp/cc2K2nX4.s 			page 636


 17090              		.weak	_ZTV6Solver
 17091              		.section	.rodata._ZTV6Solver,"aG",@progbits,_ZTV6Solver,comdat
 17092              		.align 8
 17095              	_ZTV6Solver:
 17096 0000 00000000 		.quad	0
 17096      00000000 
 17097 0008 00000000 		.quad	_ZTI6Solver
 17097      00000000 
 17098 0010 00000000 		.quad	_ZN6SolverD1Ev
 17098      00000000 
 17099 0018 00000000 		.quad	_ZN6SolverD0Ev
 17099      00000000 
 17100              		.weak	_ZTV10vector_var
 17101              		.section	.rodata._ZTV10vector_var,"aG",@progbits,_ZTV10vector_var,comdat
 17102              		.align 8
 17105              	_ZTV10vector_var:
 17106 0000 00000000 		.quad	0
 17106      00000000 
 17107 0008 00000000 		.quad	_ZTI10vector_var
 17107      00000000 
 17108 0010 00000000 		.quad	_ZN10vector_varD1Ev
 17108      00000000 
 17109 0018 00000000 		.quad	_ZN10vector_varD0Ev
 17109      00000000 
 17110              		.weak	_ZTI6Solver
 17111              		.section	.rodata._ZTI6Solver,"aG",@progbits,_ZTI6Solver,comdat
 17112              		.align 8
 17115              	_ZTI6Solver:
 17116 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 17116      00000000 
 17117 0008 00000000 		.quad	_ZTS6Solver
 17117      00000000 
 17118              		.weak	_ZTS6Solver
 17119              		.section	.rodata._ZTS6Solver,"aG",@progbits,_ZTS6Solver,comdat
 17120              		.align 8
 17123              	_ZTS6Solver:
 17124 0000 36536F6C 		.string	"6Solver"
 17124      76657200 
 17125              		.weak	_ZTI10vector_var
 17126              		.section	.rodata._ZTI10vector_var,"aG",@progbits,_ZTI10vector_var,comdat
 17127              		.align 8
 17130              	_ZTI10vector_var:
 17131 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 17131      00000000 
 17132 0008 00000000 		.quad	_ZTS10vector_var
 17132      00000000 
 17133              		.weak	_ZTS10vector_var
 17134              		.section	.rodata._ZTS10vector_var,"aG",@progbits,_ZTS10vector_var,comdat
 17135              		.align 8
 17138              	_ZTS10vector_var:
 17139 0000 31307665 		.string	"10vector_var"
 17139      63746F72 
 17139      5F766172 
 17139      00
 17140              		.text
 17142              	_Z41__static_initialization_and_destruction_0ii:
 17143              	.LFB7580:
GAS LISTING /tmp/cc2K2nX4.s 			page 637


 17144              		.loc 9 1651 0
 17145              		.cfi_startproc
 17146 a7f7 55       		pushq	%rbp
 17147              		.cfi_def_cfa_offset 16
 17148              		.cfi_offset 6, -16
 17149 a7f8 4889E5   		movq	%rsp, %rbp
 17150              		.cfi_def_cfa_register 6
 17151 a7fb 4883EC10 		subq	$16, %rsp
 17152 a7ff 897DFC   		movl	%edi, -4(%rbp)
 17153 a802 8975F8   		movl	%esi, -8(%rbp)
 17154              		.loc 9 1651 0
 17155 a805 837DFC01 		cmpl	$1, -4(%rbp)
 17156 a809 7527     		jne	.L1377
 17157              		.loc 9 1651 0 is_stmt 0 discriminator 1
 17158 a80b 817DF8FF 		cmpl	$65535, -8(%rbp)
 17158      FF0000
 17159 a812 751E     		jne	.L1377
 17160              		.file 25 "/usr/include/c++/5/iostream"
   1:/usr/include/c++/5/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/5/iostream **** 
   3:/usr/include/c++/5/iostream **** // Copyright (C) 1997-2015 Free Software Foundation, Inc.
   4:/usr/include/c++/5/iostream **** //
   5:/usr/include/c++/5/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/5/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/5/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/5/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/5/iostream **** // any later version.
  10:/usr/include/c++/5/iostream **** 
  11:/usr/include/c++/5/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/5/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/5/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/5/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/5/iostream **** 
  16:/usr/include/c++/5/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/5/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/5/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/5/iostream **** 
  20:/usr/include/c++/5/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/5/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/5/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/5/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/5/iostream **** 
  25:/usr/include/c++/5/iostream **** /** @file include/iostream
  26:/usr/include/c++/5/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/5/iostream ****  */
  28:/usr/include/c++/5/iostream **** 
  29:/usr/include/c++/5/iostream **** //
  30:/usr/include/c++/5/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/5/iostream **** //
  32:/usr/include/c++/5/iostream **** 
  33:/usr/include/c++/5/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/5/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/5/iostream **** 
  36:/usr/include/c++/5/iostream **** #pragma GCC system_header
  37:/usr/include/c++/5/iostream **** 
  38:/usr/include/c++/5/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/5/iostream **** #include <ostream>
GAS LISTING /tmp/cc2K2nX4.s 			page 638


  40:/usr/include/c++/5/iostream **** #include <istream>
  41:/usr/include/c++/5/iostream **** 
  42:/usr/include/c++/5/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/5/iostream **** {
  44:/usr/include/c++/5/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/5/iostream **** 
  46:/usr/include/c++/5/iostream ****   /**
  47:/usr/include/c++/5/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/5/iostream ****    *
  49:/usr/include/c++/5/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/5/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/5/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/5/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/5/iostream ****    *
  54:/usr/include/c++/5/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/5/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/5/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/5/iostream ****    *  manual linked to above.
  58:/usr/include/c++/5/iostream ****   */
  59:/usr/include/c++/5/iostream ****   //@{
  60:/usr/include/c++/5/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/5/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/5/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/5/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/5/iostream **** 
  65:/usr/include/c++/5/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/5/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/5/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/5/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/5/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/5/iostream **** #endif
  71:/usr/include/c++/5/iostream ****   //@}
  72:/usr/include/c++/5/iostream **** 
  73:/usr/include/c++/5/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/5/iostream ****   static ios_base::Init __ioinit;
 17161              		.loc 25 74 0 is_stmt 1
 17162 a814 BF000000 		movl	$_ZStL8__ioinit, %edi
 17162      00
 17163 a819 E8000000 		call	_ZNSt8ios_base4InitC1Ev
 17163      00
 17164 a81e BA000000 		movl	$__dso_handle, %edx
 17164      00
 17165 a823 BE000000 		movl	$_ZStL8__ioinit, %esi
 17165      00
 17166 a828 BF000000 		movl	$_ZNSt8ios_base4InitD1Ev, %edi
 17166      00
 17167 a82d E8000000 		call	__cxa_atexit
 17167      00
 17168              	.L1377:
 17169              		.loc 9 1651 0
 17170 a832 90       		nop
 17171 a833 C9       		leave
 17172              		.cfi_def_cfa 7, 8
 17173 a834 C3       		ret
 17174              		.cfi_endproc
 17175              	.LFE7580:
 17178              	_GLOBAL__sub_I__ZN6SolverC2Ev:
GAS LISTING /tmp/cc2K2nX4.s 			page 639


 17179              	.LFB7581:
 17180              		.loc 9 1651 0
 17181              		.cfi_startproc
 17182 a835 55       		pushq	%rbp
 17183              		.cfi_def_cfa_offset 16
 17184              		.cfi_offset 6, -16
 17185 a836 4889E5   		movq	%rsp, %rbp
 17186              		.cfi_def_cfa_register 6
 17187              		.loc 9 1651 0
 17188 a839 BEFFFF00 		movl	$65535, %esi
 17188      00
 17189 a83e BF010000 		movl	$1, %edi
 17189      00
 17190 a843 E8AFFFFF 		call	_Z41__static_initialization_and_destruction_0ii
 17190      FF
 17191 a848 5D       		popq	%rbp
 17192              		.cfi_def_cfa 7, 8
 17193 a849 C3       		ret
 17194              		.cfi_endproc
 17195              	.LFE7581:
 17197              		.section	.init_array,"aw"
 17198              		.align 8
 17199 0000 00000000 		.quad	_GLOBAL__sub_I__ZN6SolverC2Ev
 17199      00000000 
 17200              		.section	.rodata
 17201 00ec 00000000 		.align 8
 17202              	.LC0:
 17203 00f0 00000000 		.long	0
 17204 00f4 0000B03C 		.long	1018167296
 17205              		.align 8
 17206              	.LC2:
 17207 00f8 00000000 		.long	0
 17208 00fc 00000840 		.long	1074266112
 17209              		.align 8
 17210              	.LC3:
 17211 0100 00000000 		.long	0
 17212 0104 00001240 		.long	1074921472
 17213              		.align 8
 17214              	.LC4:
 17215 0108 00000000 		.long	0
 17216 010c 0000F03F 		.long	1072693248
 17217              		.align 16
 17218              	.LC6:
 17219 0110 00000000 		.long	0
 17220 0114 00000080 		.long	-2147483648
 17221 0118 00000000 		.long	0
 17222 011c 00000000 		.long	0
 17223              		.align 8
 17224              	.LC11:
 17225 0120 00000000 		.long	0
 17226 0124 00000040 		.long	1073741824
 17227              		.align 8
 17228              	.LC12:
 17229 0128 00000000 		.long	0
 17230 012c 0000F8BF 		.long	-1074266112
 17231              		.align 8
 17232              	.LC13:
GAS LISTING /tmp/cc2K2nX4.s 			page 640


 17233 0130 00000000 		.long	0
 17234 0134 0000F83F 		.long	1073217536
 17235              		.align 8
 17236              	.LC14:
 17237 0138 00000000 		.long	0
 17238 013c 000008C0 		.long	-1073217536
 17239              		.align 8
 17240              	.LC18:
 17241 0140 00000000 		.long	0
 17242 0144 0000F0BF 		.long	-1074790400
 17243              		.align 8
 17244              	.LC19:
 17245 0148 00000000 		.long	0
 17246 014c 000000C0 		.long	-1073741824
 17247              		.align 8
 17248              	.LC20:
 17249 0150 55555555 		.long	1431655765
 17250 0154 5555C53F 		.long	1069897045
 17251              		.align 8
 17252              	.LC21:
 17253 0158 55555555 		.long	1431655765
 17254 015c 5555D53F 		.long	1070945621
 17255              		.align 16
 17256              	.LC22:
 17257 0160 FFFFFFFF 		.long	4294967295
 17258 0164 FFFFFF7F 		.long	2147483647
 17259 0168 00000000 		.long	0
 17260 016c 00000000 		.long	0
 17261              		.align 8
 17262              	.LC23:
 17263 0170 1CC7711C 		.long	477218588
 17264 0174 C771BC3F 		.long	1069314503
 17265              		.align 8
 17266              	.LC24:
 17267 0178 00000000 		.long	0
 17268 017c 00001040 		.long	1074790400
 17269              		.align 8
 17270              	.LC25:
 17271 0180 1CC7711C 		.long	477218588
 17272 0184 C7719C3F 		.long	1067217351
 17273              		.align 8
 17274              	.LC26:
 17275 0188 1CC7711C 		.long	477218588
 17276 018c C771DC3F 		.long	1071411655
 17277              		.text
 17278              	.Letext0:
 17279              		.file 26 "/usr/include/x86_64-linux-gnu/bits/mathdef.h"
 17280              		.file 27 "/usr/include/c++/5/bits/stringfwd.h"
 17281              		.file 28 "/usr/include/c++/5/type_traits"
 17282              		.file 29 "/usr/include/c++/5/cwchar"
 17283              		.file 30 "/usr/include/c++/5/bits/char_traits.h"
 17284              		.file 31 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h"
 17285              		.file 32 "/usr/include/c++/5/cstdint"
 17286              		.file 33 "/usr/include/c++/5/bits/exception_ptr.h"
 17287              		.file 34 "/usr/include/c++/5/bits/stl_pair.h"
 17288              		.file 35 "/usr/include/c++/5/clocale"
 17289              		.file 36 "/usr/include/c++/5/cstdlib"
GAS LISTING /tmp/cc2K2nX4.s 			page 641


 17290              		.file 37 "/usr/include/c++/5/cstdio"
 17291              		.file 38 "/usr/include/c++/5/initializer_list"
 17292              		.file 39 "/usr/include/c++/5/system_error"
 17293              		.file 40 "/usr/include/c++/5/bits/ios_base.h"
 17294              		.file 41 "/usr/include/c++/5/cwctype"
 17295              		.file 42 "/usr/include/c++/5/ctime"
 17296              		.file 43 "/usr/include/c++/5/cstddef"
 17297              		.file 44 "/usr/include/c++/5/bits/algorithmfwd.h"
 17298              		.file 45 "/usr/include/c++/5/debug/debug.h"
 17299              		.file 46 "/usr/include/c++/5/bits/uniform_int_dist.h"
 17300              		.file 47 "/usr/include/c++/5/bits/random.h"
 17301              		.file 48 "/usr/include/c++/5/bits/stl_algo.h"
 17302              		.file 49 "/usr/include/c++/5/cstring"
 17303              		.file 50 "/usr/include/c++/5/bits/stl_iterator_base_types.h"
 17304              		.file 51 "/usr/include/c++/5/iosfwd"
 17305              		.file 52 "/usr/include/c++/5/bits/predefined_ops.h"
 17306              		.file 53 "/usr/include/c++/5/ext/numeric_traits.h"
 17307              		.file 54 "/usr/include/c++/5/ext/alloc_traits.h"
 17308              		.file 55 "/usr/include/c++/5/ext/type_traits.h"
 17309              		.file 56 "/usr/include/stdio.h"
 17310              		.file 57 "/usr/include/libio.h"
 17311              		.file 58 "<built-in>"
 17312              		.file 59 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 17313              		.file 60 "/usr/include/wchar.h"
 17314              		.file 61 "/usr/include/time.h"
 17315              		.file 62 "/usr/include/stdint.h"
 17316              		.file 63 "/usr/include/locale.h"
 17317              		.file 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
 17318              		.file 65 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h"
 17319              		.file 66 "/usr/include/stdlib.h"
 17320              		.file 67 "/usr/include/_G_config.h"
 17321              		.file 68 "include/Solver.h"
 17322              		.file 69 "/usr/include/wctype.h"
 17323              		.file 70 "/home/brendan/Boost/boost_1_60_0/boost/config/suffix.hpp"
 17324              		.file 71 "/home/brendan/Boost/boost_1_60_0/boost/cstdint.hpp"
 17325              		.file 72 "/home/brendan/Boost/boost_1_60_0/boost/type_traits/integral_constant.hpp"
 17326              		.file 73 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/adl_barrier.hpp"
 17327              		.file 74 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/value_wknd.hpp"
 17328              		.file 75 "/home/brendan/Boost/boost_1_60_0/boost/mpl/void_fwd.hpp"
 17329              		.file 76 "/home/brendan/Boost/boost_1_60_0/boost/mpl/bool_fwd.hpp"
 17330              		.file 77 "/home/brendan/Boost/boost_1_60_0/boost/mpl/integral_c_tag.hpp"
 17331              		.file 78 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/na_fwd.hpp"
 17332              		.file 79 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/preprocessed/gcc/placeholders.hpp"
 17333              		.file 80 "/home/brendan/Boost/boost_1_60_0/boost/type_traits/detail/yes_no_type.hpp"
 17334              		.file 81 "/home/brendan/Boost/boost_1_60_0/boost/type_traits/is_abstract.hpp"
 17335              		.file 82 "/home/brendan/Boost/boost_1_60_0/boost/math/tools/config.hpp"
 17336              		.file 83 "/home/brendan/Boost/boost_1_60_0/boost/math/policies/policy.hpp"
 17337              		.file 84 "/home/brendan/Boost/boost_1_60_0/boost/mpl/bool.hpp"
 17338              		.file 85 "/home/brendan/Boost/boost_1_60_0/boost/mpl/void.hpp"
 17339              		.file 86 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/integral_wrapper.hpp"
 17340              		.file 87 "/home/brendan/Boost/boost_1_60_0/boost/mpl/aux_/preprocessed/gcc/arg.hpp"
 17341              		.file 88 "/usr/include/string.h"
GAS LISTING /tmp/cc2K2nX4.s 			page 642


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Solver.cpp
     /tmp/cc2K2nX4.s:7      .text._ZSt5isnand:0000000000000000 _ZSt5isnand
     /tmp/cc2K2nX4.s:31     .text._ZSt7signbitd:0000000000000000 _ZSt7signbitd
     /tmp/cc2K2nX4.s:56     .rodata:0000000000000000 _ZStL19piecewise_construct
     /tmp/cc2K2nX4.s:61     .text._ZnwmPv:0000000000000000 _ZnwmPv
     /tmp/cc2K2nX4.s:85     .text._ZN4Mesh9get_num_xEv:0000000000000000 _ZN4Mesh9get_num_xEv
     /tmp/cc2K2nX4.s:109    .text._ZN4Mesh9get_num_yEv:0000000000000000 _ZN4Mesh9get_num_yEv
     /tmp/cc2K2nX4.s:132    .text._ZN4Mesh15get_total_cellsEv:0000000000000000 _ZN4Mesh15get_total_cellsEv
     /tmp/cc2K2nX4.s:155    .text._ZN4Mesh14get_centroid_xEi:0000000000000000 _ZN4Mesh14get_centroid_xEi
     /tmp/cc2K2nX4.s:184    .text._ZN4Mesh14get_centroid_yEi:0000000000000000 _ZN4Mesh14get_centroid_yEi
     /tmp/cc2K2nX4.s:213    .text._ZN4Mesh14get_centroid_zEi:0000000000000000 _ZN4Mesh14get_centroid_zEi
     /tmp/cc2K2nX4.s:242    .text._ZN4Mesh11get_north_xEi:0000000000000000 _ZN4Mesh11get_north_xEi
     /tmp/cc2K2nX4.s:271    .text._ZN4Mesh11get_north_yEi:0000000000000000 _ZN4Mesh11get_north_yEi
     /tmp/cc2K2nX4.s:300    .text._ZN4Mesh11get_north_zEi:0000000000000000 _ZN4Mesh11get_north_zEi
     /tmp/cc2K2nX4.s:329    .text._ZN4Mesh10get_east_xEi:0000000000000000 _ZN4Mesh10get_east_xEi
     /tmp/cc2K2nX4.s:358    .text._ZN4Mesh10get_east_yEi:0000000000000000 _ZN4Mesh10get_east_yEi
     /tmp/cc2K2nX4.s:387    .text._ZN4Mesh10get_east_zEi:0000000000000000 _ZN4Mesh10get_east_zEi
     /tmp/cc2K2nX4.s:416    .text._ZN4Mesh10get_west_xEi:0000000000000000 _ZN4Mesh10get_west_xEi
     /tmp/cc2K2nX4.s:445    .text._ZN4Mesh10get_west_yEi:0000000000000000 _ZN4Mesh10get_west_yEi
     /tmp/cc2K2nX4.s:474    .text._ZN4Mesh10get_west_zEi:0000000000000000 _ZN4Mesh10get_west_zEi
     /tmp/cc2K2nX4.s:503    .text._ZN4Mesh11get_south_xEi:0000000000000000 _ZN4Mesh11get_south_xEi
     /tmp/cc2K2nX4.s:532    .text._ZN4Mesh11get_south_yEi:0000000000000000 _ZN4Mesh11get_south_yEi
     /tmp/cc2K2nX4.s:561    .text._ZN4Mesh11get_south_zEi:0000000000000000 _ZN4Mesh11get_south_zEi
     /tmp/cc2K2nX4.s:590    .text._ZN4Mesh10get_n_areaEi:0000000000000000 _ZN4Mesh10get_n_areaEi
     /tmp/cc2K2nX4.s:619    .text._ZN4Mesh10get_s_areaEi:0000000000000000 _ZN4Mesh10get_s_areaEi
     /tmp/cc2K2nX4.s:648    .text._ZN4Mesh10get_w_areaEi:0000000000000000 _ZN4Mesh10get_w_areaEi
     /tmp/cc2K2nX4.s:677    .text._ZN4Mesh10get_e_areaEi:0000000000000000 _ZN4Mesh10get_e_areaEi
     /tmp/cc2K2nX4.s:706    .text._ZN4Mesh7get_n_iEi:0000000000000000 _ZN4Mesh7get_n_iEi
     /tmp/cc2K2nX4.s:735    .text._ZN4Mesh7get_n_jEi:0000000000000000 _ZN4Mesh7get_n_jEi
     /tmp/cc2K2nX4.s:764    .text._ZN4Mesh7get_n_kEi:0000000000000000 _ZN4Mesh7get_n_kEi
     /tmp/cc2K2nX4.s:793    .text._ZN4Mesh7get_s_iEi:0000000000000000 _ZN4Mesh7get_s_iEi
     /tmp/cc2K2nX4.s:822    .text._ZN4Mesh7get_s_jEi:0000000000000000 _ZN4Mesh7get_s_jEi
     /tmp/cc2K2nX4.s:851    .text._ZN4Mesh7get_s_kEi:0000000000000000 _ZN4Mesh7get_s_kEi
     /tmp/cc2K2nX4.s:880    .text._ZN4Mesh7get_w_iEi:0000000000000000 _ZN4Mesh7get_w_iEi
     /tmp/cc2K2nX4.s:909    .text._ZN4Mesh7get_w_jEi:0000000000000000 _ZN4Mesh7get_w_jEi
     /tmp/cc2K2nX4.s:938    .text._ZN4Mesh7get_w_kEi:0000000000000000 _ZN4Mesh7get_w_kEi
     /tmp/cc2K2nX4.s:967    .text._ZN4Mesh7get_e_iEi:0000000000000000 _ZN4Mesh7get_e_iEi
     /tmp/cc2K2nX4.s:996    .text._ZN4Mesh7get_e_jEi:0000000000000000 _ZN4Mesh7get_e_jEi
     /tmp/cc2K2nX4.s:1025   .text._ZN4Mesh7get_e_kEi:0000000000000000 _ZN4Mesh7get_e_kEi
     /tmp/cc2K2nX4.s:1054   .text._ZN4Mesh10get_n_nodeEi:0000000000000000 _ZN4Mesh10get_n_nodeEi
     /tmp/cc2K2nX4.s:1083   .text._ZN4Mesh10get_s_nodeEi:0000000000000000 _ZN4Mesh10get_s_nodeEi
     /tmp/cc2K2nX4.s:1112   .text._ZN4Mesh10get_e_nodeEi:0000000000000000 _ZN4Mesh10get_e_nodeEi
     /tmp/cc2K2nX4.s:1141   .text._ZN4Mesh10get_w_nodeEi:0000000000000000 _ZN4Mesh10get_w_nodeEi
     /tmp/cc2K2nX4.s:1170   .text._ZN4Mesh15get_cell_volumeEi:0000000000000000 _ZN4Mesh15get_cell_volumeEi
     /tmp/cc2K2nX4.s:1199   .text._ZN19Boundary_Conditions6get_bcEi:0000000000000000 _ZN19Boundary_Conditions6get_bcEi
     /tmp/cc2K2nX4.s:1228   .text._ZN19Boundary_Conditions14get_bc_includeEi:0000000000000000 _ZN19Boundary_Conditions14get_bc_includeEi
     /tmp/cc2K2nX4.s:1256   .text._ZN10vector_varD2Ev:0000000000000000 _ZN10vector_varD2Ev
     /tmp/cc2K2nX4.s:17105  .rodata._ZTV10vector_var:0000000000000000 _ZTV10vector_var
     /tmp/cc2K2nX4.s:1256   .text._ZN10vector_varD2Ev:0000000000000000 _ZN10vector_varD1Ev
     /tmp/cc2K2nX4.s:1295   .text._ZN10vector_varD0Ev:0000000000000000 _ZN10vector_varD0Ev
     /tmp/cc2K2nX4.s:1323   .text._ZN8Solution7get_rhoEi:0000000000000000 _ZN8Solution7get_rhoEi
     /tmp/cc2K2nX4.s:1353   .text._ZN8Solution5get_uEi:0000000000000000 _ZN8Solution5get_uEi
     /tmp/cc2K2nX4.s:1382   .text._ZN8Solution5get_vEi:0000000000000000 _ZN8Solution5get_vEi
     /tmp/cc2K2nX4.s:1411   .text._ZN8Solution15get_average_rhoEv:0000000000000000 _ZN8Solution15get_average_rhoEv
     /tmp/cc2K2nX4.s:1434   .text._ZN8Solution15set_average_rhoEd:0000000000000000 _ZN8Solution15set_average_rhoEd
     /tmp/cc2K2nX4.s:1460   .text._ZN8Solution7set_rhoEid:0000000000000000 _ZN8Solution7set_rhoEid
GAS LISTING /tmp/cc2K2nX4.s 			page 643


     /tmp/cc2K2nX4.s:1492   .text._ZN8Solution5set_uEid:0000000000000000 _ZN8Solution5set_uEid
     /tmp/cc2K2nX4.s:1524   .text._ZN8Solution5set_vEid:0000000000000000 _ZN8Solution5set_vEid
     /tmp/cc2K2nX4.s:1556   .text._ZN8Solution7add_rhoEid:0000000000000000 _ZN8Solution7add_rhoEid
     /tmp/cc2K2nX4.s:1595   .text._ZN8Solution5add_uEid:0000000000000000 _ZN8Solution5add_uEid
     /tmp/cc2K2nX4.s:1634   .text._ZN8Solution5add_vEid:0000000000000000 _ZN8Solution5add_vEid
     /tmp/cc2K2nX4.s:1673   .text._ZN15external_forces9get_forceEi:0000000000000000 _ZN15external_forces9get_forceEi
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/cc2K2nX4.s:1704   .text._ZNSt14numeric_limitsIdE7epsilonEv:0000000000000000 _ZNSt14numeric_limitsIdE7epsilonEv
     /tmp/cc2K2nX4.s:1726   .text:0000000000000000 _ZN6SolverC2Ev
     /tmp/cc2K2nX4.s:17095  .rodata._ZTV6Solver:0000000000000000 _ZTV6Solver
     /tmp/cc2K2nX4.s:1726   .text:0000000000000000 _ZN6SolverC1Ev
     /tmp/cc2K2nX4.s:1756   .text:0000000000000018 _ZN6SolverD2Ev
     /tmp/cc2K2nX4.s:1756   .text:0000000000000018 _ZN6SolverD1Ev
     /tmp/cc2K2nX4.s:1794   .text:0000000000000048 _ZN6SolverD0Ev
     /tmp/cc2K2nX4.s:1821   .text:000000000000006e _ZN6Solver26cell_interface_initialiserERdR10vector_varR8flux_varS4_
     /tmp/cc2K2nX4.s:1895   .text._ZN10vector_varC2ERKS_:0000000000000000 _ZN10vector_varC2ERKS_
     /tmp/cc2K2nX4.s:1895   .text._ZN10vector_varC2ERKS_:0000000000000000 _ZN10vector_varC1ERKS_
     /tmp/cc2K2nX4.s:1936   .text._ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_:0000000000000000 _ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_
     /tmp/cc2K2nX4.s:1970   .text:0000000000000124 _ZN6Solver15feq_calc_incompEd10vector_varS0_ddddi
     /tmp/cc2K2nX4.s:2126   .text:00000000000002c4 _ZN6Solver8feq_calcEd10vector_varS0_ddd
     /tmp/cc2K2nX4.s:2278   .text._ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_:0000000000000000 _ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_
     /tmp/cc2K2nX4.s:2322   .text:0000000000000452 _ZN6Solver17Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_variablesR15domain_geometryR18initial_conditionsR13quad_bcs_plusiS3_i
     /tmp/cc2K2nX4.s:15128  .text._ZNSt6vectorI10vector_varSaIS0_EEC2Ev:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EEC1Ev
     /tmp/cc2K2nX4.s:15037  .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_:0000000000000000 _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
     /tmp/cc2K2nX4.s:14419  .text:000000000000a0d8 _ZN6Solver16populate_e_alphaERSt6vectorI10vector_varSaIS1_EEPdddi
     /tmp/cc2K2nX4.s:14659  .text:000000000000a3a2 _ZN6Solver24cell_interface_variablesEiiR10vector_varRiRdS1_R19Boundary_ConditionsRNS_6bc_varER4MeshS1_
     /tmp/cc2K2nX4.s:15224  .text._ZNSt6vectorI10vector_varSaIS0_EEixEm:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EEixEm
     /tmp/cc2K2nX4.s:15170  .text._ZNSt6vectorI10vector_varSaIS0_EED2Ev:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EED1Ev
     /tmp/cc2K2nX4.s:5527   .text:0000000000002f42 _ZN6Solver25Uniform_Mesh_Solver_CleanER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_variablesR15domain_geometryR18initial_conditionsR13quad_bcs_plusiS3_i
     /tmp/cc2K2nX4.s:8931   .text._ZN10vector_varaSERKS_:0000000000000000 _ZN10vector_varaSERKS_
     /tmp/cc2K2nX4.s:8965   .text._ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_:0000000000000000 _ZSt3powIdbEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_
     /tmp/cc2K2nX4.s:9001   .text._ZN8flux_varaSERKS_:0000000000000000 _ZN8flux_varaSERKS_
     /tmp/cc2K2nX4.s:9041   .text._ZN16global_variablesC2ERKS_:0000000000000000 _ZN16global_variablesC2ERKS_
     /tmp/cc2K2nX4.s:9041   .text._ZN16global_variablesC2ERKS_:0000000000000000 _ZN16global_variablesC1ERKS_
     /tmp/cc2K2nX4.s:9271   .text:0000000000005e86 _ZN6Solver11Mesh_SolverER4MeshR8SolutionR19Boundary_ConditionsR15external_forcesR16global_variablesR15domain_geometryR18initial_conditionsR13quad_bcs_plusiS3_i
     /tmp/cc2K2nX4.s:14254  .text:0000000000009e9c _ZN6Solver11get_e_alphaEiRddd
     /tmp/cc2K2nX4.s:13510  .text:00000000000095fc _ZN6Solver24multi_grid_agglomorationER8SolutionS1_iR4MeshR13quad_bcs_plusR18initial_conditionsRi16global_variablesR15domain_geometryR19Boundary_Conditions
     /tmp/cc2K2nX4.s:13324  .text._ZN15domain_geometryC2ERKS_:0000000000000000 _ZN15domain_geometryC2ERKS_
     /tmp/cc2K2nX4.s:13324  .text._ZN15domain_geometryC2ERKS_:0000000000000000 _ZN15domain_geometryC1ERKS_
     /tmp/cc2K2nX4.s:13379  .text._ZN13quad_bcs_plusC2ERKS_:0000000000000000 _ZN13quad_bcs_plusC2ERKS_
     /tmp/cc2K2nX4.s:13379  .text._ZN13quad_bcs_plusC2ERKS_:0000000000000000 _ZN13quad_bcs_plusC1ERKS_
     /tmp/cc2K2nX4.s:13982  .text._ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_:0000000000000000 _ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_
     /tmp/cc2K2nX4.s:14014  .text:0000000000009bc8 _ZN6Solver13truncate_fluxER8flux_var
     /tmp/cc2K2nX4.s:14176  .text:0000000000009dce _ZN6Solver13truncate_fluxERd
     /tmp/cc2K2nX4.s:15251  .text._ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EE9push_backERKS0_
     /tmp/cc2K2nX4.s:15128  .text._ZNSt6vectorI10vector_varSaIS0_EEC2Ev:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EEC2Ev
     /tmp/cc2K2nX4.s:15336  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev
     /tmp/cc2K2nX4.s:15170  .text._ZNSt6vectorI10vector_varSaIS0_EED2Ev:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EED2Ev
     /tmp/cc2K2nX4.s:15426  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
     /tmp/cc2K2nX4.s:15447  .text._ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E:0000000000000000 _ZSt8_DestroyIP10vector_varS0_EvT_S2_RSaIT0_E
     /tmp/cc2K2nX4.s:15366  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev
     /tmp/cc2K2nX4.s:15500  .text._ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_
     /tmp/cc2K2nX4.s:15540  .text._ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_
     /tmp/cc2K2nX4.s:15306  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev
     /tmp/cc2K2nX4.s:15810  .text._ZNSaI10vector_varED2Ev:0000000000000000 _ZNSaI10vector_varED2Ev
     /tmp/cc2K2nX4.s:15306  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD1Ev
     /tmp/cc2K2nX4.s:15773  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 644


     /tmp/cc2K2nX4.s:15336  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EEC1Ev
     /tmp/cc2K2nX4.s:15841  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE13_M_deallocateEPS0_m
     /tmp/cc2K2nX4.s:15366  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EED2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EED1Ev
     /tmp/cc2K2nX4.s:15876  .text._ZSt8_DestroyIP10vector_varEvT_S2_:0000000000000000 _ZSt8_DestroyIP10vector_varEvT_S2_
     /tmp/cc2K2nX4.s:15478  .text._ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE:0000000000000000 _ZSt7forwardIRK10vector_varEOT_RNSt16remove_referenceIS3_E4typeE
     /tmp/cc2K2nX4.s:15906  .text._ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_
     /tmp/cc2K2nX4.s:15500  .text._ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE9constructIS0_IRKS0_EEEvRS1_PT_DpOT0_
     /tmp/cc2K2nX4.s:15954  .text._ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorI10vector_varSaIS0_EE12_M_check_lenEmPKc
     /tmp/cc2K2nX4.s:16051  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE11_M_allocateEm
     /tmp/cc2K2nX4.s:16088  .text._ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv:0000000000000000 _ZNKSt6vectorI10vector_varSaIS0_EE4sizeEv
     /tmp/cc2K2nX4.s:16116  .text._ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIP10vector_varS1_SaIS0_EET0_T_S4_S3_RT1_
     /tmp/cc2K2nX4.s:16161  .text._ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE7destroyIS0_EEvRS1_PT_
     /tmp/cc2K2nX4.s:15540  .text._ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIJRKS0_EEEvDpOT_:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_
     /tmp/cc2K2nX4.s:15773  .text._ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC2Ev
     /tmp/cc2K2nX4.s:16190  .text._ZNSaI10vector_varEC2Ev:0000000000000000 _ZNSaI10vector_varEC2Ev
     /tmp/cc2K2nX4.s:16220  .text._ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev
     /tmp/cc2K2nX4.s:15810  .text._ZNSaI10vector_varED2Ev:0000000000000000 _ZNSaI10vector_varED1Ev
     /tmp/cc2K2nX4.s:16243  .text._ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE10deallocateERS1_PS0_m
     /tmp/cc2K2nX4.s:16273  .text._ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIP10vector_varEEvT_S4_
     /tmp/cc2K2nX4.s:15906  .text._ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_JRKS1_EEEvPT_DpOT0_:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varE9constructIS1_IRKS1_EEEvPT_DpOT0_
     /tmp/cc2K2nX4.s:16312  .text._ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorI10vector_varSaIS0_EE8max_sizeEv
     /tmp/cc2K2nX4.s:16338  .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/cc2K2nX4.s:16374  .text._ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE8allocateERS1_m
     /tmp/cc2K2nX4.s:16402  .text._ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_:0000000000000000 _ZSt32__make_move_if_noexcept_iteratorIP10vector_varSt13move_iteratorIS1_EET0_T_
     /tmp/cc2K2nX4.s:16439  .text._ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aISt13move_iteratorIP10vector_varES2_S1_ET0_T_S5_S4_RSaIT1_E
     /tmp/cc2K2nX4.s:16470  .text._ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varE7destroyIS1_EEvPT_
     /tmp/cc2K2nX4.s:16500  .text._ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev
     /tmp/cc2K2nX4.s:16190  .text._ZNSaI10vector_varEC2Ev:0000000000000000 _ZNSaI10vector_varEC1Ev
     /tmp/cc2K2nX4.s:16220  .text._ZN9__gnu_cxx13new_allocatorI10vector_varED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varED1Ev
     /tmp/cc2K2nX4.s:16524  .text._ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varE10deallocateEPS1_m
     /tmp/cc2K2nX4.s:16551  .text._ZSt11__addressofI10vector_varEPT_RS1_:0000000000000000 _ZSt11__addressofI10vector_varEPT_RS1_
     /tmp/cc2K2nX4.s:16573  .text._ZSt8_DestroyI10vector_varEvPT_:0000000000000000 _ZSt8_DestroyI10vector_varEvPT_
     /tmp/cc2K2nX4.s:16626  .text._ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseI10vector_varSaIS0_EE19_M_get_Tp_allocatorEv
     /tmp/cc2K2nX4.s:16601  .text._ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_:0000000000000000 _ZNSt16allocator_traitsISaI10vector_varEE8max_sizeERKS1_
     /tmp/cc2K2nX4.s:16648  .text._ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varE8allocateEmPKv
     /tmp/cc2K2nX4.s:16688  .text._ZNSt13move_iteratorIP10vector_varEC2ES1_:0000000000000000 _ZNSt13move_iteratorIP10vector_varEC1ES1_
     /tmp/cc2K2nX4.s:16717  .text._ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_:0000000000000000 _ZSt18uninitialized_copyISt13move_iteratorIP10vector_varES2_ET0_T_S5_S4_
     /tmp/cc2K2nX4.s:16500  .text._ZN9__gnu_cxx13new_allocatorI10vector_varEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varEC1Ev
     /tmp/cc2K2nX4.s:16750  .text._ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorI10vector_varE8max_sizeEv
     /tmp/cc2K2nX4.s:16688  .text._ZNSt13move_iteratorIP10vector_varEC2ES1_:0000000000000000 _ZNSt13move_iteratorIP10vector_varEC2ES1_
     /tmp/cc2K2nX4.s:16771  .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4_EET0_T_S7_S6_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10vector_varES4_EET0_T_S7_S6_
     /tmp/cc2K2nX4.s:16889  .text._ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_:0000000000000000 _ZStneIP10vector_varEbRKSt13move_iteratorIT_ES6_
     /tmp/cc2K2nX4.s:16947  .text._ZNKSt13move_iteratorIP10vector_varEdeEv:0000000000000000 _ZNKSt13move_iteratorIP10vector_varEdeEv
     /tmp/cc2K2nX4.s:16990  .text._ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_:0000000000000000 _ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_
     /tmp/cc2K2nX4.s:16918  .text._ZNSt13move_iteratorIP10vector_varEppEv:0000000000000000 _ZNSt13move_iteratorIP10vector_varEppEv
     /tmp/cc2K2nX4.s:17035  .text._ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_:0000000000000000 _ZSteqIP10vector_varEbRKSt13move_iteratorIT_ES6_
     /tmp/cc2K2nX4.s:16969  .text._ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE:0000000000000000 _ZSt7forwardI10vector_varEOT_RNSt16remove_referenceIS1_E4typeE
     /tmp/cc2K2nX4.s:16990  .text._ZSt10_ConstructI10vector_varJS0_EEvPT_DpOT0_:0000000000000000 _ZSt10_ConstructI10vector_varIS0_EEvPT_DpOT0_
     /tmp/cc2K2nX4.s:17071  .text._ZNKSt13move_iteratorIP10vector_varE4baseEv:0000000000000000 _ZNKSt13move_iteratorIP10vector_varE4baseEv
     /tmp/cc2K2nX4.s:17115  .rodata._ZTI6Solver:0000000000000000 _ZTI6Solver
     /tmp/cc2K2nX4.s:17130  .rodata._ZTI10vector_var:0000000000000000 _ZTI10vector_var
     /tmp/cc2K2nX4.s:17123  .rodata._ZTS6Solver:0000000000000000 _ZTS6Solver
     /tmp/cc2K2nX4.s:17138  .rodata._ZTS10vector_var:0000000000000000 _ZTS10vector_var
     /tmp/cc2K2nX4.s:17142  .text:000000000000a7f7 _Z41__static_initialization_and_destruction_0ii
     /tmp/cc2K2nX4.s:17178  .text:000000000000a835 _GLOBAL__sub_I__ZN6SolverC2Ev
                           .group:0000000000000000 _ZN10vector_varD5Ev
                           .group:0000000000000000 _ZN10vector_varC5ERKS_
GAS LISTING /tmp/cc2K2nX4.s 			page 645


                           .group:0000000000000000 _ZN16global_variablesC5ERKS_
                           .group:0000000000000000 _ZN15domain_geometryC5ERKS_
                           .group:0000000000000000 _ZN13quad_bcs_plusC5ERKS_
                           .group:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorI10vector_varSaIS0_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI10vector_varSaIS0_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaI10vector_varED5Ev
                           .group:0000000000000000 _ZNSaI10vector_varEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorI10vector_varEC5Ev
                           .group:0000000000000000 _ZNSt13move_iteratorIP10vector_varEC5ES1_

UNDEFINED SYMBOLS
_ZdlPv
pow
__gxx_personality_v0
_ZN10vector_var11Dot_ProductES_
_Unwind_Resume
__stack_chk_fail
sqrt
_ZN10RungeKuttaC1Ev
_ZN8SolutionC1Ei
_ZN8flux_varC1Ev
_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev
_ZN10vector_varC1Ev
_ZN9residualsC1Ev
_ZN8Solution5cloneERS_
ceil
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv
_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode
_ZN9residuals5resetEv
_ZN8Solution10update_bcsER19Boundary_ConditionsR4MeshR15domain_geometry
_ZN8Solution10InitialiseEv
_ZN10vector_var12Get_GradientEddS_S_
_ZN10vector_var16relative_vectorsES_S_S_d
_ZN10vector_var9MagnitudeEv
_ZN8Solution6updateEddddi
_ZN9residuals27add_ansys_l2_norm_residualsEddddddd
_ZNSt14basic_ofstreamIcSt11char_traitsIcEE5closeEv
_ZN9residuals16ansys_5_iter_rmsEi
_ZN9residuals9max_errorEv
_ZNSolsEi
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEd
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
_ZNSolsEPFRSoS_E
_ZSt4cout
_ZN14tecplot_outputC1ER16global_variablesR4MeshR8SolutionR19Boundary_Conditionsid
_ZN14tecplot_outputD1Ev
_ZN8flux_varD1Ev
_ZN9residualsD1Ev
GAS LISTING /tmp/cc2K2nX4.s 			page 646


_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev
_ZN8SolutionD1Ev
_ZN10RungeKuttaD1Ev
_ZTV16global_variables
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
_ZN22artificial_dissipationC1EiR16global_variables
_Znam
exit
_ZN16global_variablesD1Ev
_ZdaPv
_ZN22artificial_dissipationD1Ev
_ZTV15domain_geometry
_ZTV13quad_bcs_plus
_ZN4Mesh25create_coarse_mesh_domainEv
_ZN4MeshC1E15domain_geometry16global_variables
_ZN15domain_geometryD1Ev
_ZN19Boundary_ConditionsC1Eii
_ZN19Boundary_Conditions26assign_boundary_conditionsEii13quad_bcs_plus
_ZN13quad_bcs_plusD1Ev
_ZN15external_forcesC1Ei
_ZN15external_forces17set_uniform_forceEd
_ZN8Solution11restrictionERS_R4MeshS2_R19Boundary_Conditions
_ZN8Solution12prolongationERS_S0_S0_R4MeshS2_R19Boundary_Conditionsb
_ZN15external_forcesD1Ev
_ZN19Boundary_ConditionsD1Ev
_ZN4MeshD1Ev
trunc
cos
round
sin
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc
__cxa_begin_catch
__cxa_rethrow
__cxa_end_catch
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
_Znwm
_ZTVN10__cxxabiv117__class_type_infoE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
